(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

},{}],2:[function(require,module,exports){
// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// when used in node, this will actually load the util module we depend on
// versus loading the builtin util module as happens otherwise
// this is a bug in node module loading as far as I am concerned
var util = require('util/');

var pSlice = Array.prototype.slice;
var hasOwn = Object.prototype.hasOwnProperty;

// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;

  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  }
  else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = stackStartFunction.name;
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function replacer(key, value) {
  if (util.isUndefined(value)) {
    return '' + value;
  }
  if (util.isNumber(value) && !isFinite(value)) {
    return value.toString();
  }
  if (util.isFunction(value) || util.isRegExp(value)) {
    return value.toString();
  }
  return value;
}

function truncate(s, n) {
  if (util.isString(s)) {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}

function getMessage(self) {
  return truncate(JSON.stringify(self.actual, replacer), 128) + ' ' +
         self.operator + ' ' +
         truncate(JSON.stringify(self.expected, replacer), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

function _deepEqual(actual, expected) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (util.isBuffer(actual) && util.isBuffer(expected)) {
    if (actual.length != expected.length) return false;

    for (var i = 0; i < actual.length; i++) {
      if (actual[i] !== expected[i]) return false;
    }

    return true;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!util.isObject(actual) && !util.isObject(expected)) {
    return actual == expected;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b) {
  if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  // if one is a primitive, the other must be same
  if (util.isPrimitive(a) || util.isPrimitive(b)) {
    return a === b;
  }
  var aIsArgs = isArguments(a),
      bIsArgs = isArguments(b);
  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
    return false;
  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b);
  }
  var ka = objectKeys(a),
      kb = objectKeys(b),
      key, i;
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key])) return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  } else if (actual instanceof expected) {
    return true;
  } else if (expected.call({}, actual) === true) {
    return true;
  }

  return false;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (util.isString(expected)) {
    message = expected;
    expected = null;
  }

  try {
    block();
  } catch (e) {
    actual = e;
  }

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  if (!shouldThrow && expectedException(actual, expected)) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws.apply(this, [true].concat(pSlice.call(arguments)));
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/message) {
  _throws.apply(this, [false].concat(pSlice.call(arguments)));
};

assert.ifError = function(err) { if (err) {throw err;}};

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};

},{"util/":236}],3:[function(require,module,exports){
arguments[4][1][0].apply(exports,arguments)
},{"dup":1}],4:[function(require,module,exports){
'use strict';


var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
                (typeof Uint16Array !== 'undefined') &&
                (typeof Int32Array !== 'undefined');


exports.assign = function (obj /*from1, from2, from3, ...*/) {
  var sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) {
    var source = sources.shift();
    if (!source) { continue; }

    if (typeof source !== 'object') {
      throw new TypeError(source + 'must be non-object');
    }

    for (var p in source) {
      if (source.hasOwnProperty(p)) {
        obj[p] = source[p];
      }
    }
  }

  return obj;
};


// reduce buffer size, avoiding mem copy
exports.shrinkBuf = function (buf, size) {
  if (buf.length === size) { return buf; }
  if (buf.subarray) { return buf.subarray(0, size); }
  buf.length = size;
  return buf;
};


var fnTyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    if (src.subarray && dest.subarray) {
      dest.set(src.subarray(src_offs, src_offs+len), dest_offs);
      return;
    }
    // Fallback to ordinary array
    for (var i=0; i<len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function(chunks) {
    var i, l, len, pos, chunk, result;

    // calculate data length
    len = 0;
    for (i=0, l=chunks.length; i<l; i++) {
      len += chunks[i].length;
    }

    // join chunks
    result = new Uint8Array(len);
    pos = 0;
    for (i=0, l=chunks.length; i<l; i++) {
      chunk = chunks[i];
      result.set(chunk, pos);
      pos += chunk.length;
    }

    return result;
  }
};

var fnUntyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    for (var i=0; i<len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function(chunks) {
    return [].concat.apply([], chunks);
  }
};


// Enable/Disable typed arrays use, for testing
//
exports.setTyped = function (on) {
  if (on) {
    exports.Buf8  = Uint8Array;
    exports.Buf16 = Uint16Array;
    exports.Buf32 = Int32Array;
    exports.assign(exports, fnTyped);
  } else {
    exports.Buf8  = Array;
    exports.Buf16 = Array;
    exports.Buf32 = Array;
    exports.assign(exports, fnUntyped);
  }
};

exports.setTyped(TYPED_OK);

},{}],5:[function(require,module,exports){
'use strict';

// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It doesn't worth to make additional optimizationa as in original.
// Small size is preferable.

function adler32(adler, buf, len, pos) {
  var s1 = (adler & 0xffff) |0,
      s2 = ((adler >>> 16) & 0xffff) |0,
      n = 0;

  while (len !== 0) {
    // Set limit ~ twice less than 5552, to keep
    // s2 in 31-bits, because we force signed ints.
    // in other case %= will fail.
    n = len > 2000 ? 2000 : len;
    len -= n;

    do {
      s1 = (s1 + buf[pos++]) |0;
      s2 = (s2 + s1) |0;
    } while (--n);

    s1 %= 65521;
    s2 %= 65521;
  }

  return (s1 | (s2 << 16)) |0;
}


module.exports = adler32;

},{}],6:[function(require,module,exports){
module.exports = {

  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH:         0,
  Z_PARTIAL_FLUSH:    1,
  Z_SYNC_FLUSH:       2,
  Z_FULL_FLUSH:       3,
  Z_FINISH:           4,
  Z_BLOCK:            5,
  Z_TREES:            6,

  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK:               0,
  Z_STREAM_END:       1,
  Z_NEED_DICT:        2,
  Z_ERRNO:           -1,
  Z_STREAM_ERROR:    -2,
  Z_DATA_ERROR:      -3,
  //Z_MEM_ERROR:     -4,
  Z_BUF_ERROR:       -5,
  //Z_VERSION_ERROR: -6,

  /* compression levels */
  Z_NO_COMPRESSION:         0,
  Z_BEST_SPEED:             1,
  Z_BEST_COMPRESSION:       9,
  Z_DEFAULT_COMPRESSION:   -1,


  Z_FILTERED:               1,
  Z_HUFFMAN_ONLY:           2,
  Z_RLE:                    3,
  Z_FIXED:                  4,
  Z_DEFAULT_STRATEGY:       0,

  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY:                 0,
  Z_TEXT:                   1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN:                2,

  /* The deflate compression method */
  Z_DEFLATED:               8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};

},{}],7:[function(require,module,exports){
'use strict';

// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.


// Use ordinary array, since untyped makes no boost here
function makeTable() {
  var c, table = [];

  for (var n =0; n < 256; n++) {
    c = n;
    for (var k =0; k < 8; k++) {
      c = ((c&1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
    }
    table[n] = c;
  }

  return table;
}

// Create table on load. Just 255 signed longs. Not a problem.
var crcTable = makeTable();


function crc32(crc, buf, len, pos) {
  var t = crcTable,
      end = pos + len;

  crc = crc ^ (-1);

  for (var i = pos; i < end; i++) {
    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
  }

  return (crc ^ (-1)); // >>> 0;
}


module.exports = crc32;

},{}],8:[function(require,module,exports){
'use strict';

var utils   = require('../utils/common');
var trees   = require('./trees');
var adler32 = require('./adler32');
var crc32   = require('./crc32');
var msg   = require('./messages');

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
var Z_NO_FLUSH      = 0;
var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
//var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
//var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
//var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;


/* compression levels */
//var Z_NO_COMPRESSION      = 0;
//var Z_BEST_SPEED          = 1;
//var Z_BEST_COMPRESSION    = 9;
var Z_DEFAULT_COMPRESSION = -1;


var Z_FILTERED            = 1;
var Z_HUFFMAN_ONLY        = 2;
var Z_RLE                 = 3;
var Z_FIXED               = 4;
var Z_DEFAULT_STRATEGY    = 0;

/* Possible values of the data_type field (though see inflate()) */
//var Z_BINARY              = 0;
//var Z_TEXT                = 1;
//var Z_ASCII               = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;


/* The deflate compression method */
var Z_DEFLATED  = 8;

/*============================================================================*/


var MAX_MEM_LEVEL = 9;
/* Maximum value for memLevel in deflateInit2 */
var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_MEM_LEVEL = 8;


var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */
var LITERALS      = 256;
/* number of literal bytes 0..255 */
var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */
var D_CODES       = 30;
/* number of distance codes */
var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */
var HEAP_SIZE     = 2*L_CODES + 1;
/* maximum heap size */
var MAX_BITS  = 15;
/* All codes must not exceed MAX_BITS bits */

var MIN_MATCH = 3;
var MAX_MATCH = 258;
var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

var PRESET_DICT = 0x20;

var INIT_STATE = 42;
var EXTRA_STATE = 69;
var NAME_STATE = 73;
var COMMENT_STATE = 91;
var HCRC_STATE = 103;
var BUSY_STATE = 113;
var FINISH_STATE = 666;

var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
var BS_BLOCK_DONE     = 2; /* block flush performed */
var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

function err(strm, errorCode) {
  strm.msg = msg[errorCode];
  return errorCode;
}

function rank(f) {
  return ((f) << 1) - ((f) > 4 ? 9 : 0);
}

function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }


/* =========================================================================
 * Flush as much pending output as possible. All deflate() output goes
 * through this function so some applications may wish to modify it
 * to avoid allocating a large strm->output buffer and copying into it.
 * (See also read_buf()).
 */
function flush_pending(strm) {
  var s = strm.state;

  //_tr_flush_bits(s);
  var len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) { return; }

  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
  strm.next_out += len;
  s.pending_out += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
}


function flush_block_only (s, last) {
  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
}


function put_byte(s, b) {
  s.pending_buf[s.pending++] = b;
}


/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */
function putShortMSB(s, b) {
//  put_byte(s, (Byte)(b >> 8));
//  put_byte(s, (Byte)(b & 0xff));
  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
  s.pending_buf[s.pending++] = b & 0xff;
}


/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */
function read_buf(strm, buf, start, size) {
  var len = strm.avail_in;

  if (len > size) { len = size; }
  if (len === 0) { return 0; }

  strm.avail_in -= len;

  utils.arraySet(buf, strm.input, strm.next_in, len, start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32(strm.adler, buf, len, start);
  }

  else if (strm.state.wrap === 2) {
    strm.adler = crc32(strm.adler, buf, len, start);
  }

  strm.next_in += len;
  strm.total_in += len;

  return len;
}


/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */
function longest_match(s, cur_match) {
  var chain_length = s.max_chain_length;      /* max hash chain length */
  var scan = s.strstart; /* current string */
  var match;                       /* matched string */
  var len;                           /* length of current match */
  var best_len = s.prev_length;              /* best match length so far */
  var nice_match = s.nice_match;             /* stop if match long enough */
  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

  var _win = s.window; // shortcut

  var wmask = s.w_mask;
  var prev  = s.prev;

  /* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */

  var strend = s.strstart + MAX_MATCH;
  var scan_end1  = _win[scan + best_len - 1];
  var scan_end   = _win[scan + best_len];

  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */
  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

  /* Do not waste too much time if we already have a good match: */
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  /* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */
  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

  do {
    // Assert(cur_match < s->strstart, "no future");
    match = cur_match;

    /* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */

    if (_win[match + best_len]     !== scan_end  ||
        _win[match + best_len - 1] !== scan_end1 ||
        _win[match]                !== _win[scan] ||
        _win[++match]              !== _win[scan + 1]) {
      continue;
    }

    /* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */
    scan += 2;
    match++;
    // Assert(*scan == *match, "match[2]?");

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
      /*jshint noempty:false*/
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             scan < strend);

    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

    len = MAX_MATCH - (strend - scan);
    scan = strend - MAX_MATCH;

    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1  = _win[scan + best_len - 1];
      scan_end   = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
}


/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */
function fill_window(s) {
  var _w_size = s.w_size;
  var p, n, m, more, str;

  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

  do {
    more = s.window_size - s.lookahead - s.strstart;

    // JS ints have 32 bit, block below not needed
    /* Deal with !@#$% 64K limit: */
    //if (sizeof(int) <= 2) {
    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
    //        more = wsize;
    //
    //  } else if (more == (unsigned)(-1)) {
    //        /* Very unlikely, but possible on 16 bit machine if
    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
    //         */
    //        more--;
    //    }
    //}


    /* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      /* we now have strstart >= MAX_DIST */
      s.block_start -= _w_size;

      /* Slide the hash table (could be avoided with 32 bit values
       at the expense of memory usage). We slide even when level == 0
       to keep the hash table consistent if we switch back to level > 0
       later. (Using level 0 permanently is not an optimal usage of
       zlib, so we don't care about this pathological case.)
       */

      n = s.hash_size;
      p = n;
      do {
        m = s.head[--p];
        s.head[p] = (m >= _w_size ? m - _w_size : 0);
      } while (--n);

      n = _w_size;
      p = n;
      do {
        m = s.prev[--p];
        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
        /* If n is not on any hash chain, prev[n] is garbage but
         * its value will never be used.
         */
      } while (--n);

      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }

    /* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */
    //Assert(more >= 2, "more < 2");
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;

    /* Initialize the hash value now that we have some input: */
    if (s.lookahead + s.insert >= MIN_MATCH) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];

      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
//#if MIN_MATCH != 3
//        Call update_hash() MIN_MATCH-3 more times
//#endif
      while (s.insert) {
        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH-1]) & s.hash_mask;

        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH) {
          break;
        }
      }
    }
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */

  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

  /* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */
//  if (s.high_water < s.window_size) {
//    var curr = s.strstart + s.lookahead;
//    var init = 0;
//
//    if (s.high_water < curr) {
//      /* Previous high water mark below current data -- zero WIN_INIT
//       * bytes or up to end of window, whichever is less.
//       */
//      init = s.window_size - curr;
//      if (init > WIN_INIT)
//        init = WIN_INIT;
//      zmemzero(s->window + curr, (unsigned)init);
//      s->high_water = curr + init;
//    }
//    else if (s->high_water < (ulg)curr + WIN_INIT) {
//      /* High water mark at or above current data, but below current data
//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
//       * to end of window, whichever is less.
//       */
//      init = (ulg)curr + WIN_INIT - s->high_water;
//      if (init > s->window_size - s->high_water)
//        init = s->window_size - s->high_water;
//      zmemzero(s->window + s->high_water, (unsigned)init);
//      s->high_water += init;
//    }
//  }
//
//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
//    "not enough room for search");
}

/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 * This function does not insert new strings in the dictionary since
 * uncompressible data is probably not useful. This function is used
 * only for the level=0 compression option.
 * NOTE: this function should be optimized to avoid extra copying from
 * window to pending_buf.
 */
function deflate_stored(s, flush) {
  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
   * to pending_buf_size, and each stored block has a 5 byte header:
   */
  var max_block_size = 0xffff;

  if (max_block_size > s.pending_buf_size - 5) {
    max_block_size = s.pending_buf_size - 5;
  }

  /* Copy as much as possible from input to output: */
  for (;;) {
    /* Fill the window as much as possible: */
    if (s.lookahead <= 1) {

      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
      //  s->block_start >= (long)s->w_size, "slide too late");
//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
//        s.block_start >= s.w_size)) {
//        throw  new Error("slide too late");
//      }

      fill_window(s);
      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }

      if (s.lookahead === 0) {
        break;
      }
      /* flush the current block */
    }
    //Assert(s->block_start >= 0L, "block gone");
//    if (s.block_start < 0) throw new Error("block gone");

    s.strstart += s.lookahead;
    s.lookahead = 0;

    /* Emit a stored block if pending_buf will be full: */
    var max_start = s.block_start + max_block_size;

    if (s.strstart === 0 || s.strstart >= max_start) {
      /* strstart == 0 is possible when wraparound on 16-bit machine */
      s.lookahead = s.strstart - max_start;
      s.strstart = max_start;
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/


    }
    /* Flush if we may have to slide, otherwise block_start may become
     * negative and the data will be gone:
     */
    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }

  s.insert = 0;

  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }

  if (s.strstart > s.block_start) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_NEED_MORE;
}

/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */
function deflate_fast(s, flush) {
  var hash_head;        /* head of the hash chain */
  var bflush;           /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break; /* flush the current block */
      }
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */
    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */
    }
    if (s.match_length >= MIN_MATCH) {
      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

      /*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;

      /* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */
      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
        s.match_length--; /* string at strstart already in table */
        do {
          s.strstart++;
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */
        } while (--s.match_length !== 0);
        s.strstart++;
      } else
      {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

//#if MIN_MATCH != 3
//                Call UPDATE_HASH() MIN_MATCH-3 more times
//#endif
        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */
      }
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s.window[s.strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = ((s.strstart < (MIN_MATCH-1)) ? s.strstart : MIN_MATCH-1);
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */
function deflate_slow(s, flush) {
  var hash_head;          /* head of hash chain */
  var bflush;              /* set if current block must be flushed */

  var max_insert;

  /* Process the input block. */
  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     */
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH-1;

    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
        s.strstart - hash_head <= (s.w_size-MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */

      if (s.match_length <= 5 &&
         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

        /* If prev_match is also MIN_MATCH, match_start is garbage
         * but we will ignore the current match anyway.
         */
        s.match_length = MIN_MATCH-1;
      }
    }
    /* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */
    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH;
      /* Do not insert strings in hash table beyond this. */

      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/
      bflush = trees._tr_tally(s, s.strstart - 1- s.prev_match, s.prev_length - MIN_MATCH);
      /* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */
      s.lookahead -= s.prev_length-1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH-1;
      s.strstart++;

      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

    } else if (s.match_available) {
      /* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart-1]);

      if (bflush) {
        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
        flush_block_only(s, false);
        /***/
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      /* There is no previous match to compare with, wait for
       * the next step to decide.
       */
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  //Assert (flush != Z_NO_FLUSH, "no flush?");
  if (s.match_available) {
    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart-1]);

    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH-1 ? s.strstart : MIN_MATCH-1;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_BLOCK_DONE;
}


/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */
function deflate_rle(s, flush) {
  var bflush;            /* set if current block must be flushed */
  var prev;              /* byte at distance one to match */
  var scan, strend;      /* scan goes up to strend for length of run */

  var _win = s.window;

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */
    if (s.lookahead <= MAX_MATCH) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* See how many times the previous byte repeats */
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH;
        do {
          /*jshint noempty:false*/
        } while (prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 scan < strend);
        s.match_length = MAX_MATCH - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
    }

    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
    if (s.match_length >= MIN_MATCH) {
      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */
function deflate_huff(s, flush) {
  var bflush;             /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we have a literal to write. */
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        break;      /* flush the current block */
      }
    }

    /* Output a literal byte */
    s.match_length = 0;
    //Tracevv((stderr,"%c", s->window[s->strstart]));
    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */
var Config = function (good_length, max_lazy, nice_length, max_chain, func) {
  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
};

var configuration_table;

configuration_table = [
  /*      good lazy nice chain */
  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
];


/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */
function lm_init(s) {
  s.window_size = 2 * s.w_size;

  /*** CLEAR_HASH(s); ***/
  zero(s.head); // Fill with NIL (= 0);

  /* Set the default configuration parameters:
   */
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;

  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  s.ins_h = 0;
}


function DeflateState() {
  this.strm = null;            /* pointer back to this zlib stream */
  this.status = 0;            /* as the name implies */
  this.pending_buf = null;      /* output still pending */
  this.pending_buf_size = 0;  /* size of pending_buf */
  this.pending_out = 0;       /* next pending byte to output to the stream */
  this.pending = 0;           /* nb of bytes in the pending buffer */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.gzhead = null;         /* gzip header information to write */
  this.gzindex = 0;           /* where in extra, name, or comment */
  this.method = Z_DEFLATED; /* can only be DEFLATED */
  this.last_flush = -1;   /* value of flush param for previous deflate call */

  this.w_size = 0;  /* LZ77 window size (32K by default) */
  this.w_bits = 0;  /* log2(w_size)  (8..16) */
  this.w_mask = 0;  /* w_size - 1 */

  this.window = null;
  /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */

  this.window_size = 0;
  /* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */

  this.prev = null;
  /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */

  this.head = null;   /* Heads of the hash chains or NIL. */

  this.ins_h = 0;       /* hash index of string to be inserted */
  this.hash_size = 0;   /* number of elements in hash table */
  this.hash_bits = 0;   /* log2(hash_size) */
  this.hash_mask = 0;   /* hash_size-1 */

  this.hash_shift = 0;
  /* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */

  this.block_start = 0;
  /* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */

  this.match_length = 0;      /* length of best match */
  this.prev_match = 0;        /* previous match */
  this.match_available = 0;   /* set if previous match exists */
  this.strstart = 0;          /* start of string to insert */
  this.match_start = 0;       /* start of matching string */
  this.lookahead = 0;         /* number of valid bytes ahead in window */

  this.prev_length = 0;
  /* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */

  this.max_chain_length = 0;
  /* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */

  this.max_lazy_match = 0;
  /* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */
  // That's alias to max_lazy_match, don't use directly
  //this.max_insert_length = 0;
  /* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */

  this.level = 0;     /* compression level (1..9) */
  this.strategy = 0;  /* favor or force Huffman coding*/

  this.good_match = 0;
  /* Use a faster search when the previous match is longer than this */

  this.nice_match = 0; /* Stop searching when current match exceeds this */

              /* used by trees.c: */

  /* Didn't use ct_data typedef below to suppress compiler warning */

  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

  // Use flat array of DOUBLE size, with interleaved fata,
  // because JS does not support effective
  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);
  this.dyn_dtree  = new utils.Buf16((2*D_CODES+1) * 2);
  this.bl_tree    = new utils.Buf16((2*BL_CODES+1) * 2);
  zero(this.dyn_ltree);
  zero(this.dyn_dtree);
  zero(this.bl_tree);

  this.l_desc   = null;         /* desc. for literal tree */
  this.d_desc   = null;         /* desc. for distance tree */
  this.bl_desc  = null;         /* desc. for bit length tree */

  //ush bl_count[MAX_BITS+1];
  this.bl_count = new utils.Buf16(MAX_BITS+1);
  /* number of codes at each bit length for an optimal tree */

  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
  this.heap = new utils.Buf16(2*L_CODES+1);  /* heap used to build the Huffman trees */
  zero(this.heap);

  this.heap_len = 0;               /* number of elements in the heap */
  this.heap_max = 0;               /* element of largest frequency */
  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */

  this.depth = new utils.Buf16(2*L_CODES+1); //uch depth[2*L_CODES+1];
  zero(this.depth);
  /* Depth of each subtree used as tie breaker for trees of equal frequency
   */

  this.l_buf = 0;          /* buffer index for literals or lengths */

  this.lit_bufsize = 0;
  /* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */

  this.last_lit = 0;      /* running index in l_buf */

  this.d_buf = 0;
  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
   * the same number of elements. To use different lengths, an extra flag
   * array would be necessary.
   */

  this.opt_len = 0;       /* bit length of current block with optimal trees */
  this.static_len = 0;    /* bit length of current block with static trees */
  this.matches = 0;       /* number of string matches in current block */
  this.insert = 0;        /* bytes at end of window left to insert */


  this.bi_buf = 0;
  /* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */
  this.bi_valid = 0;
  /* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */

  // Used for window memory init. We safely ignore it for JS. That makes
  // sense only for pointers and memory check tools.
  //this.high_water = 0;
  /* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */
}


function deflateResetKeep(strm) {
  var s;

  if (!strm || !strm.state) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN;

  s = strm.state;
  s.pending = 0;
  s.pending_out = 0;

  if (s.wrap < 0) {
    s.wrap = -s.wrap;
    /* was made negative by deflate(..., Z_FINISH); */
  }
  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
  strm.adler = (s.wrap === 2) ?
    0  // crc32(0, Z_NULL, 0)
  :
    1; // adler32(0, Z_NULL, 0)
  s.last_flush = Z_NO_FLUSH;
  trees._tr_init(s);
  return Z_OK;
}


function deflateReset(strm) {
  var ret = deflateResetKeep(strm);
  if (ret === Z_OK) {
    lm_init(strm.state);
  }
  return ret;
}


function deflateSetHeader(strm, head) {
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }
  strm.state.gzhead = head;
  return Z_OK;
}


function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
  if (!strm) { // === Z_NULL
    return Z_STREAM_ERROR;
  }
  var wrap = 1;

  if (level === Z_DEFAULT_COMPRESSION) {
    level = 6;
  }

  if (windowBits < 0) { /* suppress zlib wrapper */
    wrap = 0;
    windowBits = -windowBits;
  }

  else if (windowBits > 15) {
    wrap = 2;           /* write gzip wrapper instead */
    windowBits -= 16;
  }


  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
    strategy < 0 || strategy > Z_FIXED) {
    return err(strm, Z_STREAM_ERROR);
  }


  if (windowBits === 8) {
    windowBits = 9;
  }
  /* until 256-byte window bug fixed */

  var s = new DeflateState();

  strm.state = s;
  s.strm = strm;

  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;

  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

  s.window = new utils.Buf8(s.w_size * 2);
  s.head = new utils.Buf16(s.hash_size);
  s.prev = new utils.Buf16(s.w_size);

  // Don't need mem init magic for JS.
  //s.high_water = 0;  /* nothing written to s->window yet */

  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  s.pending_buf_size = s.lit_bufsize * 4;
  s.pending_buf = new utils.Buf8(s.pending_buf_size);

  s.d_buf = s.lit_bufsize >> 1;
  s.l_buf = (1 + 2) * s.lit_bufsize;

  s.level = level;
  s.strategy = strategy;
  s.method = method;

  return deflateReset(strm);
}

function deflateInit(strm, level) {
  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
}


function deflate(strm, flush) {
  var old_flush, s;
  var beg, val; // for gzip header write only

  if (!strm || !strm.state ||
    flush > Z_BLOCK || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
  }

  s = strm.state;

  if (!strm.output ||
      (!strm.input && strm.avail_in !== 0) ||
      (s.status === FINISH_STATE && flush !== Z_FINISH)) {
    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
  }

  s.strm = strm; /* just in case */
  old_flush = s.last_flush;
  s.last_flush = flush;

  /* Write the header */
  if (s.status === INIT_STATE) {

    if (s.wrap === 2) { // GZIP header
      strm.adler = 0;  //crc32(0L, Z_NULL, 0);
      put_byte(s, 31);
      put_byte(s, 139);
      put_byte(s, 8);
      if (!s.gzhead) { // s->gzhead == Z_NULL
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, OS_CODE);
        s.status = BUSY_STATE;
      }
      else {
        put_byte(s, (s.gzhead.text ? 1 : 0) +
                    (s.gzhead.hcrc ? 2 : 0) +
                    (!s.gzhead.extra ? 0 : 4) +
                    (!s.gzhead.name ? 0 : 8) +
                    (!s.gzhead.comment ? 0 : 16)
                );
        put_byte(s, s.gzhead.time & 0xff);
        put_byte(s, (s.gzhead.time >> 8) & 0xff);
        put_byte(s, (s.gzhead.time >> 16) & 0xff);
        put_byte(s, (s.gzhead.time >> 24) & 0xff);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, s.gzhead.os & 0xff);
        if (s.gzhead.extra && s.gzhead.extra.length) {
          put_byte(s, s.gzhead.extra.length & 0xff);
          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
        }
        if (s.gzhead.hcrc) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
        }
        s.gzindex = 0;
        s.status = EXTRA_STATE;
      }
    }
    else // DEFLATE header
    {
      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
      var level_flags = -1;

      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
        level_flags = 0;
      } else if (s.level < 6) {
        level_flags = 1;
      } else if (s.level === 6) {
        level_flags = 2;
      } else {
        level_flags = 3;
      }
      header |= (level_flags << 6);
      if (s.strstart !== 0) { header |= PRESET_DICT; }
      header += 31 - (header % 31);

      s.status = BUSY_STATE;
      putShortMSB(s, header);

      /* Save the adler32 of the preset dictionary: */
      if (s.strstart !== 0) {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 0xffff);
      }
      strm.adler = 1; // adler32(0L, Z_NULL, 0);
    }
  }

//#ifdef GZIP
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */

      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            break;
          }
        }
        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
        s.gzindex++;
      }
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (s.gzindex === s.gzhead.extra.length) {
        s.gzindex = 0;
        s.status = NAME_STATE;
      }
    }
    else {
      s.status = NAME_STATE;
    }
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.name.length) {
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.gzindex = 0;
        s.status = COMMENT_STATE;
      }
    }
    else {
      s.status = COMMENT_STATE;
    }
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.comment.length) {
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.status = HCRC_STATE;
      }
    }
    else {
      s.status = HCRC_STATE;
    }
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
      }
      if (s.pending + 2 <= s.pending_buf_size) {
        put_byte(s, strm.adler & 0xff);
        put_byte(s, (strm.adler >> 8) & 0xff);
        strm.adler = 0; //crc32(0L, Z_NULL, 0);
        s.status = BUSY_STATE;
      }
    }
    else {
      s.status = BUSY_STATE;
    }
  }
//#endif

  /* Flush as much pending output as possible */
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      /* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */
      s.last_flush = -1;
      return Z_OK;
    }

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
    flush !== Z_FINISH) {
    return err(strm, Z_BUF_ERROR);
  }

  /* User must not provide more input after the first FINISH: */
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR);
  }

  /* Start a new block or continue the current one.
   */
  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
        configuration_table[s.level].func(s, flush));

    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        /* avoid BUF_ERROR next call, see above */
      }
      return Z_OK;
      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        trees._tr_align(s);
      }
      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

        trees._tr_stored_block(s, 0, 0, false);
        /* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */
        if (flush === Z_FULL_FLUSH) {
          /*** CLEAR_HASH(s); ***/             /* forget history */
          zero(s.head); // Fill with NIL (= 0);

          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
        return Z_OK;
      }
    }
  }
  //Assert(strm->avail_out > 0, "bug2");
  //if (strm.avail_out <= 0) { throw new Error("bug2");}

  if (flush !== Z_FINISH) { return Z_OK; }
  if (s.wrap <= 0) { return Z_STREAM_END; }

  /* Write the trailer */
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 0xff);
    put_byte(s, (strm.adler >> 8) & 0xff);
    put_byte(s, (strm.adler >> 16) & 0xff);
    put_byte(s, (strm.adler >> 24) & 0xff);
    put_byte(s, strm.total_in & 0xff);
    put_byte(s, (strm.total_in >> 8) & 0xff);
    put_byte(s, (strm.total_in >> 16) & 0xff);
    put_byte(s, (strm.total_in >> 24) & 0xff);
  }
  else
  {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 0xffff);
  }

  flush_pending(strm);
  /* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */
  if (s.wrap > 0) { s.wrap = -s.wrap; }
  /* write the trailer only once! */
  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
}

function deflateEnd(strm) {
  var status;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  status = strm.state.status;
  if (status !== INIT_STATE &&
    status !== EXTRA_STATE &&
    status !== NAME_STATE &&
    status !== COMMENT_STATE &&
    status !== HCRC_STATE &&
    status !== BUSY_STATE &&
    status !== FINISH_STATE
  ) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.state = null;

  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
}

/* =========================================================================
 * Copy the source state to the destination state
 */
//function deflateCopy(dest, source) {
//
//}

exports.deflateInit = deflateInit;
exports.deflateInit2 = deflateInit2;
exports.deflateReset = deflateReset;
exports.deflateResetKeep = deflateResetKeep;
exports.deflateSetHeader = deflateSetHeader;
exports.deflate = deflate;
exports.deflateEnd = deflateEnd;
exports.deflateInfo = 'pako deflate (from Nodeca project)';

/* Not implemented
exports.deflateBound = deflateBound;
exports.deflateCopy = deflateCopy;
exports.deflateSetDictionary = deflateSetDictionary;
exports.deflateParams = deflateParams;
exports.deflatePending = deflatePending;
exports.deflatePrime = deflatePrime;
exports.deflateTune = deflateTune;
*/

},{"../utils/common":4,"./adler32":5,"./crc32":7,"./messages":12,"./trees":13}],9:[function(require,module,exports){
'use strict';

// See state defs from inflate.js
var BAD = 30;       /* got a data error -- remain here until reset */
var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */

/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */
module.exports = function inflate_fast(strm, start) {
  var state;
  var _in;                    /* local strm.input */
  var last;                   /* have enough input while in < last */
  var _out;                   /* local strm.output */
  var beg;                    /* inflate()'s initial strm.output */
  var end;                    /* while out < end, enough space available */
//#ifdef INFLATE_STRICT
  var dmax;                   /* maximum distance from zlib header */
//#endif
  var wsize;                  /* window size or zero if not using window */
  var whave;                  /* valid bytes in the window */
  var wnext;                  /* window write index */
  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
  var s_window;               /* allocated sliding window, if wsize != 0 */
  var hold;                   /* local strm.hold */
  var bits;                   /* local strm.bits */
  var lcode;                  /* local strm.lencode */
  var dcode;                  /* local strm.distcode */
  var lmask;                  /* mask for first level of length codes */
  var dmask;                  /* mask for first level of distance codes */
  var here;                   /* retrieved table entry */
  var op;                     /* code bits, operation, extra bits, or */
                              /*  window position, window bytes to copy */
  var len;                    /* match length, unused bytes */
  var dist;                   /* match distance */
  var from;                   /* where to copy match from */
  var from_source;


  var input, output; // JS specific, because we have no pointers

  /* copy state to local variables */
  state = strm.state;
  //here = state.here;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
//#ifdef INFLATE_STRICT
  dmax = state.dmax;
//#endif
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;


  /* decode literals and length/distances until end-of-block or not enough
     input data or output space */

  top:
  do {
    if (bits < 15) {
      hold += input[_in++] << bits;
      bits += 8;
      hold += input[_in++] << bits;
      bits += 8;
    }

    here = lcode[hold & lmask];

    dolen:
    for (;;) { // Goto emulation
      op = here >>> 24/*here.bits*/;
      hold >>>= op;
      bits -= op;
      op = (here >>> 16) & 0xff/*here.op*/;
      if (op === 0) {                          /* literal */
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        output[_out++] = here & 0xffff/*here.val*/;
      }
      else if (op & 16) {                     /* length base */
        len = here & 0xffff/*here.val*/;
        op &= 15;                           /* number of extra bits */
        if (op) {
          if (bits < op) {
            hold += input[_in++] << bits;
            bits += 8;
          }
          len += hold & ((1 << op) - 1);
          hold >>>= op;
          bits -= op;
        }
        //Tracevv((stderr, "inflate:         length %u\n", len));
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
        here = dcode[hold & dmask];

        dodist:
        for (;;) { // goto emulation
          op = here >>> 24/*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = (here >>> 16) & 0xff/*here.op*/;

          if (op & 16) {                      /* distance base */
            dist = here & 0xffff/*here.val*/;
            op &= 15;                       /* number of extra bits */
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
            }
            dist += hold & ((1 << op) - 1);
//#ifdef INFLATE_STRICT
            if (dist > dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break top;
            }
//#endif
            hold >>>= op;
            bits -= op;
            //Tracevv((stderr, "inflate:         distance %u\n", dist));
            op = _out - beg;                /* max distance in output */
            if (dist > op) {                /* see if copy from window */
              op = dist - op;               /* distance back in window */
              if (op > whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD;
                  break top;
                }

// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//                if (len <= op - whave) {
//                  do {
//                    output[_out++] = 0;
//                  } while (--len);
//                  continue top;
//                }
//                len -= op - whave;
//                do {
//                  output[_out++] = 0;
//                } while (--op > whave);
//                if (op === 0) {
//                  from = _out - dist;
//                  do {
//                    output[_out++] = output[from++];
//                  } while (--len);
//                  continue top;
//                }
//#endif
              }
              from = 0; // window index
              from_source = s_window;
              if (wnext === 0) {           /* very common case */
                from += wsize - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              else if (wnext < op) {      /* wrap around window */
                from += wsize + wnext - op;
                op -= wnext;
                if (op < len) {         /* some from end of window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = 0;
                  if (wnext < len) {  /* some from start of window */
                    op = wnext;
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;      /* rest from output */
                    from_source = output;
                  }
                }
              }
              else {                      /* contiguous in window */
                from += wnext - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              while (len > 2) {
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                len -= 3;
              }
              if (len) {
                output[_out++] = from_source[from++];
                if (len > 1) {
                  output[_out++] = from_source[from++];
                }
              }
            }
            else {
              from = _out - dist;          /* copy direct from output */
              do {                        /* minimum length is three */
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                len -= 3;
              } while (len > 2);
              if (len) {
                output[_out++] = output[from++];
                if (len > 1) {
                  output[_out++] = output[from++];
                }
              }
            }
          }
          else if ((op & 64) === 0) {          /* 2nd level distance code */
            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
            continue dodist;
          }
          else {
            strm.msg = 'invalid distance code';
            state.mode = BAD;
            break top;
          }

          break; // need to emulate goto via "continue"
        }
      }
      else if ((op & 64) === 0) {              /* 2nd level length code */
        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
        continue dolen;
      }
      else if (op & 32) {                     /* end-of-block */
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.mode = TYPE;
        break top;
      }
      else {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break top;
      }

      break; // need to emulate goto via "continue"
    }
  } while (_in < last && _out < end);

  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;

  /* update state and return */
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
  state.hold = hold;
  state.bits = bits;
  return;
};

},{}],10:[function(require,module,exports){
'use strict';


var utils = require('../utils/common');
var adler32 = require('./adler32');
var crc32   = require('./crc32');
var inflate_fast = require('./inffast');
var inflate_table = require('./inftrees');

var CODES = 0;
var LENS = 1;
var DISTS = 2;

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
//var Z_NO_FLUSH      = 0;
//var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
//var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;

/* The deflate compression method */
var Z_DEFLATED  = 8;


/* STATES ====================================================================*/
/* ===========================================================================*/


var    HEAD = 1;       /* i: waiting for magic header */
var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
var    TIME = 3;       /* i: waiting for modification time (gzip) */
var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
var    NAME = 7;       /* i: waiting for end of file name (gzip) */
var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
var    HCRC = 9;       /* i: waiting for header crc (gzip) */
var    DICTID = 10;    /* i: waiting for dictionary check value */
var    DICT = 11;      /* waiting for inflateSetDictionary() call */
var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
var        STORED = 14;    /* i: waiting for stored size (length and complement) */
var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
var        LENLENS = 18;   /* i: waiting for code length code lengths */
var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
var            LEN = 21;       /* i: waiting for length/lit/eob code */
var            LENEXT = 22;    /* i: waiting for length extra bits */
var            DIST = 23;      /* i: waiting for distance code */
var            DISTEXT = 24;   /* i: waiting for distance extra bits */
var            MATCH = 25;     /* o: waiting for output space to copy string */
var            LIT = 26;       /* o: waiting for output space to write literal */
var    CHECK = 27;     /* i: waiting for 32-bit check value */
var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
var    DONE = 29;      /* finished check, done -- remain here until reset */
var    BAD = 30;       /* got a data error -- remain here until reset */
var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

/* ===========================================================================*/



var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_WBITS = MAX_WBITS;


function ZSWAP32(q) {
  return  (((q >>> 24) & 0xff) +
          ((q >>> 8) & 0xff00) +
          ((q & 0xff00) << 8) +
          ((q & 0xff) << 24));
}


function InflateState() {
  this.mode = 0;             /* current inflate mode */
  this.last = false;          /* true if processing last block */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.havedict = false;      /* true if dictionary provided */
  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
  this.check = 0;             /* protected copy of check value */
  this.total = 0;             /* protected copy of output count */
  // TODO: may be {}
  this.head = null;           /* where to save gzip header information */

  /* sliding window */
  this.wbits = 0;             /* log base 2 of requested window size */
  this.wsize = 0;             /* window size or zero if not using window */
  this.whave = 0;             /* valid bytes in the window */
  this.wnext = 0;             /* window write index */
  this.window = null;         /* allocated sliding window, if needed */

  /* bit accumulator */
  this.hold = 0;              /* input bit accumulator */
  this.bits = 0;              /* number of bits in "in" */

  /* for string and stored block copying */
  this.length = 0;            /* literal or length of data to copy */
  this.offset = 0;            /* distance back to copy string from */

  /* for table and code decoding */
  this.extra = 0;             /* extra bits needed */

  /* fixed and dynamic code tables */
  this.lencode = null;          /* starting table for length/literal codes */
  this.distcode = null;         /* starting table for distance codes */
  this.lenbits = 0;           /* index bits for lencode */
  this.distbits = 0;          /* index bits for distcode */

  /* dynamic table building */
  this.ncode = 0;             /* number of code length code lengths */
  this.nlen = 0;              /* number of length code lengths */
  this.ndist = 0;             /* number of distance code lengths */
  this.have = 0;              /* number of code lengths in lens[] */
  this.next = null;              /* next available space in codes[] */

  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
  this.work = new utils.Buf16(288); /* work area for code table building */

  /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */
  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
  this.sane = 0;                   /* if false, allow invalid distance too far */
  this.back = 0;                   /* bits back of last unprocessed length/lit */
  this.was = 0;                    /* initial length of match */
}

function inflateResetKeep(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = ''; /*Z_NULL*/
  if (state.wrap) {       /* to support ill-conceived Java test suite */
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.dmax = 32768;
  state.head = null/*Z_NULL*/;
  state.hold = 0;
  state.bits = 0;
  //state.lencode = state.distcode = state.next = state.codes;
  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);

  state.sane = 1;
  state.back = -1;
  //Tracev((stderr, "inflate: reset\n"));
  return Z_OK;
}

function inflateReset(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);

}

function inflateReset2(strm, windowBits) {
  var wrap;
  var state;

  /* get the state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;

  /* extract wrap request from windowBits parameter */
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  }
  else {
    wrap = (windowBits >> 4) + 1;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }

  /* set number of window bits, free window if different */
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }

  /* update state and reset the rest of it */
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
}

function inflateInit2(strm, windowBits) {
  var ret;
  var state;

  if (!strm) { return Z_STREAM_ERROR; }
  //strm.msg = Z_NULL;                 /* in case we return an error */

  state = new InflateState();

  //if (state === Z_NULL) return Z_MEM_ERROR;
  //Tracev((stderr, "inflate: allocated\n"));
  strm.state = state;
  state.window = null/*Z_NULL*/;
  ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK) {
    strm.state = null/*Z_NULL*/;
  }
  return ret;
}

function inflateInit(strm) {
  return inflateInit2(strm, DEF_WBITS);
}


/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */
var virgin = true;

var lenfix, distfix; // We have no pointers in JS, so keep tables separate

function fixedtables(state) {
  /* build fixed huffman tables if first call (may not be thread safe) */
  if (virgin) {
    var sym;

    lenfix = new utils.Buf32(512);
    distfix = new utils.Buf32(32);

    /* literal/length table */
    sym = 0;
    while (sym < 144) { state.lens[sym++] = 8; }
    while (sym < 256) { state.lens[sym++] = 9; }
    while (sym < 280) { state.lens[sym++] = 7; }
    while (sym < 288) { state.lens[sym++] = 8; }

    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, {bits: 9});

    /* distance table */
    sym = 0;
    while (sym < 32) { state.lens[sym++] = 5; }

    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, {bits: 5});

    /* do this just once */
    virgin = false;
  }

  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
}


/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */
function updatewindow(strm, src, end, copy) {
  var dist;
  var state = strm.state;

  /* if it hasn't been done already, allocate space for the window */
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;

    state.window = new utils.Buf8(state.wsize);
  }

  /* copy state->wsize or less output bytes into the circular window */
  if (copy >= state.wsize) {
    utils.arraySet(state.window,src, end - state.wsize, state.wsize, 0);
    state.wnext = 0;
    state.whave = state.wsize;
  }
  else {
    dist = state.wsize - state.wnext;
    if (dist > copy) {
      dist = copy;
    }
    //zmemcpy(state->window + state->wnext, end - copy, dist);
    utils.arraySet(state.window,src, end - copy, dist, state.wnext);
    copy -= dist;
    if (copy) {
      //zmemcpy(state->window, end - copy, copy);
      utils.arraySet(state.window,src, end - copy, copy, 0);
      state.wnext = copy;
      state.whave = state.wsize;
    }
    else {
      state.wnext += dist;
      if (state.wnext === state.wsize) { state.wnext = 0; }
      if (state.whave < state.wsize) { state.whave += dist; }
    }
  }
  return 0;
}

function inflate(strm, flush) {
  var state;
  var input, output;          // input/output buffers
  var next;                   /* next input INDEX */
  var put;                    /* next output INDEX */
  var have, left;             /* available input and output */
  var hold;                   /* bit buffer */
  var bits;                   /* bits in bit buffer */
  var _in, _out;              /* save starting available input and output */
  var copy;                   /* number of stored or match bytes to copy */
  var from;                   /* where to copy match bytes from */
  var from_source;
  var here = 0;               /* current decoding table entry */
  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
  //var last;                   /* parent table entry */
  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
  var len;                    /* length to copy for repeats, bits to drop */
  var ret;                    /* return code */
  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */
  var opts;

  var n; // temporary var for NEED_BITS

  var order = /* permutation of code lengths */
    [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];


  if (!strm || !strm.state || !strm.output ||
      (!strm.input && strm.avail_in !== 0)) {
    return Z_STREAM_ERROR;
  }

  state = strm.state;
  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


  //--- LOAD() ---
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  //---

  _in = have;
  _out = left;
  ret = Z_OK;

  inf_leave: // goto emulation
  for (;;) {
    switch (state.mode) {
    case HEAD:
      if (state.wrap === 0) {
        state.mode = TYPEDO;
        break;
      }
      //=== NEEDBITS(16);
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
        state.check = 0/*crc32(0L, Z_NULL, 0)*/;
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//

        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = FLAGS;
        break;
      }
      state.flags = 0;           /* expect zlib header */
      if (state.head) {
        state.head.done = false;
      }
      if (!(state.wrap & 1) ||   /* check if zlib header allowed */
        (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
        strm.msg = 'incorrect header check';
        state.mode = BAD;
        break;
      }
      if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
        strm.msg = 'unknown compression method';
        state.mode = BAD;
        break;
      }
      //--- DROPBITS(4) ---//
      hold >>>= 4;
      bits -= 4;
      //---//
      len = (hold & 0x0f)/*BITS(4)*/ + 8;
      if (state.wbits === 0) {
        state.wbits = len;
      }
      else if (len > state.wbits) {
        strm.msg = 'invalid window size';
        state.mode = BAD;
        break;
      }
      state.dmax = 1 << len;
      //Tracev((stderr, "inflate:   zlib header ok\n"));
      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
      state.mode = hold & 0x200 ? DICTID : TYPE;
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      break;
    case FLAGS:
      //=== NEEDBITS(16); */
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.flags = hold;
      if ((state.flags & 0xff) !== Z_DEFLATED) {
        strm.msg = 'unknown compression method';
        state.mode = BAD;
        break;
      }
      if (state.flags & 0xe000) {
        strm.msg = 'unknown header flags set';
        state.mode = BAD;
        break;
      }
      if (state.head) {
        state.head.text = ((hold >> 8) & 1);
      }
      if (state.flags & 0x0200) {
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = TIME;
      /* falls through */
    case TIME:
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if (state.head) {
        state.head.time = hold;
      }
      if (state.flags & 0x0200) {
        //=== CRC4(state.check, hold)
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        hbuf[2] = (hold >>> 16) & 0xff;
        hbuf[3] = (hold >>> 24) & 0xff;
        state.check = crc32(state.check, hbuf, 4, 0);
        //===
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = OS;
      /* falls through */
    case OS:
      //=== NEEDBITS(16); */
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if (state.head) {
        state.head.xflags = (hold & 0xff);
        state.head.os = (hold >> 8);
      }
      if (state.flags & 0x0200) {
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = EXLEN;
      /* falls through */
    case EXLEN:
      if (state.flags & 0x0400) {
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.length = hold;
        if (state.head) {
          state.head.extra_len = hold;
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
      }
      else if (state.head) {
        state.head.extra = null/*Z_NULL*/;
      }
      state.mode = EXTRA;
      /* falls through */
    case EXTRA:
      if (state.flags & 0x0400) {
        copy = state.length;
        if (copy > have) { copy = have; }
        if (copy) {
          if (state.head) {
            len = state.head.extra_len - state.length;
            if (!state.head.extra) {
              // Use untyped array for more conveniend processing later
              state.head.extra = new Array(state.head.extra_len);
            }
            utils.arraySet(
              state.head.extra,
              input,
              next,
              // extra field is limited to 65536 bytes
              // - no need for additional size check
              copy,
              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
              len
            );
            //zmemcpy(state.head.extra + len, next,
            //        len + copy > state.head.extra_max ?
            //        state.head.extra_max - len : copy);
          }
          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          state.length -= copy;
        }
        if (state.length) { break inf_leave; }
      }
      state.length = 0;
      state.mode = NAME;
      /* falls through */
    case NAME:
      if (state.flags & 0x0800) {
        if (have === 0) { break inf_leave; }
        copy = 0;
        do {
          // TODO: 2 or 1 bytes?
          len = input[next + copy++];
          /* use constant limit because in js we should not preallocate memory */
          if (state.head && len &&
              (state.length < 65536 /*state.head.name_max*/)) {
            state.head.name += String.fromCharCode(len);
          }
        } while (len && copy < have);

        if (state.flags & 0x0200) {
          state.check = crc32(state.check, input, copy, next);
        }
        have -= copy;
        next += copy;
        if (len) { break inf_leave; }
      }
      else if (state.head) {
        state.head.name = null;
      }
      state.length = 0;
      state.mode = COMMENT;
      /* falls through */
    case COMMENT:
      if (state.flags & 0x1000) {
        if (have === 0) { break inf_leave; }
        copy = 0;
        do {
          len = input[next + copy++];
          /* use constant limit because in js we should not preallocate memory */
          if (state.head && len &&
              (state.length < 65536 /*state.head.comm_max*/)) {
            state.head.comment += String.fromCharCode(len);
          }
        } while (len && copy < have);
        if (state.flags & 0x0200) {
          state.check = crc32(state.check, input, copy, next);
        }
        have -= copy;
        next += copy;
        if (len) { break inf_leave; }
      }
      else if (state.head) {
        state.head.comment = null;
      }
      state.mode = HCRC;
      /* falls through */
    case HCRC:
      if (state.flags & 0x0200) {
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (hold !== (state.check & 0xffff)) {
          strm.msg = 'header crc mismatch';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
      }
      if (state.head) {
        state.head.hcrc = ((state.flags >> 9) & 1);
        state.head.done = true;
      }
      strm.adler = state.check = 0 /*crc32(0L, Z_NULL, 0)*/;
      state.mode = TYPE;
      break;
    case DICTID:
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      strm.adler = state.check = ZSWAP32(hold);
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = DICT;
      /* falls through */
    case DICT:
      if (state.havedict === 0) {
        //--- RESTORE() ---
        strm.next_out = put;
        strm.avail_out = left;
        strm.next_in = next;
        strm.avail_in = have;
        state.hold = hold;
        state.bits = bits;
        //---
        return Z_NEED_DICT;
      }
      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
      state.mode = TYPE;
      /* falls through */
    case TYPE:
      if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case TYPEDO:
      if (state.last) {
        //--- BYTEBITS() ---//
        hold >>>= bits & 7;
        bits -= bits & 7;
        //---//
        state.mode = CHECK;
        break;
      }
      //=== NEEDBITS(3); */
      while (bits < 3) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.last = (hold & 0x01)/*BITS(1)*/;
      //--- DROPBITS(1) ---//
      hold >>>= 1;
      bits -= 1;
      //---//

      switch ((hold & 0x03)/*BITS(2)*/) {
      case 0:                             /* stored block */
        //Tracev((stderr, "inflate:     stored block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = STORED;
        break;
      case 1:                             /* fixed block */
        fixedtables(state);
        //Tracev((stderr, "inflate:     fixed codes block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = LEN_;             /* decode codes */
        if (flush === Z_TREES) {
          //--- DROPBITS(2) ---//
          hold >>>= 2;
          bits -= 2;
          //---//
          break inf_leave;
        }
        break;
      case 2:                             /* dynamic block */
        //Tracev((stderr, "inflate:     dynamic codes block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = TABLE;
        break;
      case 3:
        strm.msg = 'invalid block type';
        state.mode = BAD;
      }
      //--- DROPBITS(2) ---//
      hold >>>= 2;
      bits -= 2;
      //---//
      break;
    case STORED:
      //--- BYTEBITS() ---// /* go to byte boundary */
      hold >>>= bits & 7;
      bits -= bits & 7;
      //---//
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
        strm.msg = 'invalid stored block lengths';
        state.mode = BAD;
        break;
      }
      state.length = hold & 0xffff;
      //Tracev((stderr, "inflate:       stored length %u\n",
      //        state.length));
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = COPY_;
      if (flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case COPY_:
      state.mode = COPY;
      /* falls through */
    case COPY:
      copy = state.length;
      if (copy) {
        if (copy > have) { copy = have; }
        if (copy > left) { copy = left; }
        if (copy === 0) { break inf_leave; }
        //--- zmemcpy(put, next, copy); ---
        utils.arraySet(output, input, next, copy, put);
        //---//
        have -= copy;
        next += copy;
        left -= copy;
        put += copy;
        state.length -= copy;
        break;
      }
      //Tracev((stderr, "inflate:       stored end\n"));
      state.mode = TYPE;
      break;
    case TABLE:
      //=== NEEDBITS(14); */
      while (bits < 14) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
      //--- DROPBITS(5) ---//
      hold >>>= 5;
      bits -= 5;
      //---//
      state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
      //--- DROPBITS(5) ---//
      hold >>>= 5;
      bits -= 5;
      //---//
      state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
      //--- DROPBITS(4) ---//
      hold >>>= 4;
      bits -= 4;
      //---//
//#ifndef PKZIP_BUG_WORKAROUND
      if (state.nlen > 286 || state.ndist > 30) {
        strm.msg = 'too many length or distance symbols';
        state.mode = BAD;
        break;
      }
//#endif
      //Tracev((stderr, "inflate:       table sizes ok\n"));
      state.have = 0;
      state.mode = LENLENS;
      /* falls through */
    case LENLENS:
      while (state.have < state.ncode) {
        //=== NEEDBITS(3);
        while (bits < 3) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
        //--- DROPBITS(3) ---//
        hold >>>= 3;
        bits -= 3;
        //---//
      }
      while (state.have < 19) {
        state.lens[order[state.have++]] = 0;
      }
      // We have separate tables & no pointers. 2 commented lines below not needed.
      //state.next = state.codes;
      //state.lencode = state.next;
      // Switch to use dynamic table
      state.lencode = state.lendyn;
      state.lenbits = 7;

      opts = {bits: state.lenbits};
      ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
      state.lenbits = opts.bits;

      if (ret) {
        strm.msg = 'invalid code lengths set';
        state.mode = BAD;
        break;
      }
      //Tracev((stderr, "inflate:       code lengths ok\n"));
      state.have = 0;
      state.mode = CODELENS;
      /* falls through */
    case CODELENS:
      while (state.have < state.nlen + state.ndist) {
        for (;;) {
          here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if (here_val < 16) {
          //--- DROPBITS(here.bits) ---//
          hold >>>= here_bits;
          bits -= here_bits;
          //---//
          state.lens[state.have++] = here_val;
        }
        else {
          if (here_val === 16) {
            //=== NEEDBITS(here.bits + 2);
            n = here_bits + 2;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            if (state.have === 0) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD;
              break;
            }
            len = state.lens[state.have - 1];
            copy = 3 + (hold & 0x03);//BITS(2);
            //--- DROPBITS(2) ---//
            hold >>>= 2;
            bits -= 2;
            //---//
          }
          else if (here_val === 17) {
            //=== NEEDBITS(here.bits + 3);
            n = here_bits + 3;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            len = 0;
            copy = 3 + (hold & 0x07);//BITS(3);
            //--- DROPBITS(3) ---//
            hold >>>= 3;
            bits -= 3;
            //---//
          }
          else {
            //=== NEEDBITS(here.bits + 7);
            n = here_bits + 7;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            len = 0;
            copy = 11 + (hold & 0x7f);//BITS(7);
            //--- DROPBITS(7) ---//
            hold >>>= 7;
            bits -= 7;
            //---//
          }
          if (state.have + copy > state.nlen + state.ndist) {
            strm.msg = 'invalid bit length repeat';
            state.mode = BAD;
            break;
          }
          while (copy--) {
            state.lens[state.have++] = len;
          }
        }
      }

      /* handle error breaks in while */
      if (state.mode === BAD) { break; }

      /* check for end-of-block code (better have one) */
      if (state.lens[256] === 0) {
        strm.msg = 'invalid code -- missing end-of-block';
        state.mode = BAD;
        break;
      }

      /* build code tables -- note: do not change the lenbits or distbits
         values here (9 and 6) without reading the comments in inftrees.h
         concerning the ENOUGH constants, which depend on those values */
      state.lenbits = 9;

      opts = {bits: state.lenbits};
      ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
      // We have separate tables & no pointers. 2 commented lines below not needed.
      // state.next_index = opts.table_index;
      state.lenbits = opts.bits;
      // state.lencode = state.next;

      if (ret) {
        strm.msg = 'invalid literal/lengths set';
        state.mode = BAD;
        break;
      }

      state.distbits = 6;
      //state.distcode.copy(state.codes);
      // Switch to use dynamic table
      state.distcode = state.distdyn;
      opts = {bits: state.distbits};
      ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
      // We have separate tables & no pointers. 2 commented lines below not needed.
      // state.next_index = opts.table_index;
      state.distbits = opts.bits;
      // state.distcode = state.next;

      if (ret) {
        strm.msg = 'invalid distances set';
        state.mode = BAD;
        break;
      }
      //Tracev((stderr, 'inflate:       codes ok\n'));
      state.mode = LEN_;
      if (flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case LEN_:
      state.mode = LEN;
      /* falls through */
    case LEN:
      if (have >= 6 && left >= 258) {
        //--- RESTORE() ---
        strm.next_out = put;
        strm.avail_out = left;
        strm.next_in = next;
        strm.avail_in = have;
        state.hold = hold;
        state.bits = bits;
        //---
        inflate_fast(strm, _out);
        //--- LOAD() ---
        put = strm.next_out;
        output = strm.output;
        left = strm.avail_out;
        next = strm.next_in;
        input = strm.input;
        have = strm.avail_in;
        hold = state.hold;
        bits = state.bits;
        //---

        if (state.mode === TYPE) {
          state.back = -1;
        }
        break;
      }
      state.back = 0;
      for (;;) {
        here = state.lencode[hold & ((1 << state.lenbits) -1)];  /*BITS(state.lenbits)*/
        here_bits = here >>> 24;
        here_op = (here >>> 16) & 0xff;
        here_val = here & 0xffff;

        if (here_bits <= bits) { break; }
        //--- PULLBYTE() ---//
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
        //---//
      }
      if (here_op && (here_op & 0xf0) === 0) {
        last_bits = here_bits;
        last_op = here_op;
        last_val = here_val;
        for (;;) {
          here = state.lencode[last_val +
                  ((hold & ((1 << (last_bits + last_op)) -1))/*BITS(last.bits + last.op)*/ >> last_bits)];
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((last_bits + here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        //--- DROPBITS(last.bits) ---//
        hold >>>= last_bits;
        bits -= last_bits;
        //---//
        state.back += last_bits;
      }
      //--- DROPBITS(here.bits) ---//
      hold >>>= here_bits;
      bits -= here_bits;
      //---//
      state.back += here_bits;
      state.length = here_val;
      if (here_op === 0) {
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        state.mode = LIT;
        break;
      }
      if (here_op & 32) {
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.back = -1;
        state.mode = TYPE;
        break;
      }
      if (here_op & 64) {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break;
      }
      state.extra = here_op & 15;
      state.mode = LENEXT;
      /* falls through */
    case LENEXT:
      if (state.extra) {
        //=== NEEDBITS(state.extra);
        n = state.extra;
        while (bits < n) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.length += hold & ((1 << state.extra) -1)/*BITS(state.extra)*/;
        //--- DROPBITS(state.extra) ---//
        hold >>>= state.extra;
        bits -= state.extra;
        //---//
        state.back += state.extra;
      }
      //Tracevv((stderr, "inflate:         length %u\n", state.length));
      state.was = state.length;
      state.mode = DIST;
      /* falls through */
    case DIST:
      for (;;) {
        here = state.distcode[hold & ((1 << state.distbits) -1)];/*BITS(state.distbits)*/
        here_bits = here >>> 24;
        here_op = (here >>> 16) & 0xff;
        here_val = here & 0xffff;

        if ((here_bits) <= bits) { break; }
        //--- PULLBYTE() ---//
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
        //---//
      }
      if ((here_op & 0xf0) === 0) {
        last_bits = here_bits;
        last_op = here_op;
        last_val = here_val;
        for (;;) {
          here = state.distcode[last_val +
                  ((hold & ((1 << (last_bits + last_op)) -1))/*BITS(last.bits + last.op)*/ >> last_bits)];
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((last_bits + here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        //--- DROPBITS(last.bits) ---//
        hold >>>= last_bits;
        bits -= last_bits;
        //---//
        state.back += last_bits;
      }
      //--- DROPBITS(here.bits) ---//
      hold >>>= here_bits;
      bits -= here_bits;
      //---//
      state.back += here_bits;
      if (here_op & 64) {
        strm.msg = 'invalid distance code';
        state.mode = BAD;
        break;
      }
      state.offset = here_val;
      state.extra = (here_op) & 15;
      state.mode = DISTEXT;
      /* falls through */
    case DISTEXT:
      if (state.extra) {
        //=== NEEDBITS(state.extra);
        n = state.extra;
        while (bits < n) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.offset += hold & ((1 << state.extra) -1)/*BITS(state.extra)*/;
        //--- DROPBITS(state.extra) ---//
        hold >>>= state.extra;
        bits -= state.extra;
        //---//
        state.back += state.extra;
      }
//#ifdef INFLATE_STRICT
      if (state.offset > state.dmax) {
        strm.msg = 'invalid distance too far back';
        state.mode = BAD;
        break;
      }
//#endif
      //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
      state.mode = MATCH;
      /* falls through */
    case MATCH:
      if (left === 0) { break inf_leave; }
      copy = _out - left;
      if (state.offset > copy) {         /* copy from window */
        copy = state.offset - copy;
        if (copy > state.whave) {
          if (state.sane) {
            strm.msg = 'invalid distance too far back';
            state.mode = BAD;
            break;
          }
// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//          Trace((stderr, "inflate.c too far\n"));
//          copy -= state.whave;
//          if (copy > state.length) { copy = state.length; }
//          if (copy > left) { copy = left; }
//          left -= copy;
//          state.length -= copy;
//          do {
//            output[put++] = 0;
//          } while (--copy);
//          if (state.length === 0) { state.mode = LEN; }
//          break;
//#endif
        }
        if (copy > state.wnext) {
          copy -= state.wnext;
          from = state.wsize - copy;
        }
        else {
          from = state.wnext - copy;
        }
        if (copy > state.length) { copy = state.length; }
        from_source = state.window;
      }
      else {                              /* copy from output */
        from_source = output;
        from = put - state.offset;
        copy = state.length;
      }
      if (copy > left) { copy = left; }
      left -= copy;
      state.length -= copy;
      do {
        output[put++] = from_source[from++];
      } while (--copy);
      if (state.length === 0) { state.mode = LEN; }
      break;
    case LIT:
      if (left === 0) { break inf_leave; }
      output[put++] = state.length;
      left--;
      state.mode = LEN;
      break;
    case CHECK:
      if (state.wrap) {
        //=== NEEDBITS(32);
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          // Use '|' insdead of '+' to make sure that result is signed
          hold |= input[next++] << bits;
          bits += 8;
        }
        //===//
        _out -= left;
        strm.total_out += _out;
        state.total += _out;
        if (_out) {
          strm.adler = state.check =
              /*UPDATE(state.check, put - _out, _out);*/
              (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

        }
        _out = left;
        // NB: crc32 stored as signed 32-bit int, ZSWAP32 returns signed too
        if ((state.flags ? hold : ZSWAP32(hold)) !== state.check) {
          strm.msg = 'incorrect data check';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        //Tracev((stderr, "inflate:   check matches trailer\n"));
      }
      state.mode = LENGTH;
      /* falls through */
    case LENGTH:
      if (state.wrap && state.flags) {
        //=== NEEDBITS(32);
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (hold !== (state.total & 0xffffffff)) {
          strm.msg = 'incorrect length check';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        //Tracev((stderr, "inflate:   length matches trailer\n"));
      }
      state.mode = DONE;
      /* falls through */
    case DONE:
      ret = Z_STREAM_END;
      break inf_leave;
    case BAD:
      ret = Z_DATA_ERROR;
      break inf_leave;
    case MEM:
      return Z_MEM_ERROR;
    case SYNC:
      /* falls through */
    default:
      return Z_STREAM_ERROR;
    }
  }

  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

  /*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */

  //--- RESTORE() ---
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  //---

  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                      (state.mode < CHECK || flush !== Z_FINISH))) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
      state.mode = MEM;
      return Z_MEM_ERROR;
    }
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if (state.wrap && _out) {
    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) +
                    (state.mode === TYPE ? 128 : 0) +
                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
    ret = Z_BUF_ERROR;
  }
  return ret;
}

function inflateEnd(strm) {

  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
    return Z_STREAM_ERROR;
  }

  var state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK;
}

function inflateGetHeader(strm, head) {
  var state;

  /* check state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

  /* save header structure */
  state.head = head;
  head.done = false;
  return Z_OK;
}


exports.inflateReset = inflateReset;
exports.inflateReset2 = inflateReset2;
exports.inflateResetKeep = inflateResetKeep;
exports.inflateInit = inflateInit;
exports.inflateInit2 = inflateInit2;
exports.inflate = inflate;
exports.inflateEnd = inflateEnd;
exports.inflateGetHeader = inflateGetHeader;
exports.inflateInfo = 'pako inflate (from Nodeca project)';

/* Not implemented
exports.inflateCopy = inflateCopy;
exports.inflateGetDictionary = inflateGetDictionary;
exports.inflateMark = inflateMark;
exports.inflatePrime = inflatePrime;
exports.inflateSetDictionary = inflateSetDictionary;
exports.inflateSync = inflateSync;
exports.inflateSyncPoint = inflateSyncPoint;
exports.inflateUndermine = inflateUndermine;
*/

},{"../utils/common":4,"./adler32":5,"./crc32":7,"./inffast":9,"./inftrees":11}],11:[function(require,module,exports){
'use strict';


var utils = require('../utils/common');

var MAXBITS = 15;
var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

var CODES = 0;
var LENS = 1;
var DISTS = 2;

var lbase = [ /* Length codes 257..285 base */
  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
];

var lext = [ /* Length codes 257..285 extra */
  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
];

var dbase = [ /* Distance codes 0..29 base */
  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
  8193, 12289, 16385, 24577, 0, 0
];

var dext = [ /* Distance codes 0..29 extra */
  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
  28, 28, 29, 29, 64, 64
];

module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
{
  var bits = opts.bits;
      //here = opts.here; /* table entry for duplication */

  var len = 0;               /* a code's length in bits */
  var sym = 0;               /* index of code symbols */
  var min = 0, max = 0;          /* minimum and maximum code lengths */
  var root = 0;              /* number of index bits for root table */
  var curr = 0;              /* number of index bits for current table */
  var drop = 0;              /* code bits to drop for sub-table */
  var left = 0;                   /* number of prefix codes available */
  var used = 0;              /* code entries in table used */
  var huff = 0;              /* Huffman code */
  var incr;              /* for incrementing code, index */
  var fill;              /* index for replicating entries */
  var low;               /* low bits for current root entry */
  var mask;              /* mask for low root bits */
  var next;             /* next available space in table */
  var base = null;     /* base value table to use */
  var base_index = 0;
//  var shoextra;    /* extra bits table to use */
  var end;                    /* use base and extra for symbol > end */
  var count = new utils.Buf16(MAXBITS+1); //[MAXBITS+1];    /* number of codes of each length */
  var offs = new utils.Buf16(MAXBITS+1); //[MAXBITS+1];     /* offsets in table for each length */
  var extra = null;
  var extra_index = 0;

  var here_bits, here_op, here_val;

  /*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.

   This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.

   The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.

   The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */

  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }

  /* bound code lengths, force root to be within code lengths */
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) { break; }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {                     /* no symbols to code at all */
    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;


    //table.op[opts.table_index] = 64;
    //table.bits[opts.table_index] = 1;
    //table.val[opts.table_index++] = 0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;

    opts.bits = 1;
    return 0;     /* no symbols, but wait for decoding to report error */
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) { break; }
  }
  if (root < min) {
    root = min;
  }

  /* check for an over-subscribed or incomplete set of lengths */
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    }        /* over-subscribed */
  }
  if (left > 0 && (type === CODES || max !== 1)) {
    return -1;                      /* incomplete set */
  }

  /* generate offsets into symbol table for each length for sorting */
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }

  /* sort symbols by length, by symbol order within each length */
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }

  /*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.

   root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.

   When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.

   used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.

   sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */

  /* set up for code type */
  // poor man optimization - use if-else instead of switch,
  // to avoid deopts in old v8
  if (type === CODES) {
    base = extra = work;    /* dummy value--not used */
    end = 19;

  } else if (type === LENS) {
    base = lbase;
    base_index -= 257;
    extra = lext;
    extra_index -= 257;
    end = 256;

  } else {                    /* DISTS */
    base = dbase;
    extra = dext;
    end = -1;
  }

  /* initialize opts for loop */
  huff = 0;                   /* starting code */
  sym = 0;                    /* starting code symbol */
  len = min;                  /* starting code length */
  next = table_index;              /* current table to fill in */
  curr = root;                /* current table index bits */
  drop = 0;                   /* current bits to drop from code for index */
  low = -1;                   /* trigger new sub-table when len > root */
  used = 1 << root;          /* use root table entries */
  mask = used - 1;            /* mask for comparing low */

  /* check available table space */
  if ((type === LENS && used > ENOUGH_LENS) ||
    (type === DISTS && used > ENOUGH_DISTS)) {
    return 1;
  }

  var i=0;
  /* process all codes and make table entries */
  for (;;) {
    i++;
    /* create table entry */
    here_bits = len - drop;
    if (work[sym] < end) {
      here_op = 0;
      here_val = work[sym];
    }
    else if (work[sym] > end) {
      here_op = extra[extra_index + work[sym]];
      here_val = base[base_index + work[sym]];
    }
    else {
      here_op = 32 + 64;         /* end of block */
      here_val = 0;
    }

    /* replicate for those indices with low len bits equal to huff */
    incr = 1 << (len - drop);
    fill = 1 << curr;
    min = fill;                 /* save offset to next table */
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
    } while (fill !== 0);

    /* backwards increment the len-bit code huff */
    incr = 1 << (len - 1);
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }

    /* go to next symbol, update count, len */
    sym++;
    if (--count[len] === 0) {
      if (len === max) { break; }
      len = lens[lens_index + work[sym]];
    }

    /* create new sub-table if needed */
    if (len > root && (huff & mask) !== low) {
      /* if first time, transition to sub-tables */
      if (drop === 0) {
        drop = root;
      }

      /* increment past last table */
      next += min;            /* here min is 1 << curr */

      /* determine length of next table */
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) { break; }
        curr++;
        left <<= 1;
      }

      /* check for enough space */
      used += 1 << curr;
      if ((type === LENS && used > ENOUGH_LENS) ||
        (type === DISTS && used > ENOUGH_DISTS)) {
        return 1;
      }

      /* point entry in root table to sub-table */
      low = huff & mask;
      /*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/
      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
    }
  }

  /* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */
  if (huff !== 0) {
    //table.op[next + huff] = 64;            /* invalid code marker */
    //table.bits[next + huff] = len - drop;
    //table.val[next + huff] = 0;
    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
  }

  /* set return parameters */
  //opts.table_index += used;
  opts.bits = root;
  return 0;
};

},{"../utils/common":4}],12:[function(require,module,exports){
'use strict';

module.exports = {
  '2':    'need dictionary',     /* Z_NEED_DICT       2  */
  '1':    'stream end',          /* Z_STREAM_END      1  */
  '0':    '',                    /* Z_OK              0  */
  '-1':   'file error',          /* Z_ERRNO         (-1) */
  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
};

},{}],13:[function(require,module,exports){
'use strict';


var utils = require('../utils/common');

/* Public constants ==========================================================*/
/* ===========================================================================*/


//var Z_FILTERED          = 1;
//var Z_HUFFMAN_ONLY      = 2;
//var Z_RLE               = 3;
var Z_FIXED               = 4;
//var Z_DEFAULT_STRATEGY  = 0;

/* Possible values of the data_type field (though see inflate()) */
var Z_BINARY              = 0;
var Z_TEXT                = 1;
//var Z_ASCII             = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;

/*============================================================================*/


function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }

// From zutil.h

var STORED_BLOCK = 0;
var STATIC_TREES = 1;
var DYN_TREES    = 2;
/* The three kinds of block type */

var MIN_MATCH    = 3;
var MAX_MATCH    = 258;
/* The minimum and maximum match lengths */

// From deflate.h
/* ===========================================================================
 * Internal compression state.
 */

var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */

var LITERALS      = 256;
/* number of literal bytes 0..255 */

var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */

var D_CODES       = 30;
/* number of distance codes */

var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */

var HEAP_SIZE     = 2*L_CODES + 1;
/* maximum heap size */

var MAX_BITS      = 15;
/* All codes must not exceed MAX_BITS bits */

var Buf_size      = 16;
/* size of bit buffer in bi_buf */


/* ===========================================================================
 * Constants
 */

var MAX_BL_BITS = 7;
/* Bit length codes must not exceed MAX_BL_BITS bits */

var END_BLOCK   = 256;
/* end of block literal code */

var REP_3_6     = 16;
/* repeat previous bit length 3-6 times (2 bits of repeat count) */

var REPZ_3_10   = 17;
/* repeat a zero length 3-10 times  (3 bits of repeat count) */

var REPZ_11_138 = 18;
/* repeat a zero length 11-138 times  (7 bits of repeat count) */

var extra_lbits =   /* extra bits for each length code */
  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];

var extra_dbits =   /* extra bits for each distance code */
  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];

var extra_blbits =  /* extra bits for each bit length code */
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];

var bl_order =
  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
/* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */

/* ===========================================================================
 * Local data. These are initialized only once.
 */

// We pre-fill arrays with 0 to avoid uninitialized gaps

var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

// !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1
var static_ltree  = new Array((L_CODES+2) * 2);
zero(static_ltree);
/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */

var static_dtree  = new Array(D_CODES * 2);
zero(static_dtree);
/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */

var _dist_code    = new Array(DIST_CODE_LEN);
zero(_dist_code);
/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */

var _length_code  = new Array(MAX_MATCH-MIN_MATCH+1);
zero(_length_code);
/* length code for each normalized match length (0 == MIN_MATCH) */

var base_length   = new Array(LENGTH_CODES);
zero(base_length);
/* First normalized length for each code (0 = MIN_MATCH) */

var base_dist     = new Array(D_CODES);
zero(base_dist);
/* First normalized distance for each code (0 = distance of 1) */


var StaticTreeDesc = function (static_tree, extra_bits, extra_base, elems, max_length) {

  this.static_tree  = static_tree;  /* static tree or NULL */
  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
  this.extra_base   = extra_base;   /* base index for extra_bits */
  this.elems        = elems;        /* max number of elements in the tree */
  this.max_length   = max_length;   /* max bit length for the codes */

  // show if `static_tree` has data or dummy - needed for monomorphic objects
  this.has_stree    = static_tree && static_tree.length;
};


var static_l_desc;
var static_d_desc;
var static_bl_desc;


var TreeDesc = function(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;     /* the dynamic tree */
  this.max_code = 0;            /* largest code with non zero frequency */
  this.stat_desc = stat_desc;   /* the corresponding static tree */
};



function d_code(dist) {
  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
}


/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */
function put_short (s, w) {
//    put_byte(s, (uch)((w) & 0xff));
//    put_byte(s, (uch)((ush)(w) >> 8));
  s.pending_buf[s.pending++] = (w) & 0xff;
  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
}


/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */
function send_bits(s, value, length) {
  if (s.bi_valid > (Buf_size - length)) {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> (Buf_size - s.bi_valid);
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    s.bi_valid += length;
  }
}


function send_code(s, c, tree) {
  send_bits(s, tree[c*2]/*.Code*/, tree[c*2 + 1]/*.Len*/);
}


/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */
function bi_reverse(code, len) {
  var res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
}


/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
function bi_flush(s) {
  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;

  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
}


/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */
function gen_bitlen(s, desc)
//    deflate_state *s;
//    tree_desc *desc;    /* the tree descriptor */
{
  var tree            = desc.dyn_tree;
  var max_code        = desc.max_code;
  var stree           = desc.stat_desc.static_tree;
  var has_stree       = desc.stat_desc.has_stree;
  var extra           = desc.stat_desc.extra_bits;
  var base            = desc.stat_desc.extra_base;
  var max_length      = desc.stat_desc.max_length;
  var h;              /* heap index */
  var n, m;           /* iterate over the tree elements */
  var bits;           /* bit length */
  var xbits;          /* extra bits */
  var f;              /* frequency */
  var overflow = 0;   /* number of elements with bit length too large */

  for (bits = 0; bits <= MAX_BITS; bits++) {
    s.bl_count[bits] = 0;
  }

  /* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */
  tree[s.heap[s.heap_max]*2 + 1]/*.Len*/ = 0; /* root of the heap */

  for (h = s.heap_max+1; h < HEAP_SIZE; h++) {
    n = s.heap[h];
    bits = tree[tree[n*2 +1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n*2 + 1]/*.Len*/ = bits;
    /* We overwrite tree[n].Dad which is no longer needed */

    if (n > max_code) { continue; } /* not a leaf node */

    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n-base];
    }
    f = tree[n * 2]/*.Freq*/;
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n*2 + 1]/*.Len*/ + xbits);
    }
  }
  if (overflow === 0) { return; }

  // Trace((stderr,"\nbit length overflow\n"));
  /* This happens for example on obj2 and pic of the Calgary corpus */

  /* Find the first bit length which could increase: */
  do {
    bits = max_length-1;
    while (s.bl_count[bits] === 0) { bits--; }
    s.bl_count[bits]--;      /* move one leaf down the tree */
    s.bl_count[bits+1] += 2; /* move one overflow item as its brother */
    s.bl_count[max_length]--;
    /* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */
    overflow -= 2;
  } while (overflow > 0);

  /* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h];
      if (m > max_code) { continue; }
      if (tree[m*2 + 1]/*.Len*/ !== bits) {
        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
        s.opt_len += (bits - tree[m*2 + 1]/*.Len*/)*tree[m*2]/*.Freq*/;
        tree[m*2 + 1]/*.Len*/ = bits;
      }
      n--;
    }
  }
}


/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */
function gen_codes(tree, max_code, bl_count)
//    ct_data *tree;             /* the tree to decorate */
//    int max_code;              /* largest code with non zero frequency */
//    ushf *bl_count;            /* number of codes at each bit length */
{
  var next_code = new Array(MAX_BITS+1); /* next code value for each bit length */
  var code = 0;              /* running code value */
  var bits;                  /* bit index */
  var n;                     /* code index */

  /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */
  for (bits = 1; bits <= MAX_BITS; bits++) {
    next_code[bits] = code = (code + bl_count[bits-1]) << 1;
  }
  /* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */
  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
  //        "inconsistent bit counts");
  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

  for (n = 0;  n <= max_code; n++) {
    var len = tree[n*2 + 1]/*.Len*/;
    if (len === 0) { continue; }
    /* Now reverse the bits */
    tree[n*2]/*.Code*/ = bi_reverse(next_code[len]++, len);

    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
  }
}


/* ===========================================================================
 * Initialize the various 'constant' tables.
 */
function tr_static_init() {
  var n;        /* iterates over tree elements */
  var bits;     /* bit counter */
  var length;   /* length value */
  var code;     /* code value */
  var dist;     /* distance index */
  var bl_count = new Array(MAX_BITS+1);
  /* number of codes at each bit length for an optimal tree */

  // do check in _tr_init()
  //if (static_init_done) return;

  /* For some embedded targets, global variables are not initialized: */
/*#ifdef NO_INIT_GLOBAL_POINTERS
  static_l_desc.static_tree = static_ltree;
  static_l_desc.extra_bits = extra_lbits;
  static_d_desc.static_tree = static_dtree;
  static_d_desc.extra_bits = extra_dbits;
  static_bl_desc.extra_bits = extra_blbits;
#endif*/

  /* Initialize the mapping length (0..255) -> length code (0..28) */
  length = 0;
  for (code = 0; code < LENGTH_CODES-1; code++) {
    base_length[code] = length;
    for (n = 0; n < (1<<extra_lbits[code]); n++) {
      _length_code[length++] = code;
    }
  }
  //Assert (length == 256, "tr_static_init: length != 256");
  /* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */
  _length_code[length-1] = code;

  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
  dist = 0;
  for (code = 0 ; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < (1<<extra_dbits[code]); n++) {
      _dist_code[dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: dist != 256");
  dist >>= 7; /* from now on, all distances are divided by 128 */
  for (; code < D_CODES; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < (1<<(extra_dbits[code]-7)); n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

  /* Construct the codes of the static literal tree */
  for (bits = 0; bits <= MAX_BITS; bits++) {
    bl_count[bits] = 0;
  }

  n = 0;
  while (n <= 143) {
    static_ltree[n*2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n*2 + 1]/*.Len*/ = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n*2 + 1]/*.Len*/ = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n*2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  /* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */
  gen_codes(static_ltree, L_CODES+1, bl_count);

  /* The static distance tree is trivial: */
  for (n = 0; n < D_CODES; n++) {
    static_dtree[n*2 + 1]/*.Len*/ = 5;
    static_dtree[n*2]/*.Code*/ = bi_reverse(n, 5);
  }

  // Now data ready and we can init static trees
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS+1, L_CODES, MAX_BITS);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
  static_bl_desc =new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);

  //static_init_done = true;
}


/* ===========================================================================
 * Initialize a new block.
 */
function init_block(s) {
  var n; /* iterates over tree elements */

  /* Initialize the trees. */
  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n*2]/*.Freq*/ = 0; }
  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n*2]/*.Freq*/ = 0; }
  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n*2]/*.Freq*/ = 0; }

  s.dyn_ltree[END_BLOCK*2]/*.Freq*/ = 1;
  s.opt_len = s.static_len = 0;
  s.last_lit = s.matches = 0;
}


/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */
function bi_windup(s)
{
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    //put_byte(s, (Byte)s->bi_buf);
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
}

/* ===========================================================================
 * Copy a stored block, storing first the length and its
 * one's complement if requested.
 */
function copy_block(s, buf, len, header)
//DeflateState *s;
//charf    *buf;    /* the input data */
//unsigned len;     /* its length */
//int      header;  /* true if block header must be written */
{
  bi_windup(s);        /* align on byte boundary */

  if (header) {
    put_short(s, len);
    put_short(s, ~len);
  }
//  while (len--) {
//    put_byte(s, *buf++);
//  }
  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
  s.pending += len;
}

/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */
function smaller(tree, n, m, depth) {
  var _n2 = n*2;
  var _m2 = m*2;
  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
}

/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */
function pqdownheap(s, tree, k)
//    deflate_state *s;
//    ct_data *tree;  /* the tree to restore */
//    int k;               /* node to move down */
{
  var v = s.heap[k];
  var j = k << 1;  /* left son of k */
  while (j <= s.heap_len) {
    /* Set j to the smallest of the two sons: */
    if (j < s.heap_len &&
      smaller(tree, s.heap[j+1], s.heap[j], s.depth)) {
      j++;
    }
    /* Exit if v is smaller than both sons */
    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

    /* Exchange v with the smallest son */
    s.heap[k] = s.heap[j];
    k = j;

    /* And continue down the tree, setting j to the left son of k */
    j <<= 1;
  }
  s.heap[k] = v;
}


// inlined manually
// var SMALLEST = 1;

/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */
function compress_block(s, ltree, dtree)
//    deflate_state *s;
//    const ct_data *ltree; /* literal tree */
//    const ct_data *dtree; /* distance tree */
{
  var dist;           /* distance of matched string */
  var lc;             /* match length or unmatched char (if dist == 0) */
  var lx = 0;         /* running index in l_buf */
  var code;           /* the code to send */
  var extra;          /* number of extra bits to send */

  if (s.last_lit !== 0) {
    do {
      dist = (s.pending_buf[s.d_buf + lx*2] << 8) | (s.pending_buf[s.d_buf + lx*2 + 1]);
      lc = s.pending_buf[s.l_buf + lx];
      lx++;

      if (dist === 0) {
        send_code(s, lc, ltree); /* send a literal byte */
        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
      } else {
        /* Here, lc is the match length - MIN_MATCH */
        code = _length_code[lc];
        send_code(s, code+LITERALS+1, ltree); /* send the length code */
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra);       /* send the extra length bits */
        }
        dist--; /* dist is now the match distance - 1 */
        code = d_code(dist);
        //Assert (code < D_CODES, "bad d_code");

        send_code(s, code, dtree);       /* send the distance code */
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra);   /* send the extra distance bits */
        }
      } /* literal or match pair ? */

      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
      //       "pendingBuf overflow");

    } while (lx < s.last_lit);
  }

  send_code(s, END_BLOCK, ltree);
}


/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */
function build_tree(s, desc)
//    deflate_state *s;
//    tree_desc *desc; /* the tree descriptor */
{
  var tree     = desc.dyn_tree;
  var stree    = desc.stat_desc.static_tree;
  var has_stree = desc.stat_desc.has_stree;
  var elems    = desc.stat_desc.elems;
  var n, m;          /* iterate over heap elements */
  var max_code = -1; /* largest code with non zero frequency */
  var node;          /* new node being created */

  /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE;

  for (n = 0; n < elems; n++) {
    if (tree[n * 2]/*.Freq*/ !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;

    } else {
      tree[n*2 + 1]/*.Len*/ = 0;
    }
  }

  /* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
    tree[node * 2]/*.Freq*/ = 1;
    s.depth[node] = 0;
    s.opt_len--;

    if (has_stree) {
      s.static_len -= stree[node*2 + 1]/*.Len*/;
    }
    /* node is 0 or 1 so it does not have extra bits */
  }
  desc.max_code = max_code;

  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */
  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

  /* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */
  node = elems;              /* next internal node of the tree */
  do {
    //pqremove(s, tree, n);  /* n = node of least frequency */
    /*** pqremove ***/
    n = s.heap[1/*SMALLEST*/];
    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
    pqdownheap(s, tree, 1/*SMALLEST*/);
    /***/

    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
    s.heap[--s.heap_max] = m;

    /* Create a new node father of n and m */
    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n*2 + 1]/*.Dad*/ = tree[m*2 + 1]/*.Dad*/ = node;

    /* and insert the new node in the heap */
    s.heap[1/*SMALLEST*/] = node++;
    pqdownheap(s, tree, 1/*SMALLEST*/);

  } while (s.heap_len >= 2);

  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

  /* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */
  gen_bitlen(s, desc);

  /* The field len is now set, we can generate the bit codes */
  gen_codes(tree, max_code, s.bl_count);
}


/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */
function scan_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree;   /* the tree to be scanned */
//    int max_code;    /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0*2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code+1)*2 + 1]/*.Len*/ = 0xffff; /* guard */

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n+1)*2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      s.bl_tree[curlen * 2]/*.Freq*/ += count;

    } else if (curlen !== 0) {

      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
      s.bl_tree[REP_3_6*2]/*.Freq*/++;

    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10*2]/*.Freq*/++;

    } else {
      s.bl_tree[REPZ_11_138*2]/*.Freq*/++;
    }

    count = 0;
    prevlen = curlen;

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */
function send_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree; /* the tree to be scanned */
//    int max_code;       /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0*2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  /* tree[max_code+1].Len = -1; */  /* guard already set */
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n+1)*2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      //Assert(count >= 3 && count <= 6, " 3_6?");
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count-3, 2);

    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count-3, 3);

    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count-11, 7);
    }

    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */
function build_bl_tree(s) {
  var max_blindex;  /* index of last bit length code of non zero freq */

  /* Determine the bit length frequencies for literal and distance trees */
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

  /* Build the bit length tree: */
  build_tree(s, s.bl_desc);
  /* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */

  /* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */
  for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex]*2 + 1]/*.Len*/ !== 0) {
      break;
    }
  }
  /* Update opt_len to include the bit length tree and counts */
  s.opt_len += 3*(max_blindex+1) + 5+5+4;
  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
  //        s->opt_len, s->static_len));

  return max_blindex;
}


/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */
function send_all_trees(s, lcodes, dcodes, blcodes)
//    deflate_state *s;
//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
{
  var rank;                    /* index in bl_order */

  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
  //        "too many codes");
  //Tracev((stderr, "\nbl counts: "));
  send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */
  send_bits(s, dcodes-1,   5);
  send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */
  for (rank = 0; rank < blcodes; rank++) {
    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    send_bits(s, s.bl_tree[bl_order[rank]*2 + 1]/*.Len*/, 3);
  }
  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_ltree, lcodes-1); /* literal tree */
  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_dtree, dcodes-1); /* distance tree */
  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
}


/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "black list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */
function detect_data_type(s) {
  /* black_mask is the bit mask of black-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */
  var black_mask = 0xf3ffc07f;
  var n;

  /* Check for non-textual ("black-listed") bytes. */
  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
    if ((black_mask & 1) && (s.dyn_ltree[n*2]/*.Freq*/ !== 0)) {
      return Z_BINARY;
    }
  }

  /* Check for textual ("white-listed") bytes. */
  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS; n++) {
    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
      return Z_TEXT;
    }
  }

  /* There are no "black-listed" or "white-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */
  return Z_BINARY;
}


var static_init_done = false;

/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */
function _tr_init(s)
{

  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }

  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

  s.bi_buf = 0;
  s.bi_valid = 0;

  /* Initialize the first block of the first file: */
  init_block(s);
}


/* ===========================================================================
 * Send a stored block
 */
function _tr_stored_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  send_bits(s, (STORED_BLOCK<<1)+(last ? 1 : 0), 3);    /* send block type */
  copy_block(s, buf, stored_len, true); /* with header */
}


/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */
function _tr_align(s) {
  send_bits(s, STATIC_TREES<<1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
}


/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and output the encoded block to the zip file.
 */
function _tr_flush_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block, or NULL if too old */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
  var max_blindex = 0;        /* index of last bit length code of non zero freq */

  /* Build the Huffman trees unless a stored block is forced */
  if (s.level > 0) {

    /* Check if the file is binary or text */
    if (s.strm.data_type === Z_UNKNOWN) {
      s.strm.data_type = detect_data_type(s);
    }

    /* Construct the literal and distance trees */
    build_tree(s, s.l_desc);
    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));

    build_tree(s, s.d_desc);
    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));
    /* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */

    /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */
    max_blindex = build_bl_tree(s);

    /* Determine the best encoding. Compute the block lengths in bytes. */
    opt_lenb = (s.opt_len+3+7) >>> 3;
    static_lenb = (s.static_len+3+7) >>> 3;

    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
    //        s->last_lit));

    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

  } else {
    // Assert(buf != (char*)0, "lost buf");
    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
  }

  if ((stored_len+4 <= opt_lenb) && (buf !== -1)) {
    /* 4: two words for the lengths */

    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */
    _tr_stored_block(s, buf, stored_len, last);

  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

    send_bits(s, (STATIC_TREES<<1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);

  } else {
    send_bits(s, (DYN_TREES<<1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code+1, s.d_desc.max_code+1, max_blindex+1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
  /* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */
  init_block(s);

  if (last) {
    bi_windup(s);
  }
  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
  //       s->compressed_len-7*last));
}

/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */
function _tr_tally(s, dist, lc)
//    deflate_state *s;
//    unsigned dist;  /* distance of matched string */
//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
{
  //var out_length, in_length, dcode;

  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
  s.last_lit++;

  if (dist === 0) {
    /* lc is the unmatched char */
    s.dyn_ltree[lc*2]/*.Freq*/++;
  } else {
    s.matches++;
    /* Here, lc is the match length - MIN_MATCH */
    dist--;             /* dist = match distance - 1 */
    //Assert((ush)dist < (ush)MAX_DIST(s) &&
    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

    s.dyn_ltree[(_length_code[lc]+LITERALS+1) * 2]/*.Freq*/++;
    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
  }

// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility

//#ifdef TRUNCATE_BLOCK
//  /* Try to guess if it is profitable to stop the current block here */
//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
//    /* Compute an upper bound for the compressed length */
//    out_length = s.last_lit*8;
//    in_length = s.strstart - s.block_start;
//
//    for (dcode = 0; dcode < D_CODES; dcode++) {
//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
//    }
//    out_length >>>= 3;
//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
//    //       s->last_lit, in_length, out_length,
//    //       100L - out_length*100L/in_length));
//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
//      return true;
//    }
//  }
//#endif

  return (s.last_lit === s.lit_bufsize-1);
  /* We avoid equality with lit_bufsize because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */
}

exports._tr_init  = _tr_init;
exports._tr_stored_block = _tr_stored_block;
exports._tr_flush_block  = _tr_flush_block;
exports._tr_tally = _tr_tally;
exports._tr_align = _tr_align;

},{"../utils/common":4}],14:[function(require,module,exports){
'use strict';


function ZStream() {
  /* next input byte */
  this.input = null; // JS specific, because we have no pointers
  this.next_in = 0;
  /* number of bytes available at input */
  this.avail_in = 0;
  /* total number of input bytes read so far */
  this.total_in = 0;
  /* next output byte should be put there */
  this.output = null; // JS specific, because we have no pointers
  this.next_out = 0;
  /* remaining free space at output */
  this.avail_out = 0;
  /* total number of bytes output so far */
  this.total_out = 0;
  /* last error message, NULL if no error */
  this.msg = ''/*Z_NULL*/;
  /* not visible by applications */
  this.state = null;
  /* best guess about the data type: binary or text */
  this.data_type = 2/*Z_UNKNOWN*/;
  /* adler32 value of the uncompressed data */
  this.adler = 0;
}

module.exports = ZStream;

},{}],15:[function(require,module,exports){
(function (process,Buffer){
var msg = require('pako/lib/zlib/messages');
var zstream = require('pako/lib/zlib/zstream');
var zlib_deflate = require('pako/lib/zlib/deflate.js');
var zlib_inflate = require('pako/lib/zlib/inflate.js');
var constants = require('pako/lib/zlib/constants');

for (var key in constants) {
  exports[key] = constants[key];
}

// zlib modes
exports.NONE = 0;
exports.DEFLATE = 1;
exports.INFLATE = 2;
exports.GZIP = 3;
exports.GUNZIP = 4;
exports.DEFLATERAW = 5;
exports.INFLATERAW = 6;
exports.UNZIP = 7;

/**
 * Emulate Node's zlib C++ layer for use by the JS layer in index.js
 */
function Zlib(mode) {
  if (mode < exports.DEFLATE || mode > exports.UNZIP)
    throw new TypeError("Bad argument");
    
  this.mode = mode;
  this.init_done = false;
  this.write_in_progress = false;
  this.pending_close = false;
  this.windowBits = 0;
  this.level = 0;
  this.memLevel = 0;
  this.strategy = 0;
  this.dictionary = null;
}

Zlib.prototype.init = function(windowBits, level, memLevel, strategy, dictionary) {
  this.windowBits = windowBits;
  this.level = level;
  this.memLevel = memLevel;
  this.strategy = strategy;
  // dictionary not supported.
  
  if (this.mode === exports.GZIP || this.mode === exports.GUNZIP)
    this.windowBits += 16;
    
  if (this.mode === exports.UNZIP)
    this.windowBits += 32;
    
  if (this.mode === exports.DEFLATERAW || this.mode === exports.INFLATERAW)
    this.windowBits = -this.windowBits;
    
  this.strm = new zstream();
  
  switch (this.mode) {
    case exports.DEFLATE:
    case exports.GZIP:
    case exports.DEFLATERAW:
      var status = zlib_deflate.deflateInit2(
        this.strm,
        this.level,
        exports.Z_DEFLATED,
        this.windowBits,
        this.memLevel,
        this.strategy
      );
      break;
    case exports.INFLATE:
    case exports.GUNZIP:
    case exports.INFLATERAW:
    case exports.UNZIP:
      var status  = zlib_inflate.inflateInit2(
        this.strm,
        this.windowBits
      );
      break;
    default:
      throw new Error("Unknown mode " + this.mode);
  }
  
  if (status !== exports.Z_OK) {
    this._error(status);
    return;
  }
  
  this.write_in_progress = false;
  this.init_done = true;
};

Zlib.prototype.params = function() {
  throw new Error("deflateParams Not supported");
};

Zlib.prototype._writeCheck = function() {
  if (!this.init_done)
    throw new Error("write before init");
    
  if (this.mode === exports.NONE)
    throw new Error("already finalized");
    
  if (this.write_in_progress)
    throw new Error("write already in progress");
    
  if (this.pending_close)
    throw new Error("close is pending");
};

Zlib.prototype.write = function(flush, input, in_off, in_len, out, out_off, out_len) {    
  this._writeCheck();
  this.write_in_progress = true;
  
  var self = this;
  process.nextTick(function() {
    self.write_in_progress = false;
    var res = self._write(flush, input, in_off, in_len, out, out_off, out_len);
    self.callback(res[0], res[1]);
    
    if (self.pending_close)
      self.close();
  });
  
  return this;
};

// set method for Node buffers, used by pako
function bufferSet(data, offset) {
  for (var i = 0; i < data.length; i++) {
    this[offset + i] = data[i];
  }
}

Zlib.prototype.writeSync = function(flush, input, in_off, in_len, out, out_off, out_len) {
  this._writeCheck();
  return this._write(flush, input, in_off, in_len, out, out_off, out_len);
};

Zlib.prototype._write = function(flush, input, in_off, in_len, out, out_off, out_len) {
  this.write_in_progress = true;
  
  if (flush !== exports.Z_NO_FLUSH &&
      flush !== exports.Z_PARTIAL_FLUSH &&
      flush !== exports.Z_SYNC_FLUSH &&
      flush !== exports.Z_FULL_FLUSH &&
      flush !== exports.Z_FINISH &&
      flush !== exports.Z_BLOCK) {
    throw new Error("Invalid flush value");
  }
  
  if (input == null) {
    input = new Buffer(0);
    in_len = 0;
    in_off = 0;
  }
  
  if (out._set)
    out.set = out._set;
  else
    out.set = bufferSet;
  
  var strm = this.strm;
  strm.avail_in = in_len;
  strm.input = input;
  strm.next_in = in_off;
  strm.avail_out = out_len;
  strm.output = out;
  strm.next_out = out_off;
  
  switch (this.mode) {
    case exports.DEFLATE:
    case exports.GZIP:
    case exports.DEFLATERAW:
      var status = zlib_deflate.deflate(strm, flush);
      break;
    case exports.UNZIP:
    case exports.INFLATE:
    case exports.GUNZIP:
    case exports.INFLATERAW:
      var status = zlib_inflate.inflate(strm, flush);
      break;
    default:
      throw new Error("Unknown mode " + this.mode);
  }
  
  if (status !== exports.Z_STREAM_END && status !== exports.Z_OK) {
    this._error(status);
  }
  
  this.write_in_progress = false;
  return [strm.avail_in, strm.avail_out];
};

Zlib.prototype.close = function() {
  if (this.write_in_progress) {
    this.pending_close = true;
    return;
  }
  
  this.pending_close = false;
  
  if (this.mode === exports.DEFLATE || this.mode === exports.GZIP || this.mode === exports.DEFLATERAW) {
    zlib_deflate.deflateEnd(this.strm);
  } else {
    zlib_inflate.inflateEnd(this.strm);
  }
  
  this.mode = exports.NONE;
};

Zlib.prototype.reset = function() {
  switch (this.mode) {
    case exports.DEFLATE:
    case exports.DEFLATERAW:
      var status = zlib_deflate.deflateReset(this.strm);
      break;
    case exports.INFLATE:
    case exports.INFLATERAW:
      var status = zlib_inflate.inflateReset(this.strm);
      break;
  }
  
  if (status !== exports.Z_OK) {
    this._error(status);
  }
};

Zlib.prototype._error = function(status) {
  this.onerror(msg[status] + ': ' + this.strm.msg, status);
  
  this.write_in_progress = false;
  if (this.pending_close)
    this.close();
};

exports.Zlib = Zlib;

}).call(this,require('_process'),require("buffer").Buffer)
},{"_process":219,"buffer":17,"pako/lib/zlib/constants":6,"pako/lib/zlib/deflate.js":8,"pako/lib/zlib/inflate.js":10,"pako/lib/zlib/messages":12,"pako/lib/zlib/zstream":14}],16:[function(require,module,exports){
(function (process,Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var Transform = require('_stream_transform');

var binding = require('./binding');
var util = require('util');
var assert = require('assert').ok;

// zlib doesn't provide these, so kludge them in following the same
// const naming scheme zlib uses.
binding.Z_MIN_WINDOWBITS = 8;
binding.Z_MAX_WINDOWBITS = 15;
binding.Z_DEFAULT_WINDOWBITS = 15;

// fewer than 64 bytes per chunk is stupid.
// technically it could work with as few as 8, but even 64 bytes
// is absurdly low.  Usually a MB or more is best.
binding.Z_MIN_CHUNK = 64;
binding.Z_MAX_CHUNK = Infinity;
binding.Z_DEFAULT_CHUNK = (16 * 1024);

binding.Z_MIN_MEMLEVEL = 1;
binding.Z_MAX_MEMLEVEL = 9;
binding.Z_DEFAULT_MEMLEVEL = 8;

binding.Z_MIN_LEVEL = -1;
binding.Z_MAX_LEVEL = 9;
binding.Z_DEFAULT_LEVEL = binding.Z_DEFAULT_COMPRESSION;

// expose all the zlib constants
Object.keys(binding).forEach(function(k) {
  if (k.match(/^Z/)) exports[k] = binding[k];
});

// translation table for return codes.
exports.codes = {
  Z_OK: binding.Z_OK,
  Z_STREAM_END: binding.Z_STREAM_END,
  Z_NEED_DICT: binding.Z_NEED_DICT,
  Z_ERRNO: binding.Z_ERRNO,
  Z_STREAM_ERROR: binding.Z_STREAM_ERROR,
  Z_DATA_ERROR: binding.Z_DATA_ERROR,
  Z_MEM_ERROR: binding.Z_MEM_ERROR,
  Z_BUF_ERROR: binding.Z_BUF_ERROR,
  Z_VERSION_ERROR: binding.Z_VERSION_ERROR
};

Object.keys(exports.codes).forEach(function(k) {
  exports.codes[exports.codes[k]] = k;
});

exports.Deflate = Deflate;
exports.Inflate = Inflate;
exports.Gzip = Gzip;
exports.Gunzip = Gunzip;
exports.DeflateRaw = DeflateRaw;
exports.InflateRaw = InflateRaw;
exports.Unzip = Unzip;

exports.createDeflate = function(o) {
  return new Deflate(o);
};

exports.createInflate = function(o) {
  return new Inflate(o);
};

exports.createDeflateRaw = function(o) {
  return new DeflateRaw(o);
};

exports.createInflateRaw = function(o) {
  return new InflateRaw(o);
};

exports.createGzip = function(o) {
  return new Gzip(o);
};

exports.createGunzip = function(o) {
  return new Gunzip(o);
};

exports.createUnzip = function(o) {
  return new Unzip(o);
};


// Convenience methods.
// compress/decompress a string or buffer in one step.
exports.deflate = function(buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Deflate(opts), buffer, callback);
};

exports.deflateSync = function(buffer, opts) {
  return zlibBufferSync(new Deflate(opts), buffer);
};

exports.gzip = function(buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Gzip(opts), buffer, callback);
};

exports.gzipSync = function(buffer, opts) {
  return zlibBufferSync(new Gzip(opts), buffer);
};

exports.deflateRaw = function(buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new DeflateRaw(opts), buffer, callback);
};

exports.deflateRawSync = function(buffer, opts) {
  return zlibBufferSync(new DeflateRaw(opts), buffer);
};

exports.unzip = function(buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Unzip(opts), buffer, callback);
};

exports.unzipSync = function(buffer, opts) {
  return zlibBufferSync(new Unzip(opts), buffer);
};

exports.inflate = function(buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Inflate(opts), buffer, callback);
};

exports.inflateSync = function(buffer, opts) {
  return zlibBufferSync(new Inflate(opts), buffer);
};

exports.gunzip = function(buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Gunzip(opts), buffer, callback);
};

exports.gunzipSync = function(buffer, opts) {
  return zlibBufferSync(new Gunzip(opts), buffer);
};

exports.inflateRaw = function(buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new InflateRaw(opts), buffer, callback);
};

exports.inflateRawSync = function(buffer, opts) {
  return zlibBufferSync(new InflateRaw(opts), buffer);
};

function zlibBuffer(engine, buffer, callback) {
  var buffers = [];
  var nread = 0;

  engine.on('error', onError);
  engine.on('end', onEnd);

  engine.end(buffer);
  flow();

  function flow() {
    var chunk;
    while (null !== (chunk = engine.read())) {
      buffers.push(chunk);
      nread += chunk.length;
    }
    engine.once('readable', flow);
  }

  function onError(err) {
    engine.removeListener('end', onEnd);
    engine.removeListener('readable', flow);
    callback(err);
  }

  function onEnd() {
    var buf = Buffer.concat(buffers, nread);
    buffers = [];
    callback(null, buf);
    engine.close();
  }
}

function zlibBufferSync(engine, buffer) {
  if (typeof buffer === 'string')
    buffer = new Buffer(buffer);
  if (!Buffer.isBuffer(buffer))
    throw new TypeError('Not a string or buffer');

  var flushFlag = binding.Z_FINISH;

  return engine._processChunk(buffer, flushFlag);
}

// generic zlib
// minimal 2-byte header
function Deflate(opts) {
  if (!(this instanceof Deflate)) return new Deflate(opts);
  Zlib.call(this, opts, binding.DEFLATE);
}

function Inflate(opts) {
  if (!(this instanceof Inflate)) return new Inflate(opts);
  Zlib.call(this, opts, binding.INFLATE);
}



// gzip - bigger header, same deflate compression
function Gzip(opts) {
  if (!(this instanceof Gzip)) return new Gzip(opts);
  Zlib.call(this, opts, binding.GZIP);
}

function Gunzip(opts) {
  if (!(this instanceof Gunzip)) return new Gunzip(opts);
  Zlib.call(this, opts, binding.GUNZIP);
}



// raw - no header
function DeflateRaw(opts) {
  if (!(this instanceof DeflateRaw)) return new DeflateRaw(opts);
  Zlib.call(this, opts, binding.DEFLATERAW);
}

function InflateRaw(opts) {
  if (!(this instanceof InflateRaw)) return new InflateRaw(opts);
  Zlib.call(this, opts, binding.INFLATERAW);
}


// auto-detect header.
function Unzip(opts) {
  if (!(this instanceof Unzip)) return new Unzip(opts);
  Zlib.call(this, opts, binding.UNZIP);
}


// the Zlib class they all inherit from
// This thing manages the queue of requests, and returns
// true or false if there is anything in the queue when
// you call the .write() method.

function Zlib(opts, mode) {
  this._opts = opts = opts || {};
  this._chunkSize = opts.chunkSize || exports.Z_DEFAULT_CHUNK;

  Transform.call(this, opts);

  if (opts.flush) {
    if (opts.flush !== binding.Z_NO_FLUSH &&
        opts.flush !== binding.Z_PARTIAL_FLUSH &&
        opts.flush !== binding.Z_SYNC_FLUSH &&
        opts.flush !== binding.Z_FULL_FLUSH &&
        opts.flush !== binding.Z_FINISH &&
        opts.flush !== binding.Z_BLOCK) {
      throw new Error('Invalid flush flag: ' + opts.flush);
    }
  }
  this._flushFlag = opts.flush || binding.Z_NO_FLUSH;

  if (opts.chunkSize) {
    if (opts.chunkSize < exports.Z_MIN_CHUNK ||
        opts.chunkSize > exports.Z_MAX_CHUNK) {
      throw new Error('Invalid chunk size: ' + opts.chunkSize);
    }
  }

  if (opts.windowBits) {
    if (opts.windowBits < exports.Z_MIN_WINDOWBITS ||
        opts.windowBits > exports.Z_MAX_WINDOWBITS) {
      throw new Error('Invalid windowBits: ' + opts.windowBits);
    }
  }

  if (opts.level) {
    if (opts.level < exports.Z_MIN_LEVEL ||
        opts.level > exports.Z_MAX_LEVEL) {
      throw new Error('Invalid compression level: ' + opts.level);
    }
  }

  if (opts.memLevel) {
    if (opts.memLevel < exports.Z_MIN_MEMLEVEL ||
        opts.memLevel > exports.Z_MAX_MEMLEVEL) {
      throw new Error('Invalid memLevel: ' + opts.memLevel);
    }
  }

  if (opts.strategy) {
    if (opts.strategy != exports.Z_FILTERED &&
        opts.strategy != exports.Z_HUFFMAN_ONLY &&
        opts.strategy != exports.Z_RLE &&
        opts.strategy != exports.Z_FIXED &&
        opts.strategy != exports.Z_DEFAULT_STRATEGY) {
      throw new Error('Invalid strategy: ' + opts.strategy);
    }
  }

  if (opts.dictionary) {
    if (!Buffer.isBuffer(opts.dictionary)) {
      throw new Error('Invalid dictionary: it should be a Buffer instance');
    }
  }

  this._binding = new binding.Zlib(mode);

  var self = this;
  this._hadError = false;
  this._binding.onerror = function(message, errno) {
    // there is no way to cleanly recover.
    // continuing only obscures problems.
    self._binding = null;
    self._hadError = true;

    var error = new Error(message);
    error.errno = errno;
    error.code = exports.codes[errno];
    self.emit('error', error);
  };

  var level = exports.Z_DEFAULT_COMPRESSION;
  if (typeof opts.level === 'number') level = opts.level;

  var strategy = exports.Z_DEFAULT_STRATEGY;
  if (typeof opts.strategy === 'number') strategy = opts.strategy;

  this._binding.init(opts.windowBits || exports.Z_DEFAULT_WINDOWBITS,
                     level,
                     opts.memLevel || exports.Z_DEFAULT_MEMLEVEL,
                     strategy,
                     opts.dictionary);

  this._buffer = new Buffer(this._chunkSize);
  this._offset = 0;
  this._closed = false;
  this._level = level;
  this._strategy = strategy;

  this.once('end', this.close);
}

util.inherits(Zlib, Transform);

Zlib.prototype.params = function(level, strategy, callback) {
  if (level < exports.Z_MIN_LEVEL ||
      level > exports.Z_MAX_LEVEL) {
    throw new RangeError('Invalid compression level: ' + level);
  }
  if (strategy != exports.Z_FILTERED &&
      strategy != exports.Z_HUFFMAN_ONLY &&
      strategy != exports.Z_RLE &&
      strategy != exports.Z_FIXED &&
      strategy != exports.Z_DEFAULT_STRATEGY) {
    throw new TypeError('Invalid strategy: ' + strategy);
  }

  if (this._level !== level || this._strategy !== strategy) {
    var self = this;
    this.flush(binding.Z_SYNC_FLUSH, function() {
      self._binding.params(level, strategy);
      if (!self._hadError) {
        self._level = level;
        self._strategy = strategy;
        if (callback) callback();
      }
    });
  } else {
    process.nextTick(callback);
  }
};

Zlib.prototype.reset = function() {
  return this._binding.reset();
};

// This is the _flush function called by the transform class,
// internally, when the last chunk has been written.
Zlib.prototype._flush = function(callback) {
  this._transform(new Buffer(0), '', callback);
};

Zlib.prototype.flush = function(kind, callback) {
  var ws = this._writableState;

  if (typeof kind === 'function' || (kind === void 0 && !callback)) {
    callback = kind;
    kind = binding.Z_FULL_FLUSH;
  }

  if (ws.ended) {
    if (callback)
      process.nextTick(callback);
  } else if (ws.ending) {
    if (callback)
      this.once('end', callback);
  } else if (ws.needDrain) {
    var self = this;
    this.once('drain', function() {
      self.flush(callback);
    });
  } else {
    this._flushFlag = kind;
    this.write(new Buffer(0), '', callback);
  }
};

Zlib.prototype.close = function(callback) {
  if (callback)
    process.nextTick(callback);

  if (this._closed)
    return;

  this._closed = true;

  this._binding.close();

  var self = this;
  process.nextTick(function() {
    self.emit('close');
  });
};

Zlib.prototype._transform = function(chunk, encoding, cb) {
  var flushFlag;
  var ws = this._writableState;
  var ending = ws.ending || ws.ended;
  var last = ending && (!chunk || ws.length === chunk.length);

  if (!chunk === null && !Buffer.isBuffer(chunk))
    return cb(new Error('invalid input'));

  // If it's the last chunk, or a final flush, we use the Z_FINISH flush flag.
  // If it's explicitly flushing at some other time, then we use
  // Z_FULL_FLUSH. Otherwise, use Z_NO_FLUSH for maximum compression
  // goodness.
  if (last)
    flushFlag = binding.Z_FINISH;
  else {
    flushFlag = this._flushFlag;
    // once we've flushed the last of the queue, stop flushing and
    // go back to the normal behavior.
    if (chunk.length >= ws.length) {
      this._flushFlag = this._opts.flush || binding.Z_NO_FLUSH;
    }
  }

  var self = this;
  this._processChunk(chunk, flushFlag, cb);
};

Zlib.prototype._processChunk = function(chunk, flushFlag, cb) {
  var availInBefore = chunk && chunk.length;
  var availOutBefore = this._chunkSize - this._offset;
  var inOff = 0;

  var self = this;

  var async = typeof cb === 'function';

  if (!async) {
    var buffers = [];
    var nread = 0;

    var error;
    this.on('error', function(er) {
      error = er;
    });

    do {
      var res = this._binding.writeSync(flushFlag,
                                        chunk, // in
                                        inOff, // in_off
                                        availInBefore, // in_len
                                        this._buffer, // out
                                        this._offset, //out_off
                                        availOutBefore); // out_len
    } while (!this._hadError && callback(res[0], res[1]));

    if (this._hadError) {
      throw error;
    }

    var buf = Buffer.concat(buffers, nread);
    this.close();

    return buf;
  }

  var req = this._binding.write(flushFlag,
                                chunk, // in
                                inOff, // in_off
                                availInBefore, // in_len
                                this._buffer, // out
                                this._offset, //out_off
                                availOutBefore); // out_len

  req.buffer = chunk;
  req.callback = callback;

  function callback(availInAfter, availOutAfter) {
    if (self._hadError)
      return;

    var have = availOutBefore - availOutAfter;
    assert(have >= 0, 'have should not go down');

    if (have > 0) {
      var out = self._buffer.slice(self._offset, self._offset + have);
      self._offset += have;
      // serve some output to the consumer.
      if (async) {
        self.push(out);
      } else {
        buffers.push(out);
        nread += out.length;
      }
    }

    // exhausted the output buffer, or used all the input create a new one.
    if (availOutAfter === 0 || self._offset >= self._chunkSize) {
      availOutBefore = self._chunkSize;
      self._offset = 0;
      self._buffer = new Buffer(self._chunkSize);
    }

    if (availOutAfter === 0) {
      // Not actually done.  Need to reprocess.
      // Also, update the availInBefore to the availInAfter value,
      // so that if we have to hit it a third (fourth, etc.) time,
      // it'll have the correct byte counts.
      inOff += (availInBefore - availInAfter);
      availInBefore = availInAfter;

      if (!async)
        return true;

      var newReq = self._binding.write(flushFlag,
                                       chunk,
                                       inOff,
                                       availInBefore,
                                       self._buffer,
                                       self._offset,
                                       self._chunkSize);
      newReq.callback = callback; // this same function
      newReq.buffer = chunk;
      return;
    }

    if (!async)
      return false;

    // finished with the chunk.
    cb();
  }
};

util.inherits(Deflate, Zlib);
util.inherits(Inflate, Zlib);
util.inherits(Gzip, Zlib);
util.inherits(Gunzip, Zlib);
util.inherits(DeflateRaw, Zlib);
util.inherits(InflateRaw, Zlib);
util.inherits(Unzip, Zlib);

}).call(this,require('_process'),require("buffer").Buffer)
},{"./binding":15,"_process":219,"_stream_transform":231,"assert":2,"buffer":17,"util":236}],17:[function(require,module,exports){
(function (global){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192 // not used by this implementation

var rootParent = {}

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property
 *     on objects.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

function typedArraySupport () {
  function Bar () {}
  try {
    var arr = new Uint8Array(1)
    arr.foo = function () { return 42 }
    arr.constructor = Bar
    return arr.foo() === 42 && // typed array instances can be augmented
        arr.constructor === Bar && // constructor can be set
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (arg) {
  if (!(this instanceof Buffer)) {
    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
    if (arguments.length > 1) return new Buffer(arg, arguments[1])
    return new Buffer(arg)
  }

  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    this.length = 0
    this.parent = undefined
  }

  // Common case.
  if (typeof arg === 'number') {
    return fromNumber(this, arg)
  }

  // Slightly less common case.
  if (typeof arg === 'string') {
    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
  }

  // Unusual.
  return fromObject(this, arg)
}

function fromNumber (that, length) {
  that = allocate(that, length < 0 ? 0 : checked(length) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < length; i++) {
      that[i] = 0
    }
  }
  return that
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'

  // Assumption: byteLength() return value is always < kMaxLength.
  var length = byteLength(string, encoding) | 0
  that = allocate(that, length)

  that.write(string, encoding)
  return that
}

function fromObject (that, object) {
  if (Buffer.isBuffer(object)) return fromBuffer(that, object)

  if (isArray(object)) return fromArray(that, object)

  if (object == null) {
    throw new TypeError('must start with number, buffer, array or string')
  }

  if (typeof ArrayBuffer !== 'undefined') {
    if (object.buffer instanceof ArrayBuffer) {
      return fromTypedArray(that, object)
    }
    if (object instanceof ArrayBuffer) {
      return fromArrayBuffer(that, object)
    }
  }

  if (object.length) return fromArrayLike(that, object)

  return fromJsonObject(that, object)
}

function fromBuffer (that, buffer) {
  var length = checked(buffer.length) | 0
  that = allocate(that, length)
  buffer.copy(that, 0, 0, length)
  return that
}

function fromArray (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

// Duplicate of fromArray() to keep fromArray() monomorphic.
function fromTypedArray (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  // Truncating the elements is probably not what people expect from typed
  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
  // of the old Buffer constructor.
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(array)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromTypedArray(that, new Uint8Array(array))
  }
  return that
}

function fromArrayLike (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
// Returns a zero-length buffer for inputs that don't conform to the spec.
function fromJsonObject (that, object) {
  var array
  var length = 0

  if (object.type === 'Buffer' && isArray(object.data)) {
    array = object.data
    length = checked(array.length) | 0
  }
  that = allocate(that, length)

  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
} else {
  // pre-set for values that may exist in the future
  Buffer.prototype.length = undefined
  Buffer.prototype.parent = undefined
}

function allocate (that, length) {
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that.length = length
  }

  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
  if (fromPool) that.parent = rootParent

  return that
}

function checked (length) {
  // Note: cannot use `length < kMaxLength` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (subject, encoding) {
  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

  var buf = new Buffer(subject, encoding)
  delete buf.parent
  return buf
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  var i = 0
  var len = Math.min(x, y)
  while (i < len) {
    if (a[i] !== b[i]) break

    ++i
  }

  if (i !== len) {
    x = a[i]
    y = b[i]
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

  if (list.length === 0) {
    return new Buffer(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; i++) {
      length += list[i].length
    }
  }

  var buf = new Buffer(length)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

function byteLength (string, encoding) {
  if (typeof string !== 'string') string = '' + string

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'binary':
      // Deprecated
      case 'raw':
      case 'raws':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  start = start | 0
  end = end === undefined || end === Infinity ? this.length : end | 0

  if (!encoding) encoding = 'utf8'
  if (start < 0) start = 0
  if (end > this.length) end = this.length
  if (end <= start) return ''

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'binary':
        return binarySlice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// Even though this property is private, it shouldn't be removed because it is
// used by `is-buffer` to detect buffer instances in Safari 5-7.
Buffer.prototype._isBuffer = true

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return 0
  return Buffer.compare(this, b)
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
  byteOffset >>= 0

  if (this.length === 0) return -1
  if (byteOffset >= this.length) return -1

  // Negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

  if (typeof val === 'string') {
    if (val.length === 0) return -1 // special case: looking for empty string always fails
    return String.prototype.indexOf.call(this, val, byteOffset)
  }
  if (Buffer.isBuffer(val)) {
    return arrayIndexOf(this, val, byteOffset)
  }
  if (typeof val === 'number') {
    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
    }
    return arrayIndexOf(this, [ val ], byteOffset)
  }

  function arrayIndexOf (arr, val, byteOffset) {
    var foundIndex = -1
    for (var i = 0; byteOffset + i < arr.length; i++) {
      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
      } else {
        foundIndex = -1
      }
    }
    return -1
  }

  throw new TypeError('val must be string, number or Buffer')
}

// `get` is deprecated
Buffer.prototype.get = function get (offset) {
  console.log('.get() is deprecated. Access using array indexes instead.')
  return this.readUInt8(offset)
}

// `set` is deprecated
Buffer.prototype.set = function set (v, offset) {
  console.log('.set() is deprecated. Access using array indexes instead.')
  return this.writeUInt8(v, offset)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) throw new Error('Invalid hex string')
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function binaryWrite (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    var swap = encoding
    encoding = offset
    offset = length | 0
    length = swap
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'binary':
        return binaryWrite(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function binarySlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
  }

  if (newBuf.length) newBuf.parent = this.parent || this

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
  if (offset < 0) throw new RangeError('index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; i--) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; i++) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function fill (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (end < start) throw new RangeError('end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

  var i
  if (typeof value === 'number') {
    for (i = start; i < end; i++) {
      this[i] = value
    }
  } else {
    var bytes = utf8ToBytes(value.toString())
    var len = bytes.length
    for (i = start; i < end; i++) {
      this[i] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; i++) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"base64-js":18,"ieee754":19,"isarray":20}],18:[function(require,module,exports){
;(function (exports) {
  'use strict'

  var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

  var PLUS = '+'.charCodeAt(0)
  var SLASH = '/'.charCodeAt(0)
  var NUMBER = '0'.charCodeAt(0)
  var LOWER = 'a'.charCodeAt(0)
  var UPPER = 'A'.charCodeAt(0)
  var PLUS_URL_SAFE = '-'.charCodeAt(0)
  var SLASH_URL_SAFE = '_'.charCodeAt(0)

  function decode (elt) {
    var code = elt.charCodeAt(0)
    if (code === PLUS || code === PLUS_URL_SAFE) return 62 // '+'
    if (code === SLASH || code === SLASH_URL_SAFE) return 63 // '/'
    if (code < NUMBER) return -1 // no match
    if (code < NUMBER + 10) return code - NUMBER + 26 + 26
    if (code < UPPER + 26) return code - UPPER
    if (code < LOWER + 26) return code - LOWER + 26
  }

  function b64ToByteArray (b64) {
    var i, j, l, tmp, placeHolders, arr

    if (b64.length % 4 > 0) {
      throw new Error('Invalid string. Length must be a multiple of 4')
    }

    // the number of equal signs (place holders)
    // if there are two placeholders, than the two characters before it
    // represent one byte
    // if there is only one, then the three characters before it represent 2 bytes
    // this is just a cheap hack to not do indexOf twice
    var len = b64.length
    placeHolders = b64.charAt(len - 2) === '=' ? 2 : b64.charAt(len - 1) === '=' ? 1 : 0

    // base64 is 4/3 + up to two characters of the original data
    arr = new Arr(b64.length * 3 / 4 - placeHolders)

    // if there are placeholders, only get up to the last complete 4 chars
    l = placeHolders > 0 ? b64.length - 4 : b64.length

    var L = 0

    function push (v) {
      arr[L++] = v
    }

    for (i = 0, j = 0; i < l; i += 4, j += 3) {
      tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
      push((tmp & 0xFF0000) >> 16)
      push((tmp & 0xFF00) >> 8)
      push(tmp & 0xFF)
    }

    if (placeHolders === 2) {
      tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
      push(tmp & 0xFF)
    } else if (placeHolders === 1) {
      tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
      push((tmp >> 8) & 0xFF)
      push(tmp & 0xFF)
    }

    return arr
  }

  function uint8ToBase64 (uint8) {
    var i
    var extraBytes = uint8.length % 3 // if we have 1 byte left, pad 2 bytes
    var output = ''
    var temp, length

    function encode (num) {
      return lookup.charAt(num)
    }

    function tripletToBase64 (num) {
      return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
    }

    // go through the array every three bytes, we'll deal with trailing stuff later
    for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
      temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
      output += tripletToBase64(temp)
    }

    // pad the end with zeros, but make sure to not forget the extra bytes
    switch (extraBytes) {
      case 1:
        temp = uint8[uint8.length - 1]
        output += encode(temp >> 2)
        output += encode((temp << 4) & 0x3F)
        output += '=='
        break
      case 2:
        temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
        output += encode(temp >> 10)
        output += encode((temp >> 4) & 0x3F)
        output += encode((temp << 2) & 0x3F)
        output += '='
        break
      default:
        break
    }

    return output
  }

  exports.toByteArray = b64ToByteArray
  exports.fromByteArray = uint8ToBase64
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

},{}],19:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],20:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],21:[function(require,module,exports){
'use strict'

exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes')
exports.createHash = exports.Hash = require('create-hash')
exports.createHmac = exports.Hmac = require('create-hmac')

var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(Object.keys(require('browserify-sign/algos')))
exports.getHashes = function () {
  return hashes
}

var p = require('pbkdf2')
exports.pbkdf2 = p.pbkdf2
exports.pbkdf2Sync = p.pbkdf2Sync

var aes = require('browserify-cipher')
;[
  'Cipher',
  'createCipher',
  'Cipheriv',
  'createCipheriv',
  'Decipher',
  'createDecipher',
  'Decipheriv',
  'createDecipheriv',
  'getCiphers',
  'listCiphers'
].forEach(function (key) {
  exports[key] = aes[key]
})

var dh = require('diffie-hellman')
;[
  'DiffieHellmanGroup',
  'createDiffieHellmanGroup',
  'getDiffieHellman',
  'createDiffieHellman',
  'DiffieHellman'
].forEach(function (key) {
  exports[key] = dh[key]
})

var sign = require('browserify-sign')
;[
  'createSign',
  'Sign',
  'createVerify',
  'Verify'
].forEach(function (key) {
  exports[key] = sign[key]
})

exports.createECDH = require('create-ecdh')

var publicEncrypt = require('public-encrypt')

;[
  'publicEncrypt',
  'privateEncrypt',
  'publicDecrypt',
  'privateDecrypt'
].forEach(function (key) {
  exports[key] = publicEncrypt[key]
})

// the least I can do is make error messages for the rest of the node.js/crypto api.
;[
  'createCredentials'
].forEach(function (name) {
  exports[name] = function () {
    throw new Error([
      'sorry, ' + name + ' is not implemented yet',
      'we accept pull requests',
      'https://github.com/crypto-browserify/crypto-browserify'
    ].join('\n'))
  }
})

},{"browserify-cipher":22,"browserify-sign":52,"browserify-sign/algos":51,"create-ecdh":119,"create-hash":145,"create-hmac":158,"diffie-hellman":159,"pbkdf2":166,"public-encrypt":167,"randombytes":212}],22:[function(require,module,exports){
var ebtk = require('evp_bytestokey')
var aes = require('browserify-aes/browser')
var DES = require('browserify-des')
var desModes = require('browserify-des/modes')
var aesModes = require('browserify-aes/modes')
function createCipher (suite, password) {
  var keyLen, ivLen
  suite = suite.toLowerCase()
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, false, keyLen, ivLen)
  return createCipheriv(suite, keys.key, keys.iv)
}
function createDecipher (suite, password) {
  var keyLen, ivLen
  suite = suite.toLowerCase()
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, false, keyLen, ivLen)
  return createDecipheriv(suite, keys.key, keys.iv)
}

function createCipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) {
    return aes.createCipheriv(suite, key, iv)
  } else if (desModes[suite]) {
    return new DES({
      key: key,
      iv: iv,
      mode: suite
    })
  } else {
    throw new TypeError('invalid suite type')
  }
}
function createDecipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) {
    return aes.createDecipheriv(suite, key, iv)
  } else if (desModes[suite]) {
    return new DES({
      key: key,
      iv: iv,
      mode: suite,
      decrypt: true
    })
  } else {
    throw new TypeError('invalid suite type')
  }
}
exports.createCipher = exports.Cipher = createCipher
exports.createCipheriv = exports.Cipheriv = createCipheriv
exports.createDecipher = exports.Decipher = createDecipher
exports.createDecipheriv = exports.Decipheriv = createDecipheriv
function getCiphers () {
  return Object.keys(desModes).concat(aes.getCiphers())
}
exports.listCiphers = exports.getCiphers = getCiphers

},{"browserify-aes/browser":25,"browserify-aes/modes":29,"browserify-des":40,"browserify-des/modes":41,"evp_bytestokey":50}],23:[function(require,module,exports){
(function (Buffer){
// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec

// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

var uint_max = Math.pow(2, 32)
function fixup_uint32 (x) {
  var ret, x_pos
  ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x
  return ret
}
function scrub_vec (v) {
  for (var i = 0; i < v.length; v++) {
    v[i] = 0
  }
  return false
}

function Global () {
  this.SBOX = []
  this.INV_SBOX = []
  this.SUB_MIX = [[], [], [], []]
  this.INV_SUB_MIX = [[], [], [], []]
  this.init()
  this.RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
}

Global.prototype.init = function () {
  var d, i, sx, t, x, x2, x4, x8, xi, _i
  d = (function () {
    var _i, _results
    _results = []
    for (i = _i = 0; _i < 256; i = ++_i) {
      if (i < 128) {
        _results.push(i << 1)
      } else {
        _results.push((i << 1) ^ 0x11b)
      }
    }
    return _results
  })()
  x = 0
  xi = 0
  for (i = _i = 0; _i < 256; i = ++_i) {
    sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
    this.SBOX[x] = sx
    this.INV_SBOX[sx] = x
    x2 = d[x]
    x4 = d[x2]
    x8 = d[x4]
    t = (d[sx] * 0x101) ^ (sx * 0x1010100)
    this.SUB_MIX[0][x] = (t << 24) | (t >>> 8)
    this.SUB_MIX[1][x] = (t << 16) | (t >>> 16)
    this.SUB_MIX[2][x] = (t << 8) | (t >>> 24)
    this.SUB_MIX[3][x] = t
    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
    this.INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
    this.INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
    this.INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
    this.INV_SUB_MIX[3][sx] = t
    if (x === 0) {
      x = xi = 1
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]]
      xi ^= d[d[xi]]
    }
  }
  return true
}

var G = new Global()

AES.blockSize = 4 * 4

AES.prototype.blockSize = AES.blockSize

AES.keySize = 256 / 8

AES.prototype.keySize = AES.keySize

function bufferToArray (buf) {
  var len = buf.length / 4
  var out = new Array(len)
  var i = -1
  while (++i < len) {
    out[i] = buf.readUInt32BE(i * 4)
  }
  return out
}
function AES (key) {
  this._key = bufferToArray(key)
  this._doReset()
}

AES.prototype._doReset = function () {
  var invKsRow, keySize, keyWords, ksRow, ksRows, t
  keyWords = this._key
  keySize = keyWords.length
  this._nRounds = keySize + 6
  ksRows = (this._nRounds + 1) * 4
  this._keySchedule = []
  for (ksRow = 0; ksRow < ksRows; ksRow++) {
    this._keySchedule[ksRow] = ksRow < keySize ? keyWords[ksRow] : (t = this._keySchedule[ksRow - 1], (ksRow % keySize) === 0 ? (t = (t << 8) | (t >>> 24), t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff], t ^= G.RCON[(ksRow / keySize) | 0] << 24) : keySize > 6 && ksRow % keySize === 4 ? t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff] : void 0, this._keySchedule[ksRow - keySize] ^ t)
  }
  this._invKeySchedule = []
  for (invKsRow = 0; invKsRow < ksRows; invKsRow++) {
    ksRow = ksRows - invKsRow
    t = this._keySchedule[ksRow - (invKsRow % 4 ? 0 : 4)]
    this._invKeySchedule[invKsRow] = invKsRow < 4 || ksRow <= 4 ? t : G.INV_SUB_MIX[0][G.SBOX[t >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[(t >>> 16) & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[(t >>> 8) & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[t & 0xff]]
  }
  return true
}

AES.prototype.encryptBlock = function (M) {
  M = bufferToArray(new Buffer(M))
  var out = this._doCryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}

AES.prototype.decryptBlock = function (M) {
  M = bufferToArray(new Buffer(M))
  var temp = [M[3], M[1]]
  M[1] = temp[0]
  M[3] = temp[1]
  var out = this._doCryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[3], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[1], 12)
  return buf
}

AES.prototype.scrub = function () {
  scrub_vec(this._keySchedule)
  scrub_vec(this._invKeySchedule)
  scrub_vec(this._key)
}

AES.prototype._doCryptBlock = function (M, keySchedule, SUB_MIX, SBOX) {
  var ksRow, s0, s1, s2, s3, t0, t1, t2, t3

  s0 = M[0] ^ keySchedule[0]
  s1 = M[1] ^ keySchedule[1]
  s2 = M[2] ^ keySchedule[2]
  s3 = M[3] ^ keySchedule[3]
  ksRow = 4
  for (var round = 1; round < this._nRounds; round++) {
    t0 = SUB_MIX[0][s0 >>> 24] ^ SUB_MIX[1][(s1 >>> 16) & 0xff] ^ SUB_MIX[2][(s2 >>> 8) & 0xff] ^ SUB_MIX[3][s3 & 0xff] ^ keySchedule[ksRow++]
    t1 = SUB_MIX[0][s1 >>> 24] ^ SUB_MIX[1][(s2 >>> 16) & 0xff] ^ SUB_MIX[2][(s3 >>> 8) & 0xff] ^ SUB_MIX[3][s0 & 0xff] ^ keySchedule[ksRow++]
    t2 = SUB_MIX[0][s2 >>> 24] ^ SUB_MIX[1][(s3 >>> 16) & 0xff] ^ SUB_MIX[2][(s0 >>> 8) & 0xff] ^ SUB_MIX[3][s1 & 0xff] ^ keySchedule[ksRow++]
    t3 = SUB_MIX[0][s3 >>> 24] ^ SUB_MIX[1][(s0 >>> 16) & 0xff] ^ SUB_MIX[2][(s1 >>> 8) & 0xff] ^ SUB_MIX[3][s2 & 0xff] ^ keySchedule[ksRow++]
    s0 = t0
    s1 = t1
    s2 = t2
    s3 = t3
  }
  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
  return [
    fixup_uint32(t0),
    fixup_uint32(t1),
    fixup_uint32(t2),
    fixup_uint32(t3)
  ]
}

exports.AES = AES

}).call(this,require("buffer").Buffer)
},{"buffer":17}],24:[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('cipher-base')
var inherits = require('inherits')
var GHASH = require('./ghash')
var xor = require('buffer-xor')
inherits(StreamCipher, Transform)
module.exports = StreamCipher

function StreamCipher (mode, key, iv, decrypt) {
  if (!(this instanceof StreamCipher)) {
    return new StreamCipher(mode, key, iv)
  }
  Transform.call(this)
  this._finID = Buffer.concat([iv, new Buffer([0, 0, 0, 1])])
  iv = Buffer.concat([iv, new Buffer([0, 0, 0, 2])])
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  this._cache = new Buffer('')
  this._secCache = new Buffer('')
  this._decrypt = decrypt
  this._alen = 0
  this._len = 0
  iv.copy(this._prev)
  this._mode = mode
  var h = new Buffer(4)
  h.fill(0)
  this._ghash = new GHASH(this._cipher.encryptBlock(h))
  this._authTag = null
  this._called = false
}
StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - (this._alen % 16)
    if (rump < 16) {
      rump = new Buffer(rump)
      rump.fill(0)
      this._ghash.update(rump)
    }
  }
  this._called = true
  var out = this._mode.encrypt(this, chunk)
  if (this._decrypt) {
    this._ghash.update(chunk)
  } else {
    this._ghash.update(out)
  }
  this._len += chunk.length
  return out
}
StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) {
    throw new Error('Unsupported state or unable to authenticate data')
  }
  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
  if (this._decrypt) {
    if (xorTest(tag, this._authTag)) {
      throw new Error('Unsupported state or unable to authenticate data')
    }
  } else {
    this._authTag = tag
  }
  this._cipher.scrub()
}
StreamCipher.prototype.getAuthTag = function getAuthTag () {
  if (!this._decrypt && Buffer.isBuffer(this._authTag)) {
    return this._authTag
  } else {
    throw new Error('Attempting to get auth tag in unsupported state')
  }
}
StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
  if (this._decrypt) {
    this._authTag = tag
  } else {
    throw new Error('Attempting to set auth tag in unsupported state')
  }
}
StreamCipher.prototype.setAAD = function setAAD (buf) {
  if (!this._called) {
    this._ghash.update(buf)
    this._alen += buf.length
  } else {
    throw new Error('Attempting to set AAD in unsupported state')
  }
}
function xorTest (a, b) {
  var out = 0
  if (a.length !== b.length) {
    out++
  }
  var len = Math.min(a.length, b.length)
  var i = -1
  while (++i < len) {
    out += (a[i] ^ b[i])
  }
  return out
}

}).call(this,require("buffer").Buffer)
},{"./aes":23,"./ghash":28,"buffer":17,"buffer-xor":37,"cipher-base":38,"inherits":214}],25:[function(require,module,exports){
var ciphers = require('./encrypter')
exports.createCipher = exports.Cipher = ciphers.createCipher
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv
var deciphers = require('./decrypter')
exports.createDecipher = exports.Decipher = deciphers.createDecipher
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv
var modes = require('./modes')
function getCiphers () {
  return Object.keys(modes)
}
exports.listCiphers = exports.getCiphers = getCiphers

},{"./decrypter":26,"./encrypter":27,"./modes":29}],26:[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('cipher-base')
var inherits = require('inherits')
var modes = require('./modes')
var StreamCipher = require('./streamCipher')
var AuthCipher = require('./authCipher')
var ebtk = require('evp_bytestokey')

inherits(Decipher, Transform)
function Decipher (mode, key, iv) {
  if (!(this instanceof Decipher)) {
    return new Decipher(mode, key, iv)
  }
  Transform.call(this)
  this._cache = new Splitter()
  this._last = void 0
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  iv.copy(this._prev)
  this._mode = mode
  this._autopadding = true
}
Decipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get(this._autopadding))) {
    thing = this._mode.decrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}
Decipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk))
  } else if (chunk) {
    throw new Error('data not multiple of block length')
  }
}
Decipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
}
function Splitter () {
  if (!(this instanceof Splitter)) {
    return new Splitter()
  }
  this.cache = new Buffer('')
}
Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function (autoPadding) {
  var out
  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  }
  return null
}
Splitter.prototype.flush = function () {
  if (this.cache.length) {
    return this.cache
  }
}
function unpad (last) {
  var padded = last[15]
  var i = -1
  while (++i < padded) {
    if (last[(i + (16 - padded))] !== padded) {
      throw new Error('unable to decrypt data')
    }
  }
  if (padded === 16) {
    return
  }
  return last.slice(0, 16 - padded)
}

var modelist = {
  ECB: require('./modes/ecb'),
  CBC: require('./modes/cbc'),
  CFB: require('./modes/cfb'),
  CFB8: require('./modes/cfb8'),
  CFB1: require('./modes/cfb1'),
  OFB: require('./modes/ofb'),
  CTR: require('./modes/ctr'),
  GCM: require('./modes/ctr')
}

function createDecipheriv (suite, password, iv) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  if (typeof iv === 'string') {
    iv = new Buffer(iv)
  }
  if (typeof password === 'string') {
    password = new Buffer(password)
  }
  if (password.length !== config.key / 8) {
    throw new TypeError('invalid key length ' + password.length)
  }
  if (iv.length !== config.iv) {
    throw new TypeError('invalid iv length ' + iv.length)
  }
  if (config.type === 'stream') {
    return new StreamCipher(modelist[config.mode], password, iv, true)
  } else if (config.type === 'auth') {
    return new AuthCipher(modelist[config.mode], password, iv, true)
  }
  return new Decipher(modelist[config.mode], password, iv)
}

function createDecipher (suite, password) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, false, config.key, config.iv)
  return createDecipheriv(suite, keys.key, keys.iv)
}
exports.createDecipher = createDecipher
exports.createDecipheriv = createDecipheriv

}).call(this,require("buffer").Buffer)
},{"./aes":23,"./authCipher":24,"./modes":29,"./modes/cbc":30,"./modes/cfb":31,"./modes/cfb1":32,"./modes/cfb8":33,"./modes/ctr":34,"./modes/ecb":35,"./modes/ofb":36,"./streamCipher":39,"buffer":17,"cipher-base":38,"evp_bytestokey":50,"inherits":214}],27:[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('cipher-base')
var inherits = require('inherits')
var modes = require('./modes')
var ebtk = require('evp_bytestokey')
var StreamCipher = require('./streamCipher')
var AuthCipher = require('./authCipher')
inherits(Cipher, Transform)
function Cipher (mode, key, iv) {
  if (!(this instanceof Cipher)) {
    return new Cipher(mode, key, iv)
  }
  Transform.call(this)
  this._cache = new Splitter()
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  iv.copy(this._prev)
  this._mode = mode
  this._autopadding = true
}
Cipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get())) {
    thing = this._mode.encrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}
Cipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk)
    this._cipher.scrub()
    return chunk
  } else if (chunk.toString('hex') !== '10101010101010101010101010101010') {
    this._cipher.scrub()
    throw new Error('data not multiple of block length')
  }
}
Cipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
}

function Splitter () {
  if (!(this instanceof Splitter)) {
    return new Splitter()
  }
  this.cache = new Buffer('')
}
Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    return out
  }
  return null
}
Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length
  var padBuff = new Buffer(len)

  var i = -1
  while (++i < len) {
    padBuff.writeUInt8(len, i)
  }
  var out = Buffer.concat([this.cache, padBuff])
  return out
}
var modelist = {
  ECB: require('./modes/ecb'),
  CBC: require('./modes/cbc'),
  CFB: require('./modes/cfb'),
  CFB8: require('./modes/cfb8'),
  CFB1: require('./modes/cfb1'),
  OFB: require('./modes/ofb'),
  CTR: require('./modes/ctr'),
  GCM: require('./modes/ctr')
}

function createCipheriv (suite, password, iv) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  if (typeof iv === 'string') {
    iv = new Buffer(iv)
  }
  if (typeof password === 'string') {
    password = new Buffer(password)
  }
  if (password.length !== config.key / 8) {
    throw new TypeError('invalid key length ' + password.length)
  }
  if (iv.length !== config.iv) {
    throw new TypeError('invalid iv length ' + iv.length)
  }
  if (config.type === 'stream') {
    return new StreamCipher(modelist[config.mode], password, iv)
  } else if (config.type === 'auth') {
    return new AuthCipher(modelist[config.mode], password, iv)
  }
  return new Cipher(modelist[config.mode], password, iv)
}
function createCipher (suite, password) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, false, config.key, config.iv)
  return createCipheriv(suite, keys.key, keys.iv)
}

exports.createCipheriv = createCipheriv
exports.createCipher = createCipher

}).call(this,require("buffer").Buffer)
},{"./aes":23,"./authCipher":24,"./modes":29,"./modes/cbc":30,"./modes/cfb":31,"./modes/cfb1":32,"./modes/cfb8":33,"./modes/ctr":34,"./modes/ecb":35,"./modes/ofb":36,"./streamCipher":39,"buffer":17,"cipher-base":38,"evp_bytestokey":50,"inherits":214}],28:[function(require,module,exports){
(function (Buffer){
var zeros = new Buffer(16)
zeros.fill(0)
module.exports = GHASH
function GHASH (key) {
  this.h = key
  this.state = new Buffer(16)
  this.state.fill(0)
  this.cache = new Buffer('')
}
// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function (block) {
  var i = -1
  while (++i < block.length) {
    this.state[i] ^= block[i]
  }
  this._multiply()
}

GHASH.prototype._multiply = function () {
  var Vi = toArray(this.h)
  var Zi = [0, 0, 0, 0]
  var j, xi, lsb_Vi
  var i = -1
  while (++i < 128) {
    xi = (this.state[~~(i / 8)] & (1 << (7 - i % 8))) !== 0
    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi = xor(Zi, Vi)
    }

    // Store the value of LSB(V_i)
    lsb_Vi = (Vi[3] & 1) !== 0

    // V_i+1 = V_i >> 1
    for (j = 3; j > 0; j--) {
      Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
    }
    Vi[0] = Vi[0] >>> 1

    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
    if (lsb_Vi) {
      Vi[0] = Vi[0] ^ (0xe1 << 24)
    }
  }
  this.state = fromArray(Zi)
}
GHASH.prototype.update = function (buf) {
  this.cache = Buffer.concat([this.cache, buf])
  var chunk
  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    this.ghash(chunk)
  }
}
GHASH.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer.concat([this.cache, zeros], 16))
  }
  this.ghash(fromArray([
    0, abl,
    0, bl
  ]))
  return this.state
}

function toArray (buf) {
  return [
    buf.readUInt32BE(0),
    buf.readUInt32BE(4),
    buf.readUInt32BE(8),
    buf.readUInt32BE(12)
  ]
}
function fromArray (out) {
  out = out.map(fixup_uint32)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}
var uint_max = Math.pow(2, 32)
function fixup_uint32 (x) {
  var ret, x_pos
  ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x
  return ret
}
function xor (a, b) {
  return [
    a[0] ^ b[0],
    a[1] ^ b[1],
    a[2] ^ b[2],
    a[3] ^ b[3]
  ]
}

}).call(this,require("buffer").Buffer)
},{"buffer":17}],29:[function(require,module,exports){
exports['aes-128-ecb'] = {
  cipher: 'AES',
  key: 128,
  iv: 0,
  mode: 'ECB',
  type: 'block'
}
exports['aes-192-ecb'] = {
  cipher: 'AES',
  key: 192,
  iv: 0,
  mode: 'ECB',
  type: 'block'
}
exports['aes-256-ecb'] = {
  cipher: 'AES',
  key: 256,
  iv: 0,
  mode: 'ECB',
  type: 'block'
}
exports['aes-128-cbc'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CBC',
  type: 'block'
}
exports['aes-192-cbc'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CBC',
  type: 'block'
}
exports['aes-256-cbc'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CBC',
  type: 'block'
}
exports['aes128'] = exports['aes-128-cbc']
exports['aes192'] = exports['aes-192-cbc']
exports['aes256'] = exports['aes-256-cbc']
exports['aes-128-cfb'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CFB',
  type: 'stream'
}
exports['aes-192-cfb'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CFB',
  type: 'stream'
}
exports['aes-256-cfb'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CFB',
  type: 'stream'
}
exports['aes-128-cfb8'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CFB8',
  type: 'stream'
}
exports['aes-192-cfb8'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CFB8',
  type: 'stream'
}
exports['aes-256-cfb8'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CFB8',
  type: 'stream'
}
exports['aes-128-cfb1'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CFB1',
  type: 'stream'
}
exports['aes-192-cfb1'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CFB1',
  type: 'stream'
}
exports['aes-256-cfb1'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CFB1',
  type: 'stream'
}
exports['aes-128-ofb'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'OFB',
  type: 'stream'
}
exports['aes-192-ofb'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'OFB',
  type: 'stream'
}
exports['aes-256-ofb'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'OFB',
  type: 'stream'
}
exports['aes-128-ctr'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CTR',
  type: 'stream'
}
exports['aes-192-ctr'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CTR',
  type: 'stream'
}
exports['aes-256-ctr'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CTR',
  type: 'stream'
}
exports['aes-128-gcm'] = {
  cipher: 'AES',
  key: 128,
  iv: 12,
  mode: 'GCM',
  type: 'auth'
}
exports['aes-192-gcm'] = {
  cipher: 'AES',
  key: 192,
  iv: 12,
  mode: 'GCM',
  type: 'auth'
}
exports['aes-256-gcm'] = {
  cipher: 'AES',
  key: 256,
  iv: 12,
  mode: 'GCM',
  type: 'auth'
}

},{}],30:[function(require,module,exports){
var xor = require('buffer-xor')

exports.encrypt = function (self, block) {
  var data = xor(block, self._prev)

  self._prev = self._cipher.encryptBlock(data)
  return self._prev
}

exports.decrypt = function (self, block) {
  var pad = self._prev

  self._prev = block
  var out = self._cipher.decryptBlock(block)

  return xor(out, pad)
}

},{"buffer-xor":37}],31:[function(require,module,exports){
(function (Buffer){
var xor = require('buffer-xor')

exports.encrypt = function (self, data, decrypt) {
  var out = new Buffer('')
  var len

  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev)
      self._prev = new Buffer('')
    }

    if (self._cache.length <= data.length) {
      len = self._cache.length
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
      data = data.slice(len)
    } else {
      out = Buffer.concat([out, encryptStart(self, data, decrypt)])
      break
    }
  }

  return out
}
function encryptStart (self, data, decrypt) {
  var len = data.length
  var out = xor(data, self._cache)
  self._cache = self._cache.slice(len)
  self._prev = Buffer.concat([self._prev, decrypt ? data : out])
  return out
}

}).call(this,require("buffer").Buffer)
},{"buffer":17,"buffer-xor":37}],32:[function(require,module,exports){
(function (Buffer){
function encryptByte (self, byteParam, decrypt) {
  var pad
  var i = -1
  var len = 8
  var out = 0
  var bit, value
  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev)
    bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
    value = pad[0] ^ bit
    out += ((value & 0x80) >> (i % 8))
    self._prev = shiftIn(self._prev, decrypt ? bit : value)
  }
  return out
}
exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = new Buffer(len)
  var i = -1
  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }
  return out
}
function shiftIn (buffer, value) {
  var len = buffer.length
  var i = -1
  var out = new Buffer(buffer.length)
  buffer = Buffer.concat([buffer, new Buffer([value])])
  while (++i < len) {
    out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
  }
  return out
}

}).call(this,require("buffer").Buffer)
},{"buffer":17}],33:[function(require,module,exports){
(function (Buffer){
function encryptByte (self, byteParam, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev)
  var out = pad[0] ^ byteParam
  self._prev = Buffer.concat([self._prev.slice(1), new Buffer([decrypt ? byteParam : out])])
  return out
}
exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = new Buffer(len)
  var i = -1
  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }
  return out
}

}).call(this,require("buffer").Buffer)
},{"buffer":17}],34:[function(require,module,exports){
(function (Buffer){
var xor = require('buffer-xor')

function incr32 (iv) {
  var len = iv.length
  var item
  while (len--) {
    item = iv.readUInt8(len)
    if (item === 255) {
      iv.writeUInt8(0, len)
    } else {
      item++
      iv.writeUInt8(item, len)
      break
    }
  }
}

function getBlock (self) {
  var out = self._cipher.encryptBlock(self._prev)
  incr32(self._prev)
  return out
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }
  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

}).call(this,require("buffer").Buffer)
},{"buffer":17,"buffer-xor":37}],35:[function(require,module,exports){
exports.encrypt = function (self, block) {
  return self._cipher.encryptBlock(block)
}
exports.decrypt = function (self, block) {
  return self._cipher.decryptBlock(block)
}

},{}],36:[function(require,module,exports){
(function (Buffer){
var xor = require('buffer-xor')

function getBlock (self) {
  self._prev = self._cipher.encryptBlock(self._prev)
  return self._prev
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }

  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

}).call(this,require("buffer").Buffer)
},{"buffer":17,"buffer-xor":37}],37:[function(require,module,exports){
(function (Buffer){
module.exports = function xor (a, b) {
  var length = Math.min(a.length, b.length)
  var buffer = new Buffer(length)

  for (var i = 0; i < length; ++i) {
    buffer[i] = a[i] ^ b[i]
  }

  return buffer
}

}).call(this,require("buffer").Buffer)
},{"buffer":17}],38:[function(require,module,exports){
(function (Buffer){
var Transform = require('stream').Transform
var inherits = require('inherits')
var StringDecoder = require('string_decoder').StringDecoder
module.exports = CipherBase
inherits(CipherBase, Transform)
function CipherBase (hashMode) {
  Transform.call(this)
  this.hashMode = typeof hashMode === 'string'
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest
  } else {
    this.final = this._finalOrDigest
  }
  this._decoder = null
  this._encoding = null
}
CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = new Buffer(data, inputEnc)
  }
  var outData = this._update(data)
  if (this.hashMode) {
    return this
  }
  if (outputEnc) {
    outData = this._toString(outData, outputEnc)
  }
  return outData
}

CipherBase.prototype.setAutoPadding = function () {}

CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state')
}

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state')
}

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state')
}

CipherBase.prototype._transform = function (data, _, next) {
  var err
  try {
    if (this.hashMode) {
      this._update(data)
    } else {
      this.push(this._update(data))
    }
  } catch (e) {
    err = e
  } finally {
    next(err)
  }
}
CipherBase.prototype._flush = function (done) {
  var err
  try {
    this.push(this._final())
  } catch (e) {
    err = e
  } finally {
    done(err)
  }
}
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this._final() || new Buffer('')
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true)
  }
  return outData
}

CipherBase.prototype._toString = function (value, enc, final) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc)
    this._encoding = enc
  }
  if (this._encoding !== enc) {
    throw new Error('can\'t switch encodings')
  }
  var out = this._decoder.write(value)
  if (final) {
    out += this._decoder.end()
  }
  return out
}

}).call(this,require("buffer").Buffer)
},{"buffer":17,"inherits":214,"stream":233,"string_decoder":234}],39:[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('cipher-base')
var inherits = require('inherits')

inherits(StreamCipher, Transform)
module.exports = StreamCipher
function StreamCipher (mode, key, iv, decrypt) {
  if (!(this instanceof StreamCipher)) {
    return new StreamCipher(mode, key, iv)
  }
  Transform.call(this)
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  this._cache = new Buffer('')
  this._secCache = new Buffer('')
  this._decrypt = decrypt
  iv.copy(this._prev)
  this._mode = mode
}
StreamCipher.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt)
}
StreamCipher.prototype._final = function () {
  this._cipher.scrub()
}

}).call(this,require("buffer").Buffer)
},{"./aes":23,"buffer":17,"cipher-base":38,"inherits":214}],40:[function(require,module,exports){
(function (Buffer){
var CipherBase = require('cipher-base')
var des = require('des.js')
var inherits = require('inherits')

var modes = {
  'des-ede3-cbc': des.CBC.instantiate(des.EDE),
  'des-ede3': des.EDE,
  'des-ede-cbc': des.CBC.instantiate(des.EDE),
  'des-ede': des.EDE,
  'des-cbc': des.CBC.instantiate(des.DES),
  'des-ecb': des.DES
}
modes.des = modes['des-cbc']
modes.des3 = modes['des-ede3-cbc']
module.exports = DES
inherits(DES, CipherBase)
function DES (opts) {
  CipherBase.call(this)
  var modeName = opts.mode.toLowerCase()
  var mode = modes[modeName]
  var type
  if (opts.decrypt) {
    type = 'decrypt'
  } else {
    type = 'encrypt'
  }
  var key = opts.key
  if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
    key = Buffer.concat([key, key.slice(0, 8)])
  }
  var iv = opts.iv
  this._des = mode.create({
    key: key,
    iv: iv,
    type: type
  })
}
DES.prototype._update = function (data) {
  return new Buffer(this._des.update(data))
}
DES.prototype._final = function () {
  return new Buffer(this._des.final())
}

}).call(this,require("buffer").Buffer)
},{"buffer":17,"cipher-base":42,"des.js":43,"inherits":214}],41:[function(require,module,exports){
exports['des-ecb'] = {
  key: 8,
  iv: 0
}
exports['des-cbc'] = exports.des = {
  key: 8,
  iv: 8
}
exports['des-ede3-cbc'] = exports.des3 = {
  key: 24,
  iv: 8
}
exports['des-ede3'] = {
  key: 24,
  iv: 0
}
exports['des-ede-cbc'] = {
  key: 16,
  iv: 8
}
exports['des-ede'] = {
  key: 16,
  iv: 0
}

},{}],42:[function(require,module,exports){
arguments[4][38][0].apply(exports,arguments)
},{"buffer":17,"dup":38,"inherits":214,"stream":233,"string_decoder":234}],43:[function(require,module,exports){
'use strict';

exports.utils = require('./des/utils');
exports.Cipher = require('./des/cipher');
exports.DES = require('./des/des');
exports.CBC = require('./des/cbc');
exports.EDE = require('./des/ede');

},{"./des/cbc":44,"./des/cipher":45,"./des/des":46,"./des/ede":47,"./des/utils":48}],44:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var proto = {};

function CBCState(iv) {
  assert.equal(iv.length, 8, 'Invalid IV length');

  this.iv = new Array(8);
  for (var i = 0; i < this.iv.length; i++)
    this.iv[i] = iv[i];
}

function instantiate(Base) {
  function CBC(options) {
    Base.call(this, options);
    this._cbcInit();
  }
  inherits(CBC, Base);

  var keys = Object.keys(proto);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    CBC.prototype[key] = proto[key];
  }

  CBC.create = function create(options) {
    return new CBC(options);
  };

  return CBC;
}

exports.instantiate = instantiate;

proto._cbcInit = function _cbcInit() {
  var state = new CBCState(this.options.iv);
  this._cbcState = state;
};

proto._update = function _update(inp, inOff, out, outOff) {
  var state = this._cbcState;
  var superProto = this.constructor.super_.prototype;

  var iv = state.iv;
  if (this.type === 'encrypt') {
    for (var i = 0; i < this.blockSize; i++)
      iv[i] ^= inp[inOff + i];

    superProto._update.call(this, iv, 0, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = out[outOff + i];
  } else {
    superProto._update.call(this, inp, inOff, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      out[outOff + i] ^= iv[i];

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = inp[inOff + i];
  }
};

},{"inherits":214,"minimalistic-assert":49}],45:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');

function Cipher(options) {
  this.options = options;

  this.type = this.options.type;
  this.blockSize = 8;
  this._init();

  this.buffer = new Array(this.blockSize);
  this.bufferOff = 0;
}
module.exports = Cipher;

Cipher.prototype._init = function _init() {
  // Might be overrided
};

Cipher.prototype.update = function update(data) {
  if (data.length === 0)
    return [];

  if (this.type === 'decrypt')
    return this._updateDecrypt(data);
  else
    return this._updateEncrypt(data);
};

Cipher.prototype._buffer = function _buffer(data, off) {
  // Append data to buffer
  var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
  for (var i = 0; i < min; i++)
    this.buffer[this.bufferOff + i] = data[off + i];
  this.bufferOff += min;

  // Shift next
  return min;
};

Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
  this._update(this.buffer, 0, out, off);
  this.bufferOff = 0;
  return this.blockSize;
};

Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
  var out = new Array(count * this.blockSize);

  if (this.bufferOff !== 0) {
    inputOff += this._buffer(data, inputOff);

    if (this.bufferOff === this.buffer.length)
      outputOff += this._flushBuffer(out, outputOff);
  }

  // Write blocks
  var max = data.length - ((data.length - inputOff) % this.blockSize);
  for (; inputOff < max; inputOff += this.blockSize) {
    this._update(data, inputOff, out, outputOff);
    outputOff += this.blockSize;
  }

  // Queue rest
  for (; inputOff < data.length; inputOff++, this.bufferOff++)
    this.buffer[this.bufferOff] = data[inputOff];

  return out;
};

Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
  var out = new Array(count * this.blockSize);

  // TODO(indutny): optimize it, this is far from optimal
  for (; count > 0; count--) {
    inputOff += this._buffer(data, inputOff);
    outputOff += this._flushBuffer(out, outputOff);
  }

  // Buffer rest of the input
  inputOff += this._buffer(data, inputOff);

  return out;
};

Cipher.prototype.final = function final(buffer) {
  var first;
  if (buffer)
    first = this.update(buffer);

  var last;
  if (this.type === 'encrypt')
    last = this._finalEncrypt();
  else
    last = this._finalDecrypt();

  if (first)
    return first.concat(last);
  else
    return last;
};

Cipher.prototype._pad = function _pad(buffer, off) {
  if (off === 0)
    return false;

  while (off < buffer.length)
    buffer[off++] = 0;

  return true;
};

Cipher.prototype._finalEncrypt = function _finalEncrypt() {
  if (!this._pad(this.buffer, this.bufferOff))
    return [];

  var out = new Array(this.blockSize);
  this._update(this.buffer, 0, out, 0);
  return out;
};

Cipher.prototype._unpad = function _unpad(buffer) {
  return buffer;
};

Cipher.prototype._finalDecrypt = function _finalDecrypt() {
  assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
  var out = new Array(this.blockSize);
  this._flushBuffer(out, 0);

  return this._unpad(out);
};

},{"minimalistic-assert":49}],46:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var des = require('../des');
var utils = des.utils;
var Cipher = des.Cipher;

function DESState() {
  this.tmp = new Array(2);
  this.keys = null;
}

function DES(options) {
  Cipher.call(this, options);

  var state = new DESState();
  this._desState = state;

  this.deriveKeys(state, options.key);
}
inherits(DES, Cipher);
module.exports = DES;

DES.create = function create(options) {
  return new DES(options);
};

var shiftTable = [
  1, 1, 2, 2, 2, 2, 2, 2,
  1, 2, 2, 2, 2, 2, 2, 1
];

DES.prototype.deriveKeys = function deriveKeys(state, key) {
  state.keys = new Array(16 * 2);

  assert.equal(key.length, this.blockSize, 'Invalid key length');

  var kL = utils.readUInt32BE(key, 0);
  var kR = utils.readUInt32BE(key, 4);

  utils.pc1(kL, kR, state.tmp, 0);
  kL = state.tmp[0];
  kR = state.tmp[1];
  for (var i = 0; i < state.keys.length; i += 2) {
    var shift = shiftTable[i >>> 1];
    kL = utils.r28shl(kL, shift);
    kR = utils.r28shl(kR, shift);
    utils.pc2(kL, kR, state.keys, i);
  }
};

DES.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._desState;

  var l = utils.readUInt32BE(inp, inOff);
  var r = utils.readUInt32BE(inp, inOff + 4);

  // Initial Permutation
  utils.ip(l, r, state.tmp, 0);
  l = state.tmp[0];
  r = state.tmp[1];

  if (this.type === 'encrypt')
    this._encrypt(state, l, r, state.tmp, 0);
  else
    this._decrypt(state, l, r, state.tmp, 0);

  l = state.tmp[0];
  r = state.tmp[1];

  utils.writeUInt32BE(out, l, outOff);
  utils.writeUInt32BE(out, r, outOff + 4);
};

DES.prototype._pad = function _pad(buffer, off) {
  var value = buffer.length - off;
  for (var i = off; i < buffer.length; i++)
    buffer[i] = value;

  return true;
};

DES.prototype._unpad = function _unpad(buffer) {
  var pad = buffer[buffer.length - 1];
  for (var i = buffer.length - pad; i < buffer.length; i++)
    assert.equal(buffer[i], pad);

  return buffer.slice(0, buffer.length - pad);
};

DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
  var l = lStart;
  var r = rStart;

  // Apply f() x16 times
  for (var i = 0; i < state.keys.length; i += 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(r, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = r;
    r = (l ^ f) >>> 0;
    l = t;
  }

  // Reverse Initial Permutation
  utils.rip(r, l, out, off);
};

DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
  var l = rStart;
  var r = lStart;

  // Apply f() x16 times
  for (var i = state.keys.length - 2; i >= 0; i -= 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(l, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = l;
    l = (r ^ f) >>> 0;
    r = t;
  }

  // Reverse Initial Permutation
  utils.rip(l, r, out, off);
};

},{"../des":43,"inherits":214,"minimalistic-assert":49}],47:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var des = require('../des');
var Cipher = des.Cipher;
var DES = des.DES;

function EDEState(type, key) {
  assert.equal(key.length, 24, 'Invalid key length');

  var k1 = key.slice(0, 8);
  var k2 = key.slice(8, 16);
  var k3 = key.slice(16, 24);

  if (type === 'encrypt') {
    this.ciphers = [
      DES.create({ type: 'encrypt', key: k1 }),
      DES.create({ type: 'decrypt', key: k2 }),
      DES.create({ type: 'encrypt', key: k3 })
    ];
  } else {
    this.ciphers = [
      DES.create({ type: 'decrypt', key: k3 }),
      DES.create({ type: 'encrypt', key: k2 }),
      DES.create({ type: 'decrypt', key: k1 })
    ];
  }
}

function EDE(options) {
  Cipher.call(this, options);

  var state = new EDEState(this.type, this.options.key);
  this._edeState = state;
}
inherits(EDE, Cipher);

module.exports = EDE;

EDE.create = function create(options) {
  return new EDE(options);
};

EDE.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._edeState;

  state.ciphers[0]._update(inp, inOff, out, outOff);
  state.ciphers[1]._update(out, outOff, out, outOff);
  state.ciphers[2]._update(out, outOff, out, outOff);
};

EDE.prototype._pad = DES.prototype._pad;
EDE.prototype._unpad = DES.prototype._unpad;

},{"../des":43,"inherits":214,"minimalistic-assert":49}],48:[function(require,module,exports){
'use strict';

exports.readUInt32BE = function readUInt32BE(bytes, off) {
  var res =  (bytes[0 + off] << 24) |
             (bytes[1 + off] << 16) |
             (bytes[2 + off] << 8) |
             bytes[3 + off];
  return res >>> 0;
};

exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
  bytes[0 + off] = value >>> 24;
  bytes[1 + off] = (value >>> 16) & 0xff;
  bytes[2 + off] = (value >>> 8) & 0xff;
  bytes[3 + off] = value & 0xff;
};

exports.ip = function ip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
    }
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.rip = function rip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 0; i < 4; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }
  for (var i = 4; i < 8; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.pc1 = function pc1(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  // 7, 15, 23, 31, 39, 47, 55, 63
  // 6, 14, 22, 30, 39, 47, 55, 63
  // 5, 13, 21, 29, 39, 47, 55, 63
  // 4, 12, 20, 28
  for (var i = 7; i >= 5; i--) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outL <<= 1;
    outL |= (inR >> (j + i)) & 1;
  }

  // 1, 9, 17, 25, 33, 41, 49, 57
  // 2, 10, 18, 26, 34, 42, 50, 58
  // 3, 11, 19, 27, 35, 43, 51, 59
  // 36, 44, 52, 60
  for (var i = 1; i <= 3; i++) {
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outR <<= 1;
    outR |= (inL >> (j + i)) & 1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.r28shl = function r28shl(num, shift) {
  return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
};

var pc2table = [
  // inL => outL
  14, 11, 17, 4, 27, 23, 25, 0,
  13, 22, 7, 18, 5, 9, 16, 24,
  2, 20, 12, 21, 1, 8, 15, 26,

  // inR => outR
  15, 4, 25, 19, 9, 1, 26, 16,
  5, 11, 23, 8, 12, 7, 17, 0,
  22, 3, 10, 14, 6, 20, 27, 24
];

exports.pc2 = function pc2(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  var len = pc2table.length >>> 1;
  for (var i = 0; i < len; i++) {
    outL <<= 1;
    outL |= (inL >>> pc2table[i]) & 0x1;
  }
  for (var i = len; i < pc2table.length; i++) {
    outR <<= 1;
    outR |= (inR >>> pc2table[i]) & 0x1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.expand = function expand(r, out, off) {
  var outL = 0;
  var outR = 0;

  outL = ((r & 1) << 5) | (r >>> 27);
  for (var i = 23; i >= 15; i -= 4) {
    outL <<= 6;
    outL |= (r >>> i) & 0x3f;
  }
  for (var i = 11; i >= 3; i -= 4) {
    outR |= (r >>> i) & 0x3f;
    outR <<= 6;
  }
  outR |= ((r & 0x1f) << 1) | (r >>> 31);

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

var sTable = [
  14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
  3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
  4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
  15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,

  15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
  9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
  0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
  5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,

  10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
  1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
  13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
  11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,

  7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
  1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
  10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
  15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,

  2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
  8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
  4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
  15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,

  12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
  0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
  9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
  7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,

  4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
  3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
  1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
  10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,

  13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
  10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
  7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
  0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
];

exports.substitute = function substitute(inL, inR) {
  var out = 0;
  for (var i = 0; i < 4; i++) {
    var b = (inL >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  for (var i = 0; i < 4; i++) {
    var b = (inR >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[4 * 0x40 + i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  return out >>> 0;
};

var permuteTable = [
  16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
  30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
];

exports.permute = function permute(num) {
  var out = 0;
  for (var i = 0; i < permuteTable.length; i++) {
    out <<= 1;
    out |= (num >>> permuteTable[i]) & 0x1;
  }
  return out >>> 0;
};

exports.padSplit = function padSplit(num, size, group) {
  var str = num.toString(2);
  while (str.length < size)
    str = '0' + str;

  var out = [];
  for (var i = 0; i < size; i += group)
    out.push(str.slice(i, i + group));
  return out.join(' ');
};

},{}],49:[function(require,module,exports){
module.exports = assert;

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
};

},{}],50:[function(require,module,exports){
(function (Buffer){
var md5 = require('create-hash/md5')
module.exports = EVP_BytesToKey
function EVP_BytesToKey (password, salt, keyLen, ivLen) {
  if (!Buffer.isBuffer(password)) {
    password = new Buffer(password, 'binary')
  }
  if (salt && !Buffer.isBuffer(salt)) {
    salt = new Buffer(salt, 'binary')
  }
  keyLen = keyLen / 8
  ivLen = ivLen || 0
  var ki = 0
  var ii = 0
  var key = new Buffer(keyLen)
  var iv = new Buffer(ivLen)
  var addmd = 0
  var md_buf
  var i
  var bufs = []
  while (true) {
    if (addmd++ > 0) {
      bufs.push(md_buf)
    }
    bufs.push(password)
    if (salt) {
      bufs.push(salt)
    }
    md_buf = md5(Buffer.concat(bufs))
    bufs = []
    i = 0
    if (keyLen > 0) {
      while (true) {
        if (keyLen === 0) {
          break
        }
        if (i === md_buf.length) {
          break
        }
        key[ki++] = md_buf[i]
        keyLen--
        i++
      }
    }
    if (ivLen > 0 && i !== md_buf.length) {
      while (true) {
        if (ivLen === 0) {
          break
        }
        if (i === md_buf.length) {
          break
        }
        iv[ii++] = md_buf[i]
        ivLen--
        i++
      }
    }
    if (keyLen === 0 && ivLen === 0) {
      break
    }
  }
  for (i = 0; i < md_buf.length; i++) {
    md_buf[i] = 0
  }
  return {
    key: key,
    iv: iv
  }
}

}).call(this,require("buffer").Buffer)
},{"buffer":17,"create-hash/md5":147}],51:[function(require,module,exports){
(function (Buffer){
'use strict'
exports['RSA-SHA224'] = exports.sha224WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha224',
  id: new Buffer('302d300d06096086480165030402040500041c', 'hex')
}
exports['RSA-SHA256'] = exports.sha256WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha256',
  id: new Buffer('3031300d060960864801650304020105000420', 'hex')
}
exports['RSA-SHA384'] = exports.sha384WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha384',
  id: new Buffer('3041300d060960864801650304020205000430', 'hex')
}
exports['RSA-SHA512'] = exports.sha512WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha512',
  id: new Buffer('3051300d060960864801650304020305000440', 'hex')
}
exports['RSA-SHA1'] = {
  sign: 'rsa',
  hash: 'sha1',
  id: new Buffer('3021300906052b0e03021a05000414', 'hex')
}
exports['ecdsa-with-SHA1'] = {
  sign: 'ecdsa',
  hash: 'sha1',
  id: new Buffer('', 'hex')
}

exports.DSA = exports['DSA-SHA1'] = exports['DSA-SHA'] = {
  sign: 'dsa',
  hash: 'sha1',
  id: new Buffer('', 'hex')
}
exports['DSA-SHA224'] = exports['DSA-WITH-SHA224'] = {
  sign: 'dsa',
  hash: 'sha224',
  id: new Buffer('', 'hex')
}
exports['DSA-SHA256'] = exports['DSA-WITH-SHA256'] = {
  sign: 'dsa',
  hash: 'sha256',
  id: new Buffer('', 'hex')
}
exports['DSA-SHA384'] = exports['DSA-WITH-SHA384'] = {
  sign: 'dsa',
  hash: 'sha384',
  id: new Buffer('', 'hex')
}
exports['DSA-SHA512'] = exports['DSA-WITH-SHA512'] = {
  sign: 'dsa',
  hash: 'sha512',
  id: new Buffer('', 'hex')
}
exports['DSA-RIPEMD160'] = {
  sign: 'dsa',
  hash: 'rmd160',
  id: new Buffer('', 'hex')
}
exports['RSA-RIPEMD160'] = exports.ripemd160WithRSA = {
  sign: 'rsa',
  hash: 'rmd160',
  id: new Buffer('3021300906052b2403020105000414', 'hex')
}
exports['RSA-MD5'] = exports.md5WithRSAEncryption = {
  sign: 'rsa',
  hash: 'md5',
  id: new Buffer('3020300c06082a864886f70d020505000410', 'hex')
}

}).call(this,require("buffer").Buffer)
},{"buffer":17}],52:[function(require,module,exports){
(function (Buffer){
var _algos = require('./algos')
var createHash = require('create-hash')
var inherits = require('inherits')
var sign = require('./sign')
var stream = require('stream')
var verify = require('./verify')

var algos = {}
Object.keys(_algos).forEach(function (key) {
  algos[key] = algos[key.toLowerCase()] = _algos[key]
})

function Sign (algorithm) {
  stream.Writable.call(this)

  var data = algos[algorithm]
  if (!data) {
    throw new Error('Unknown message digest')
  }

  this._hashType = data.hash
  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Sign, stream.Writable)

Sign.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Sign.prototype.update = function update (data, enc) {
  if (typeof data === 'string') {
    data = new Buffer(data, enc)
  }

  this._hash.update(data)
  return this
}

Sign.prototype.sign = function signMethod (key, enc) {
  this.end()
  var hash = this._hash.digest()
  var sig = sign(Buffer.concat([this._tag, hash]), key, this._hashType, this._signType)

  return enc ? sig.toString(enc) : sig
}

function Verify (algorithm) {
  stream.Writable.call(this)

  var data = algos[algorithm]
  if (!data) {
    throw new Error('Unknown message digest')
  }

  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Verify, stream.Writable)

Verify.prototype._write = function _write (data, _, done) {
  this._hash.update(data)

  done()
}

Verify.prototype.update = function update (data, enc) {
  if (typeof data === 'string') {
    data = new Buffer(data, enc)
  }

  this._hash.update(data)
  return this
}

Verify.prototype.verify = function verifyMethod (key, sig, enc) {
  if (typeof sig === 'string') {
    sig = new Buffer(sig, enc)
  }

  this.end()
  var hash = this._hash.digest()

  return verify(sig, Buffer.concat([this._tag, hash]), key, this._signType)
}

function createSign (algorithm) {
  return new Sign(algorithm)
}

function createVerify (algorithm) {
  return new Verify(algorithm)
}

module.exports = {
  Sign: createSign,
  Verify: createVerify,
  createSign: createSign,
  createVerify: createVerify
}

}).call(this,require("buffer").Buffer)
},{"./algos":51,"./sign":117,"./verify":118,"buffer":17,"create-hash":145,"inherits":214,"stream":233}],53:[function(require,module,exports){
'use strict'
exports['1.3.132.0.10'] = 'secp256k1'

exports['1.3.132.0.33'] = 'p224'

exports['1.2.840.10045.3.1.1'] = 'p192'

exports['1.2.840.10045.3.1.7'] = 'p256'

exports['1.3.132.0.34'] = 'p384'

exports['1.3.132.0.35'] = 'p521'

},{}],54:[function(require,module,exports){
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    // May be `new BN(bn)` ?
    if (number !== null &&
      typeof number === 'object' &&
      Array.isArray(number.words)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
    }

    if (base === 16) {
      this._parseHex(number, start);
    } else {
      this._parseBase(number, base, start);
    }

    if (number[0] === '-') {
      this.negative = 1;
    }

    this.strip();

    if (endian !== 'le') return;

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex (str, start, end) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r <<= 4;

      // 'a' - 'f'
      if (c >= 49 && c <= 54) {
        r |= c - 49 + 0xa;

      // 'A' - 'F'
      } else if (c >= 17 && c <= 22) {
        r |= c - 17 + 0xa;

      // '0' - '9'
      } else {
        r |= c & 0xf;
      }
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    // Scan 24-bit chunks and add them to the number
    var off = 0;
    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
      w = parseHex(number, i, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
    if (i + 6 !== start) {
      w = parseHex(number, start, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    }
    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    assert(this.bitLength() <= 53, 'Number can only safely store up to 53 bits');
    return parseInt(this.toString(), 10);
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || byteLength;
    assert(byteLength <= reqLength, 'byte array longer than desired length');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new Array(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    if (this.isZero()) return this.clone();

    var r = this.clone();
    r.negative = this.negative ^ 1;
    return r;
  };

  BN.prototype.ineg = function ineg () {
    this.negative ^= 1;
    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    while (this.length < bytesNeeded) {
      this.words[this.length++] = 0;
    }

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    while (this.length <= off) {
      this.words[this.length++] = 0;
    }

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  /*
  // NOTE: This could be potentionally used to generate loop-less multiplications
  function _genCombMulTo(alen, blen) {
    var len = alen + blen - 1;
    var src = [
      'var a = self.words;',
      'var b = num.words;',
      'var o = out.words;',
      'var c = 0;',
      'var lo;',
      'var mid;',
      'var hi;'
    ];
    for (var i = 0; i < alen; i++) {
      src.push('var a' + i + ' = a[' + i + '] | 0;');
      src.push('var al' + i + ' = a' + i + ' & 0x1fff;');
      src.push('var ah' + i + ' = a' + i + ' >>> 13;');
    }
    for (var i = 0; i < blen; i++) {
      src.push('var b' + i + ' = b[' + i + '] | 0;');
      src.push('var bl' + i + ' = b' + i + ' & 0x1fff;');
      src.push('var bh' + i + ' = b' + i + ' >>> 13;');
    }
    src.push('');
    src.push('out.length = ' + len + ';');

    for (var k = 0; k < len; k++) {
      var minJ = Math.max(0, k - alen + 1);
      var maxJ = Math.min(k, blen - 1);

      src.push('\/* k = ' + k + ' *\/');
      src.push('var w' + k + ' = c;');
      src.push('c = 0;');
      for (var j = minJ; j <= maxJ; j++) {
        var i = k - j;

        src.push('lo = Math.imul(al' + i + ', bl' + j + ');');
        src.push('mid = Math.imul(al' + i + ', bh' + j + ');');
        src.push('mid = (mid + Math.imul(ah' + i + ', bl' + j + ')) | 0;');
        src.push('hi = Math.imul(ah' + i + ', bh' + j + ');');

        src.push('w' + k + ' = (w' + k + ' + lo) | 0;');
        src.push('w' + k + ' = (w' + k + ' + ((mid & 0x1fff) << 13)) | 0;');
        src.push('c = (c + hi) | 0;');
        src.push('c = (c + (mid >>> 13)) | 0;');
        src.push('c = (c + (w' + k + ' >>> 26)) | 0;');
        src.push('w' + k + ' &= 0x3ffffff;');
      }
    }
    // Store in separate step for better memory access
    for (var k = 0; k < len; k++)
      src.push('o[' + k + '] = w' + k + ';');
    src.push('if (c !== 0) {',
             '  o[' + k + '] = c;',
             '  out.length++;',
             '}',
             'return out;');

    return src.join('\n');
  }
  console.log(_genCombMulTo(10, 10));
  */

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.length = 19;
    /* k = 0 */
    var w0 = c;
    c = 0;
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    w0 = (w0 + lo) | 0;
    w0 = (w0 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    var w1 = c;
    c = 0;
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    w1 = (w1 + lo) | 0;
    w1 = (w1 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    lo = Math.imul(al0, bl1);
    mid = Math.imul(al0, bh1);
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = Math.imul(ah0, bh1);
    w1 = (w1 + lo) | 0;
    w1 = (w1 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    var w2 = c;
    c = 0;
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    w2 = (w2 + lo) | 0;
    w2 = (w2 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    lo = Math.imul(al1, bl1);
    mid = Math.imul(al1, bh1);
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = Math.imul(ah1, bh1);
    w2 = (w2 + lo) | 0;
    w2 = (w2 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    lo = Math.imul(al0, bl2);
    mid = Math.imul(al0, bh2);
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = Math.imul(ah0, bh2);
    w2 = (w2 + lo) | 0;
    w2 = (w2 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    var w3 = c;
    c = 0;
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    w3 = (w3 + lo) | 0;
    w3 = (w3 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    lo = Math.imul(al2, bl1);
    mid = Math.imul(al2, bh1);
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = Math.imul(ah2, bh1);
    w3 = (w3 + lo) | 0;
    w3 = (w3 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    lo = Math.imul(al1, bl2);
    mid = Math.imul(al1, bh2);
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = Math.imul(ah1, bh2);
    w3 = (w3 + lo) | 0;
    w3 = (w3 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    lo = Math.imul(al0, bl3);
    mid = Math.imul(al0, bh3);
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = Math.imul(ah0, bh3);
    w3 = (w3 + lo) | 0;
    w3 = (w3 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    var w4 = c;
    c = 0;
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    w4 = (w4 + lo) | 0;
    w4 = (w4 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    lo = Math.imul(al3, bl1);
    mid = Math.imul(al3, bh1);
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = Math.imul(ah3, bh1);
    w4 = (w4 + lo) | 0;
    w4 = (w4 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    lo = Math.imul(al2, bl2);
    mid = Math.imul(al2, bh2);
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = Math.imul(ah2, bh2);
    w4 = (w4 + lo) | 0;
    w4 = (w4 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    lo = Math.imul(al1, bl3);
    mid = Math.imul(al1, bh3);
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = Math.imul(ah1, bh3);
    w4 = (w4 + lo) | 0;
    w4 = (w4 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    lo = Math.imul(al0, bl4);
    mid = Math.imul(al0, bh4);
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = Math.imul(ah0, bh4);
    w4 = (w4 + lo) | 0;
    w4 = (w4 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    var w5 = c;
    c = 0;
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    w5 = (w5 + lo) | 0;
    w5 = (w5 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    lo = Math.imul(al4, bl1);
    mid = Math.imul(al4, bh1);
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = Math.imul(ah4, bh1);
    w5 = (w5 + lo) | 0;
    w5 = (w5 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    lo = Math.imul(al3, bl2);
    mid = Math.imul(al3, bh2);
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = Math.imul(ah3, bh2);
    w5 = (w5 + lo) | 0;
    w5 = (w5 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    lo = Math.imul(al2, bl3);
    mid = Math.imul(al2, bh3);
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = Math.imul(ah2, bh3);
    w5 = (w5 + lo) | 0;
    w5 = (w5 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    lo = Math.imul(al1, bl4);
    mid = Math.imul(al1, bh4);
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = Math.imul(ah1, bh4);
    w5 = (w5 + lo) | 0;
    w5 = (w5 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    lo = Math.imul(al0, bl5);
    mid = Math.imul(al0, bh5);
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = Math.imul(ah0, bh5);
    w5 = (w5 + lo) | 0;
    w5 = (w5 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    var w6 = c;
    c = 0;
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    w6 = (w6 + lo) | 0;
    w6 = (w6 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    lo = Math.imul(al5, bl1);
    mid = Math.imul(al5, bh1);
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = Math.imul(ah5, bh1);
    w6 = (w6 + lo) | 0;
    w6 = (w6 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    lo = Math.imul(al4, bl2);
    mid = Math.imul(al4, bh2);
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = Math.imul(ah4, bh2);
    w6 = (w6 + lo) | 0;
    w6 = (w6 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    lo = Math.imul(al3, bl3);
    mid = Math.imul(al3, bh3);
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = Math.imul(ah3, bh3);
    w6 = (w6 + lo) | 0;
    w6 = (w6 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    lo = Math.imul(al2, bl4);
    mid = Math.imul(al2, bh4);
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = Math.imul(ah2, bh4);
    w6 = (w6 + lo) | 0;
    w6 = (w6 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    lo = Math.imul(al1, bl5);
    mid = Math.imul(al1, bh5);
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = Math.imul(ah1, bh5);
    w6 = (w6 + lo) | 0;
    w6 = (w6 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    lo = Math.imul(al0, bl6);
    mid = Math.imul(al0, bh6);
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = Math.imul(ah0, bh6);
    w6 = (w6 + lo) | 0;
    w6 = (w6 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    var w7 = c;
    c = 0;
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    w7 = (w7 + lo) | 0;
    w7 = (w7 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    lo = Math.imul(al6, bl1);
    mid = Math.imul(al6, bh1);
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = Math.imul(ah6, bh1);
    w7 = (w7 + lo) | 0;
    w7 = (w7 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    lo = Math.imul(al5, bl2);
    mid = Math.imul(al5, bh2);
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = Math.imul(ah5, bh2);
    w7 = (w7 + lo) | 0;
    w7 = (w7 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    lo = Math.imul(al4, bl3);
    mid = Math.imul(al4, bh3);
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = Math.imul(ah4, bh3);
    w7 = (w7 + lo) | 0;
    w7 = (w7 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    lo = Math.imul(al3, bl4);
    mid = Math.imul(al3, bh4);
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = Math.imul(ah3, bh4);
    w7 = (w7 + lo) | 0;
    w7 = (w7 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    lo = Math.imul(al2, bl5);
    mid = Math.imul(al2, bh5);
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = Math.imul(ah2, bh5);
    w7 = (w7 + lo) | 0;
    w7 = (w7 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    lo = Math.imul(al1, bl6);
    mid = Math.imul(al1, bh6);
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = Math.imul(ah1, bh6);
    w7 = (w7 + lo) | 0;
    w7 = (w7 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    lo = Math.imul(al0, bl7);
    mid = Math.imul(al0, bh7);
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = Math.imul(ah0, bh7);
    w7 = (w7 + lo) | 0;
    w7 = (w7 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    var w8 = c;
    c = 0;
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    w8 = (w8 + lo) | 0;
    w8 = (w8 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    lo = Math.imul(al7, bl1);
    mid = Math.imul(al7, bh1);
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = Math.imul(ah7, bh1);
    w8 = (w8 + lo) | 0;
    w8 = (w8 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    lo = Math.imul(al6, bl2);
    mid = Math.imul(al6, bh2);
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = Math.imul(ah6, bh2);
    w8 = (w8 + lo) | 0;
    w8 = (w8 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    lo = Math.imul(al5, bl3);
    mid = Math.imul(al5, bh3);
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = Math.imul(ah5, bh3);
    w8 = (w8 + lo) | 0;
    w8 = (w8 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    lo = Math.imul(al4, bl4);
    mid = Math.imul(al4, bh4);
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = Math.imul(ah4, bh4);
    w8 = (w8 + lo) | 0;
    w8 = (w8 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    lo = Math.imul(al3, bl5);
    mid = Math.imul(al3, bh5);
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = Math.imul(ah3, bh5);
    w8 = (w8 + lo) | 0;
    w8 = (w8 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    lo = Math.imul(al2, bl6);
    mid = Math.imul(al2, bh6);
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = Math.imul(ah2, bh6);
    w8 = (w8 + lo) | 0;
    w8 = (w8 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    lo = Math.imul(al1, bl7);
    mid = Math.imul(al1, bh7);
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = Math.imul(ah1, bh7);
    w8 = (w8 + lo) | 0;
    w8 = (w8 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    lo = Math.imul(al0, bl8);
    mid = Math.imul(al0, bh8);
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = Math.imul(ah0, bh8);
    w8 = (w8 + lo) | 0;
    w8 = (w8 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    var w9 = c;
    c = 0;
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    w9 = (w9 + lo) | 0;
    w9 = (w9 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    lo = Math.imul(al8, bl1);
    mid = Math.imul(al8, bh1);
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = Math.imul(ah8, bh1);
    w9 = (w9 + lo) | 0;
    w9 = (w9 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    lo = Math.imul(al7, bl2);
    mid = Math.imul(al7, bh2);
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = Math.imul(ah7, bh2);
    w9 = (w9 + lo) | 0;
    w9 = (w9 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    lo = Math.imul(al6, bl3);
    mid = Math.imul(al6, bh3);
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = Math.imul(ah6, bh3);
    w9 = (w9 + lo) | 0;
    w9 = (w9 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    lo = Math.imul(al5, bl4);
    mid = Math.imul(al5, bh4);
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = Math.imul(ah5, bh4);
    w9 = (w9 + lo) | 0;
    w9 = (w9 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    lo = Math.imul(al4, bl5);
    mid = Math.imul(al4, bh5);
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = Math.imul(ah4, bh5);
    w9 = (w9 + lo) | 0;
    w9 = (w9 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    lo = Math.imul(al3, bl6);
    mid = Math.imul(al3, bh6);
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = Math.imul(ah3, bh6);
    w9 = (w9 + lo) | 0;
    w9 = (w9 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    lo = Math.imul(al2, bl7);
    mid = Math.imul(al2, bh7);
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = Math.imul(ah2, bh7);
    w9 = (w9 + lo) | 0;
    w9 = (w9 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    lo = Math.imul(al1, bl8);
    mid = Math.imul(al1, bh8);
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = Math.imul(ah1, bh8);
    w9 = (w9 + lo) | 0;
    w9 = (w9 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    lo = Math.imul(al0, bl9);
    mid = Math.imul(al0, bh9);
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = Math.imul(ah0, bh9);
    w9 = (w9 + lo) | 0;
    w9 = (w9 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    var w10 = c;
    c = 0;
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    w10 = (w10 + lo) | 0;
    w10 = (w10 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    lo = Math.imul(al8, bl2);
    mid = Math.imul(al8, bh2);
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = Math.imul(ah8, bh2);
    w10 = (w10 + lo) | 0;
    w10 = (w10 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    lo = Math.imul(al7, bl3);
    mid = Math.imul(al7, bh3);
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = Math.imul(ah7, bh3);
    w10 = (w10 + lo) | 0;
    w10 = (w10 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    lo = Math.imul(al6, bl4);
    mid = Math.imul(al6, bh4);
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = Math.imul(ah6, bh4);
    w10 = (w10 + lo) | 0;
    w10 = (w10 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    lo = Math.imul(al5, bl5);
    mid = Math.imul(al5, bh5);
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = Math.imul(ah5, bh5);
    w10 = (w10 + lo) | 0;
    w10 = (w10 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    lo = Math.imul(al4, bl6);
    mid = Math.imul(al4, bh6);
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = Math.imul(ah4, bh6);
    w10 = (w10 + lo) | 0;
    w10 = (w10 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    lo = Math.imul(al3, bl7);
    mid = Math.imul(al3, bh7);
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = Math.imul(ah3, bh7);
    w10 = (w10 + lo) | 0;
    w10 = (w10 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    lo = Math.imul(al2, bl8);
    mid = Math.imul(al2, bh8);
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = Math.imul(ah2, bh8);
    w10 = (w10 + lo) | 0;
    w10 = (w10 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    lo = Math.imul(al1, bl9);
    mid = Math.imul(al1, bh9);
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = Math.imul(ah1, bh9);
    w10 = (w10 + lo) | 0;
    w10 = (w10 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    var w11 = c;
    c = 0;
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    w11 = (w11 + lo) | 0;
    w11 = (w11 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    lo = Math.imul(al8, bl3);
    mid = Math.imul(al8, bh3);
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = Math.imul(ah8, bh3);
    w11 = (w11 + lo) | 0;
    w11 = (w11 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    lo = Math.imul(al7, bl4);
    mid = Math.imul(al7, bh4);
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = Math.imul(ah7, bh4);
    w11 = (w11 + lo) | 0;
    w11 = (w11 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    lo = Math.imul(al6, bl5);
    mid = Math.imul(al6, bh5);
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = Math.imul(ah6, bh5);
    w11 = (w11 + lo) | 0;
    w11 = (w11 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    lo = Math.imul(al5, bl6);
    mid = Math.imul(al5, bh6);
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = Math.imul(ah5, bh6);
    w11 = (w11 + lo) | 0;
    w11 = (w11 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    lo = Math.imul(al4, bl7);
    mid = Math.imul(al4, bh7);
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = Math.imul(ah4, bh7);
    w11 = (w11 + lo) | 0;
    w11 = (w11 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    lo = Math.imul(al3, bl8);
    mid = Math.imul(al3, bh8);
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = Math.imul(ah3, bh8);
    w11 = (w11 + lo) | 0;
    w11 = (w11 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    lo = Math.imul(al2, bl9);
    mid = Math.imul(al2, bh9);
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = Math.imul(ah2, bh9);
    w11 = (w11 + lo) | 0;
    w11 = (w11 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    var w12 = c;
    c = 0;
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    w12 = (w12 + lo) | 0;
    w12 = (w12 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    lo = Math.imul(al8, bl4);
    mid = Math.imul(al8, bh4);
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = Math.imul(ah8, bh4);
    w12 = (w12 + lo) | 0;
    w12 = (w12 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    lo = Math.imul(al7, bl5);
    mid = Math.imul(al7, bh5);
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = Math.imul(ah7, bh5);
    w12 = (w12 + lo) | 0;
    w12 = (w12 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    lo = Math.imul(al6, bl6);
    mid = Math.imul(al6, bh6);
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = Math.imul(ah6, bh6);
    w12 = (w12 + lo) | 0;
    w12 = (w12 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    lo = Math.imul(al5, bl7);
    mid = Math.imul(al5, bh7);
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = Math.imul(ah5, bh7);
    w12 = (w12 + lo) | 0;
    w12 = (w12 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    lo = Math.imul(al4, bl8);
    mid = Math.imul(al4, bh8);
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = Math.imul(ah4, bh8);
    w12 = (w12 + lo) | 0;
    w12 = (w12 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    lo = Math.imul(al3, bl9);
    mid = Math.imul(al3, bh9);
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = Math.imul(ah3, bh9);
    w12 = (w12 + lo) | 0;
    w12 = (w12 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    var w13 = c;
    c = 0;
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    w13 = (w13 + lo) | 0;
    w13 = (w13 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    lo = Math.imul(al8, bl5);
    mid = Math.imul(al8, bh5);
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = Math.imul(ah8, bh5);
    w13 = (w13 + lo) | 0;
    w13 = (w13 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    lo = Math.imul(al7, bl6);
    mid = Math.imul(al7, bh6);
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = Math.imul(ah7, bh6);
    w13 = (w13 + lo) | 0;
    w13 = (w13 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    lo = Math.imul(al6, bl7);
    mid = Math.imul(al6, bh7);
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = Math.imul(ah6, bh7);
    w13 = (w13 + lo) | 0;
    w13 = (w13 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    lo = Math.imul(al5, bl8);
    mid = Math.imul(al5, bh8);
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = Math.imul(ah5, bh8);
    w13 = (w13 + lo) | 0;
    w13 = (w13 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    lo = Math.imul(al4, bl9);
    mid = Math.imul(al4, bh9);
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = Math.imul(ah4, bh9);
    w13 = (w13 + lo) | 0;
    w13 = (w13 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    var w14 = c;
    c = 0;
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    w14 = (w14 + lo) | 0;
    w14 = (w14 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    lo = Math.imul(al8, bl6);
    mid = Math.imul(al8, bh6);
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = Math.imul(ah8, bh6);
    w14 = (w14 + lo) | 0;
    w14 = (w14 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    lo = Math.imul(al7, bl7);
    mid = Math.imul(al7, bh7);
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = Math.imul(ah7, bh7);
    w14 = (w14 + lo) | 0;
    w14 = (w14 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    lo = Math.imul(al6, bl8);
    mid = Math.imul(al6, bh8);
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = Math.imul(ah6, bh8);
    w14 = (w14 + lo) | 0;
    w14 = (w14 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    lo = Math.imul(al5, bl9);
    mid = Math.imul(al5, bh9);
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = Math.imul(ah5, bh9);
    w14 = (w14 + lo) | 0;
    w14 = (w14 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    var w15 = c;
    c = 0;
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    w15 = (w15 + lo) | 0;
    w15 = (w15 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    lo = Math.imul(al8, bl7);
    mid = Math.imul(al8, bh7);
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = Math.imul(ah8, bh7);
    w15 = (w15 + lo) | 0;
    w15 = (w15 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    lo = Math.imul(al7, bl8);
    mid = Math.imul(al7, bh8);
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = Math.imul(ah7, bh8);
    w15 = (w15 + lo) | 0;
    w15 = (w15 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    lo = Math.imul(al6, bl9);
    mid = Math.imul(al6, bh9);
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = Math.imul(ah6, bh9);
    w15 = (w15 + lo) | 0;
    w15 = (w15 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    var w16 = c;
    c = 0;
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    w16 = (w16 + lo) | 0;
    w16 = (w16 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    lo = Math.imul(al8, bl8);
    mid = Math.imul(al8, bh8);
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = Math.imul(ah8, bh8);
    w16 = (w16 + lo) | 0;
    w16 = (w16 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    lo = Math.imul(al7, bl9);
    mid = Math.imul(al7, bh9);
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = Math.imul(ah7, bh9);
    w16 = (w16 + lo) | 0;
    w16 = (w16 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    var w17 = c;
    c = 0;
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    w17 = (w17 + lo) | 0;
    w17 = (w17 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    lo = Math.imul(al8, bl9);
    mid = Math.imul(al8, bh9);
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = Math.imul(ah8, bh9);
    w17 = (w17 + lo) | 0;
    w17 = (w17 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    var w18 = c;
    c = 0;
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    w18 = (w18 + lo) | 0;
    w18 = (w18 + ((mid & 0x1fff) << 13)) | 0;
    c = (c + hi) | 0;
    c = (c + (mid >>> 13)) | 0;
    c = (c + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    // Bigger storage is needed
    var len = num.length + shift;
    var i;
    if (this.words.length < len) {
      var t = new Array(len);
      for (i = 0; i < this.length; i++) {
        t[i] = this.words[i];
      }
      this.words = t;
    } else {
      i = this.length;
    }

    // Zeroify rest
    this.length = Math.max(this.length, len);
    for (; i < this.length; i++) {
      this.words[i] = 0;
    }

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return { div: q || null, mod: a };
  };

  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.neg) {
          mod = mod.add(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return { div: div, mod: res.mod };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.neg) {
          mod = mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return { div: new BN(0), mod: this };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return { div: this.divn(num.words[0]), mod: null };
      }

      if (mode === 'mod') {
        return { div: null, mod: new BN(this.modn(num.words[0])) };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      while (x.isEven()) {
        x.iushrn(1);
        if (A.isEven() && B.isEven()) {
          A.iushrn(1);
          B.iushrn(1);
        } else {
          A.iadd(yp).iushrn(1);
          B.isub(xp).iushrn(1);
        }
      }

      while (y.isEven()) {
        y.iushrn(1);
        if (C.isEven() && D.isEven()) {
          C.iushrn(1);
          D.iushrn(1);
        } else {
          C.iadd(yp).iushrn(1);
          D.isub(xp).iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      while (a.isEven()) {
        a.iushrn(1);
        if (x1.isEven()) {
          x1.iushrn(1);
        } else {
          x1.iadd(delta).iushrn(1);
        }
      }
      while (b.isEven()) {
        b.iushrn(1);
        if (x2.isEven()) {
          x2.iushrn(1);
        } else {
          x2.iadd(delta).iushrn(1);
        }
      }
      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.clone();
    if (num.isZero()) return this.clone();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      for (var i = this.length; i < s + 1; i++) {
        this.words[i] = 0;
      }
      this.words[s] |= q;
      this.length = s + 1;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) {
      res = -res;
    }
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res;

    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.ushl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      r.strip();
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    input.words[i - 10] = prev >>> 22;
    input.length -= 9;
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var hi;
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      hi = w * 0x40;
      lo += w * 0x3d1;
      hi += (lo / 0x4000000) | 0;
      lo &= 0x3ffffff;

      num.words[i] = lo;

      lo = hi;
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    var r = a.clone();
    r.negative ^= 1;
    return r.iadd(this.m)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a);
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

},{}],55:[function(require,module,exports){
(function (Buffer){
var bn = require('bn.js');
var randomBytes = require('randombytes');
module.exports = crt;
function blind(priv) {
  var r = getr(priv);
  var blinder = r.toRed(bn.mont(priv.modulus))
  .redPow(new bn(priv.publicExponent)).fromRed();
  return {
    blinder: blinder,
    unblinder:r.invm(priv.modulus)
  };
}
function crt(msg, priv) {
  var blinds = blind(priv);
  var len = priv.modulus.byteLength();
  var mod = bn.mont(priv.modulus);
  var blinded = new bn(msg).mul(blinds.blinder).umod(priv.modulus);
  var c1 = blinded.toRed(bn.mont(priv.prime1));
  var c2 = blinded.toRed(bn.mont(priv.prime2));
  var qinv = priv.coefficient;
  var p = priv.prime1;
  var q = priv.prime2;
  var m1 = c1.redPow(priv.exponent1);
  var m2 = c2.redPow(priv.exponent2);
  m1 = m1.fromRed();
  m2 = m2.fromRed();
  var h = m1.isub(m2).imul(qinv).umod(p);
  h.imul(q);
  m2.iadd(h);
  return new Buffer(m2.imul(blinds.unblinder).umod(priv.modulus).toArray(false, len));
}
crt.getr = getr;
function getr(priv) {
  var len = priv.modulus.byteLength();
  var r = new bn(randomBytes(len));
  while (r.cmp(priv.modulus) >=  0 || !r.umod(priv.prime1) || !r.umod(priv.prime2)) {
    r = new bn(randomBytes(len));
  }
  return r;
}

}).call(this,require("buffer").Buffer)
},{"bn.js":54,"buffer":17,"randombytes":212}],56:[function(require,module,exports){
'use strict';

var elliptic = exports;

elliptic.version = require('../package.json').version;
elliptic.utils = require('./elliptic/utils');
elliptic.rand = require('brorand');
elliptic.hmacDRBG = require('./elliptic/hmac-drbg');
elliptic.curve = require('./elliptic/curve');
elliptic.curves = require('./elliptic/curves');

// Protocols
elliptic.ec = require('./elliptic/ec');
elliptic.eddsa = require('./elliptic/eddsa');

},{"../package.json":79,"./elliptic/curve":59,"./elliptic/curves":62,"./elliptic/ec":63,"./elliptic/eddsa":66,"./elliptic/hmac-drbg":69,"./elliptic/utils":71,"brorand":72}],57:[function(require,module,exports){
'use strict';

var bn = require('bn.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new bn(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? bn.red(conf.prime) : bn.mont(this.p);

  // Useful for many curves
  this.zero = new bn(0).toRed(this.red);
  this.one = new bn(1).toRed(this.red);
  this.two = new bn(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new bn(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  for (var j = 0; j < naf.length; j += doubles.step) {
    var nafW = 0;
    for (var k = j + doubles.step - 1; k >= j; k--)
      nafW = (nafW << 1) + naf[k];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (var j = 0; j < repr.length; j++) {
      var nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var k = 0; i >= 0 && naf[i] === 0; i--)
      k++;
    if (i >= 0)
      k++;
    acc = acc.dblp(k);

    if (i < 0)
      break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
                                                       points,
                                                       coeffs,
                                                       len) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  for (var i = 0; i < len; i++) {
    var p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (var i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a]);
      naf[b] = getNAF(coeffs[b], wndWidth[b]);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b] /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (var j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (var i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (var j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (var j = 0; j < len; j++) {
      var z = tmp[j];
      var p;
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (var i = 0; i < len; i++)
    wnd[i] = null;
  return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function eq(/*other*/) {
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils.toArray(bytes, enc);

  var len = this.p.byteLength();
  if (bytes[0] === 0x04 && bytes.length - 1 === 2 * len) {
    return this.point(bytes.slice(1, 1 + len),
                      bytes.slice(1 + len, 1 + 2 * len));
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
              bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }
  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);

  if (compact)
    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

  return [ 0x04 ].concat(x, this.getY().toArray('be', len)) ;
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed)
    return false;

  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};

},{"../../elliptic":56,"bn.js":54}],58:[function(require,module,exports){
'use strict';

var curve = require('../curve');
var elliptic = require('../../elliptic');
var bn = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

var assert = elliptic.utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new bn(conf.a, 16).umod(this.red.m);
  this.a = this.a.toRed(this.red);
  this.c = new bn(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new bn(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA)
    return num.redNeg();
  else
    return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC)
    return num;
  else
    return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new bn(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y = rhs.redMul(lhs.redInvm()).redSqrt();
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
  y = new bn(y, 16);
  if (!y.red)
    y = y.toRed(this.red);

  // x^2 = (y^2 - 1) / (d y^2 + 1)
  var y2 = y.redSqr();
  var lhs = y2.redSub(this.one);
  var rhs = y2.redMul(this.d).redAdd(this.one);
  var x2 = lhs.redMul(rhs.redInvm());

  if (x2.cmp(this.zero) === 0) {
    if (odd)
      throw new Error('invalid point');
    else
      return this.point(this.zero, y);
  }

  var x = x2.redSqrt();
  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  if (x.isOdd() !== odd)
    x = x.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity())
    return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new bn(x, 16);
    this.y = new bn(y, 16);
    this.z = z ? new bn(z, 16) : this.curve.one;
    this.t = t && new bn(t, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 &&
         this.y.cmp(this.z) === 0;
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  if (this.curve.twisted) {
    // E = a * C
    var e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      var h = this.z.redSqr();
      // J = F - 2 * H
      var j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    var e = c.redAdd(d);
    // H = (c * Z1)^2
    var h = this.curve._mulC(this.c.redMul(this.z)).redSqr();
    // J = E - 2 * H
    var j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  // Double in extended coordinates
  if (this.curve.extended)
    return this._extDbl();
  else
    return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity())
    return p;
  if (p.isInfinity())
    return this;

  if (this.curve.extended)
    return this._extAdd(p);
  else
    return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne)
    return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t)
    this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(),
                          this.y,
                          this.z,
                          this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

Point.prototype.eq = function eq(other) {
  return this === other ||
         this.getX().cmp(other.getX()) === 0 &&
         this.getY().cmp(other.getY()) === 0;
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

},{"../../elliptic":56,"../curve":59,"bn.js":54,"inherits":214}],59:[function(require,module,exports){
'use strict';

var curve = exports;

curve.base = require('./base');
curve.short = require('./short');
curve.mont = require('./mont');
curve.edwards = require('./edwards');

},{"./base":57,"./edwards":58,"./mont":60,"./short":61}],60:[function(require,module,exports){
'use strict';

var curve = require('../curve');
var bn = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

var elliptic = require('../../elliptic');
var utils = elliptic.utils;

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new bn(conf.a, 16).toRed(this.red);
  this.b = new bn(conf.b, 16).toRed(this.red);
  this.i4 = new bn(4).toRed(this.red).redInvm();
  this.two = new bn(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new bn(x, 16);
    this.z = new bn(z, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  return this.point(utils.toArray(bytes, enc), 1);
};

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.prototype._encode = function _encode() {
  return this.getX().toArray('be', this.curve.p.byteLength());
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
    bits.push(t.andln(1));

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.eq = function eq(other) {
  return this.getX().cmp(other.getX()) === 0;
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};

},{"../../elliptic":56,"../curve":59,"bn.js":54,"inherits":214}],61:[function(require,module,exports){
'use strict';

var curve = require('../curve');
var elliptic = require('../../elliptic');
var bn = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

var assert = elliptic.utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new bn(conf.a, 16).toRed(this.red);
  this.b = new bn(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new bn(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new bn(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new bn(vec.a, 16),
        b: new bn(vec.b, 16)
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : bn.mont(num);
  var tinv = new bn(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new bn(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new bn(1);
  var y1 = new bn(0);
  var x2 = new bn(0);
  var y2 = new bn(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 }
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new bn(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs) {
  var npoints = this._endoWnafT1;
  var ncoeffs = this._endoWnafT2;
  for (var i = 0; i < points.length; i++) {
    var split = this._endoSplit(coeffs[i]);
    var p = points[i];
    var beta = p._getBeta();

    if (split.k1.negative) {
      split.k1.ineg();
      p = p.neg(true);
    }
    if (split.k2.negative) {
      split.k2.ineg();
      beta = beta.neg(true);
    }

    npoints[i * 2] = p;
    npoints[i * 2 + 1] = beta;
    ncoeffs[i * 2] = split.k1;
    ncoeffs[i * 2 + 1] = split.k2;
  }
  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2);

  // Clean-up references to points and coefficients
  for (var j = 0; j < i * 2; j++) {
    npoints[j] = null;
    ncoeffs[j] = null;
  }
  return res;
};

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new bn(x, 16);
    this.y = new bn(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul)
      }
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1)
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1)
    }
  } ];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point))
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point))
    }
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new bn(k, 16);

  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate)
      }
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new bn(0);
  } else {
    this.x = new bn(x, 16);
    this.y = new bn(y, 16);
    this.z = new bn(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (var i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (var i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new bn(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

},{"../../elliptic":56,"../curve":59,"bn.js":54,"inherits":214}],62:[function(require,module,exports){
'use strict';

var curves = exports;

var hash = require('hash.js');
var elliptic = require('../elliptic');

var assert = elliptic.utils.assert;

function PresetCurve(options) {
  if (options.type === 'short')
    this.curve = new elliptic.curve.short(options);
  else if (options.type === 'edwards')
    this.curve = new elliptic.curve.edwards(options);
  else
    this.curve = new elliptic.curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve
      });
      return curve;
    }
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: [
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
  ]
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: [
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
  ]
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: [
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
  ]
});

defineCurve('p384', {
  type: 'short',
  prime: null,
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 ffffffff',
  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 fffffffc',
  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
  hash: hash.sha384,
  gRed: false,
  g: [
    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
    '5502f25d bf55296c 3a545e38 72760ab7',
    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'
  ]
});

defineCurve('p521', {
  type: 'short',
  prime: null,
  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff',
  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff fffffffc',
  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
  hash: hash.sha512,
  gRed: false,
  g: [
    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
    '3fad0761 353c7086 a272c240 88be9476 9fd16650'
  ]
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '0',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '9'
  ]
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658'
  ]
});

var pre;
try {
  pre = require('./precomputed/secp256k1');
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [
    {
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3'
    },
    {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15'
    }
  ],

  gRed: false,
  g: [
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    pre
  ]
});

},{"../elliptic":56,"./precomputed/secp256k1":70,"hash.js":73}],63:[function(require,module,exports){
'use strict';

var bn = require('bn.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

var KeyPair = require('./key');
var Signature = require('./signature');

function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(elliptic.curves.hasOwnProperty(options), 'Unknown curve ' + options);

    options = elliptic.curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof elliptic.curves.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new elliptic.hmacDRBG({
    hash: this.hash,
    pers: options.pers,
    entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),
    nonce: this.n.toArray()
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new bn(2));
  do {
    var priv = new bn(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  } while (true);
};

EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new bn(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray();
  for (var i = bkey.length; i < bytes; i++)
    bkey.unshift(0);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray();
  for (var i = nonce.length; i < bytes; i++)
    nonce.unshift(0);

  // Instantiate Hmac_DRBG
  var drbg = new elliptic.hmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new bn(1));
  do {
    var k = new bn(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                        (kpX.cmp(r) !== 0 ? 2 : 0);

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  } while (true);
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new bn(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);

  var p = this.g.mulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  return p.getX().umod(this.n).cmp(r) === 0;
};

EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);

  var n = this.n;
  var e = new bn(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  if (isSecondKey)
    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
  else
    r = this.curve.pointFromX(r, isYOdd);

  var eNeg = n.sub(e);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  var rInv = signature.r.invm(n);
  return r.mul(s).add(this.g.mul(eNeg)).mul(rInv);
};

EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null)
    return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime = this.recoverPubKey(e, signature, i);

    if (Qprime.eq(Q))
      return i;
  }
  throw new Error('Unable to find valid recovery factor');
};

},{"../../elliptic":56,"./key":64,"./signature":65,"bn.js":54}],64:[function(require,module,exports){
'use strict';

var bn = require('bn.js');

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  if (!enc)
    return this.pub;

  return this.pub.encode(enc, compact);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new bn(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key, enc);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

},{"bn.js":54}],65:[function(require,module,exports){
'use strict';

var bn = require('bn.js');

var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature)
    return options;

  if (this._importDER(options, enc))
    return;

  assert(options.r && options.s, 'Signature without r or s');
  this.r = new bn(options.r, 16);
  this.s = new bn(options.s, 16);
  if (options.recoveryParam !== null)
    this.recoveryParam = options.recoveryParam;
  else
    this.recoveryParam = null;
}
module.exports = Signature;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];
  if (!(initial & 0x80)) {
    return initial;
  }
  var octetLen = initial & 0xf;
  var val = 0;
  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
  }
  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  var p = new Position();
  if (data[p.place++] !== 0x30) {
    return false;
  }
  var len = getLength(data, p);
  if ((len + p.place) !== data.length) {
    return false;
  }
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var rlen = getLength(data, p);
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var slen = getLength(data, p);
  if (data.length !== slen + p.place) {
    return false;
  }
  var s = data.slice(p.place, slen + p.place);
  if (r[0] === 0 && (r[1] & 0x80)) {
    r = r.slice(1);
  }
  if (s[0] === 0 && (s[1] & 0x80)) {
    s = s.slice(1);
  }

  this.r = new bn(r);
  this.s = new bn(s);
  this.recoveryParam = null;

  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);
  while (--octets) {
    arr.push((len >>> (octets << 3)) & 0xff);
  }
  arr.push(len);
}

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }
  var arr = [ 0x02 ];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [ 0x30 ];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils.encode(res, enc);
};

},{"../../elliptic":56,"bn.js":54}],66:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = require('./key');
var Signature = require('./signature');

function EDDSA(curve) {
  assert(curve === 'ed25519', 'only tested with ed25519 so far');

  if (!(this instanceof EDDSA))
    return new EDDSA(curve);

  var curve = elliptic.curves[curve].curve;
  this.curve = curve;
  this.g = curve.g;
  this.g.precompute(curve.n.bitLength() + 1);

  this.pointClass = curve.point().constructor;
  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
  this.hash = hash.sha512;
}

module.exports = EDDSA;

/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/
EDDSA.prototype.sign = function sign(message, secret) {
  message = parseBytes(message);
  var key = this.keyFromSecret(secret);
  var r = this.hashInt(key.messagePrefix(), message);
  var R = this.g.mul(r);
  var Rencoded = this.encodePoint(R);
  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
               .mul(key.priv());
  var S = r.add(s_).umod(this.curve.n);
  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
};

/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/
EDDSA.prototype.verify = function verify(message, sig, pub) {
  message = parseBytes(message);
  sig = this.makeSignature(sig);
  var key = this.keyFromPublic(pub);
  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
  var SG = this.g.mul(sig.S());
  var RplusAh = sig.R().add(key.pub().mul(h));
  return RplusAh.eq(SG);
};

EDDSA.prototype.hashInt = function hashInt() {
  var hash = this.hash();
  for (var i = 0; i < arguments.length; i++)
    hash.update(arguments[i]);
  return utils.intFromLE(hash.digest()).umod(this.curve.n);
};

EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
  return KeyPair.fromPublic(this, pub);
};

EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
  return KeyPair.fromSecret(this, secret);
};

EDDSA.prototype.makeSignature = function makeSignature(sig) {
  if (sig instanceof Signature)
    return sig;
  return new Signature(this, sig);
};

/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/
EDDSA.prototype.encodePoint = function encodePoint(point) {
  var enc = point.getY().toArray('le', this.encodingLength);
  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
  return enc;
};

EDDSA.prototype.decodePoint = function decodePoint(bytes) {
  bytes = utils.parseBytes(bytes);

  var lastIx = bytes.length - 1;
  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

  var y = utils.intFromLE(normed);
  return this.curve.pointFromY(y, xIsOdd);
};

EDDSA.prototype.encodeInt = function encodeInt(num) {
  return num.toArray('le', this.encodingLength);
};

EDDSA.prototype.decodeInt = function decodeInt(bytes) {
  return utils.intFromLE(bytes);
};

EDDSA.prototype.isPoint = function isPoint(val) {
  return val instanceof this.pointClass;
};

},{"../../elliptic":56,"./key":67,"./signature":68,"hash.js":73}],67:[function(require,module,exports){
'use strict';

var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;

/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/
function KeyPair(eddsa, params) {
  this.eddsa = eddsa;
  this._secret = parseBytes(params.secret);
  if (eddsa.isPoint(params.pub))
    this._pub = params.pub;
  else
    this._pubBytes = parseBytes(params.pub);
}

KeyPair.fromPublic = function fromPublic(eddsa, pub) {
  if (pub instanceof KeyPair)
    return pub;
  return new KeyPair(eddsa, { pub: pub });
};

KeyPair.fromSecret = function fromSecret(eddsa, secret) {
  if (secret instanceof KeyPair)
    return secret;
  return new KeyPair(eddsa, { secret: secret });
};

KeyPair.prototype.secret = function secret() {
  return this._secret;
};

cachedProperty(KeyPair, function pubBytes() {
  return this.eddsa.encodePoint(this.pub());
});

cachedProperty(KeyPair, function pub() {
  if (this._pubBytes)
    return this.eddsa.decodePoint(this._pubBytes);
  return this.eddsa.g.mul(this.priv());
});

cachedProperty(KeyPair, function privBytes() {
  var eddsa = this.eddsa;
  var hash = this.hash();
  var lastIx = eddsa.encodingLength - 1;

  var a = hash.slice(0, eddsa.encodingLength);
  a[0] &= 248;
  a[lastIx] &= 127;
  a[lastIx] |= 64;

  return a;
});

cachedProperty(KeyPair, function priv() {
  return this.eddsa.decodeInt(this.privBytes());
});

cachedProperty(KeyPair, function hash() {
  return this.eddsa.hash().update(this.secret()).digest();
});

cachedProperty(KeyPair, function messagePrefix() {
  return this.hash().slice(this.eddsa.encodingLength);
});

KeyPair.prototype.sign = function sign(message) {
  assert(this._secret, 'KeyPair can only verify');
  return this.eddsa.sign(message, this);
};

KeyPair.prototype.verify = function verify(message, sig) {
  return this.eddsa.verify(message, sig, this);
};

KeyPair.prototype.getSecret = function getSecret(enc) {
  assert(this._secret, 'KeyPair is public only');
  return utils.encode(this.secret(), enc);
};

KeyPair.prototype.getPublic = function getPublic(enc) {
  return utils.encode(this.pubBytes(), enc);
};

module.exports = KeyPair;

},{"../../elliptic":56}],68:[function(require,module,exports){
'use strict';

var bn = require('bn.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;

/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/
function Signature(eddsa, sig) {
  this.eddsa = eddsa;

  if (typeof sig !== 'object')
    sig = parseBytes(sig);

  if (Array.isArray(sig)) {
    sig = {
      R: sig.slice(0, eddsa.encodingLength),
      S: sig.slice(eddsa.encodingLength)
    };
  }

  assert(sig.R && sig.S, 'Signature without R or S');

  if (eddsa.isPoint(sig.R))
    this._R = sig.R;
  if (sig.S instanceof bn)
    this._S = sig.S;

  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}

cachedProperty(Signature, function S() {
  return this.eddsa.decodeInt(this.Sencoded());
});

cachedProperty(Signature, function R() {
  return this.eddsa.decodePoint(this.Rencoded());
});

cachedProperty(Signature, function Rencoded() {
  return this.eddsa.encodePoint(this.R());
});

cachedProperty(Signature, function Sencoded() {
  return this.eddsa.encodeInt(this.S());
});

Signature.prototype.toBytes = function toBytes() {
  return this.Rencoded().concat(this.Sencoded());
};

Signature.prototype.toHex = function toHex() {
  return utils.encode(this.toBytes(), 'hex').toUpperCase();
};

module.exports = Signature;

},{"../../elliptic":56,"bn.js":54}],69:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var elliptic = require('../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this.reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc);
  var nonce = utils.toArray(options.nonce, options.nonceEnc);
  var pers = utils.toArray(options.pers, options.persEnc);
  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this.reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toBuffer(entropy, entropyEnc);
  add = utils.toBuffer(add, addEnc);

  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this.reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this.reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc);
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this.reseed++;
  return utils.encode(res, enc);
};

},{"../elliptic":56,"hash.js":73}],70:[function(require,module,exports){
module.exports = {
  doubles: {
    step: 4,
    points: [
      [
        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
      ],
      [
        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
      ],
      [
        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
      ],
      [
        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
      ],
      [
        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
      ],
      [
        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
      ],
      [
        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
      ],
      [
        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
      ],
      [
        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
      ],
      [
        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
      ],
      [
        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
      ],
      [
        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
      ],
      [
        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
      ],
      [
        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
      ],
      [
        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
      ],
      [
        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
      ],
      [
        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
      ],
      [
        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
      ],
      [
        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
      ],
      [
        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
      ],
      [
        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
      ],
      [
        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
      ],
      [
        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
      ],
      [
        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
      ],
      [
        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
      ],
      [
        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
      ],
      [
        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
      ],
      [
        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
      ],
      [
        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
      ],
      [
        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
      ],
      [
        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
      ],
      [
        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
      ],
      [
        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
      ],
      [
        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
      ],
      [
        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
      ],
      [
        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
      ],
      [
        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
      ],
      [
        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
      ],
      [
        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
      ],
      [
        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
      ],
      [
        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
      ],
      [
        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
      ],
      [
        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
      ],
      [
        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
      ],
      [
        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
      ],
      [
        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
      ],
      [
        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
      ],
      [
        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
      ],
      [
        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
      ],
      [
        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
      ],
      [
        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
      ],
      [
        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
      ],
      [
        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
      ],
      [
        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
      ],
      [
        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
      ],
      [
        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
      ],
      [
        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
      ],
      [
        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
      ],
      [
        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
      ],
      [
        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
      ],
      [
        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
      ],
      [
        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
      ],
      [
        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
      ],
      [
        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
      ],
      [
        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
      ]
    ]
  },
  naf: {
    wnd: 7,
    points: [
      [
        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
      ],
      [
        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
      ],
      [
        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
      ],
      [
        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
      ],
      [
        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
      ],
      [
        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
      ],
      [
        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
      ],
      [
        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
      ],
      [
        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
      ],
      [
        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
      ],
      [
        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
      ],
      [
        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
      ],
      [
        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
      ],
      [
        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
      ],
      [
        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
      ],
      [
        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
      ],
      [
        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
      ],
      [
        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
      ],
      [
        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
      ],
      [
        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
      ],
      [
        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
      ],
      [
        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
      ],
      [
        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
      ],
      [
        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
      ],
      [
        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
      ],
      [
        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
      ],
      [
        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
      ],
      [
        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
      ],
      [
        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
      ],
      [
        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
      ],
      [
        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
      ],
      [
        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
      ],
      [
        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
      ],
      [
        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
      ],
      [
        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
      ],
      [
        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
      ],
      [
        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
      ],
      [
        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
      ],
      [
        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
      ],
      [
        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
      ],
      [
        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
      ],
      [
        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
      ],
      [
        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
      ],
      [
        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
      ],
      [
        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
      ],
      [
        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
      ],
      [
        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
      ],
      [
        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
      ],
      [
        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
      ],
      [
        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
      ],
      [
        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
      ],
      [
        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
      ],
      [
        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
      ],
      [
        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
      ],
      [
        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
      ],
      [
        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
      ],
      [
        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
      ],
      [
        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
      ],
      [
        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
      ],
      [
        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
      ],
      [
        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
      ],
      [
        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
      ],
      [
        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
      ],
      [
        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
      ],
      [
        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
      ],
      [
        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
      ],
      [
        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
      ],
      [
        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
      ],
      [
        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
      ],
      [
        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
      ],
      [
        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
      ],
      [
        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
      ],
      [
        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
      ],
      [
        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
      ],
      [
        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
      ],
      [
        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
      ],
      [
        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
      ],
      [
        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
      ],
      [
        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
      ],
      [
        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
      ],
      [
        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
      ],
      [
        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
      ],
      [
        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
      ],
      [
        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
      ],
      [
        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
      ],
      [
        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
      ],
      [
        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
      ],
      [
        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
      ],
      [
        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
      ],
      [
        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
      ],
      [
        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
      ],
      [
        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
      ],
      [
        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
      ],
      [
        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
      ],
      [
        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
      ],
      [
        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
      ],
      [
        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
      ],
      [
        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
      ],
      [
        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
      ],
      [
        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
      ],
      [
        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
      ],
      [
        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
      ],
      [
        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
      ],
      [
        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
      ],
      [
        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
      ],
      [
        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
      ],
      [
        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
      ],
      [
        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
      ],
      [
        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
      ],
      [
        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
      ],
      [
        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
      ],
      [
        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
      ],
      [
        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
      ],
      [
        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
      ],
      [
        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
      ],
      [
        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
      ],
      [
        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
      ],
      [
        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
      ],
      [
        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
      ],
      [
        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
      ],
      [
        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
      ],
      [
        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
      ],
      [
        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
      ],
      [
        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
      ],
      [
        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
      ],
      [
        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
      ],
      [
        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
      ]
    ]
  }
};

},{}],71:[function(require,module,exports){
'use strict';

var utils = exports;
var bn = require('bn.js');

utils.assert = function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
};

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
    return res;
  }
  if (!enc) {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi)
        res.push(hi, lo);
      else
        res.push(lo);
    }
  } else if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0)
      msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2)
      res.push(parseInt(msg[i] + msg[i + 1], 16));
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex')
    return toHex(arr);
  else
    return arr;
};

// Represent num in a w-NAF form
function getNAF(num, w) {
  var naf = [];
  var ws = 1 << (w + 1);
  var k = num.clone();
  while (k.cmpn(1) >= 0) {
    var z;
    if (k.isOdd()) {
      var mod = k.andln(ws - 1);
      if (mod > (ws >> 1) - 1)
        z = (ws >> 1) - mod;
      else
        z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }
    naf.push(z);

    // Optimization, shift by word if possible
    var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;
    for (var i = 1; i < shift; i++)
      naf.push(0);
    k.iushrn(shift);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [
    [],
    []
  ];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

    // First phase
    var m14 = (k1.andln(3) + d1) & 3;
    var m24 = (k2.andln(3) + d2) & 3;
    if (m14 === 3)
      m14 = -1;
    if (m24 === 3)
      m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      var m8 = (k1.andln(7) + d1) & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      var m8 = (k2.andln(7) + d2) & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1)
      d1 = 1 - d1;
    if (2 * d2 === u2 + 1)
      d2 = 1 - d2;
    k1.iushrn(1);
    k2.iushrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

function cachedProperty(obj, computer) {
  var name = computer.name;
  var key = '_' + name;
  obj.prototype[name] = function cachedProperty() {
    return this[key] !== undefined ? this[key] :
           this[key] = computer.call(this);
  };
}
utils.cachedProperty = cachedProperty;

function parseBytes(bytes) {
  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
                                     bytes;
}
utils.parseBytes = parseBytes;

function intFromLE(bytes) {
  return new bn(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;


},{"bn.js":54}],72:[function(require,module,exports){
var r;

module.exports = function rand(len) {
  if (!r)
    r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

if (typeof window === 'object') {
  if (window.crypto && window.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      window.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (window.msCrypto && window.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      window.msCrypto.getRandomValues(arr);
      return arr;
    };
  } else {
    // Old junk
    Rand.prototype._rand = function() {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker
  try {
    var crypto = require('cry' + 'pto');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {
    // Emulate crypto API using randy
    Rand.prototype._rand = function _rand(n) {
      var res = new Uint8Array(n);
      for (var i = 0; i < res.length; i++)
        res[i] = this.rand.getByte();
      return res;
    };
  }
}

},{}],73:[function(require,module,exports){
var hash = exports;

hash.utils = require('./hash/utils');
hash.common = require('./hash/common');
hash.sha = require('./hash/sha');
hash.ripemd = require('./hash/ripemd');
hash.hmac = require('./hash/hmac');

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

},{"./hash/common":74,"./hash/hmac":75,"./hash/ripemd":76,"./hash/sha":77,"./hash/utils":78}],74:[function(require,module,exports){
var hash = require('../hash');
var utils = hash.utils;
var assert = utils.assert;

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32)
      this._update(msg, i, i + this._delta32);
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - ((len + this.padLength) % bytes);
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;
  }

  return res;
};

},{"../hash":73}],75:[function(require,module,exports){
var hmac = exports;

var hash = require('../hash');
var utils = hash.utils;
var assert = utils.assert;

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  for (var i = 0; i < key.length; i++)
    key[i] ^= 0x36;
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (var i = 0; i < key.length; i++)
    key[i] ^= 0x6a;
  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};

},{"../hash":73}],76:[function(require,module,exports){
var hash = require('../hash');
var utils = hash.utils;

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = hash.common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'little');
  else
    return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];

},{"../hash":73}],77:[function(require,module,exports){
var hash = require('../hash');
var utils = hash.utils;
var assert = utils.assert;

var rotr32 = utils.rotr32;
var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;
var BlockHash = hash.common.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

var sha512_K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

var sha1_K = [
  0x5A827999, 0x6ED9EBA1,
  0x8F1BBCDC, 0xCA62C1D6
];

function SHA256() {
  if (!(this instanceof SHA256))
    return new SHA256();

  BlockHash.call(this);
  this.h = [ 0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
             0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19 ];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
exports.sha256 = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i++)
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [ 0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
             0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils.inherits(SHA224, SHA256);
exports.sha224 = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils.split32(this.h.slice(0, 7), 'big');
};

function SHA512() {
  if (!(this instanceof SHA512))
    return new SHA512();

  BlockHash.call(this);
  this.h = [ 0x6a09e667, 0xf3bcc908,
             0xbb67ae85, 0x84caa73b,
             0x3c6ef372, 0xfe94f82b,
             0xa54ff53a, 0x5f1d36f1,
             0x510e527f, 0xade682d1,
             0x9b05688c, 0x2b3e6c1f,
             0x1f83d9ab, 0xfb41bd6b,
             0x5be0cd19, 0x137e2179 ];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
exports.sha512 = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14];  // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32];  // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(c0_hi, c0_lo,
                      c1_hi, c1_lo,
                      c2_hi, c2_lo,
                      c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(c0_hi, c0_lo,
                          c1_hi, c1_lo,
                          c2_hi, c2_lo,
                          c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(c0_hi, c0_lo,
                           c1_hi, c1_lo,
                           c2_hi, c2_lo,
                           c3_hi, c3_lo,
                           c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(c0_hi, c0_lo,
                           c1_hi, c1_lo,
                           c2_hi, c2_lo,
                           c3_hi, c3_lo,
                           c4_hi, c4_lo);

    var c0_hi = s0_512_hi(ah, al);
    var c0_lo = s0_512_lo(ah, al);
    var c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    var c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function SHA384() {
  if (!(this instanceof SHA384))
    return new SHA384();

  SHA512.call(this);
  this.h = [ 0xcbbb9d5d, 0xc1059ed8,
             0x629a292a, 0x367cd507,
             0x9159015a, 0x3070dd17,
             0x152fecd8, 0xf70e5939,
             0x67332667, 0xffc00b31,
             0x8eb44a87, 0x68581511,
             0xdb0c2e0d, 0x64f98fa7,
             0x47b5481d, 0xbefa4fa4 ];
}
utils.inherits(SHA384, SHA512);
exports.sha384 = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 12), 'big');
  else
    return utils.split32(this.h.slice(0, 12), 'big');
};

function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();

  BlockHash.call(this);
  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe,
             0x10325476, 0xc3d2e1f0 ];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
exports.sha1 = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];

  for(; i < W.length; i++)
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (var i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function ch32(x, y, z) {
  return (x & y) ^ ((~x) & z);
}

function maj32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}

function p32(x, y, z) {
  return x ^ y ^ z;
}

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}

function ft_1(s, x, y, z) {
  if (s === 0)
    return ch32(x, y, z);
  if (s === 1 || s === 3)
    return p32(x, y, z);
  if (s === 2)
    return maj32(x, y, z);
}

function ch64_hi(xh, xl, yh, yl, zh, zl) {
  var r = (xh & yh) ^ ((~xh) & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ ((~xl) & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh, zl) {
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

},{"../hash":73}],78:[function(require,module,exports){
var utils = exports;
var inherits = require('inherits');

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi)
          res.push(hi, lo);
        else
          res.push(lo);
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (var i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
utils.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

function htonl(w) {
  var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
  return res >>> 0;
}
utils.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little')
      w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
utils.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
utils.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
utils.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
utils.split32 = split32;

function rotr32(w, b) {
  return (w >>> b) | (w << (32 - b));
}
utils.rotr32 = rotr32;

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}
utils.rotl32 = rotl32;

function sum32(a, b) {
  return (a + b) >>> 0;
}
utils.sum32 = sum32;

function sum32_3(a, b, c) {
  return (a + b + c) >>> 0;
}
utils.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return (a + b + c + d) >>> 0;
}
utils.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return (a + b + c + d + e) >>> 0;
}
utils.sum32_5 = sum32_5;

function assert(cond, msg) {
  if (!cond)
    throw new Error(msg || 'Assertion failed');
}
utils.assert = assert;

utils.inherits = inherits;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
};
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
};
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
};
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
};
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = (lo + el) >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
};
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
};
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
};
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
};
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
};
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
};
exports.shr64_lo = shr64_lo;

},{"inherits":214}],79:[function(require,module,exports){
module.exports={
  "name": "elliptic",
  "version": "6.0.2",
  "description": "EC cryptography",
  "main": "lib/elliptic.js",
  "files": [
    "lib"
  ],
  "scripts": {
    "test": "make lint && istanbul test _mocha --reporter=spec test/*-test.js",
    "coveralls": "cat ./coverage/lcov.info | coveralls"
  },
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/indutny/elliptic.git"
  },
  "keywords": [
    "EC",
    "Elliptic",
    "curve",
    "Cryptography"
  ],
  "author": {
    "name": "Fedor Indutny",
    "email": "fedor@indutny.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/indutny/elliptic/issues"
  },
  "homepage": "https://github.com/indutny/elliptic",
  "devDependencies": {
    "browserify": "^3.44.2",
    "coveralls": "^2.11.3",
    "istanbul": "^0.3.17",
    "jscs": "^1.11.3",
    "jshint": "^2.6.0",
    "mocha": "^2.1.0",
    "uglify-js": "^2.4.13"
  },
  "dependencies": {
    "bn.js": "^4.0.0",
    "brorand": "^1.0.1",
    "hash.js": "^1.0.0",
    "inherits": "^2.0.1"
  },
  "readme": "# Elliptic [![Build Status](https://secure.travis-ci.org/indutny/elliptic.png)](http://travis-ci.org/indutny/elliptic) [![Coverage Status](https://coveralls.io/repos/indutny/elliptic/badge.svg?branch=master&service=github)](https://coveralls.io/github/indutny/elliptic?branch=master)\n\nFast elliptic-curve cryptography in a plain javascript implementation.\n\nNOTE: Please take a look at http://safecurves.cr.yp.to/ before choosing a curve\nfor your cryptography operations.\n\n## Incentive\n\nECC is much slower than regular RSA cryptography, the JS implementations are\neven more slower.\n\n## Benchmarks\n\n```bash\n$ node benchmarks/index.js\nBenchmarking: sign\nelliptic#sign x 262 ops/sec ±0.51% (177 runs sampled)\neccjs#sign x 55.91 ops/sec ±0.90% (144 runs sampled)\n------------------------\nFastest is elliptic#sign\n========================\nBenchmarking: verify\nelliptic#verify x 113 ops/sec ±0.50% (166 runs sampled)\neccjs#verify x 48.56 ops/sec ±0.36% (125 runs sampled)\n------------------------\nFastest is elliptic#verify\n========================\nBenchmarking: gen\nelliptic#gen x 294 ops/sec ±0.43% (176 runs sampled)\neccjs#gen x 62.25 ops/sec ±0.63% (129 runs sampled)\n------------------------\nFastest is elliptic#gen\n========================\nBenchmarking: ecdh\nelliptic#ecdh x 136 ops/sec ±0.85% (156 runs sampled)\n------------------------\nFastest is elliptic#ecdh\n========================\n```\n\n## API\n\n### ECDSA\n\n```javascript\nvar EC = require('elliptic').ec;\n\n// Create and initialize EC context\n// (better do it once and reuse it)\nvar ec = new EC('secp256k1');\n\n// Generate keys\nvar key = ec.genKeyPair();\n\n// Sign message (must be an array, or it'll be treated as a hex sequence)\nvar msg = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ];\nvar signature = key.sign(msg);\n\n// Export DER encoded signature in Array\nvar derSign = signature.toDER();\n\n// Verify signature\nconsole.log(key.verify(msg, derSign));\n```\n\n### ECDH\n\n```javascript\n// Generate keys\nvar key1 = ec.genKeyPair();\nvar key2 = ec.genKeyPair();\n\nvar shared1 = key1.derive(key2.getPublic());\nvar shared2 = key2.derive(key1.getPublic());\n\nconsole.log('Both shared secrets are BN instances');\nconsole.log(shared1.toString(16));\nconsole.log(shared2.toString(16));\n```\n\nNOTE: `.derive()` returns a [BN][1] instance.\n\n## Supported curves\n\nElliptic.js support following curve types:\n\n* Short Weierstrass\n* Montgomery\n* Edwards\n* Twisted Edwards\n\nFollowing curve 'presets' are embedded into the library:\n\n* `secp256k1`\n* `p192`\n* `p224`\n* `p256`\n* `curve25519`\n* `ed25519`\n\nNOTE: That `curve25519` could not be used for ECDSA, use `ed25519` instead.\n\n### Implementation details\n\nECDSA is using deterministic `k` value generation as per [RFC6979][0]. Most of\nthe curve operations are performed on non-affine coordinates (either projective\nor extended), various windowing techniques are used for different cases.\n\nAll operations are performed in reduction context using [bn.js][1], hashing is\nprovided by [hash.js][2]\n\n### Related projects\n\n* [eccrypto][3]: isomorphic implementation of ECDSA, ECDH and ECIES for both\n  browserify and node (uses `elliptic` for browser and [secp256k1-node][4] for\n  node)\n\n#### LICENSE\n\nThis software is licensed under the MIT License.\n\nCopyright Fedor Indutny, 2014.\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to permit\npersons to whom the Software is furnished to do so, subject to the\nfollowing conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\nNO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\nDAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\nUSE OR OTHER DEALINGS IN THE SOFTWARE.\n\n[0]: http://tools.ietf.org/html/rfc6979\n[1]: https://github.com/indutny/bn.js\n[2]: https://github.com/indutny/hash.js\n[3]: https://github.com/bitchan/eccrypto\n[4]: https://github.com/wanderer/secp256k1-node\n",
  "readmeFilename": "README.md",
  "_id": "elliptic@6.0.2",
  "_from": "elliptic@>=6.0.0 <7.0.0"
}

},{}],80:[function(require,module,exports){
module.exports={"2.16.840.1.101.3.4.1.1": "aes-128-ecb",
"2.16.840.1.101.3.4.1.2": "aes-128-cbc",
"2.16.840.1.101.3.4.1.3": "aes-128-ofb",
"2.16.840.1.101.3.4.1.4": "aes-128-cfb",
"2.16.840.1.101.3.4.1.21": "aes-192-ecb",
"2.16.840.1.101.3.4.1.22": "aes-192-cbc",
"2.16.840.1.101.3.4.1.23": "aes-192-ofb",
"2.16.840.1.101.3.4.1.24": "aes-192-cfb",
"2.16.840.1.101.3.4.1.41": "aes-256-ecb",
"2.16.840.1.101.3.4.1.42": "aes-256-cbc",
"2.16.840.1.101.3.4.1.43": "aes-256-ofb",
"2.16.840.1.101.3.4.1.44": "aes-256-cfb"
}
},{}],81:[function(require,module,exports){
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.

var asn1 = require('asn1.js')

var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('modulus').int(),
    this.key('publicExponent').int(),
    this.key('privateExponent').int(),
    this.key('prime1').int(),
    this.key('prime2').int(),
    this.key('exponent1').int(),
    this.key('exponent2').int(),
    this.key('coefficient').int()
  )
})
exports.RSAPrivateKey = RSAPrivateKey

var RSAPublicKey = asn1.define('RSAPublicKey', function () {
  this.seq().obj(
    this.key('modulus').int(),
    this.key('publicExponent').int()
  )
})
exports.RSAPublicKey = RSAPublicKey

var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})
exports.PublicKey = PublicKey

var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('none').null_().optional(),
    this.key('curve').objid().optional(),
    this.key('params').seq().obj(
      this.key('p').int(),
      this.key('q').int(),
      this.key('g').int()
    ).optional()
  )
})

var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPrivateKey').octstr()
  )
})
exports.PrivateKey = PrivateKeyInfo
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').seq().obj(
      this.key('id').objid(),
      this.key('decrypt').seq().obj(
        this.key('kde').seq().obj(
          this.key('id').objid(),
          this.key('kdeparams').seq().obj(
            this.key('salt').octstr(),
            this.key('iters').int()
          )
        ),
        this.key('cipher').seq().obj(
          this.key('algo').objid(),
          this.key('iv').octstr()
        )
      )
    ),
    this.key('subjectPrivateKey').octstr()
  )
})

exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo

var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('p').int(),
    this.key('q').int(),
    this.key('g').int(),
    this.key('pub_key').int(),
    this.key('priv_key').int()
  )
})
exports.DSAPrivateKey = DSAPrivateKey

exports.DSAparam = asn1.define('DSAparam', function () {
  this.int()
})
var ECPrivateKey = asn1.define('ECPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('privateKey').octstr(),
    this.key('parameters').optional().explicit(0).use(ECParameters),
    this.key('publicKey').optional().explicit(1).bitstr()
  )
})
exports.ECPrivateKey = ECPrivateKey
var ECParameters = asn1.define('ECParameters', function () {
  this.choice({
    namedCurve: this.objid()
  })
})

exports.signature = asn1.define('signature', function () {
  this.seq().obj(
    this.key('r').int(),
    this.key('s').int()
  )
})

},{"asn1.js":84}],82:[function(require,module,exports){
(function (Buffer){
// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED\r?\nDEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)\r?\n\r?\n([0-9A-z\n\r\+\/\=]+)\r?\n/m
var startRegex = /^-----BEGIN (.*) KEY-----\r?\n/m
var fullRegex = /^-----BEGIN (.*) KEY-----\r?\n([0-9A-z\n\r\+\/\=]+)\r?\n-----END \1 KEY-----$/m
var evp = require('evp_bytestokey')
var ciphers = require('browserify-aes')
module.exports = function (okey, password) {
  var key = okey.toString()
  var match = key.match(findProc)
  var decrypted
  if (!match) {
    var match2 = key.match(fullRegex)
    decrypted = new Buffer(match2[2].replace(/\r?\n/g, ''), 'base64')
  } else {
    var suite = 'aes' + match[1]
    var iv = new Buffer(match[2], 'hex')
    var cipherText = new Buffer(match[3].replace(/\r?\n/g, ''), 'base64')
    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key
    var out = []
    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)
    out.push(cipher.update(cipherText))
    out.push(cipher.final())
    decrypted = Buffer.concat(out)
  }
  var tag = key.match(startRegex)[1] + ' KEY'
  return {
    tag: tag,
    data: decrypted
  }
}

}).call(this,require("buffer").Buffer)
},{"browserify-aes":101,"buffer":17,"evp_bytestokey":116}],83:[function(require,module,exports){
(function (Buffer){
var asn1 = require('./asn1')
var aesid = require('./aesid.json')
var fixProc = require('./fixProc')
var ciphers = require('browserify-aes')
var compat = require('pbkdf2')
module.exports = parseKeys

function parseKeys (buffer) {
  var password
  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
    password = buffer.passphrase
    buffer = buffer.key
  }
  if (typeof buffer === 'string') {
    buffer = new Buffer(buffer)
  }

  var stripped = fixProc(buffer, password)

  var type = stripped.tag
  var data = stripped.data
  var subtype, ndata
  switch (type) {
    case 'PUBLIC KEY':
      ndata = asn1.PublicKey.decode(data, 'der')
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
        case '1.2.840.10045.2.1':
          ndata.subjectPrivateKey = ndata.subjectPublicKey
          return {
            type: 'ec',
            data: ndata
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')
          return {
            type: 'dsa',
            data: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      throw new Error('unknown key type ' + type)
    case 'ENCRYPTED PRIVATE KEY':
      data = asn1.EncryptedPrivateKey.decode(data, 'der')
      data = decrypt(data, password)
      // falls through
    case 'PRIVATE KEY':
      ndata = asn1.PrivateKey.decode(data, 'der')
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
        case '1.2.840.10045.2.1':
          return {
            curve: ndata.algorithm.curve,
            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')
          return {
            type: 'dsa',
            params: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      throw new Error('unknown key type ' + type)
    case 'RSA PUBLIC KEY':
      return asn1.RSAPublicKey.decode(data, 'der')
    case 'RSA PRIVATE KEY':
      return asn1.RSAPrivateKey.decode(data, 'der')
    case 'DSA PRIVATE KEY':
      return {
        type: 'dsa',
        params: asn1.DSAPrivateKey.decode(data, 'der')
      }
    case 'EC PRIVATE KEY':
      data = asn1.ECPrivateKey.decode(data, 'der')
      return {
        curve: data.parameters.value,
        privateKey: data.privateKey
      }
    default: throw new Error('unknown key type ' + type)
  }
}
parseKeys.signature = asn1.signature
function decrypt (data, password) {
  var salt = data.algorithm.decrypt.kde.kdeparams.salt
  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)
  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]
  var iv = data.algorithm.decrypt.cipher.iv
  var cipherText = data.subjectPrivateKey
  var keylen = parseInt(algo.split('-')[1], 10) / 8
  var key = compat.pbkdf2Sync(password, salt, iters, keylen)
  var cipher = ciphers.createDecipheriv(algo, key, iv)
  var out = []
  out.push(cipher.update(cipherText))
  out.push(cipher.final())
  return Buffer.concat(out)
}

}).call(this,require("buffer").Buffer)
},{"./aesid.json":80,"./asn1":81,"./fixProc":82,"browserify-aes":101,"buffer":17,"pbkdf2":166}],84:[function(require,module,exports){
var asn1 = exports;

asn1.bignum = require('bn.js');

asn1.define = require('./asn1/api').define;
asn1.base = require('./asn1/base');
asn1.constants = require('./asn1/constants');
asn1.decoders = require('./asn1/decoders');
asn1.encoders = require('./asn1/encoders');

},{"./asn1/api":85,"./asn1/base":87,"./asn1/constants":91,"./asn1/decoders":93,"./asn1/encoders":96,"bn.js":54}],85:[function(require,module,exports){
var asn1 = require('../asn1');
var inherits = require('inherits');

var api = exports;

api.define = function define(name, body) {
  return new Entity(name, body);
};

function Entity(name, body) {
  this.name = name;
  this.body = body;

  this.decoders = {};
  this.encoders = {};
};

Entity.prototype._createNamed = function createNamed(base) {
  var named;
  try {
    named = require('vm').runInThisContext(
      '(function ' + this.name + '(entity) {\n' +
      '  this._initNamed(entity);\n' +
      '})'
    );
  } catch (e) {
    named = function (entity) {
      this._initNamed(entity);
    };
  }
  inherits(named, base);
  named.prototype._initNamed = function initnamed(entity) {
    base.call(this, entity);
  };

  return new named(this);
};

Entity.prototype._getDecoder = function _getDecoder(enc) {
  // Lazily create decoder
  if (!this.decoders.hasOwnProperty(enc))
    this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
  return this.decoders[enc];
};

Entity.prototype.decode = function decode(data, enc, options) {
  return this._getDecoder(enc).decode(data, options);
};

Entity.prototype._getEncoder = function _getEncoder(enc) {
  // Lazily create encoder
  if (!this.encoders.hasOwnProperty(enc))
    this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
  return this.encoders[enc];
};

Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
  return this._getEncoder(enc).encode(data, reporter);
};

},{"../asn1":84,"inherits":214,"vm":237}],86:[function(require,module,exports){
var inherits = require('inherits');
var Reporter = require('../base').Reporter;
var Buffer = require('buffer').Buffer;

function DecoderBuffer(base, options) {
  Reporter.call(this, options);
  if (!Buffer.isBuffer(base)) {
    this.error('Input not Buffer');
    return;
  }

  this.base = base;
  this.offset = 0;
  this.length = base.length;
}
inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;

DecoderBuffer.prototype.save = function save() {
  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
};

DecoderBuffer.prototype.restore = function restore(save) {
  // Return skipped data
  var res = new DecoderBuffer(this.base);
  res.offset = save.offset;
  res.length = this.offset;

  this.offset = save.offset;
  Reporter.prototype.restore.call(this, save.reporter);

  return res;
};

DecoderBuffer.prototype.isEmpty = function isEmpty() {
  return this.offset === this.length;
};

DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
  if (this.offset + 1 <= this.length)
    return this.base.readUInt8(this.offset++, true);
  else
    return this.error(fail || 'DecoderBuffer overrun');
}

DecoderBuffer.prototype.skip = function skip(bytes, fail) {
  if (!(this.offset + bytes <= this.length))
    return this.error(fail || 'DecoderBuffer overrun');

  var res = new DecoderBuffer(this.base);

  // Share reporter state
  res._reporterState = this._reporterState;

  res.offset = this.offset;
  res.length = this.offset + bytes;
  this.offset += bytes;
  return res;
}

DecoderBuffer.prototype.raw = function raw(save) {
  return this.base.slice(save ? save.offset : this.offset, this.length);
}

function EncoderBuffer(value, reporter) {
  if (Array.isArray(value)) {
    this.length = 0;
    this.value = value.map(function(item) {
      if (!(item instanceof EncoderBuffer))
        item = new EncoderBuffer(item, reporter);
      this.length += item.length;
      return item;
    }, this);
  } else if (typeof value === 'number') {
    if (!(0 <= value && value <= 0xff))
      return reporter.error('non-byte EncoderBuffer value');
    this.value = value;
    this.length = 1;
  } else if (typeof value === 'string') {
    this.value = value;
    this.length = Buffer.byteLength(value);
  } else if (Buffer.isBuffer(value)) {
    this.value = value;
    this.length = value.length;
  } else {
    return reporter.error('Unsupported type: ' + typeof value);
  }
}
exports.EncoderBuffer = EncoderBuffer;

EncoderBuffer.prototype.join = function join(out, offset) {
  if (!out)
    out = new Buffer(this.length);
  if (!offset)
    offset = 0;

  if (this.length === 0)
    return out;

  if (Array.isArray(this.value)) {
    this.value.forEach(function(item) {
      item.join(out, offset);
      offset += item.length;
    });
  } else {
    if (typeof this.value === 'number')
      out[offset] = this.value;
    else if (typeof this.value === 'string')
      out.write(this.value, offset);
    else if (Buffer.isBuffer(this.value))
      this.value.copy(out, offset);
    offset += this.length;
  }

  return out;
};

},{"../base":87,"buffer":17,"inherits":214}],87:[function(require,module,exports){
var base = exports;

base.Reporter = require('./reporter').Reporter;
base.DecoderBuffer = require('./buffer').DecoderBuffer;
base.EncoderBuffer = require('./buffer').EncoderBuffer;
base.Node = require('./node');

},{"./buffer":86,"./node":88,"./reporter":89}],88:[function(require,module,exports){
var Reporter = require('../base').Reporter;
var EncoderBuffer = require('../base').EncoderBuffer;
var assert = require('minimalistic-assert');

// Supported tags
var tags = [
  'seq', 'seqof', 'set', 'setof', 'octstr', 'bitstr', 'objid', 'bool',
  'gentime', 'utctime', 'null_', 'enum', 'int', 'ia5str', 'utf8str', 'bmpstr',
  'numstr', 'printstr'
];

// Public methods list
var methods = [
  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
  'any'
].concat(tags);

// Overrided methods list
var overrided = [
  '_peekTag', '_decodeTag', '_use',
  '_decodeStr', '_decodeObjid', '_decodeTime',
  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
  '_encodeNull', '_encodeInt', '_encodeBool'
];

function Node(enc, parent) {
  var state = {};
  this._baseState = state;

  state.enc = enc;

  state.parent = parent || null;
  state.children = null;

  // State
  state.tag = null;
  state.args = null;
  state.reverseArgs = null;
  state.choice = null;
  state.optional = false;
  state.any = false;
  state.obj = false;
  state.use = null;
  state.useDecoder = null;
  state.key = null;
  state['default'] = null;
  state.explicit = null;
  state.implicit = null;

  // Should create new instance on each method
  if (!state.parent) {
    state.children = [];
    this._wrap();
  }
}
module.exports = Node;

var stateProps = [
  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
  'implicit'
];

Node.prototype.clone = function clone() {
  var state = this._baseState;
  var cstate = {};
  stateProps.forEach(function(prop) {
    cstate[prop] = state[prop];
  });
  var res = new this.constructor(cstate.parent);
  res._baseState = cstate;
  return res;
};

Node.prototype._wrap = function wrap() {
  var state = this._baseState;
  methods.forEach(function(method) {
    this[method] = function _wrappedMethod() {
      var clone = new this.constructor(this);
      state.children.push(clone);
      return clone[method].apply(clone, arguments);
    };
  }, this);
};

Node.prototype._init = function init(body) {
  var state = this._baseState;

  assert(state.parent === null);
  body.call(this);

  // Filter children
  state.children = state.children.filter(function(child) {
    return child._baseState.parent === this;
  }, this);
  assert.equal(state.children.length, 1, 'Root node can have only one child');
};

Node.prototype._useArgs = function useArgs(args) {
  var state = this._baseState;

  // Filter children and args
  var children = args.filter(function(arg) {
    return arg instanceof this.constructor;
  }, this);
  args = args.filter(function(arg) {
    return !(arg instanceof this.constructor);
  }, this);

  if (children.length !== 0) {
    assert(state.children === null);
    state.children = children;

    // Replace parent to maintain backward link
    children.forEach(function(child) {
      child._baseState.parent = this;
    }, this);
  }
  if (args.length !== 0) {
    assert(state.args === null);
    state.args = args;
    state.reverseArgs = args.map(function(arg) {
      if (typeof arg !== 'object' || arg.constructor !== Object)
        return arg;

      var res = {};
      Object.keys(arg).forEach(function(key) {
        if (key == (key | 0))
          key |= 0;
        var value = arg[key];
        res[value] = key;
      });
      return res;
    });
  }
};

//
// Overrided methods
//

overrided.forEach(function(method) {
  Node.prototype[method] = function _overrided() {
    var state = this._baseState;
    throw new Error(method + ' not implemented for encoding: ' + state.enc);
  };
});

//
// Public methods
//

tags.forEach(function(tag) {
  Node.prototype[tag] = function _tagMethod() {
    var state = this._baseState;
    var args = Array.prototype.slice.call(arguments);

    assert(state.tag === null);
    state.tag = tag;

    this._useArgs(args);

    return this;
  };
});

Node.prototype.use = function use(item) {
  var state = this._baseState;

  assert(state.use === null);
  state.use = item;

  return this;
};

Node.prototype.optional = function optional() {
  var state = this._baseState;

  state.optional = true;

  return this;
};

Node.prototype.def = function def(val) {
  var state = this._baseState;

  assert(state['default'] === null);
  state['default'] = val;
  state.optional = true;

  return this;
};

Node.prototype.explicit = function explicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.explicit = num;

  return this;
};

Node.prototype.implicit = function implicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.implicit = num;

  return this;
};

Node.prototype.obj = function obj() {
  var state = this._baseState;
  var args = Array.prototype.slice.call(arguments);

  state.obj = true;

  if (args.length !== 0)
    this._useArgs(args);

  return this;
};

Node.prototype.key = function key(newKey) {
  var state = this._baseState;

  assert(state.key === null);
  state.key = newKey;

  return this;
};

Node.prototype.any = function any() {
  var state = this._baseState;

  state.any = true;

  return this;
};

Node.prototype.choice = function choice(obj) {
  var state = this._baseState;

  assert(state.choice === null);
  state.choice = obj;
  this._useArgs(Object.keys(obj).map(function(key) {
    return obj[key];
  }));

  return this;
};

//
// Decoding
//

Node.prototype._decode = function decode(input) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return input.wrapResult(state.children[0]._decode(input));

  var result = state['default'];
  var present = true;

  var prevKey;
  if (state.key !== null)
    prevKey = input.enterKey(state.key);

  // Check if tag is there
  if (state.optional) {
    var tag = null;
    if (state.explicit !== null)
      tag = state.explicit;
    else if (state.implicit !== null)
      tag = state.implicit;
    else if (state.tag !== null)
      tag = state.tag;

    if (tag === null && !state.any) {
      // Trial and Error
      var save = input.save();
      try {
        if (state.choice === null)
          this._decodeGeneric(state.tag, input);
        else
          this._decodeChoice(input);
        present = true;
      } catch (e) {
        present = false;
      }
      input.restore(save);
    } else {
      present = this._peekTag(input, tag, state.any);

      if (input.isError(present))
        return present;
    }
  }

  // Push object on stack
  var prevObj;
  if (state.obj && present)
    prevObj = input.enterObject();

  if (present) {
    // Unwrap explicit values
    if (state.explicit !== null) {
      var explicit = this._decodeTag(input, state.explicit);
      if (input.isError(explicit))
        return explicit;
      input = explicit;
    }

    // Unwrap implicit and normal values
    if (state.use === null && state.choice === null) {
      if (state.any)
        var save = input.save();
      var body = this._decodeTag(
        input,
        state.implicit !== null ? state.implicit : state.tag,
        state.any
      );
      if (input.isError(body))
        return body;

      if (state.any)
        result = input.raw(save);
      else
        input = body;
    }

    // Select proper method for tag
    if (state.any)
      result = result;
    else if (state.choice === null)
      result = this._decodeGeneric(state.tag, input);
    else
      result = this._decodeChoice(input);

    if (input.isError(result))
      return result;

    // Decode children
    if (!state.any && state.choice === null && state.children !== null) {
      var fail = state.children.some(function decodeChildren(child) {
        // NOTE: We are ignoring errors here, to let parser continue with other
        // parts of encoded data
        child._decode(input);
      });
      if (fail)
        return err;
    }
  }

  // Pop object
  if (state.obj && present)
    result = input.leaveObject(prevObj);

  // Set key
  if (state.key !== null && (result !== null || present === true))
    input.leaveKey(prevKey, state.key, result);

  return result;
};

Node.prototype._decodeGeneric = function decodeGeneric(tag, input) {
  var state = this._baseState;

  if (tag === 'seq' || tag === 'set')
    return null;
  if (tag === 'seqof' || tag === 'setof')
    return this._decodeList(input, tag, state.args[0]);
  else if (tag === 'octstr' || tag === 'bitstr')
    return this._decodeStr(input, tag);
  else if (tag === 'ia5str' || tag === 'utf8str' || tag === 'bmpstr')
    return this._decodeStr(input, tag);
  else if (tag === 'numstr' || tag === 'printstr')
    return this._decodeStr(input, tag);
  else if (tag === 'objid' && state.args)
    return this._decodeObjid(input, state.args[0], state.args[1]);
  else if (tag === 'objid')
    return this._decodeObjid(input, null, null);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._decodeTime(input, tag);
  else if (tag === 'null_')
    return this._decodeNull(input);
  else if (tag === 'bool')
    return this._decodeBool(input);
  else if (tag === 'int' || tag === 'enum')
    return this._decodeInt(input, state.args && state.args[0]);
  else if (state.use !== null)
    return this._getUse(state.use, input._reporterState.obj)._decode(input);
  else
    return input.error('unknown tag: ' + tag);

  return null;
};

Node.prototype._getUse = function _getUse(entity, obj) {

  var state = this._baseState;
  // Create altered use decoder if implicit is set
  state.useDecoder = this._use(entity, obj);
  assert(state.useDecoder._baseState.parent === null);
  state.useDecoder = state.useDecoder._baseState.children[0];
  if (state.implicit !== state.useDecoder._baseState.implicit) {
    state.useDecoder = state.useDecoder.clone();
    state.useDecoder._baseState.implicit = state.implicit;
  }
  return state.useDecoder;
};

Node.prototype._decodeChoice = function decodeChoice(input) {
  var state = this._baseState;
  var result = null;
  var match = false;

  Object.keys(state.choice).some(function(key) {
    var save = input.save();
    var node = state.choice[key];
    try {
      var value = node._decode(input);
      if (input.isError(value))
        return false;

      result = { type: key, value: value };
      match = true;
    } catch (e) {
      input.restore(save);
      return false;
    }
    return true;
  }, this);

  if (!match)
    return input.error('Choice not matched');

  return result;
};

//
// Encoding
//

Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
  return new EncoderBuffer(data, this.reporter);
};

Node.prototype._encode = function encode(data, reporter, parent) {
  var state = this._baseState;
  if (state['default'] !== null && state['default'] === data)
    return;

  var result = this._encodeValue(data, reporter, parent);
  if (result === undefined)
    return;

  if (this._skipDefault(result, reporter, parent))
    return;

  return result;
};

Node.prototype._encodeValue = function encode(data, reporter, parent) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return state.children[0]._encode(data, reporter || new Reporter());

  var result = null;
  var present = true;

  // Set reporter to share it with a child class
  this.reporter = reporter;

  // Check if data is there
  if (state.optional && data === undefined) {
    if (state['default'] !== null)
      data = state['default']
    else
      return;
  }

  // For error reporting
  var prevKey;

  // Encode children first
  var content = null;
  var primitive = false;
  if (state.any) {
    // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
  } else if (state.choice) {
    result = this._encodeChoice(data, reporter);
  } else if (state.children) {
    content = state.children.map(function(child) {
      if (child._baseState.tag === 'null_')
        return child._encode(null, reporter, data);

      if (child._baseState.key === null)
        return reporter.error('Child should have a key');
      var prevKey = reporter.enterKey(child._baseState.key);

      if (typeof data !== 'object')
        return reporter.error('Child expected, but input is not object');

      var res = child._encode(data[child._baseState.key], reporter, data);
      reporter.leaveKey(prevKey);

      return res;
    }, this).filter(function(child) {
      return child;
    });

    content = this._createEncoderBuffer(content);
  } else {
    if (state.tag === 'seqof' || state.tag === 'setof') {
      // TODO(indutny): this should be thrown on DSL level
      if (!(state.args && state.args.length === 1))
        return reporter.error('Too many args for : ' + state.tag);

      if (!Array.isArray(data))
        return reporter.error('seqof/setof, but data is not Array');

      var child = this.clone();
      child._baseState.implicit = null;
      content = this._createEncoderBuffer(data.map(function(item) {
        var state = this._baseState;

        return this._getUse(state.args[0], data)._encode(item, reporter);
      }, child));
    } else if (state.use !== null) {
      result = this._getUse(state.use, parent)._encode(data, reporter);
    } else {
      content = this._encodePrimitive(state.tag, data);
      primitive = true;
    }
  }

  // Encode data itself
  var result;
  if (!state.any && state.choice === null) {
    var tag = state.implicit !== null ? state.implicit : state.tag;
    var cls = state.implicit === null ? 'universal' : 'context';

    if (tag === null) {
      if (state.use === null)
        reporter.error('Tag could be ommited only for .use()');
    } else {
      if (state.use === null)
        result = this._encodeComposite(tag, primitive, cls, content);
    }
  }

  // Wrap in explicit
  if (state.explicit !== null)
    result = this._encodeComposite(state.explicit, false, 'context', result);

  return result;
};

Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
  var state = this._baseState;

  var node = state.choice[data.type];
  if (!node) {
    assert(
        false,
        data.type + ' not found in ' +
            JSON.stringify(Object.keys(state.choice)));
  }
  return node._encode(data.value, reporter);
};

Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
  var state = this._baseState;

  if (tag === 'octstr' || tag === 'bitstr' || tag === 'ia5str')
    return this._encodeStr(data, tag);
  else if (tag === 'utf8str' || tag === 'bmpstr')
    return this._encodeStr(data, tag);
  else if (tag === 'numstr' || tag === 'printstr')
    return this._encodeStr(data, tag);
  else if (tag === 'objid' && state.args)
    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
  else if (tag === 'objid')
    return this._encodeObjid(data, null, null);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._encodeTime(data, tag);
  else if (tag === 'null_')
    return this._encodeNull();
  else if (tag === 'int' || tag === 'enum')
    return this._encodeInt(data, state.args && state.reverseArgs[0]);
  else if (tag === 'bool')
    return this._encodeBool(data);
  else
    throw new Error('Unsupported tag: ' + tag);
};

Node.prototype._isNumstr = function isNumstr(str) {
  return /^[0-9 ]*$/.test(str);
};

Node.prototype._isPrintstr = function isPrintstr(str) {
  return /^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(str);
};
},{"../base":87,"minimalistic-assert":98}],89:[function(require,module,exports){
var inherits = require('inherits');

function Reporter(options) {
  this._reporterState = {
    obj: null,
    path: [],
    options: options || {},
    errors: []
  };
}
exports.Reporter = Reporter;

Reporter.prototype.isError = function isError(obj) {
  return obj instanceof ReporterError;
};

Reporter.prototype.save = function save() {
  var state = this._reporterState;

  return { obj: state.obj, pathLen: state.path.length };
};

Reporter.prototype.restore = function restore(data) {
  var state = this._reporterState;

  state.obj = data.obj;
  state.path = state.path.slice(0, data.pathLen);
};

Reporter.prototype.enterKey = function enterKey(key) {
  return this._reporterState.path.push(key);
};

Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
  var state = this._reporterState;

  state.path = state.path.slice(0, index - 1);
  if (state.obj !== null)
    state.obj[key] = value;
};

Reporter.prototype.enterObject = function enterObject() {
  var state = this._reporterState;

  var prev = state.obj;
  state.obj = {};
  return prev;
};

Reporter.prototype.leaveObject = function leaveObject(prev) {
  var state = this._reporterState;

  var now = state.obj;
  state.obj = prev;
  return now;
};

Reporter.prototype.error = function error(msg) {
  var err;
  var state = this._reporterState;

  var inherited = msg instanceof ReporterError;
  if (inherited) {
    err = msg;
  } else {
    err = new ReporterError(state.path.map(function(elem) {
      return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
  }

  if (!state.options.partial)
    throw err;

  if (!inherited)
    state.errors.push(err);

  return err;
};

Reporter.prototype.wrapResult = function wrapResult(result) {
  var state = this._reporterState;
  if (!state.options.partial)
    return result;

  return {
    result: this.isError(result) ? null : result,
    errors: state.errors
  };
};

function ReporterError(path, msg) {
  this.path = path;
  this.rethrow(msg);
};
inherits(ReporterError, Error);

ReporterError.prototype.rethrow = function rethrow(msg) {
  this.message = msg + ' at: ' + (this.path || '(shallow)');
  Error.captureStackTrace(this, ReporterError);

  return this;
};

},{"inherits":214}],90:[function(require,module,exports){
var constants = require('../constants');

exports.tagClass = {
  0: 'universal',
  1: 'application',
  2: 'context',
  3: 'private'
};
exports.tagClassByName = constants._reverse(exports.tagClass);

exports.tag = {
  0x00: 'end',
  0x01: 'bool',
  0x02: 'int',
  0x03: 'bitstr',
  0x04: 'octstr',
  0x05: 'null_',
  0x06: 'objid',
  0x07: 'objDesc',
  0x08: 'external',
  0x09: 'real',
  0x0a: 'enum',
  0x0b: 'embed',
  0x0c: 'utf8str',
  0x0d: 'relativeOid',
  0x10: 'seq',
  0x11: 'set',
  0x12: 'numstr',
  0x13: 'printstr',
  0x14: 't61str',
  0x15: 'videostr',
  0x16: 'ia5str',
  0x17: 'utctime',
  0x18: 'gentime',
  0x19: 'graphstr',
  0x1a: 'iso646str',
  0x1b: 'genstr',
  0x1c: 'unistr',
  0x1d: 'charstr',
  0x1e: 'bmpstr'
};
exports.tagByName = constants._reverse(exports.tag);

},{"../constants":91}],91:[function(require,module,exports){
var constants = exports;

// Helper
constants._reverse = function reverse(map) {
  var res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    var value = map[key];
    res[value] = key;
  });

  return res;
};

constants.der = require('./der');

},{"./der":90}],92:[function(require,module,exports){
var inherits = require('inherits');

var asn1 = require('../../asn1');
var base = asn1.base;
var bignum = asn1.bignum;

// Import DER constants
var der = asn1.constants.der;

function DERDecoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DERDecoder;

DERDecoder.prototype.decode = function decode(data, options) {
  if (!(data instanceof base.DecoderBuffer))
    data = new base.DecoderBuffer(data, options);

  return this.tree._decode(data, options);
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
  if (buffer.isEmpty())
    return false;

  var state = buffer.save();
  var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  buffer.restore(state);

  return decodedTag.tag === tag || decodedTag.tagStr === tag || any;
};

DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
  var decodedTag = derDecodeTag(buffer,
                                'Failed to decode tag of "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  var len = derDecodeLen(buffer,
                         decodedTag.primitive,
                         'Failed to get length of "' + tag + '"');

  // Failure
  if (buffer.isError(len))
    return len;

  if (!any &&
      decodedTag.tag !== tag &&
      decodedTag.tagStr !== tag &&
      decodedTag.tagStr + 'of' !== tag) {
    return buffer.error('Failed to match tag: "' + tag + '"');
  }

  if (decodedTag.primitive || len !== null)
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

  // Indefinite length... find END tag
  var state = buffer.save();
  var res = this._skipUntilEnd(
      buffer,
      'Failed to skip indefinite length body: "' + this.tag + '"');
  if (buffer.isError(res))
    return res;

  len = buffer.offset - state.offset;
  buffer.restore(state);
  return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};

DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
  while (true) {
    var tag = derDecodeTag(buffer, fail);
    if (buffer.isError(tag))
      return tag;
    var len = derDecodeLen(buffer, tag.primitive, fail);
    if (buffer.isError(len))
      return len;

    var res;
    if (tag.primitive || len !== null)
      res = buffer.skip(len)
    else
      res = this._skipUntilEnd(buffer, fail);

    // Failure
    if (buffer.isError(res))
      return res;

    if (tag.tagStr === 'end')
      break;
  }
};

DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder) {
  var result = [];
  while (!buffer.isEmpty()) {
    var possibleEnd = this._peekTag(buffer, 'end');
    if (buffer.isError(possibleEnd))
      return possibleEnd;

    var res = decoder.decode(buffer, 'der');
    if (buffer.isError(res) && possibleEnd)
      break;
    result.push(res);
  }
  return result;
};

DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
  if (tag === 'octstr') {
    return buffer.raw();
  } else if (tag === 'bitstr') {
    var unused = buffer.readUInt8();
    if (buffer.isError(unused))
      return unused;

    return { unused: unused, data: buffer.raw() };
  } else if (tag === 'ia5str' || tag === 'utf8str') {
    return buffer.raw().toString();
  } else if(tag === 'numstr') {
    var numstr = buffer.raw().toString('ascii');
    if (!this._isNumstr(numstr)) {
      return buffer.error('Decoding of string type: ' +
                          'numstr unsupported characters');
    }

    return numstr;
  } else if (tag === 'printstr') {
    var printstr = buffer.raw().toString('ascii');
    if (!this._isPrintstr(printstr)) {
      return buffer.error('Decoding of string type: ' +
                          'printstr unsupported characters');
    }

    return printstr;
  } else if(tag === 'bmpstr') {
    var raw = buffer.raw();
    if (raw.length % 2 === 1)
      return buffer.error('Decoding of string type: bmpstr length mismatch');

    var str = '';
    for (var i = 0; i < raw.length / 2; i++) {
      str += String.fromCharCode(raw.readUInt16BE(i * 2));
    }
    return str;
  } else {
    return buffer.error('Decoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
  var identifiers = [];
  var ident = 0;
  while (!buffer.isEmpty()) {
    var subident = buffer.readUInt8();
    ident <<= 7;
    ident |= subident & 0x7f;
    if ((subident & 0x80) === 0) {
      identifiers.push(ident);
      ident = 0;
    }
  }
  if (subident & 0x80)
    identifiers.push(ident);

  var first = (identifiers[0] / 40) | 0;
  var second = identifiers[0] % 40;

  if (relative)
    result = identifiers;
  else
    result = [first, second].concat(identifiers.slice(1));

  if (values) {
    var tmp = values[result.join(' ')];
    if (tmp === undefined)
      tmp = values[result.join('.')];
    if (tmp !== undefined)
      result = tmp;
  }

  return result;
};

DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
  var str = buffer.raw().toString();
  if (tag === 'gentime') {
    var year = str.slice(0, 4) | 0;
    var mon = str.slice(4, 6) | 0;
    var day = str.slice(6, 8) | 0;
    var hour = str.slice(8, 10) | 0;
    var min = str.slice(10, 12) | 0;
    var sec = str.slice(12, 14) | 0;
  } else if (tag === 'utctime') {
    var year = str.slice(0, 2) | 0;
    var mon = str.slice(2, 4) | 0;
    var day = str.slice(4, 6) | 0;
    var hour = str.slice(6, 8) | 0;
    var min = str.slice(8, 10) | 0;
    var sec = str.slice(10, 12) | 0;
    if (year < 70)
      year = 2000 + year;
    else
      year = 1900 + year;
  } else {
    return buffer.error('Decoding ' + tag + ' time is not supported yet');
  }

  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};

DERNode.prototype._decodeNull = function decodeNull(buffer) {
  return null;
};

DERNode.prototype._decodeBool = function decodeBool(buffer) {
  var res = buffer.readUInt8();
  if (buffer.isError(res))
    return res;
  else
    return res !== 0;
};

DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
  // Bigint, return as it is (assume big endian)
  var raw = buffer.raw();
  var res = new bignum(raw);

  if (values)
    res = values[res.toString(10)] || res;

  return res;
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getDecoder('der').tree;
};

// Utility methods

function derDecodeTag(buf, fail) {
  var tag = buf.readUInt8(fail);
  if (buf.isError(tag))
    return tag;

  var cls = der.tagClass[tag >> 6];
  var primitive = (tag & 0x20) === 0;

  // Multi-octet tag - load
  if ((tag & 0x1f) === 0x1f) {
    var oct = tag;
    tag = 0;
    while ((oct & 0x80) === 0x80) {
      oct = buf.readUInt8(fail);
      if (buf.isError(oct))
        return oct;

      tag <<= 7;
      tag |= oct & 0x7f;
    }
  } else {
    tag &= 0x1f;
  }
  var tagStr = der.tag[tag];

  return {
    cls: cls,
    primitive: primitive,
    tag: tag,
    tagStr: tagStr
  };
}

function derDecodeLen(buf, primitive, fail) {
  var len = buf.readUInt8(fail);
  if (buf.isError(len))
    return len;

  // Indefinite form
  if (!primitive && len === 0x80)
    return null;

  // Definite form
  if ((len & 0x80) === 0) {
    // Short form
    return len;
  }

  // Long form
  var num = len & 0x7f;
  if (num >= 4)
    return buf.error('length octect is too long');

  len = 0;
  for (var i = 0; i < num; i++) {
    len <<= 8;
    var j = buf.readUInt8(fail);
    if (buf.isError(j))
      return j;
    len |= j;
  }

  return len;
}

},{"../../asn1":84,"inherits":214}],93:[function(require,module,exports){
var decoders = exports;

decoders.der = require('./der');
decoders.pem = require('./pem');

},{"./der":92,"./pem":94}],94:[function(require,module,exports){
var inherits = require('inherits');
var Buffer = require('buffer').Buffer;

var asn1 = require('../../asn1');
var DERDecoder = require('./der');

function PEMDecoder(entity) {
  DERDecoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMDecoder, DERDecoder);
module.exports = PEMDecoder;

PEMDecoder.prototype.decode = function decode(data, options) {
  var lines = data.toString().split(/[\r\n]+/g);

  var label = options.label.toUpperCase();

  var re = /^-----(BEGIN|END) ([^-]+)-----$/;
  var start = -1;
  var end = -1;
  for (var i = 0; i < lines.length; i++) {
    var match = lines[i].match(re);
    if (match === null)
      continue;

    if (match[2] !== label)
      continue;

    if (start === -1) {
      if (match[1] !== 'BEGIN')
        break;
      start = i;
    } else {
      if (match[1] !== 'END')
        break;
      end = i;
      break;
    }
  }
  if (start === -1 || end === -1)
    throw new Error('PEM section not found for: ' + label);

  var base64 = lines.slice(start + 1, end).join('');
  // Remove excessive symbols
  base64.replace(/[^a-z0-9\+\/=]+/gi, '');

  var input = new Buffer(base64, 'base64');
  return DERDecoder.prototype.decode.call(this, input, options);
};

},{"../../asn1":84,"./der":92,"buffer":17,"inherits":214}],95:[function(require,module,exports){
var inherits = require('inherits');
var Buffer = require('buffer').Buffer;

var asn1 = require('../../asn1');
var base = asn1.base;
var bignum = asn1.bignum;

// Import DER constants
var der = asn1.constants.der;

function DEREncoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DEREncoder;

DEREncoder.prototype.encode = function encode(data, reporter) {
  return this.tree._encode(data, reporter).join();
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._encodeComposite = function encodeComposite(tag,
                                                              primitive,
                                                              cls,
                                                              content) {
  var encodedTag = encodeTag(tag, primitive, cls, this.reporter);

  // Short form
  if (content.length < 0x80) {
    var header = new Buffer(2);
    header[0] = encodedTag;
    header[1] = content.length;
    return this._createEncoderBuffer([ header, content ]);
  }

  // Long form
  // Count octets required to store length
  var lenOctets = 1;
  for (var i = content.length; i >= 0x100; i >>= 8)
    lenOctets++;

  var header = new Buffer(1 + 1 + lenOctets);
  header[0] = encodedTag;
  header[1] = 0x80 | lenOctets;

  for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
    header[i] = j & 0xff;

  return this._createEncoderBuffer([ header, content ]);
};

DERNode.prototype._encodeStr = function encodeStr(str, tag) {
  if (tag === 'octstr') {
    return this._createEncoderBuffer(str);
  } else if (tag === 'bitstr') {
    return this._createEncoderBuffer([ str.unused | 0, str.data ]);
  } else if (tag === 'ia5str' || tag === 'utf8str') {
    return this._createEncoderBuffer(str);
  } else if (tag === 'bmpstr') {
    var buf = new Buffer(str.length * 2);
    for (var i = 0; i < str.length; i++) {
      buf.writeUInt16BE(str.charCodeAt(i), i * 2);
    }
    return this._createEncoderBuffer(buf);
  } else if (tag === 'numstr') {
    if (!this._isNumstr(str)) {
      return this.reporter.error('Encoding of string type: numstr supports ' +
                                 'only digits and space');
    }

    return this._createEncoderBuffer(str);
  } else if (tag === 'printstr') {
    if (!this._isPrintstr(str)) {
      return this.reporter.error('Encoding of string type: printstr supports ' +
                                 'only latin upper and lower case letters, ' +
                                 'digits, space, apostrophe, left and rigth ' +
                                 'parenthesis, plus sign, comma, hyphen, ' +
                                 'dot, slash, colon, equal sign, ' +
                                 'question mark');
    }

    return this._createEncoderBuffer(str);
  } else {
    return this.reporter.error('Encoding of string type: ' + tag +
                               ' unsupported');
  }
};

DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
  if (typeof id === 'string') {
    if (!values)
      return this.reporter.error('string objid given, but no values map found');
    if (!values.hasOwnProperty(id))
      return this.reporter.error('objid not found in values map');
    id = values[id].split(/[\s\.]+/g);
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  } else if (Array.isArray(id)) {
    id = id.slice();
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  }

  if (!Array.isArray(id)) {
    return this.reporter.error('objid() should be either array or string, ' +
                               'got: ' + JSON.stringify(id));
  }

  if (!relative) {
    if (id[1] >= 40)
      return this.reporter.error('Second objid identifier OOB');
    id.splice(0, 2, id[0] * 40 + id[1]);
  }

  // Count number of octets
  var size = 0;
  for (var i = 0; i < id.length; i++) {
    var ident = id[i];
    for (size++; ident >= 0x80; ident >>= 7)
      size++;
  }

  var objid = new Buffer(size);
  var offset = objid.length - 1;
  for (var i = id.length - 1; i >= 0; i--) {
    var ident = id[i];
    objid[offset--] = ident & 0x7f;
    while ((ident >>= 7) > 0)
      objid[offset--] = 0x80 | (ident & 0x7f);
  }

  return this._createEncoderBuffer(objid);
};

function two(num) {
  if (num < 10)
    return '0' + num;
  else
    return num;
}

DERNode.prototype._encodeTime = function encodeTime(time, tag) {
  var str;
  var date = new Date(time);

  if (tag === 'gentime') {
    str = [
      two(date.getFullYear()),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else if (tag === 'utctime') {
    str = [
      two(date.getFullYear() % 100),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else {
    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
  }

  return this._encodeStr(str, 'octstr');
};

DERNode.prototype._encodeNull = function encodeNull() {
  return this._createEncoderBuffer('');
};

DERNode.prototype._encodeInt = function encodeInt(num, values) {
  if (typeof num === 'string') {
    if (!values)
      return this.reporter.error('String int or enum given, but no values map');
    if (!values.hasOwnProperty(num)) {
      return this.reporter.error('Values map doesn\'t contain: ' +
                                 JSON.stringify(num));
    }
    num = values[num];
  }

  // Bignum, assume big endian
  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
    var numArray = num.toArray();
    if (!num.sign && numArray[0] & 0x80) {
      numArray.unshift(0);
    }
    num = new Buffer(numArray);
  }

  if (Buffer.isBuffer(num)) {
    var size = num.length;
    if (num.length === 0)
      size++;

    var out = new Buffer(size);
    num.copy(out);
    if (num.length === 0)
      out[0] = 0
    return this._createEncoderBuffer(out);
  }

  if (num < 0x80)
    return this._createEncoderBuffer(num);

  if (num < 0x100)
    return this._createEncoderBuffer([0, num]);

  var size = 1;
  for (var i = num; i >= 0x100; i >>= 8)
    size++;

  var out = new Array(size);
  for (var i = out.length - 1; i >= 0; i--) {
    out[i] = num & 0xff;
    num >>= 8;
  }
  if(out[0] & 0x80) {
    out.unshift(0);
  }

  return this._createEncoderBuffer(new Buffer(out));
};

DERNode.prototype._encodeBool = function encodeBool(value) {
  return this._createEncoderBuffer(value ? 0xff : 0);
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getEncoder('der').tree;
};

DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
  var state = this._baseState;
  var i;
  if (state['default'] === null)
    return false;

  var data = dataBuffer.join();
  if (state.defaultBuffer === undefined)
    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

  if (data.length !== state.defaultBuffer.length)
    return false;

  for (i=0; i < data.length; i++)
    if (data[i] !== state.defaultBuffer[i])
      return false;

  return true;
};

// Utility methods

function encodeTag(tag, primitive, cls, reporter) {
  var res;

  if (tag === 'seqof')
    tag = 'seq';
  else if (tag === 'setof')
    tag = 'set';

  if (der.tagByName.hasOwnProperty(tag))
    res = der.tagByName[tag];
  else if (typeof tag === 'number' && (tag | 0) === tag)
    res = tag;
  else
    return reporter.error('Unknown tag: ' + tag);

  if (res >= 0x1f)
    return reporter.error('Multi-octet tag encoding unsupported');

  if (!primitive)
    res |= 0x20;

  res |= (der.tagClassByName[cls || 'universal'] << 6);

  return res;
}

},{"../../asn1":84,"buffer":17,"inherits":214}],96:[function(require,module,exports){
var encoders = exports;

encoders.der = require('./der');
encoders.pem = require('./pem');

},{"./der":95,"./pem":97}],97:[function(require,module,exports){
var inherits = require('inherits');
var Buffer = require('buffer').Buffer;

var asn1 = require('../../asn1');
var DEREncoder = require('./der');

function PEMEncoder(entity) {
  DEREncoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMEncoder, DEREncoder);
module.exports = PEMEncoder;

PEMEncoder.prototype.encode = function encode(data, options) {
  var buf = DEREncoder.prototype.encode.call(this, data);

  var p = buf.toString('base64');
  var out = [ '-----BEGIN ' + options.label + '-----' ];
  for (var i = 0; i < p.length; i += 64)
    out.push(p.slice(i, i + 64));
  out.push('-----END ' + options.label + '-----');
  return out.join('\n');
};

},{"../../asn1":84,"./der":95,"buffer":17,"inherits":214}],98:[function(require,module,exports){
arguments[4][49][0].apply(exports,arguments)
},{"dup":49}],99:[function(require,module,exports){
arguments[4][23][0].apply(exports,arguments)
},{"buffer":17,"dup":23}],100:[function(require,module,exports){
arguments[4][24][0].apply(exports,arguments)
},{"./aes":99,"./ghash":104,"buffer":17,"buffer-xor":113,"cipher-base":114,"dup":24,"inherits":214}],101:[function(require,module,exports){
arguments[4][25][0].apply(exports,arguments)
},{"./decrypter":102,"./encrypter":103,"./modes":105,"dup":25}],102:[function(require,module,exports){
arguments[4][26][0].apply(exports,arguments)
},{"./aes":99,"./authCipher":100,"./modes":105,"./modes/cbc":106,"./modes/cfb":107,"./modes/cfb1":108,"./modes/cfb8":109,"./modes/ctr":110,"./modes/ecb":111,"./modes/ofb":112,"./streamCipher":115,"buffer":17,"cipher-base":114,"dup":26,"evp_bytestokey":116,"inherits":214}],103:[function(require,module,exports){
arguments[4][27][0].apply(exports,arguments)
},{"./aes":99,"./authCipher":100,"./modes":105,"./modes/cbc":106,"./modes/cfb":107,"./modes/cfb1":108,"./modes/cfb8":109,"./modes/ctr":110,"./modes/ecb":111,"./modes/ofb":112,"./streamCipher":115,"buffer":17,"cipher-base":114,"dup":27,"evp_bytestokey":116,"inherits":214}],104:[function(require,module,exports){
arguments[4][28][0].apply(exports,arguments)
},{"buffer":17,"dup":28}],105:[function(require,module,exports){
arguments[4][29][0].apply(exports,arguments)
},{"dup":29}],106:[function(require,module,exports){
arguments[4][30][0].apply(exports,arguments)
},{"buffer-xor":113,"dup":30}],107:[function(require,module,exports){
arguments[4][31][0].apply(exports,arguments)
},{"buffer":17,"buffer-xor":113,"dup":31}],108:[function(require,module,exports){
arguments[4][32][0].apply(exports,arguments)
},{"buffer":17,"dup":32}],109:[function(require,module,exports){
arguments[4][33][0].apply(exports,arguments)
},{"buffer":17,"dup":33}],110:[function(require,module,exports){
arguments[4][34][0].apply(exports,arguments)
},{"buffer":17,"buffer-xor":113,"dup":34}],111:[function(require,module,exports){
arguments[4][35][0].apply(exports,arguments)
},{"dup":35}],112:[function(require,module,exports){
arguments[4][36][0].apply(exports,arguments)
},{"buffer":17,"buffer-xor":113,"dup":36}],113:[function(require,module,exports){
arguments[4][37][0].apply(exports,arguments)
},{"buffer":17,"dup":37}],114:[function(require,module,exports){
arguments[4][38][0].apply(exports,arguments)
},{"buffer":17,"dup":38,"inherits":214,"stream":233,"string_decoder":234}],115:[function(require,module,exports){
arguments[4][39][0].apply(exports,arguments)
},{"./aes":99,"buffer":17,"cipher-base":114,"dup":39,"inherits":214}],116:[function(require,module,exports){
arguments[4][50][0].apply(exports,arguments)
},{"buffer":17,"create-hash/md5":147,"dup":50}],117:[function(require,module,exports){
(function (Buffer){
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var createHmac = require('create-hmac')
var crt = require('browserify-rsa')
var curves = require('./curves')
var elliptic = require('elliptic')
var parseKeys = require('parse-asn1')

var BN = require('bn.js')
var EC = elliptic.ec

function sign (hash, key, hashType, signType) {
  var priv = parseKeys(key)
  if (priv.curve) {
    if (signType !== 'ecdsa') throw new Error('wrong private key type')

    return ecSign(hash, priv)
  } else if (priv.type === 'dsa') {
    if (signType !== 'dsa') {
      throw new Error('wrong private key type')
    }
    return dsaSign(hash, priv, hashType)
  } else {
    if (signType !== 'rsa') throw new Error('wrong private key type')
  }

  var len = priv.modulus.byteLength()
  var pad = [ 0, 1 ]
  while (hash.length + pad.length + 1 < len) {
    pad.push(0xff)
  }
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) {
    pad.push(hash[i])
  }

  var out = crt(pad, priv)
  return out
}

function ecSign (hash, priv) {
  var curveId = curves[priv.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'))

  var curve = new EC(curveId)
  var key = curve.genKeyPair()

  key._importPrivate(priv.privateKey)
  var out = key.sign(hash)

  return new Buffer(out.toDER())
}

function dsaSign (hash, priv, algo) {
  var x = priv.params.priv_key
  var p = priv.params.p
  var q = priv.params.q
  var g = priv.params.g
  var r = new BN(0)
  var k
  var H = bits2int(hash, q).mod(q)
  var s = false
  var kv = getKey(x, q, hash, algo)
  while (s === false) {
    k = makeKey(q, kv, algo)
    r = makeR(g, k, p, q)
    s = k.invm(q).imul(H.add(x.mul(r))).mod(q)
    if (!s.cmpn(0)) {
      s = false
      r = new BN(0)
    }
  }
  return toDER(r, s)
}

function toDER (r, s) {
  r = r.toArray()
  s = s.toArray()

  // Pad values
  if (r[0] & 0x80) {
    r = [ 0 ].concat(r)
  }
  // Pad values
  if (s[0] & 0x80) {
    s = [0].concat(s)
  }

  var total = r.length + s.length + 4
  var res = [ 0x30, total, 0x02, r.length ]
  res = res.concat(r, [ 0x02, s.length ], s)
  return new Buffer(res)
}

function getKey (x, q, hash, algo) {
  x = new Buffer(x.toArray())
  if (x.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - x.length)
    zeros.fill(0)
    x = Buffer.concat([zeros, x])
  }
  var hlen = hash.length
  var hbits = bits2octets(hash, q)
  var v = new Buffer(hlen)
  v.fill(1)
  var k = new Buffer(hlen)
  k.fill(0)
  k = createHmac(algo, k)
    .update(v)
    .update(new Buffer([0]))
    .update(x)
    .update(hbits)
    .digest()
  v = createHmac(algo, k)
    .update(v)
    .digest()
  k = createHmac(algo, k)
    .update(v)
    .update(new Buffer([1]))
    .update(x)
    .update(hbits)
    .digest()
  v = createHmac(algo, k)
    .update(v)
    .digest()
  return {
    k: k,
    v: v
  }
}

function bits2int (obits, q) {
  var bits = new BN(obits)
  var shift = (obits.length << 3) - q.bitLength()
  if (shift > 0) {
    bits.ishrn(shift)
  }
  return bits
}

function bits2octets (bits, q) {
  bits = bits2int(bits, q)
  bits = bits.mod(q)
  var out = new Buffer(bits.toArray())
  if (out.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - out.length)
    zeros.fill(0)
    out = Buffer.concat([zeros, out])
  }
  return out
}

function makeKey (q, kv, algo) {
  var t, k

  do {
    t = new Buffer('')

    while (t.length * 8 < q.bitLength()) {
      kv.v = createHmac(algo, kv.k)
        .update(kv.v)
        .digest()
      t = Buffer.concat([t, kv.v])
    }

    k = bits2int(t, q)
    kv.k = createHmac(algo, kv.k)
      .update(kv.v)
      .update(new Buffer([0]))
      .digest()
    kv.v = createHmac(algo, kv.k)
      .update(kv.v)
      .digest()
  } while (k.cmp(q) !== -1)

  return k
}

function makeR (g, k, p, q) {
  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)
}

module.exports = sign
module.exports.getKey = getKey
module.exports.makeKey = makeKey

}).call(this,require("buffer").Buffer)
},{"./curves":53,"bn.js":54,"browserify-rsa":55,"buffer":17,"create-hmac":158,"elliptic":56,"parse-asn1":83}],118:[function(require,module,exports){
(function (Buffer){
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var curves = require('./curves')
var elliptic = require('elliptic')
var parseKeys = require('parse-asn1')

var BN = require('bn.js')
var EC = elliptic.ec

function verify (sig, hash, key, signType) {
  var pub = parseKeys(key)
  if (pub.type === 'ec') {
    if (signType !== 'ecdsa') {
      throw new Error('wrong public key type')
    }
    return ecVerify(sig, hash, pub)
  } else if (pub.type === 'dsa') {
    if (signType !== 'dsa') {
      throw new Error('wrong public key type')
    }
    return dsaVerify(sig, hash, pub)
  } else {
    if (signType !== 'rsa') {
      throw new Error('wrong public key type')
    }
  }
  var len = pub.modulus.byteLength()
  var pad = [ 1 ]
  var padNum = 0
  while (hash.length + pad.length + 2 < len) {
    pad.push(0xff)
    padNum++
  }
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) {
    pad.push(hash[i])
  }
  pad = new Buffer(pad)
  var red = BN.mont(pub.modulus)
  sig = new BN(sig).toRed(red)

  sig = sig.redPow(new BN(pub.publicExponent))

  sig = new Buffer(sig.fromRed().toArray())
  var out = 0
  if (padNum < 8) {
    out = 1
  }
  len = Math.min(sig.length, pad.length)
  if (sig.length !== pad.length) {
    out = 1
  }

  i = -1
  while (++i < len) {
    out |= (sig[i] ^ pad[i])
  }
  return out === 0
}

function ecVerify (sig, hash, pub) {
  var curveId = curves[pub.data.algorithm.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))

  var curve = new EC(curveId)
  var pubkey = pub.data.subjectPrivateKey.data

  return curve.verify(hash, sig, pubkey)
}

function dsaVerify (sig, hash, pub) {
  var p = pub.data.p
  var q = pub.data.q
  var g = pub.data.g
  var y = pub.data.pub_key
  var unpacked = parseKeys.signature.decode(sig, 'der')
  var s = unpacked.s
  var r = unpacked.r
  checkValue(s, q)
  checkValue(r, q)
  var montp = BN.mont(p)
  var w = s.invm(q)
  var v = g.toRed(montp)
    .redPow(new BN(hash).mul(w).mod(q))
    .fromRed()
    .mul(
      y.toRed(montp)
        .redPow(r.mul(w).mod(q))
        .fromRed()
  ).mod(p).mod(q)
  return !v.cmp(r)
}

function checkValue (b, q) {
  if (b.cmpn(0) <= 0) {
    throw new Error('invalid sig')
  }
  if (b.cmp(q) >= q) {
    throw new Error('invalid sig')
  }
}

module.exports = verify

}).call(this,require("buffer").Buffer)
},{"./curves":53,"bn.js":54,"buffer":17,"elliptic":56,"parse-asn1":83}],119:[function(require,module,exports){
(function (Buffer){
var elliptic = require('elliptic');
var BN = require('bn.js');

module.exports = function createECDH(curve) {
	return new ECDH(curve);
};

var aliases = {
	secp256k1: {
		name: 'secp256k1',
		byteLength: 32
	},
	secp224r1: {
		name: 'p224',
		byteLength: 28
	},
	prime256v1: {
		name: 'p256',
		byteLength: 32
	},
	prime192v1: {
		name: 'p192',
		byteLength: 24
	},
	ed25519: {
		name: 'ed25519',
		byteLength: 32
	},
	secp384r1: {
		name: 'p384',
		byteLength: 48
	},
	secp521r1: {
		name: 'p521',
		byteLength: 66
	}
};

aliases.p224 = aliases.secp224r1;
aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
aliases.p192 = aliases.secp192r1 = aliases.prime192v1;
aliases.p384 = aliases.secp384r1;
aliases.p521 = aliases.secp521r1;

function ECDH(curve) {
	this.curveType = aliases[curve];
	if (!this.curveType ) {
		this.curveType = {
			name: curve
		};
	}
	this.curve = new elliptic.ec(this.curveType.name);
	this.keys = void 0;
}

ECDH.prototype.generateKeys = function (enc, format) {
	this.keys = this.curve.genKeyPair();
	return this.getPublicKey(enc, format);
};

ECDH.prototype.computeSecret = function (other, inenc, enc) {
	inenc = inenc || 'utf8';
	if (!Buffer.isBuffer(other)) {
		other = new Buffer(other, inenc);
	}
	var otherPub = this.curve.keyFromPublic(other).getPublic();
	var out = otherPub.mul(this.keys.getPrivate()).getX();
	return formatReturnValue(out, enc, this.curveType.byteLength);
};

ECDH.prototype.getPublicKey = function (enc, format) {
	var key = this.keys.getPublic(format === 'compressed', true);
	if (format === 'hybrid') {
		if (key[key.length - 1] % 2) {
			key[0] = 7;
		} else {
			key [0] = 6;
		}
	}
	return formatReturnValue(key, enc);
};

ECDH.prototype.getPrivateKey = function (enc) {
	return formatReturnValue(this.keys.getPrivate(), enc);
};

ECDH.prototype.setPublicKey = function (pub, enc) {
	enc = enc || 'utf8';
	if (!Buffer.isBuffer(pub)) {
		pub = new Buffer(pub, enc);
	}
	this.keys._importPublic(pub);
	return this;
};

ECDH.prototype.setPrivateKey = function (priv, enc) {
	enc = enc || 'utf8';
	if (!Buffer.isBuffer(priv)) {
		priv = new Buffer(priv, enc);
	}
	var _priv = new BN(priv);
	_priv = _priv.toString(16);
	this.keys._importPrivate(_priv);
	return this;
};

function formatReturnValue(bn, enc, len) {
	if (!Array.isArray(bn)) {
		bn = bn.toArray();
	}
	var buf = new Buffer(bn);
	if (len && buf.length < len) {
		var zeros = new Buffer(len - buf.length);
		zeros.fill(0);
		buf = Buffer.concat([zeros, buf]);
	}
	if (!enc) {
		return buf;
	} else {
		return buf.toString(enc);
	}
}

}).call(this,require("buffer").Buffer)
},{"bn.js":120,"buffer":17,"elliptic":121}],120:[function(require,module,exports){
arguments[4][54][0].apply(exports,arguments)
},{"dup":54}],121:[function(require,module,exports){
arguments[4][56][0].apply(exports,arguments)
},{"../package.json":144,"./elliptic/curve":124,"./elliptic/curves":127,"./elliptic/ec":128,"./elliptic/eddsa":131,"./elliptic/hmac-drbg":134,"./elliptic/utils":136,"brorand":137,"dup":56}],122:[function(require,module,exports){
arguments[4][57][0].apply(exports,arguments)
},{"../../elliptic":121,"bn.js":120,"dup":57}],123:[function(require,module,exports){
arguments[4][58][0].apply(exports,arguments)
},{"../../elliptic":121,"../curve":124,"bn.js":120,"dup":58,"inherits":214}],124:[function(require,module,exports){
arguments[4][59][0].apply(exports,arguments)
},{"./base":122,"./edwards":123,"./mont":125,"./short":126,"dup":59}],125:[function(require,module,exports){
arguments[4][60][0].apply(exports,arguments)
},{"../../elliptic":121,"../curve":124,"bn.js":120,"dup":60,"inherits":214}],126:[function(require,module,exports){
arguments[4][61][0].apply(exports,arguments)
},{"../../elliptic":121,"../curve":124,"bn.js":120,"dup":61,"inherits":214}],127:[function(require,module,exports){
arguments[4][62][0].apply(exports,arguments)
},{"../elliptic":121,"./precomputed/secp256k1":135,"dup":62,"hash.js":138}],128:[function(require,module,exports){
arguments[4][63][0].apply(exports,arguments)
},{"../../elliptic":121,"./key":129,"./signature":130,"bn.js":120,"dup":63}],129:[function(require,module,exports){
arguments[4][64][0].apply(exports,arguments)
},{"bn.js":120,"dup":64}],130:[function(require,module,exports){
arguments[4][65][0].apply(exports,arguments)
},{"../../elliptic":121,"bn.js":120,"dup":65}],131:[function(require,module,exports){
arguments[4][66][0].apply(exports,arguments)
},{"../../elliptic":121,"./key":132,"./signature":133,"dup":66,"hash.js":138}],132:[function(require,module,exports){
arguments[4][67][0].apply(exports,arguments)
},{"../../elliptic":121,"dup":67}],133:[function(require,module,exports){
arguments[4][68][0].apply(exports,arguments)
},{"../../elliptic":121,"bn.js":120,"dup":68}],134:[function(require,module,exports){
arguments[4][69][0].apply(exports,arguments)
},{"../elliptic":121,"dup":69,"hash.js":138}],135:[function(require,module,exports){
arguments[4][70][0].apply(exports,arguments)
},{"dup":70}],136:[function(require,module,exports){
arguments[4][71][0].apply(exports,arguments)
},{"bn.js":120,"dup":71}],137:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],138:[function(require,module,exports){
arguments[4][73][0].apply(exports,arguments)
},{"./hash/common":139,"./hash/hmac":140,"./hash/ripemd":141,"./hash/sha":142,"./hash/utils":143,"dup":73}],139:[function(require,module,exports){
arguments[4][74][0].apply(exports,arguments)
},{"../hash":138,"dup":74}],140:[function(require,module,exports){
arguments[4][75][0].apply(exports,arguments)
},{"../hash":138,"dup":75}],141:[function(require,module,exports){
arguments[4][76][0].apply(exports,arguments)
},{"../hash":138,"dup":76}],142:[function(require,module,exports){
arguments[4][77][0].apply(exports,arguments)
},{"../hash":138,"dup":77}],143:[function(require,module,exports){
arguments[4][78][0].apply(exports,arguments)
},{"dup":78,"inherits":214}],144:[function(require,module,exports){
arguments[4][79][0].apply(exports,arguments)
},{"dup":79}],145:[function(require,module,exports){
(function (Buffer){
'use strict';
var inherits = require('inherits')
var md5 = require('./md5')
var rmd160 = require('ripemd160')
var sha = require('sha.js')

var Base = require('cipher-base')

function HashNoConstructor(hash) {
  Base.call(this, 'digest')

  this._hash = hash
  this.buffers = []
}

inherits(HashNoConstructor, Base)

HashNoConstructor.prototype._update = function (data) {
  this.buffers.push(data)
}

HashNoConstructor.prototype._final = function () {
  var buf = Buffer.concat(this.buffers)
  var r = this._hash(buf)
  this.buffers = null

  return r
}

function Hash(hash) {
  Base.call(this, 'digest')

  this._hash = hash
}

inherits(Hash, Base)

Hash.prototype._update = function (data) {
  this._hash.update(data)
}

Hash.prototype._final = function () {
  return this._hash.digest()
}

module.exports = function createHash (alg) {
  alg = alg.toLowerCase()
  if ('md5' === alg) return new HashNoConstructor(md5)
  if ('rmd160' === alg || 'ripemd160' === alg) return new HashNoConstructor(rmd160)

  return new Hash(sha(alg))
}

}).call(this,require("buffer").Buffer)
},{"./md5":147,"buffer":17,"cipher-base":148,"inherits":214,"ripemd160":149,"sha.js":151}],146:[function(require,module,exports){
(function (Buffer){
'use strict';
var intSize = 4;
var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);
var chrsz = 8;

function toArray(buf, bigEndian) {
  if ((buf.length % intSize) !== 0) {
    var len = buf.length + (intSize - (buf.length % intSize));
    buf = Buffer.concat([buf, zeroBuffer], len);
  }

  var arr = [];
  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
  for (var i = 0; i < buf.length; i += intSize) {
    arr.push(fn.call(buf, i));
  }
  return arr;
}

function toBuffer(arr, size, bigEndian) {
  var buf = new Buffer(size);
  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
  for (var i = 0; i < arr.length; i++) {
    fn.call(buf, arr[i], i * 4, true);
  }
  return buf;
}

function hash(buf, fn, hashSize, bigEndian) {
  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
  return toBuffer(arr, hashSize, bigEndian);
}
exports.hash = hash;
}).call(this,require("buffer").Buffer)
},{"buffer":17}],147:[function(require,module,exports){
'use strict';
/*
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */

var helpers = require('./helpers');

/*
 * Calculate the MD5 of an array of little-endian words, and a bit length
 */
function core_md5(x, len)
{
  /* append padding */
  x[len >> 5] |= 0x80 << ((len) % 32);
  x[(((len + 64) >>> 9) << 4) + 14] = len;

  var a =  1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d =  271733878;

  for(var i = 0; i < x.length; i += 16)
  {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;

    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

    a = safe_add(a, olda);
    b = safe_add(b, oldb);
    c = safe_add(c, oldc);
    d = safe_add(d, oldd);
  }
  return Array(a, b, c, d);

}

/*
 * These functions implement the four basic operations the algorithm uses.
 */
function md5_cmn(q, a, b, x, s, t)
{
  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
}
function md5_ff(a, b, c, d, x, s, t)
{
  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
}
function md5_gg(a, b, c, d, x, s, t)
{
  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
}
function md5_hh(a, b, c, d, x, s, t)
{
  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
}
function md5_ii(a, b, c, d, x, s, t)
{
  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
}

/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */
function safe_add(x, y)
{
  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return (msw << 16) | (lsw & 0xFFFF);
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function bit_rol(num, cnt)
{
  return (num << cnt) | (num >>> (32 - cnt));
}

module.exports = function md5(buf) {
  return helpers.hash(buf, core_md5, 16);
};
},{"./helpers":146}],148:[function(require,module,exports){
arguments[4][38][0].apply(exports,arguments)
},{"buffer":17,"dup":38,"inherits":214,"stream":233,"string_decoder":234}],149:[function(require,module,exports){
(function (Buffer){
/*
CryptoJS v3.1.2
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
/** @preserve
(c) 2012 by Cédric Mesnil. All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// constants table
var zl = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
]

var zr = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
]

var sl = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
]

var sr = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
]

var hl = [0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]
var hr = [0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]

function bytesToWords (bytes) {
  var words = []
  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
    words[b >>> 5] |= bytes[i] << (24 - b % 32)
  }
  return words
}

function wordsToBytes (words) {
  var bytes = []
  for (var b = 0; b < words.length * 32; b += 8) {
    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF)
  }
  return bytes
}

function processBlock (H, M, offset) {
  // swap endian
  for (var i = 0; i < 16; i++) {
    var offset_i = offset + i
    var M_offset_i = M[offset_i]

    // Swap
    M[offset_i] = (
      (((M_offset_i << 8) | (M_offset_i >>> 24)) & 0x00ff00ff) |
      (((M_offset_i << 24) | (M_offset_i >>> 8)) & 0xff00ff00)
    )
  }

  // Working variables
  var al, bl, cl, dl, el
  var ar, br, cr, dr, er

  ar = al = H[0]
  br = bl = H[1]
  cr = cl = H[2]
  dr = dl = H[3]
  er = el = H[4]

  // computation
  var t
  for (i = 0; i < 80; i += 1) {
    t = (al + M[offset + zl[i]]) | 0
    if (i < 16) {
      t += f1(bl, cl, dl) + hl[0]
    } else if (i < 32) {
      t += f2(bl, cl, dl) + hl[1]
    } else if (i < 48) {
      t += f3(bl, cl, dl) + hl[2]
    } else if (i < 64) {
      t += f4(bl, cl, dl) + hl[3]
    } else {// if (i<80) {
      t += f5(bl, cl, dl) + hl[4]
    }
    t = t | 0
    t = rotl(t, sl[i])
    t = (t + el) | 0
    al = el
    el = dl
    dl = rotl(cl, 10)
    cl = bl
    bl = t

    t = (ar + M[offset + zr[i]]) | 0
    if (i < 16) {
      t += f5(br, cr, dr) + hr[0]
    } else if (i < 32) {
      t += f4(br, cr, dr) + hr[1]
    } else if (i < 48) {
      t += f3(br, cr, dr) + hr[2]
    } else if (i < 64) {
      t += f2(br, cr, dr) + hr[3]
    } else {// if (i<80) {
      t += f1(br, cr, dr) + hr[4]
    }

    t = t | 0
    t = rotl(t, sr[i])
    t = (t + er) | 0
    ar = er
    er = dr
    dr = rotl(cr, 10)
    cr = br
    br = t
  }

  // intermediate hash value
  t = (H[1] + cl + dr) | 0
  H[1] = (H[2] + dl + er) | 0
  H[2] = (H[3] + el + ar) | 0
  H[3] = (H[4] + al + br) | 0
  H[4] = (H[0] + bl + cr) | 0
  H[0] = t
}

function f1 (x, y, z) {
  return ((x) ^ (y) ^ (z))
}

function f2 (x, y, z) {
  return (((x) & (y)) | ((~x) & (z)))
}

function f3 (x, y, z) {
  return (((x) | (~(y))) ^ (z))
}

function f4 (x, y, z) {
  return (((x) & (z)) | ((y) & (~(z))))
}

function f5 (x, y, z) {
  return ((x) ^ ((y) | (~(z))))
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function ripemd160 (message) {
  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]

  if (typeof message === 'string') {
    message = new Buffer(message, 'utf8')
  }

  var m = bytesToWords(message)

  var nBitsLeft = message.length * 8
  var nBitsTotal = message.length * 8

  // Add padding
  m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32)
  m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
    (((nBitsTotal << 8) | (nBitsTotal >>> 24)) & 0x00ff00ff) |
    (((nBitsTotal << 24) | (nBitsTotal >>> 8)) & 0xff00ff00)
  )

  for (var i = 0; i < m.length; i += 16) {
    processBlock(H, m, i)
  }

  // swap endian
  for (i = 0; i < 5; i++) {
    // shortcut
    var H_i = H[i]

    // Swap
    H[i] = (((H_i << 8) | (H_i >>> 24)) & 0x00ff00ff) |
      (((H_i << 24) | (H_i >>> 8)) & 0xff00ff00)
  }

  var digestbytes = wordsToBytes(H)
  return new Buffer(digestbytes)
}

module.exports = ripemd160

}).call(this,require("buffer").Buffer)
},{"buffer":17}],150:[function(require,module,exports){
(function (Buffer){
// prototype class for hash functions
function Hash (blockSize, finalSize) {
  this._block = new Buffer(blockSize)
  this._finalSize = finalSize
  this._blockSize = blockSize
  this._len = 0
  this._s = 0
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8'
    data = new Buffer(data, enc)
  }

  var l = this._len += data.length
  var s = this._s || 0
  var f = 0
  var buffer = this._block

  while (s < l) {
    var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))
    var ch = (t - f)

    for (var i = 0; i < ch; i++) {
      buffer[(s % this._blockSize) + i] = data[i + f]
    }

    s += ch
    f += ch

    if ((s % this._blockSize) === 0) {
      this._update(buffer)
    }
  }
  this._s = s

  return this
}

Hash.prototype.digest = function (enc) {
  // Suppose the length of the message M, in bits, is l
  var l = this._len * 8

  // Append the bit 1 to the end of the message
  this._block[this._len % this._blockSize] = 0x80

  // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
  this._block.fill(0, this._len % this._blockSize + 1)

  if (l % (this._blockSize * 8) >= this._finalSize * 8) {
    this._update(this._block)
    this._block.fill(0)
  }

  // to this append the block which is equal to the number l written in binary
  // TODO: handle case where l is > Math.pow(2, 29)
  this._block.writeInt32BE(l, this._blockSize - 4)

  var hash = this._update(this._block) || this._hash()

  return enc ? hash.toString(enc) : hash
}

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass')
}

module.exports = Hash

}).call(this,require("buffer").Buffer)
},{"buffer":17}],151:[function(require,module,exports){
var exports = module.exports = function SHA (algorithm) {
  algorithm = algorithm.toLowerCase()

  var Algorithm = exports[algorithm]
  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

  return new Algorithm()
}

exports.sha = require('./sha')
exports.sha1 = require('./sha1')
exports.sha224 = require('./sha224')
exports.sha256 = require('./sha256')
exports.sha384 = require('./sha384')
exports.sha512 = require('./sha512')

},{"./sha":152,"./sha1":153,"./sha224":154,"./sha256":155,"./sha384":156,"./sha512":157}],152:[function(require,module,exports){
(function (Buffer){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

var inherits = require('inherits')
var Hash = require('./hash')

var W = new Array(80)

function Sha () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha, Hash)

Sha.prototype.init = function () {
  this._a = 0x67452301 | 0
  this._b = 0xefcdab89 | 0
  this._c = 0x98badcfe | 0
  this._d = 0x10325476 | 0
  this._e = 0xc3d2e1f0 | 0

  return this
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function rol (num, cnt) {
  return (num << cnt) | (num >>> (32 - cnt))
}

Sha.prototype._update = function (M) {
  var W = this._w

  var a = this._a
  var b = this._b
  var c = this._c
  var d = this._d
  var e = this._e

  var j = 0
  var k

  /*
   * SHA-1 has a bitwise rotate left operation. But, SHA is not
   * function calcW() { return rol(W[j - 3] ^ W[j -  8] ^ W[j - 14] ^ W[j - 16], 1) }
   */
  function calcW () { return W[j - 3] ^ W[j - 8] ^ W[j - 14] ^ W[j - 16] }
  function loop (w, f) {
    W[j] = w

    var t = rol(a, 5) + f + e + w + k

    e = d
    d = c
    c = rol(b, 30)
    b = a
    a = t
    j++
  }

  k = 1518500249
  while (j < 16) loop(M.readInt32BE(j * 4), (b & c) | ((~b) & d))
  while (j < 20) loop(calcW(), (b & c) | ((~b) & d))
  k = 1859775393
  while (j < 40) loop(calcW(), b ^ c ^ d)
  k = -1894007588
  while (j < 60) loop(calcW(), (b & c) | (b & d) | (c & d))
  k = -899497514
  while (j < 80) loop(calcW(), b ^ c ^ d)

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha.prototype._hash = function () {
  var H = new Buffer(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha


}).call(this,require("buffer").Buffer)
},{"./hash":150,"buffer":17,"inherits":214}],153:[function(require,module,exports){
(function (Buffer){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = require('inherits')
var Hash = require('./hash')

var W = new Array(80)

function Sha1 () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha1, Hash)

Sha1.prototype.init = function () {
  this._a = 0x67452301 | 0
  this._b = 0xefcdab89 | 0
  this._c = 0x98badcfe | 0
  this._d = 0x10325476 | 0
  this._e = 0xc3d2e1f0 | 0

  return this
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function rol (num, cnt) {
  return (num << cnt) | (num >>> (32 - cnt))
}

Sha1.prototype._update = function (M) {
  var W = this._w

  var a = this._a
  var b = this._b
  var c = this._c
  var d = this._d
  var e = this._e

  var j = 0
  var k

  function calcW () { return rol(W[j - 3] ^ W[j - 8] ^ W[j - 14] ^ W[j - 16], 1) }
  function loop (w, f) {
    W[j] = w

    var t = rol(a, 5) + f + e + w + k

    e = d
    d = c
    c = rol(b, 30)
    b = a
    a = t
    j++
  }

  k = 1518500249
  while (j < 16) loop(M.readInt32BE(j * 4), (b & c) | ((~b) & d))
  while (j < 20) loop(calcW(), (b & c) | ((~b) & d))
  k = 1859775393
  while (j < 40) loop(calcW(), b ^ c ^ d)
  k = -1894007588
  while (j < 60) loop(calcW(), (b & c) | (b & d) | (c & d))
  k = -899497514
  while (j < 80) loop(calcW(), b ^ c ^ d)

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha1.prototype._hash = function () {
  var H = new Buffer(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha1

}).call(this,require("buffer").Buffer)
},{"./hash":150,"buffer":17,"inherits":214}],154:[function(require,module,exports){
(function (Buffer){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Sha256 = require('./sha256')
var Hash = require('./hash')

var W = new Array(64)

function Sha224 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha224, Sha256)

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8 | 0
  this._b = 0x367cd507 | 0
  this._c = 0x3070dd17 | 0
  this._d = 0xf70e5939 | 0
  this._e = 0xffc00b31 | 0
  this._f = 0x68581511 | 0
  this._g = 0x64f98fa7 | 0
  this._h = 0xbefa4fa4 | 0

  return this
}

Sha224.prototype._hash = function () {
  var H = new Buffer(28)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)

  return H
}

module.exports = Sha224

}).call(this,require("buffer").Buffer)
},{"./hash":150,"./sha256":155,"buffer":17,"inherits":214}],155:[function(require,module,exports){
(function (Buffer){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Hash = require('./hash')

var K = [
  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
]

var W = new Array(64)

function Sha256 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha256, Hash)

Sha256.prototype.init = function () {
  this._a = 0x6a09e667 | 0
  this._b = 0xbb67ae85 | 0
  this._c = 0x3c6ef372 | 0
  this._d = 0xa54ff53a | 0
  this._e = 0x510e527f | 0
  this._f = 0x9b05688c | 0
  this._g = 0x1f83d9ab | 0
  this._h = 0x5be0cd19 | 0

  return this
}

function Ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function Maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function Sigma0 (x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
}

function Sigma1 (x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
}

function Gamma0 (x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
}

function Gamma1 (x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
}

Sha256.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  var j = 0

  function calcW () { return Gamma1(W[j - 2]) + W[j - 7] + Gamma0(W[j - 15]) + W[j - 16] }
  function loop (w) {
    W[j] = w

    var T1 = h + Sigma1(e) + Ch(e, f, g) + K[j] + w
    var T2 = Sigma0(a) + Maj(a, b, c)

    h = g
    g = f
    f = e
    e = d + T1
    d = c
    c = b
    b = a
    a = T1 + T2

    j++
  }

  while (j < 16) loop(M.readInt32BE(j * 4))
  while (j < 64) loop(calcW())

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
  this._f = (f + this._f) | 0
  this._g = (g + this._g) | 0
  this._h = (h + this._h) | 0
}

Sha256.prototype._hash = function () {
  var H = new Buffer(32)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)
  H.writeInt32BE(this._h, 28)

  return H
}

module.exports = Sha256

}).call(this,require("buffer").Buffer)
},{"./hash":150,"buffer":17,"inherits":214}],156:[function(require,module,exports){
(function (Buffer){
var inherits = require('inherits')
var SHA512 = require('./sha512')
var Hash = require('./hash')

var W = new Array(160)

function Sha384 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha384, SHA512)

Sha384.prototype.init = function () {
  this._a = 0xcbbb9d5d | 0
  this._b = 0x629a292a | 0
  this._c = 0x9159015a | 0
  this._d = 0x152fecd8 | 0
  this._e = 0x67332667 | 0
  this._f = 0x8eb44a87 | 0
  this._g = 0xdb0c2e0d | 0
  this._h = 0x47b5481d | 0

  this._al = 0xc1059ed8 | 0
  this._bl = 0x367cd507 | 0
  this._cl = 0x3070dd17 | 0
  this._dl = 0xf70e5939 | 0
  this._el = 0xffc00b31 | 0
  this._fl = 0x68581511 | 0
  this._gl = 0x64f98fa7 | 0
  this._hl = 0xbefa4fa4 | 0

  return this
}

Sha384.prototype._hash = function () {
  var H = new Buffer(48)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._a, this._al, 0)
  writeInt64BE(this._b, this._bl, 8)
  writeInt64BE(this._c, this._cl, 16)
  writeInt64BE(this._d, this._dl, 24)
  writeInt64BE(this._e, this._el, 32)
  writeInt64BE(this._f, this._fl, 40)

  return H
}

module.exports = Sha384

}).call(this,require("buffer").Buffer)
},{"./hash":150,"./sha512":157,"buffer":17,"inherits":214}],157:[function(require,module,exports){
(function (Buffer){
var inherits = require('inherits')
var Hash = require('./hash')

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
]

var W = new Array(160)

function Sha512 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha512, Hash)

Sha512.prototype.init = function () {
  this._a = 0x6a09e667 | 0
  this._b = 0xbb67ae85 | 0
  this._c = 0x3c6ef372 | 0
  this._d = 0xa54ff53a | 0
  this._e = 0x510e527f | 0
  this._f = 0x9b05688c | 0
  this._g = 0x1f83d9ab | 0
  this._h = 0x5be0cd19 | 0

  this._al = 0xf3bcc908 | 0
  this._bl = 0x84caa73b | 0
  this._cl = 0xfe94f82b | 0
  this._dl = 0x5f1d36f1 | 0
  this._el = 0xade682d1 | 0
  this._fl = 0x2b3e6c1f | 0
  this._gl = 0xfb41bd6b | 0
  this._hl = 0x137e2179 | 0

  return this
}

function Ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function Maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function Sigma0 (x, xl) {
  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
}

function Sigma1 (x, xl) {
  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
}

function Gamma0 (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
}

function Gamma0l (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
}

function Gamma1 (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
}

function Gamma1l (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
}

Sha512.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  var al = this._al | 0
  var bl = this._bl | 0
  var cl = this._cl | 0
  var dl = this._dl | 0
  var el = this._el | 0
  var fl = this._fl | 0
  var gl = this._gl | 0
  var hl = this._hl | 0

  var i = 0
  var j = 0
  var Wi, Wil
  function calcW () {
    var x = W[j - 15 * 2]
    var xl = W[j - 15 * 2 + 1]
    var gamma0 = Gamma0(x, xl)
    var gamma0l = Gamma0l(xl, x)

    x = W[j - 2 * 2]
    xl = W[j - 2 * 2 + 1]
    var gamma1 = Gamma1(x, xl)
    var gamma1l = Gamma1l(xl, x)

    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
    var Wi7 = W[j - 7 * 2]
    var Wi7l = W[j - 7 * 2 + 1]

    var Wi16 = W[j - 16 * 2]
    var Wi16l = W[j - 16 * 2 + 1]

    Wil = gamma0l + Wi7l
    Wi = gamma0 + Wi7 + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0)
    Wil = Wil + gamma1l
    Wi = Wi + gamma1 + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0)
    Wil = Wil + Wi16l
    Wi = Wi + Wi16 + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0)
  }

  function loop () {
    W[j] = Wi
    W[j + 1] = Wil

    var maj = Maj(a, b, c)
    var majl = Maj(al, bl, cl)

    var sigma0h = Sigma0(a, al)
    var sigma0l = Sigma0(al, a)
    var sigma1h = Sigma1(e, el)
    var sigma1l = Sigma1(el, e)

    // t1 = h + sigma1 + ch + K[i] + W[i]
    var Ki = K[j]
    var Kil = K[j + 1]

    var ch = Ch(e, f, g)
    var chl = Ch(el, fl, gl)

    var t1l = hl + sigma1l
    var t1 = h + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0)
    t1l = t1l + chl
    t1 = t1 + ch + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0)
    t1l = t1l + Kil
    t1 = t1 + Ki + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0)
    t1l = t1l + Wil
    t1 = t1 + Wi + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0)

    // t2 = sigma0 + maj
    var t2l = sigma0l + majl
    var t2 = sigma0h + maj + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0)

    h = g
    hl = gl
    g = f
    gl = fl
    f = e
    fl = el
    el = (dl + t1l) | 0
    e = (d + t1 + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
    d = c
    dl = cl
    c = b
    cl = bl
    b = a
    bl = al
    al = (t1l + t2l) | 0
    a = (t1 + t2 + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0

    i++
    j += 2
  }

  while (i < 16) {
    Wi = M.readInt32BE(j * 4)
    Wil = M.readInt32BE(j * 4 + 4)

    loop()
  }

  while (i < 80) {
    calcW()
    loop()
  }

  this._al = (this._al + al) | 0
  this._bl = (this._bl + bl) | 0
  this._cl = (this._cl + cl) | 0
  this._dl = (this._dl + dl) | 0
  this._el = (this._el + el) | 0
  this._fl = (this._fl + fl) | 0
  this._gl = (this._gl + gl) | 0
  this._hl = (this._hl + hl) | 0

  this._a = (this._a + a + ((this._al >>> 0) < (al >>> 0) ? 1 : 0)) | 0
  this._b = (this._b + b + ((this._bl >>> 0) < (bl >>> 0) ? 1 : 0)) | 0
  this._c = (this._c + c + ((this._cl >>> 0) < (cl >>> 0) ? 1 : 0)) | 0
  this._d = (this._d + d + ((this._dl >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
  this._e = (this._e + e + ((this._el >>> 0) < (el >>> 0) ? 1 : 0)) | 0
  this._f = (this._f + f + ((this._fl >>> 0) < (fl >>> 0) ? 1 : 0)) | 0
  this._g = (this._g + g + ((this._gl >>> 0) < (gl >>> 0) ? 1 : 0)) | 0
  this._h = (this._h + h + ((this._hl >>> 0) < (hl >>> 0) ? 1 : 0)) | 0
}

Sha512.prototype._hash = function () {
  var H = new Buffer(64)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._a, this._al, 0)
  writeInt64BE(this._b, this._bl, 8)
  writeInt64BE(this._c, this._cl, 16)
  writeInt64BE(this._d, this._dl, 24)
  writeInt64BE(this._e, this._el, 32)
  writeInt64BE(this._f, this._fl, 40)
  writeInt64BE(this._g, this._gl, 48)
  writeInt64BE(this._h, this._hl, 56)

  return H
}

module.exports = Sha512

}).call(this,require("buffer").Buffer)
},{"./hash":150,"buffer":17,"inherits":214}],158:[function(require,module,exports){
(function (Buffer){
'use strict';
var createHash = require('create-hash/browser');
var inherits = require('inherits')

var Transform = require('stream').Transform

var ZEROS = new Buffer(128)
ZEROS.fill(0)

function Hmac(alg, key) {
  Transform.call(this)
  alg = alg.toLowerCase()
  if (typeof key === 'string') {
    key = new Buffer(key)
  }

  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  this._alg = alg
  this._key = key

  if (key.length > blocksize) {
    key = createHash(alg).update(key).digest()

  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = new Buffer(blocksize)
  var opad = this._opad = new Buffer(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  this._hash = createHash(alg).update(ipad)
}

inherits(Hmac, Transform)

Hmac.prototype.update = function (data, enc) {
  this._hash.update(data, enc)

  return this
}

Hmac.prototype._transform = function (data, _, next) {
  this._hash.update(data)

  next()
}

Hmac.prototype._flush = function (next) {
  this.push(this.digest())

  next()
}

Hmac.prototype.digest = function (enc) {
  var h = this._hash.digest()

  return createHash(this._alg).update(this._opad).update(h).digest(enc)
}

module.exports = function createHmac(alg, key) {
  return new Hmac(alg, key)
}

}).call(this,require("buffer").Buffer)
},{"buffer":17,"create-hash/browser":145,"inherits":214,"stream":233}],159:[function(require,module,exports){
(function (Buffer){
var generatePrime = require('./lib/generatePrime');
var primes = require('./lib/primes');

var DH = require('./lib/dh');

function getDiffieHellman(mod) {
  var prime = new Buffer(primes[mod].prime, 'hex');
  var gen = new Buffer(primes[mod].gen, 'hex');

  return new DH(prime, gen);
}

function createDiffieHellman(prime, enc, generator, genc) {
  if (Buffer.isBuffer(enc) || (typeof enc === 'string' && ['hex', 'binary', 'base64'].indexOf(enc) === -1)) {
    genc = generator;
    generator = enc;
    enc = undefined;
  }

  enc = enc || 'binary';
  genc = genc || 'binary';
  generator = generator || new Buffer([2]);

  if (!Buffer.isBuffer(generator)) {
    generator = new Buffer(generator, genc);
  }

  if (typeof prime === 'number') {
    return new DH(generatePrime(prime, generator), generator, true);
  }

  if (!Buffer.isBuffer(prime)) {
    prime = new Buffer(prime, enc);
  }

  return new DH(prime, generator, true);
}

exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman;
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman;

}).call(this,require("buffer").Buffer)
},{"./lib/dh":160,"./lib/generatePrime":161,"./lib/primes":162,"buffer":17}],160:[function(require,module,exports){
(function (Buffer){
var BN = require('bn.js');
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = require('./generatePrime');
var randomBytes = require('randombytes');
module.exports = DH;

function setPublicKey(pub, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc);
  }
  this._pub = new BN(pub);
  return this;
}

function setPrivateKey(priv, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc);
  }
  this._priv = new BN(priv);
  return this;
}

var primeCache = {};
function checkPrime(prime, generator) {
  var gen = generator.toString('hex');
  var hex = [gen, prime.toString(16)].join('_');
  if (hex in primeCache) {
    return primeCache[hex];
  }
  var error = 0;

  if (prime.isEven() ||
    !primes.simpleSieve ||
    !primes.fermatTest(prime) ||
    !millerRabin.test(prime)) {
    //not a prime so +1
    error += 1;

    if (gen === '02' || gen === '05') {
      // we'd be able to check the generator
      // it would fail so +8
      error += 8;
    } else {
      //we wouldn't be able to test the generator
      // so +4
      error += 4;
    }
    primeCache[hex] = error;
    return error;
  }
  if (!millerRabin.test(prime.shrn(1))) {
    //not a safe prime
    error += 2;
  }
  var rem;
  switch (gen) {
    case '02':
      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
        // unsuidable generator
        error += 8;
      }
      break;
    case '05':
      rem = prime.mod(TEN);
      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
        // prime mod 10 needs to equal 3 or 7
        error += 8;
      }
      break;
    default:
      error += 4;
  }
  primeCache[hex] = error;
  return error;
}

function DH(prime, generator, malleable) {
  this.setGenerator(generator);
  this.__prime = new BN(prime);
  this._prime = BN.mont(this.__prime);
  this._primeLen = prime.length;
  this._pub = undefined;
  this._priv = undefined;
  this._primeCode = undefined;
  if (malleable) {
    this.setPublicKey = setPublicKey;
    this.setPrivateKey = setPrivateKey;
  } else {
    this._primeCode = 8;
  }
}
Object.defineProperty(DH.prototype, 'verifyError', {
  enumerable: true,
  get: function () {
    if (typeof this._primeCode !== 'number') {
      this._primeCode = checkPrime(this.__prime, this.__gen);
    }
    return this._primeCode;
  }
});
DH.prototype.generateKeys = function () {
  if (!this._priv) {
    this._priv = new BN(randomBytes(this._primeLen));
  }
  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
  return this.getPublicKey();
};

DH.prototype.computeSecret = function (other) {
  other = new BN(other);
  other = other.toRed(this._prime);
  var secret = other.redPow(this._priv).fromRed();
  var out = new Buffer(secret.toArray());
  var prime = this.getPrime();
  if (out.length < prime.length) {
    var front = new Buffer(prime.length - out.length);
    front.fill(0);
    out = Buffer.concat([front, out]);
  }
  return out;
};

DH.prototype.getPublicKey = function getPublicKey(enc) {
  return formatReturnValue(this._pub, enc);
};

DH.prototype.getPrivateKey = function getPrivateKey(enc) {
  return formatReturnValue(this._priv, enc);
};

DH.prototype.getPrime = function (enc) {
  return formatReturnValue(this.__prime, enc);
};

DH.prototype.getGenerator = function (enc) {
  return formatReturnValue(this._gen, enc);
};

DH.prototype.setGenerator = function (gen, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(gen)) {
    gen = new Buffer(gen, enc);
  }
  this.__gen = gen;
  this._gen = new BN(gen);
  return this;
};

function formatReturnValue(bn, enc) {
  var buf = new Buffer(bn.toArray());
  if (!enc) {
    return buf;
  } else {
    return buf.toString(enc);
  }
}

}).call(this,require("buffer").Buffer)
},{"./generatePrime":161,"bn.js":163,"buffer":17,"miller-rabin":164,"randombytes":212}],161:[function(require,module,exports){
var randomBytes = require('randombytes');
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = require('bn.js');
var TWENTYFOUR = new BN(24);
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;

function _getPrimes() {
  if (primes !== null)
    return primes;

  var limit = 0x100000;
  var res = [];
  res[0] = 2;
  for (var i = 1, k = 3; k < limit; k += 2) {
    var sqrt = Math.ceil(Math.sqrt(k));
    for (var j = 0; j < i && res[j] <= sqrt; j++)
      if (k % res[j] === 0)
        break;

    if (i !== j && res[j] <= sqrt)
      continue;

    res[i++] = k;
  }
  primes = res;
  return res;
}

function simpleSieve(p) {
  var primes = _getPrimes();

  for (var i = 0; i < primes.length; i++)
    if (p.modn(primes[i]) === 0) {
      if (p.cmpn(primes[i]) === 0) {
        return true;
      } else {
        return false;
      }
    }

  return true;
}

function fermatTest(p) {
  var red = BN.mont(p);
  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}

function findPrime(bits, gen) {
  if (bits < 16) {
    // this is what openssl does
    if (gen === 2 || gen === 5) {
      return new BN([0x8c, 0x7b]);
    } else {
      return new BN([0x8c, 0x27]);
    }
  }
  gen = new BN(gen);

  var num, n2;

  while (true) {
    num = new BN(randomBytes(Math.ceil(bits / 8)));
    while (num.bitLength() > bits) {
      num.ishrn(1);
    }
    if (num.isEven()) {
      num.iadd(ONE);
    }
    if (!num.testn(1)) {
      num.iadd(TWO);
    }
    if (!gen.cmp(TWO)) {
      while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
        num.iadd(FOUR);
      }
    } else if (!gen.cmp(FIVE)) {
      while (num.mod(TEN).cmp(THREE)) {
        num.iadd(FOUR);
      }
    }
    n2 = num.shrn(1);
    if (simpleSieve(n2) && simpleSieve(num) &&
      fermatTest(n2) && fermatTest(num) &&
      millerRabin.test(n2) && millerRabin.test(num)) {
      return num;
    }
  }

}

},{"bn.js":163,"miller-rabin":164,"randombytes":212}],162:[function(require,module,exports){
module.exports={
    "modp1": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
    },
    "modp2": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
    },
    "modp5": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
    },
    "modp14": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
    },
    "modp15": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
    },
    "modp16": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
    },
    "modp17": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
    },
    "modp18": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
    }
}
},{}],163:[function(require,module,exports){
arguments[4][54][0].apply(exports,arguments)
},{"dup":54}],164:[function(require,module,exports){
var bn = require('bn.js');
var brorand = require('brorand');

function MillerRabin(rand) {
  this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;

MillerRabin.create = function create(rand) {
  return new MillerRabin(rand);
};

MillerRabin.prototype._rand = function _rand(n) {
  var len = n.bitLength();
  var buf = this.rand.generate(Math.ceil(len / 8));

  // Set low bits
  buf[0] |= 3;

  // Mask high bits
  var mask = len & 0x7;
  if (mask !== 0)
    buf[buf.length - 1] >>= 7 - mask;

  return new bn(buf);
}

MillerRabin.prototype.test = function test(n, k, cb) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  var n2 = n1.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  var prime = true;
  for (; k > 0; k--) {
    var a = this._rand(n2);
    if (cb)
      cb(a);

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return false;
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s)
      return false;
  }

  return prime;
};

MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  var n2 = n1.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  for (; k > 0; k--) {
    var a = this._rand(n2);

    var g = n.gcd(a);
    if (g.cmpn(1) !== 0)
      return g;

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return x.fromRed().subn(1).gcd(n);
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s) {
      x = x.redSqr();
      return x.fromRed().subn(1).gcd(n);
    }
  }

  return false;
};

},{"bn.js":163,"brorand":165}],165:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],166:[function(require,module,exports){
(function (Buffer){
var createHmac = require('create-hmac')
var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs

exports.pbkdf2 = pbkdf2
function pbkdf2 (password, salt, iterations, keylen, digest, callback) {
  if (typeof digest === 'function') {
    callback = digest
    digest = undefined
  }

  if (typeof callback !== 'function') {
    throw new Error('No callback provided to pbkdf2')
  }

  var result = pbkdf2Sync(password, salt, iterations, keylen, digest)
  setTimeout(function () {
    callback(undefined, result)
  })
}

exports.pbkdf2Sync = pbkdf2Sync
function pbkdf2Sync (password, salt, iterations, keylen, digest) {
  if (typeof iterations !== 'number') {
    throw new TypeError('Iterations not a number')
  }

  if (iterations < 0) {
    throw new TypeError('Bad iterations')
  }

  if (typeof keylen !== 'number') {
    throw new TypeError('Key length not a number')
  }

  if (keylen < 0 || keylen > MAX_ALLOC) {
    throw new TypeError('Bad key length')
  }

  digest = digest || 'sha1'

  if (!Buffer.isBuffer(password)) password = new Buffer(password, 'binary')
  if (!Buffer.isBuffer(salt)) salt = new Buffer(salt, 'binary')

  var hLen
  var l = 1
  var DK = new Buffer(keylen)
  var block1 = new Buffer(salt.length + 4)
  salt.copy(block1, 0, 0, salt.length)

  var r
  var T

  for (var i = 1; i <= l; i++) {
    block1.writeUInt32BE(i, salt.length)
    var U = createHmac(digest, password).update(block1).digest()

    if (!hLen) {
      hLen = U.length
      T = new Buffer(hLen)
      l = Math.ceil(keylen / hLen)
      r = keylen - (l - 1) * hLen
    }

    U.copy(T, 0, 0, hLen)

    for (var j = 1; j < iterations; j++) {
      U = createHmac(digest, password).update(U).digest()

      for (var k = 0; k < hLen; k++) {
        T[k] ^= U[k]
      }
    }

    var destPos = (i - 1) * hLen
    var len = (i === l ? r : hLen)
    T.copy(DK, destPos, 0, len)
  }

  return DK
}

}).call(this,require("buffer").Buffer)
},{"buffer":17,"create-hmac":158}],167:[function(require,module,exports){
exports.publicEncrypt = require('./publicEncrypt');
exports.privateDecrypt = require('./privateDecrypt');

exports.privateEncrypt = function privateEncrypt(key, buf) {
  return exports.publicEncrypt(key, buf, true);
};

exports.publicDecrypt = function publicDecrypt(key, buf) {
  return exports.privateDecrypt(key, buf, true);
};
},{"./privateDecrypt":208,"./publicEncrypt":209}],168:[function(require,module,exports){
(function (Buffer){
var createHash = require('create-hash');
module.exports = function (seed, len) {
  var t = new Buffer('');
  var  i = 0, c;
  while (t.length < len) {
    c = i2ops(i++);
    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()]);
  }
  return t.slice(0, len);
};

function i2ops(c) {
  var out = new Buffer(4);
  out.writeUInt32BE(c,0);
  return out;
}
}).call(this,require("buffer").Buffer)
},{"buffer":17,"create-hash":145}],169:[function(require,module,exports){
arguments[4][54][0].apply(exports,arguments)
},{"dup":54}],170:[function(require,module,exports){
arguments[4][55][0].apply(exports,arguments)
},{"bn.js":169,"buffer":17,"dup":55,"randombytes":212}],171:[function(require,module,exports){
arguments[4][80][0].apply(exports,arguments)
},{"dup":80}],172:[function(require,module,exports){
arguments[4][81][0].apply(exports,arguments)
},{"asn1.js":175,"dup":81}],173:[function(require,module,exports){
arguments[4][82][0].apply(exports,arguments)
},{"browserify-aes":192,"buffer":17,"dup":82,"evp_bytestokey":207}],174:[function(require,module,exports){
arguments[4][83][0].apply(exports,arguments)
},{"./aesid.json":171,"./asn1":172,"./fixProc":173,"browserify-aes":192,"buffer":17,"dup":83,"pbkdf2":166}],175:[function(require,module,exports){
arguments[4][84][0].apply(exports,arguments)
},{"./asn1/api":176,"./asn1/base":178,"./asn1/constants":182,"./asn1/decoders":184,"./asn1/encoders":187,"bn.js":169,"dup":84}],176:[function(require,module,exports){
arguments[4][85][0].apply(exports,arguments)
},{"../asn1":175,"dup":85,"inherits":214,"vm":237}],177:[function(require,module,exports){
arguments[4][86][0].apply(exports,arguments)
},{"../base":178,"buffer":17,"dup":86,"inherits":214}],178:[function(require,module,exports){
arguments[4][87][0].apply(exports,arguments)
},{"./buffer":177,"./node":179,"./reporter":180,"dup":87}],179:[function(require,module,exports){
arguments[4][88][0].apply(exports,arguments)
},{"../base":178,"dup":88,"minimalistic-assert":189}],180:[function(require,module,exports){
arguments[4][89][0].apply(exports,arguments)
},{"dup":89,"inherits":214}],181:[function(require,module,exports){
arguments[4][90][0].apply(exports,arguments)
},{"../constants":182,"dup":90}],182:[function(require,module,exports){
arguments[4][91][0].apply(exports,arguments)
},{"./der":181,"dup":91}],183:[function(require,module,exports){
arguments[4][92][0].apply(exports,arguments)
},{"../../asn1":175,"dup":92,"inherits":214}],184:[function(require,module,exports){
arguments[4][93][0].apply(exports,arguments)
},{"./der":183,"./pem":185,"dup":93}],185:[function(require,module,exports){
arguments[4][94][0].apply(exports,arguments)
},{"../../asn1":175,"./der":183,"buffer":17,"dup":94,"inherits":214}],186:[function(require,module,exports){
arguments[4][95][0].apply(exports,arguments)
},{"../../asn1":175,"buffer":17,"dup":95,"inherits":214}],187:[function(require,module,exports){
arguments[4][96][0].apply(exports,arguments)
},{"./der":186,"./pem":188,"dup":96}],188:[function(require,module,exports){
arguments[4][97][0].apply(exports,arguments)
},{"../../asn1":175,"./der":186,"buffer":17,"dup":97,"inherits":214}],189:[function(require,module,exports){
arguments[4][49][0].apply(exports,arguments)
},{"dup":49}],190:[function(require,module,exports){
arguments[4][23][0].apply(exports,arguments)
},{"buffer":17,"dup":23}],191:[function(require,module,exports){
arguments[4][24][0].apply(exports,arguments)
},{"./aes":190,"./ghash":195,"buffer":17,"buffer-xor":204,"cipher-base":205,"dup":24,"inherits":214}],192:[function(require,module,exports){
arguments[4][25][0].apply(exports,arguments)
},{"./decrypter":193,"./encrypter":194,"./modes":196,"dup":25}],193:[function(require,module,exports){
arguments[4][26][0].apply(exports,arguments)
},{"./aes":190,"./authCipher":191,"./modes":196,"./modes/cbc":197,"./modes/cfb":198,"./modes/cfb1":199,"./modes/cfb8":200,"./modes/ctr":201,"./modes/ecb":202,"./modes/ofb":203,"./streamCipher":206,"buffer":17,"cipher-base":205,"dup":26,"evp_bytestokey":207,"inherits":214}],194:[function(require,module,exports){
arguments[4][27][0].apply(exports,arguments)
},{"./aes":190,"./authCipher":191,"./modes":196,"./modes/cbc":197,"./modes/cfb":198,"./modes/cfb1":199,"./modes/cfb8":200,"./modes/ctr":201,"./modes/ecb":202,"./modes/ofb":203,"./streamCipher":206,"buffer":17,"cipher-base":205,"dup":27,"evp_bytestokey":207,"inherits":214}],195:[function(require,module,exports){
arguments[4][28][0].apply(exports,arguments)
},{"buffer":17,"dup":28}],196:[function(require,module,exports){
arguments[4][29][0].apply(exports,arguments)
},{"dup":29}],197:[function(require,module,exports){
arguments[4][30][0].apply(exports,arguments)
},{"buffer-xor":204,"dup":30}],198:[function(require,module,exports){
arguments[4][31][0].apply(exports,arguments)
},{"buffer":17,"buffer-xor":204,"dup":31}],199:[function(require,module,exports){
arguments[4][32][0].apply(exports,arguments)
},{"buffer":17,"dup":32}],200:[function(require,module,exports){
arguments[4][33][0].apply(exports,arguments)
},{"buffer":17,"dup":33}],201:[function(require,module,exports){
arguments[4][34][0].apply(exports,arguments)
},{"buffer":17,"buffer-xor":204,"dup":34}],202:[function(require,module,exports){
arguments[4][35][0].apply(exports,arguments)
},{"dup":35}],203:[function(require,module,exports){
arguments[4][36][0].apply(exports,arguments)
},{"buffer":17,"buffer-xor":204,"dup":36}],204:[function(require,module,exports){
arguments[4][37][0].apply(exports,arguments)
},{"buffer":17,"dup":37}],205:[function(require,module,exports){
arguments[4][38][0].apply(exports,arguments)
},{"buffer":17,"dup":38,"inherits":214,"stream":233,"string_decoder":234}],206:[function(require,module,exports){
arguments[4][39][0].apply(exports,arguments)
},{"./aes":190,"buffer":17,"cipher-base":205,"dup":39,"inherits":214}],207:[function(require,module,exports){
arguments[4][50][0].apply(exports,arguments)
},{"buffer":17,"create-hash/md5":147,"dup":50}],208:[function(require,module,exports){
(function (Buffer){
var parseKeys = require('parse-asn1');
var mgf = require('./mgf');
var xor = require('./xor');
var bn = require('bn.js');
var crt = require('browserify-rsa');
var createHash = require('create-hash');
var withPublic = require('./withPublic');
module.exports = function privateDecrypt(private_key, enc, reverse) {
  var padding;
  if (private_key.padding) {
    padding = private_key.padding;
  } else if (reverse) {
    padding = 1;
  } else {
    padding = 4;
  }
  
  var key = parseKeys(private_key);
  var k = key.modulus.byteLength();
  if (enc.length > k || new bn(enc).cmp(key.modulus) >= 0) {
    throw new Error('decryption error');
  }
  var msg;
  if (reverse) {
    msg = withPublic(new bn(enc), key);
  } else {
    msg = crt(enc, key);
  }
  var zBuffer = new Buffer(k - msg.length);
  zBuffer.fill(0);
  msg = Buffer.concat([zBuffer, msg], k);
  if (padding === 4) {
    return oaep(key, msg);
  } else if (padding === 1) {
    return pkcs1(key, msg, reverse);
  } else if (padding === 3) {
    return msg;
  } else {
    throw new Error('unknown padding');
  }
};

function oaep(key, msg){
  var n = key.modulus;
  var k = key.modulus.byteLength();
  var mLen = msg.length;
  var iHash = createHash('sha1').update(new Buffer('')).digest();
  var hLen = iHash.length;
  var hLen2 = 2 * hLen;
  if (msg[0] !== 0) {
    throw new Error('decryption error');
  }
  var maskedSeed = msg.slice(1, hLen + 1);
  var maskedDb =  msg.slice(hLen + 1);
  var seed = xor(maskedSeed, mgf(maskedDb, hLen));
  var db = xor(maskedDb, mgf(seed, k - hLen - 1));
  if (compare(iHash, db.slice(0, hLen))) {
    throw new Error('decryption error');
  }
  var i = hLen;
  while (db[i] === 0) {
    i++;
  }
  if (db[i++] !== 1) {
    throw new Error('decryption error');
  }
  return db.slice(i);
}

function pkcs1(key, msg, reverse){
  var p1 = msg.slice(0, 2);
  var i = 2;
  var status = 0;
  while (msg[i++] !== 0) {
    if (i >= msg.length) {
      status++;
      break;
    }
  }
  var ps = msg.slice(2, i - 1);
  var p2 = msg.slice(i - 1, i);

  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)){
    status++;
  }
  if (ps.length < 8) {
    status++;
  }
  if (status) {
    throw new Error('decryption error');
  }
  return  msg.slice(i);
}
function compare(a, b){
  a = new Buffer(a);
  b = new Buffer(b);
  var dif = 0;
  var len = a.length;
  if (a.length !== b.length) {
    dif++;
    len = Math.min(a.length, b.length);
  }
  var i = -1;
  while (++i < len) {
    dif += (a[i] ^ b[i]);
  }
  return dif;
}
}).call(this,require("buffer").Buffer)
},{"./mgf":168,"./withPublic":210,"./xor":211,"bn.js":169,"browserify-rsa":170,"buffer":17,"create-hash":145,"parse-asn1":174}],209:[function(require,module,exports){
(function (Buffer){
var parseKeys = require('parse-asn1');
var randomBytes = require('randombytes');
var createHash = require('create-hash');
var mgf = require('./mgf');
var xor = require('./xor');
var bn = require('bn.js');
var withPublic = require('./withPublic');
var crt = require('browserify-rsa');

var constants = {
  RSA_PKCS1_OAEP_PADDING: 4,
  RSA_PKCS1_PADDIN: 1,
  RSA_NO_PADDING: 3
};

module.exports = function publicEncrypt(public_key, msg, reverse) {
  var padding;
  if (public_key.padding) {
    padding = public_key.padding;
  } else if (reverse) {
    padding = 1;
  } else {
    padding = 4;
  }
  var key = parseKeys(public_key);
  var paddedMsg;
  if (padding === 4) {
    paddedMsg = oaep(key, msg);
  } else if (padding === 1) {
    paddedMsg = pkcs1(key, msg, reverse);
  } else if (padding === 3) {
    paddedMsg = new bn(msg);
    if (paddedMsg.cmp(key.modulus) >= 0) {
      throw new Error('data too long for modulus');
    }
  } else {
    throw new Error('unknown padding');
  }
  if (reverse) {
    return crt(paddedMsg, key);
  } else {
    return withPublic(paddedMsg, key);
  }
};

function oaep(key, msg){
  var k = key.modulus.byteLength();
  var mLen = msg.length;
  var iHash = createHash('sha1').update(new Buffer('')).digest();
  var hLen = iHash.length;
  var hLen2 = 2 * hLen;
  if (mLen > k - hLen2 - 2) {
    throw new Error('message too long');
  }
  var ps = new Buffer(k - mLen - hLen2 - 2);
  ps.fill(0);
  var dblen = k - hLen - 1;
  var seed = randomBytes(hLen);
  var maskedDb = xor(Buffer.concat([iHash, ps, new Buffer([1]), msg], dblen), mgf(seed, dblen));
  var maskedSeed = xor(seed, mgf(maskedDb, hLen));
  return new bn(Buffer.concat([new Buffer([0]), maskedSeed, maskedDb], k));
}
function pkcs1(key, msg, reverse){
  var mLen = msg.length;
  var k = key.modulus.byteLength();
  if (mLen > k - 11) {
    throw new Error('message too long');
  }
  var ps;
  if (reverse) {
    ps = new Buffer(k - mLen - 3);
    ps.fill(0xff);
  } else {
    ps = nonZero(k - mLen - 3);
  }
  return new bn(Buffer.concat([new Buffer([0, reverse?1:2]), ps, new Buffer([0]), msg], k));
}
function nonZero(len, crypto) {
  var out = new Buffer(len);
  var i = 0;
  var cache = randomBytes(len*2);
  var cur = 0;
  var num;
  while (i < len) {
    if (cur === cache.length) {
      cache = randomBytes(len*2);
      cur = 0;
    }
    num = cache[cur++];
    if (num) {
      out[i++] = num;
    }
  }
  return out;
}
}).call(this,require("buffer").Buffer)
},{"./mgf":168,"./withPublic":210,"./xor":211,"bn.js":169,"browserify-rsa":170,"buffer":17,"create-hash":145,"parse-asn1":174,"randombytes":212}],210:[function(require,module,exports){
(function (Buffer){
var bn = require('bn.js');
function withPublic(paddedMsg, key) {
  return new Buffer(paddedMsg
    .toRed(bn.mont(key.modulus))
    .redPow(new bn(key.publicExponent))
    .fromRed()
    .toArray());
}

module.exports = withPublic;
}).call(this,require("buffer").Buffer)
},{"bn.js":169,"buffer":17}],211:[function(require,module,exports){
module.exports = function xor(a, b) {
  var len = a.length;
  var i = -1;
  while (++i < len) {
    a[i] ^= b[i];
  }
  return a
};
},{}],212:[function(require,module,exports){
(function (process,global,Buffer){
'use strict';

var crypto = global.crypto || global.msCrypto
if(crypto && crypto.getRandomValues) {
  module.exports = randomBytes;
} else {
  module.exports = oldBrowser;
}
function randomBytes(size, cb) {
  var bytes = new Buffer(size); //in browserify, this is an extended Uint8Array
    /* This will not work in older browsers.
     * See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
     */

  crypto.getRandomValues(bytes);
  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes);
    });
  }
  return bytes;
}
function oldBrowser() {
  throw new Error(
      'secure random number generation not supported by this browser\n'+
      'use chrome, FireFox or Internet Explorer 11'
    )
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
},{"_process":219,"buffer":17}],213:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      }
      throw TypeError('Uncaught, unspecified "error" event.');
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],214:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],215:[function(require,module,exports){
/**
 * Determine if an object is Buffer
 *
 * Author:   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * License:  MIT
 *
 * `npm install is-buffer`
 */

module.exports = function (obj) {
  return !!(obj != null &&
    (obj._isBuffer || // For Safari 5-7 (missing Object.prototype.constructor)
      (obj.constructor &&
      typeof obj.constructor.isBuffer === 'function' &&
      obj.constructor.isBuffer(obj))
    ))
}

},{}],216:[function(require,module,exports){
module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

},{}],217:[function(require,module,exports){
exports.endianness = function () { return 'LE' };

exports.hostname = function () {
    if (typeof location !== 'undefined') {
        return location.hostname
    }
    else return '';
};

exports.loadavg = function () { return [] };

exports.uptime = function () { return 0 };

exports.freemem = function () {
    return Number.MAX_VALUE;
};

exports.totalmem = function () {
    return Number.MAX_VALUE;
};

exports.cpus = function () { return [] };

exports.type = function () { return 'Browser' };

exports.release = function () {
    if (typeof navigator !== 'undefined') {
        return navigator.appVersion;
    }
    return '';
};

exports.networkInterfaces
= exports.getNetworkInterfaces
= function () { return {} };

exports.arch = function () { return 'javascript' };

exports.platform = function () { return 'browser' };

exports.tmpdir = exports.tmpDir = function () {
    return '/tmp';
};

exports.EOL = '\n';

},{}],218:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))
},{"_process":219}],219:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],220:[function(require,module,exports){
module.exports = require("./lib/_stream_duplex.js")

},{"./lib/_stream_duplex.js":221}],221:[function(require,module,exports){
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}
/*</replacement>*/


module.exports = Duplex;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/



/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method])
    Duplex.prototype[method] = Writable.prototype[method];
}

function Duplex(options) {
  if (!(this instanceof Duplex))
    return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false)
    this.readable = false;

  if (options && options.writable === false)
    this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false)
    this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended)
    return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  processNextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

},{"./_stream_readable":223,"./_stream_writable":225,"core-util-is":226,"inherits":214,"process-nextick-args":227}],222:[function(require,module,exports){
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough))
    return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function(chunk, encoding, cb) {
  cb(null, chunk);
};

},{"./_stream_transform":224,"core-util-is":226,"inherits":214}],223:[function(require,module,exports){
(function (process){
'use strict';

module.exports = Readable;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/


/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/


/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Readable.ReadableState = ReadableState;

var EE = require('events');

/*<replacement>*/
var EElistenerCount = function(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/



/*<replacement>*/
var Stream;
(function (){try{
  Stream = require('st' + 'ream');
}catch(_){}finally{
  if (!Stream)
    Stream = require('events').EventEmitter;
}}())
/*</replacement>*/

var Buffer = require('buffer').Buffer;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/



/*<replacement>*/
var debugUtil = require('util');
var debug;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var StringDecoder;

util.inherits(Readable, Stream);

var Duplex;
function ReadableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex)
    this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.buffer = [];
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // when piping, we only care about 'readable' events that happen
  // after read()ing all the bytes and not getting any pushback.
  this.ranOut = false;

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder)
      StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

var Duplex;
function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  if (!(this instanceof Readable))
    return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options && typeof options.read === 'function')
    this._read = options.read;

  Stream.call(this);
}

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
  var state = this._readableState;

  if (!state.objectMode && typeof chunk === 'string') {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding) {
      chunk = new Buffer(chunk, encoding);
      encoding = '';
    }
  }

  return readableAddChunk(this, state, chunk, encoding, false);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true);
};

Readable.prototype.isPaused = function() {
  return this._readableState.flowing === false;
};

function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);
  if (er) {
    stream.emit('error', er);
  } else if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error('stream.push() after EOF');
      stream.emit('error', e);
    } else if (state.endEmitted && addToFront) {
      var e = new Error('stream.unshift() after end event');
      stream.emit('error', e);
    } else {
      if (state.decoder && !addToFront && !encoding)
        chunk = state.decoder.write(chunk);

      if (!addToFront)
        state.reading = false;

      // if we want the data now, just emit it.
      if (state.flowing && state.length === 0 && !state.sync) {
        stream.emit('data', chunk);
        stream.read(0);
      } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront)
          state.buffer.unshift(chunk);
        else
          state.buffer.push(chunk);

        if (state.needReadable)
          emitReadable(stream);
      }

      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }

  return needMoreData(state);
}


// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended &&
         (state.needReadable ||
          state.length < state.highWaterMark ||
          state.length === 0);
}

// backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
  if (!StringDecoder)
    StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

function howMuchToRead(n, state) {
  if (state.length === 0 && state.ended)
    return 0;

  if (state.objectMode)
    return n === 0 ? 0 : 1;

  if (n === null || isNaN(n)) {
    // only flow one buffer at a time
    if (state.flowing && state.buffer.length)
      return state.buffer[0].length;
    else
      return state.length;
  }

  if (n <= 0)
    return 0;

  // If we're asking for more than the target buffer level,
  // then raise the water mark.  Bump up to the next highest
  // power of 2, to prevent increasing it excessively in tiny
  // amounts.
  if (n > state.highWaterMark)
    state.highWaterMark = computeNewHighWaterMark(n);

  // don't have that much.  return null, unless we've ended.
  if (n > state.length) {
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    } else {
      return state.length;
    }
  }

  return n;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
  debug('read', n);
  var state = this._readableState;
  var nOrig = n;

  if (typeof n !== 'number' || n > 0)
    state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 &&
      state.needReadable &&
      (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended)
      endReadable(this);
    else
      emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0)
      endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  }

  if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0)
      state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
  }

  // If _read pushed data synchronously, then `reading` will be false,
  // and we need to re-evaluate how much data we can return to the user.
  if (doRead && !state.reading)
    n = howMuchToRead(nOrig, state);

  var ret;
  if (n > 0)
    ret = fromList(n, state);
  else
    ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  }

  state.length -= n;

  // If we have nothing in the buffer, then we want to know
  // as soon as we *do* get something into the buffer.
  if (state.length === 0 && !state.ended)
    state.needReadable = true;

  // If we tried to read() past the EOF, then emit end on the next tick.
  if (nOrig !== n && state.ended && state.length === 0)
    endReadable(this);

  if (ret !== null)
    this.emit('data', ret);

  return ret;
};

function chunkInvalid(state, chunk) {
  var er = null;
  if (!(Buffer.isBuffer(chunk)) &&
      typeof chunk !== 'string' &&
      chunk !== null &&
      chunk !== undefined &&
      !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}


function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync)
      processNextTick(emitReadable_, stream);
    else
      emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}


// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended &&
         state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;
    else
      len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
  this.emit('error', new Error('not implemented'));
};

Readable.prototype.pipe = function(dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
              dest !== process.stdout &&
              dest !== process.stderr;

  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted)
    processNextTick(endFn);
  else
    src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable) {
    debug('onunpipe');
    if (readable === src) {
      cleanup();
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', cleanup);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain &&
        (!dest._writableState || dest._writableState.needDrain))
      ondrain();
  }

  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    if (false === ret) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      if (state.pipesCount === 1 &&
          state.pipes[0] === dest &&
          src.listenerCount('data') === 1 &&
          !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0)
      dest.emit('error', er);
  }
  // This is a brutally ugly hack to make sure that our error handler
  // is attached before any userland ones.  NEVER DO THIS.
  if (!dest._events || !dest._events.error)
    dest.on('error', onerror);
  else if (isArray(dest._events.error))
    dest._events.error.unshift(onerror);
  else
    dest._events.error = [onerror, dest._events.error];


  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain)
      state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}


Readable.prototype.unpipe = function(dest) {
  var state = this._readableState;

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0)
    return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes)
      return this;

    if (!dest)
      dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest)
      dest.emit('unpipe', this);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++)
      dests[i].emit('unpipe', this);
    return this;
  }

  // try to find the right one.
  var i = indexOf(state.pipes, dest);
  if (i === -1)
    return this;

  state.pipes.splice(i, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1)
    state.pipes = state.pipes[0];

  dest.emit('unpipe', this);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  // If listening to data, and it has not explicitly been paused,
  // then call resume to start the flow of data on the next tick.
  if (ev === 'data' && false !== this._readableState.flowing) {
    this.resume();
  }

  if (ev === 'readable' && this.readable) {
    var state = this._readableState;
    if (!state.readableListening) {
      state.readableListening = true;
      state.emittedReadable = false;
      state.needReadable = true;
      if (!state.reading) {
        processNextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this, state);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading)
    stream.read(0);
}

Readable.prototype.pause = function() {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  if (state.flowing) {
    do {
      var chunk = stream.read();
    } while (null !== chunk && state.flowing);
  }
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function() {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length)
        self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function(chunk) {
    debug('wrapped data');
    if (state.decoder)
      chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined))
      return;
    else if (!state.objectMode && (!chunk || !chunk.length))
      return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function(method) { return function() {
        return stream[method].apply(stream, arguments);
      }; }(i);
    }
  }

  // proxy certain important events.
  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
  forEach(events, function(ev) {
    stream.on(ev, self.emit.bind(self, ev));
  });

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function(n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};


// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
function fromList(n, state) {
  var list = state.buffer;
  var length = state.length;
  var stringMode = !!state.decoder;
  var objectMode = !!state.objectMode;
  var ret;

  // nothing in the list, definitely empty.
  if (list.length === 0)
    return null;

  if (length === 0)
    ret = null;
  else if (objectMode)
    ret = list.shift();
  else if (!n || n >= length) {
    // read it all, truncate the array.
    if (stringMode)
      ret = list.join('');
    else if (list.length === 1)
      ret = list[0];
    else
      ret = Buffer.concat(list, length);
    list.length = 0;
  } else {
    // read just some of it.
    if (n < list[0].length) {
      // just take a part of the first list item.
      // slice is the same for buffers and strings.
      var buf = list[0];
      ret = buf.slice(0, n);
      list[0] = buf.slice(n);
    } else if (n === list[0].length) {
      // first list is a perfect match
      ret = list.shift();
    } else {
      // complex case.
      // we have enough to cover it, but it spans past the first buffer.
      if (stringMode)
        ret = '';
      else
        ret = new Buffer(n);

      var c = 0;
      for (var i = 0, l = list.length; i < l && c < n; i++) {
        var buf = list[0];
        var cpy = Math.min(n - c, buf.length);

        if (stringMode)
          ret += buf.slice(0, cpy);
        else
          buf.copy(ret, c, 0, cpy);

        if (cpy < buf.length)
          list[0] = buf.slice(cpy);
        else
          list.shift();

        c += cpy;
      }
    }
  }

  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0)
    throw new Error('endReadable called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    processNextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf (xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}

}).call(this,require('_process'))
},{"./_stream_duplex":221,"_process":219,"buffer":17,"core-util-is":226,"events":213,"inherits":214,"isarray":216,"process-nextick-args":227,"string_decoder/":234,"util":3}],224:[function(require,module,exports){
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);


function TransformState(stream) {
  this.afterTransform = function(er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb)
    return stream.emit('error', new Error('no writecb in Transform class'));

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined)
    stream.push(data);

  if (cb)
    cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}


function Transform(options) {
  if (!(this instanceof Transform))
    return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(this);

  // when the writable side finishes, then flush out anything remaining.
  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function')
      this._transform = options.transform;

    if (typeof options.flush === 'function')
      this._flush = options.flush;
  }

  this.once('prefinish', function() {
    if (typeof this._flush === 'function')
      this._flush(function(er) {
        done(stream, er);
      });
    else
      done(stream);
  });
}

Transform.prototype.push = function(chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
  throw new Error('not implemented');
};

Transform.prototype._write = function(chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform ||
        rs.needReadable ||
        rs.length < rs.highWaterMark)
      this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};


function done(stream, er) {
  if (er)
    return stream.emit('error', er);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length)
    throw new Error('calling transform done when ws.length != 0');

  if (ts.transforming)
    throw new Error('calling transform done when still transforming');

  return stream.push(null);
}

},{"./_stream_duplex":221,"core-util-is":226,"inherits":214}],225:[function(require,module,exports){
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

module.exports = Writable;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/


/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Writable.WritableState = WritableState;


/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/


/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/



/*<replacement>*/
var Stream;
(function (){try{
  Stream = require('st' + 'ream');
}catch(_){}finally{
  if (!Stream)
    Stream = require('events').EventEmitter;
}}())
/*</replacement>*/

var Buffer = require('buffer').Buffer;

util.inherits(Writable, Stream);

function nop() {}

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

var Duplex;
function WritableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex)
    this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function(er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;
}

WritableState.prototype.getBuffer = function writableStateGetBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function (){try {
Object.defineProperty(WritableState.prototype, 'buffer', {
  get: internalUtil.deprecate(function() {
    return this.getBuffer();
  }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' +
     'instead.')
});
}catch(_){}}());


var Duplex;
function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, though they're not
  // instanceof Writable, they're instanceof Readable.
  if (!(this instanceof Writable) && !(this instanceof Duplex))
    return new Writable(options);

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function')
      this._write = options.write;

    if (typeof options.writev === 'function')
      this._writev = options.writev;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
  this.emit('error', new Error('Cannot pipe. Not readable.'));
};


function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
}

// If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.
function validChunk(stream, state, chunk, cb) {
  var valid = true;

  if (!(Buffer.isBuffer(chunk)) &&
      typeof chunk !== 'string' &&
      chunk !== null &&
      chunk !== undefined &&
      !state.objectMode) {
    var er = new TypeError('Invalid non-string/buffer chunk');
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function(chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (Buffer.isBuffer(chunk))
    encoding = 'buffer';
  else if (!encoding)
    encoding = state.defaultEncoding;

  if (typeof cb !== 'function')
    cb = nop;

  if (state.ended)
    writeAfterEnd(this, cb);
  else if (validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function() {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function() {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing &&
        !state.corked &&
        !state.finished &&
        !state.bufferProcessing &&
        state.bufferedRequest)
      clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string')
    encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64',
'ucs2', 'ucs-2','utf16le', 'utf-16le', 'raw']
.indexOf((encoding + '').toLowerCase()) > -1))
    throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode &&
      state.decodeStrings !== false &&
      typeof chunk === 'string') {
    chunk = new Buffer(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, chunk, encoding, cb) {
  chunk = decodeChunk(state, chunk, encoding);

  if (Buffer.isBuffer(chunk))
    encoding = 'buffer';
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret)
    state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev)
    stream._writev(chunk, state.onwrite);
  else
    stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;
  if (sync)
    processNextTick(cb, er);
  else
    cb(er);

  stream._writableState.errorEmitted = true;
  stream.emit('error', er);
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er)
    onwriteError(stream, state, sync, er, cb);
  else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished &&
        !state.corked &&
        !state.bufferProcessing &&
        state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      processNextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished)
    onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}


// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var buffer = [];
    var cbs = [];
    while (entry) {
      cbs.push(entry.callback);
      buffer.push(entry);
      entry = entry.next;
    }

    // count the one we are adding, as well.
    // TODO(isaacs) clean this up
    state.pendingcb++;
    state.lastBufferedRequest = null;
    doWrite(stream, state, true, state.length, buffer, '', function(err) {
      for (var i = 0; i < cbs.length; i++) {
        state.pendingcb--;
        cbs[i](err);
      }
    });

    // Clear buffer
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null)
      state.lastBufferedRequest = null;
  }
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function(chunk, encoding, cb) {
  cb(new Error('not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function(chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined)
    this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished)
    endWritable(this, state, cb);
};


function needFinish(state) {
  return (state.ending &&
          state.length === 0 &&
          state.bufferedRequest === null &&
          !state.finished &&
          !state.writing);
}

function prefinish(stream, state) {
  if (!state.prefinished) {
    state.prefinished = true;
    stream.emit('prefinish');
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    if (state.pendingcb === 0) {
      prefinish(stream, state);
      state.finished = true;
      stream.emit('finish');
    } else {
      prefinish(stream, state);
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished)
      processNextTick(cb);
    else
      stream.once('finish', cb);
  }
  state.ended = true;
}

},{"./_stream_duplex":221,"buffer":17,"core-util-is":226,"events":213,"inherits":214,"process-nextick-args":227,"util-deprecate":228}],226:[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":require("../../../../insert-module-globals/node_modules/is-buffer/index.js")})
},{"../../../../insert-module-globals/node_modules/is-buffer/index.js":215}],227:[function(require,module,exports){
(function (process){
'use strict';

if (!process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = nextTick;
} else {
  module.exports = process.nextTick;
}

function nextTick(fn) {
  var args = new Array(arguments.length - 1);
  var i = 0;
  while (i < args.length) {
    args[i++] = arguments[i];
  }
  process.nextTick(function afterTick() {
    fn.apply(null, args);
  });
}

}).call(this,require('_process'))
},{"_process":219}],228:[function(require,module,exports){
(function (global){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],229:[function(require,module,exports){
module.exports = require("./lib/_stream_passthrough.js")

},{"./lib/_stream_passthrough.js":222}],230:[function(require,module,exports){
var Stream = (function (){
  try {
    return require('st' + 'ream'); // hack to fix a circular dependency issue when used with browserify
  } catch(_){}
}());
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = Stream || exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":221,"./lib/_stream_passthrough.js":222,"./lib/_stream_readable.js":223,"./lib/_stream_transform.js":224,"./lib/_stream_writable.js":225}],231:[function(require,module,exports){
module.exports = require("./lib/_stream_transform.js")

},{"./lib/_stream_transform.js":224}],232:[function(require,module,exports){
module.exports = require("./lib/_stream_writable.js")

},{"./lib/_stream_writable.js":225}],233:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":213,"inherits":214,"readable-stream/duplex.js":220,"readable-stream/passthrough.js":229,"readable-stream/readable.js":230,"readable-stream/transform.js":231,"readable-stream/writable.js":232}],234:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var Buffer = require('buffer').Buffer;

var isBufferEncoding = Buffer.isEncoding
  || function(encoding) {
       switch (encoding && encoding.toLowerCase()) {
         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
         default: return false;
       }
     }


function assertEncoding(encoding) {
  if (encoding && !isBufferEncoding(encoding)) {
    throw new Error('Unknown encoding: ' + encoding);
  }
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters. CESU-8 is handled as part of the UTF-8 encoding.
//
// @TODO Handling all encodings inside a single object makes it very difficult
// to reason about this code, so it should be split up in the future.
// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
// points as used by CESU-8.
var StringDecoder = exports.StringDecoder = function(encoding) {
  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
  assertEncoding(encoding);
  switch (this.encoding) {
    case 'utf8':
      // CESU-8 represents each of Surrogate Pair by 3-bytes
      this.surrogateSize = 3;
      break;
    case 'ucs2':
    case 'utf16le':
      // UTF-16 represents each of Surrogate Pair by 2-bytes
      this.surrogateSize = 2;
      this.detectIncompleteChar = utf16DetectIncompleteChar;
      break;
    case 'base64':
      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
      this.surrogateSize = 3;
      this.detectIncompleteChar = base64DetectIncompleteChar;
      break;
    default:
      this.write = passThroughWrite;
      return;
  }

  // Enough space to store all bytes of a single character. UTF-8 needs 4
  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
  this.charBuffer = new Buffer(6);
  // Number of bytes received for the current incomplete multi-byte character.
  this.charReceived = 0;
  // Number of bytes expected for the current incomplete multi-byte character.
  this.charLength = 0;
};


// write decodes the given buffer and returns it as JS string that is
// guaranteed to not contain any partial multi-byte characters. Any partial
// character found at the end of the buffer is buffered up, and will be
// returned when calling write again with the remaining bytes.
//
// Note: Converting a Buffer containing an orphan surrogate to a String
// currently works, but converting a String to a Buffer (via `new Buffer`, or
// Buffer#write) will replace incomplete surrogates with the unicode
// replacement character. See https://codereview.chromium.org/121173009/ .
StringDecoder.prototype.write = function(buffer) {
  var charStr = '';
  // if our last write ended with an incomplete multibyte character
  while (this.charLength) {
    // determine how many remaining bytes this buffer has to offer for this char
    var available = (buffer.length >= this.charLength - this.charReceived) ?
        this.charLength - this.charReceived :
        buffer.length;

    // add the new bytes to the char buffer
    buffer.copy(this.charBuffer, this.charReceived, 0, available);
    this.charReceived += available;

    if (this.charReceived < this.charLength) {
      // still not enough chars in this buffer? wait for more ...
      return '';
    }

    // remove bytes belonging to the current character from the buffer
    buffer = buffer.slice(available, buffer.length);

    // get the character that was split
    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    var charCode = charStr.charCodeAt(charStr.length - 1);
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      this.charLength += this.surrogateSize;
      charStr = '';
      continue;
    }
    this.charReceived = this.charLength = 0;

    // if there are no more bytes in this buffer, just emit our char
    if (buffer.length === 0) {
      return charStr;
    }
    break;
  }

  // determine and set charLength / charReceived
  this.detectIncompleteChar(buffer);

  var end = buffer.length;
  if (this.charLength) {
    // buffer the incomplete character bytes we got
    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
    end -= this.charReceived;
  }

  charStr += buffer.toString(this.encoding, 0, end);

  var end = charStr.length - 1;
  var charCode = charStr.charCodeAt(end);
  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
    var size = this.surrogateSize;
    this.charLength += size;
    this.charReceived += size;
    this.charBuffer.copy(this.charBuffer, size, 0, size);
    buffer.copy(this.charBuffer, 0, 0, size);
    return charStr.substring(0, end);
  }

  // or just emit the charStr
  return charStr;
};

// detectIncompleteChar determines if there is an incomplete UTF-8 character at
// the end of the given buffer. If so, it sets this.charLength to the byte
// length that character, and sets this.charReceived to the number of bytes
// that are available for this character.
StringDecoder.prototype.detectIncompleteChar = function(buffer) {
  // determine how many bytes we have to check at the end of this buffer
  var i = (buffer.length >= 3) ? 3 : buffer.length;

  // Figure out if one of the last i bytes of our buffer announces an
  // incomplete char.
  for (; i > 0; i--) {
    var c = buffer[buffer.length - i];

    // See http://en.wikipedia.org/wiki/UTF-8#Description

    // 110XXXXX
    if (i == 1 && c >> 5 == 0x06) {
      this.charLength = 2;
      break;
    }

    // 1110XXXX
    if (i <= 2 && c >> 4 == 0x0E) {
      this.charLength = 3;
      break;
    }

    // 11110XXX
    if (i <= 3 && c >> 3 == 0x1E) {
      this.charLength = 4;
      break;
    }
  }
  this.charReceived = i;
};

StringDecoder.prototype.end = function(buffer) {
  var res = '';
  if (buffer && buffer.length)
    res = this.write(buffer);

  if (this.charReceived) {
    var cr = this.charReceived;
    var buf = this.charBuffer;
    var enc = this.encoding;
    res += buf.slice(0, cr).toString(enc);
  }

  return res;
};

function passThroughWrite(buffer) {
  return buffer.toString(this.encoding);
}

function utf16DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 2;
  this.charLength = this.charReceived ? 2 : 0;
}

function base64DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 3;
  this.charLength = this.charReceived ? 3 : 0;
}

},{"buffer":17}],235:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],236:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./support/isBuffer":235,"_process":219,"inherits":214}],237:[function(require,module,exports){
var indexOf = require('indexof');

var Object_keys = function (obj) {
    if (Object.keys) return Object.keys(obj)
    else {
        var res = [];
        for (var key in obj) res.push(key)
        return res;
    }
};

var forEach = function (xs, fn) {
    if (xs.forEach) return xs.forEach(fn)
    else for (var i = 0; i < xs.length; i++) {
        fn(xs[i], i, xs);
    }
};

var defineProp = (function() {
    try {
        Object.defineProperty({}, '_', {});
        return function(obj, name, value) {
            Object.defineProperty(obj, name, {
                writable: true,
                enumerable: false,
                configurable: true,
                value: value
            })
        };
    } catch(e) {
        return function(obj, name, value) {
            obj[name] = value;
        };
    }
}());

var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',
'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',
'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',
'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',
'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];

function Context() {}
Context.prototype = {};

var Script = exports.Script = function NodeScript (code) {
    if (!(this instanceof Script)) return new Script(code);
    this.code = code;
};

Script.prototype.runInContext = function (context) {
    if (!(context instanceof Context)) {
        throw new TypeError("needs a 'context' argument.");
    }
    
    var iframe = document.createElement('iframe');
    if (!iframe.style) iframe.style = {};
    iframe.style.display = 'none';
    
    document.body.appendChild(iframe);
    
    var win = iframe.contentWindow;
    var wEval = win.eval, wExecScript = win.execScript;

    if (!wEval && wExecScript) {
        // win.eval() magically appears when this is called in IE:
        wExecScript.call(win, 'null');
        wEval = win.eval;
    }
    
    forEach(Object_keys(context), function (key) {
        win[key] = context[key];
    });
    forEach(globals, function (key) {
        if (context[key]) {
            win[key] = context[key];
        }
    });
    
    var winKeys = Object_keys(win);

    var res = wEval.call(win, this.code);
    
    forEach(Object_keys(win), function (key) {
        // Avoid copying circular objects like `top` and `window` by only
        // updating existing context properties or new properties in the `win`
        // that was only introduced after the eval.
        if (key in context || indexOf(winKeys, key) === -1) {
            context[key] = win[key];
        }
    });

    forEach(globals, function (key) {
        if (!(key in context)) {
            defineProp(context, key, win[key]);
        }
    });
    
    document.body.removeChild(iframe);
    
    return res;
};

Script.prototype.runInThisContext = function () {
    return eval(this.code); // maybe...
};

Script.prototype.runInNewContext = function (context) {
    var ctx = Script.createContext(context);
    var res = this.runInContext(ctx);

    forEach(Object_keys(ctx), function (key) {
        context[key] = ctx[key];
    });

    return res;
};

forEach(Object_keys(Script.prototype), function (name) {
    exports[name] = Script[name] = function (code) {
        var s = Script(code);
        return s[name].apply(s, [].slice.call(arguments, 1));
    };
});

exports.createScript = function (code) {
    return exports.Script(code);
};

exports.createContext = Script.createContext = function (context) {
    var copy = new Context();
    if(typeof context === 'object') {
        forEach(Object_keys(context), function (key) {
            copy[key] = context[key];
        });
    }
    return copy;
};

},{"indexof":238}],238:[function(require,module,exports){

var indexOf = [].indexOf;

module.exports = function(arr, obj){
  if (indexOf) return arr.indexOf(obj);
  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) return i;
  }
  return -1;
};
},{}],239:[function(require,module,exports){
var mc = require('minecraft-protocol');
var EventEmitter = require('events').EventEmitter;
var util = require('util');
var path = require('path');
var plugins = {
  bed: require('./lib/plugins/bed'),
  block_actions: require('./lib/plugins/block_actions'),
  blocks: require('./lib/plugins/blocks'),
  chat: require('./lib/plugins/chat'),
  chest: require('./lib/plugins/chest'),
  command_block: require('./lib/plugins/command_block'),
  craft: require('./lib/plugins/craft'),
  creative: require('./lib/plugins/creative'),
  digging: require('./lib/plugins/digging'),
  dispenser: require('./lib/plugins/dispenser'),
  enchantment_table: require('./lib/plugins/enchantment_table'),
  entities: require('./lib/plugins/entities'),
  experience: require('./lib/plugins/experience'),
  furnace: require('./lib/plugins/furnace'),
  game: require('./lib/plugins/game'),
  health: require('./lib/plugins/health'),
  inventory: require('./lib/plugins/inventory'),
  kick: require('./lib/plugins/kick'),
  physics: require('./lib/plugins/physics'),
  rain: require('./lib/plugins/rain'),
  scoreboard: require('./lib/plugins/scoreboard'),
  settings: require('./lib/plugins/settings'),
  simple_inventory: require('./lib/plugins/simple_inventory'),
  sound: require('./lib/plugins/sound'),
  spawn_point: require('./lib/plugins/spawn_point'),
  time: require('./lib/plugins/time')
};

var mcData = require('./lib/minecraft-data');
var version = require('./lib/version');

module.exports = {
  vec3: require('vec3'),
  createBot: createBot,
  Block: require("prismarine-block")(version),
  Location: require('./lib/location'),
  Biome: require("prismarine-biome")(version),
  Entity: require('prismarine-entity'),
  Painting: require('./lib/painting'),
  Item: require("prismarine-item")(version),
  Recipe: require('prismarine-recipe')(version).Recipe,
  windows: require('prismarine-windows')(version).windows,
  Chest: require('./lib/chest'),
  Furnace: require('./lib/furnace'),
  Dispenser: require('./lib/dispenser'),
  EnchantmentTable: require('./lib/enchantment_table'),
  ScoreBoard: require('./lib/scoreboard'),
  blocks: mcData.blocks,
  biomes: mcData.biomes,
  items: mcData.items,
  recipes: mcData.recipes,
  instruments: mcData.instruments,
  materials: mcData.materials,
  entities: mcData.entities,
  data: mcData,
  version:version
};

function createBot(options) {
  options = options || {};
  options.username = options.username || 'Player';
  var bot = new Bot();
  bot.connect(options);
  return bot;
}

function Bot() {
  EventEmitter.call(this);
  this._client = null;
}
util.inherits(Bot, EventEmitter);

Bot.prototype.connect = function(options) {
  var self = this;
  self._client = mc.createClient(options);
  self.username = self._client.username;
  self._client.on('session', function() {
    self.username = self._client.username;
  });
  self._client.on('connect', function() {
    self.emit('connect');
  });
  self._client.on('error', function(err) {
    self.emit('error', err);
  });
  self._client.on('end', function() {
    self.emit('end');
  });
  for(var pluginName in plugins) {
    plugins[pluginName](self, options);
  }
};

Bot.prototype.end = function() {
  this._client.end();
};

},{"./lib/chest":241,"./lib/dispenser":243,"./lib/enchantment_table":244,"./lib/furnace":245,"./lib/location":246,"./lib/minecraft-data":248,"./lib/painting":249,"./lib/plugins/bed":250,"./lib/plugins/block_actions":251,"./lib/plugins/blocks":252,"./lib/plugins/chat":253,"./lib/plugins/chest":254,"./lib/plugins/command_block":255,"./lib/plugins/craft":256,"./lib/plugins/creative":257,"./lib/plugins/digging":258,"./lib/plugins/dispenser":259,"./lib/plugins/enchantment_table":260,"./lib/plugins/entities":261,"./lib/plugins/experience":262,"./lib/plugins/furnace":263,"./lib/plugins/game":264,"./lib/plugins/health":265,"./lib/plugins/inventory":266,"./lib/plugins/kick":267,"./lib/plugins/physics":268,"./lib/plugins/rain":269,"./lib/plugins/scoreboard":270,"./lib/plugins/settings":271,"./lib/plugins/simple_inventory":272,"./lib/plugins/sound":273,"./lib/plugins/spawn_point":274,"./lib/plugins/time":275,"./lib/scoreboard":276,"./lib/version":277,"events":213,"minecraft-protocol":359,"path":218,"prismarine-biome":373,"prismarine-block":374,"prismarine-entity":375,"prismarine-item":376,"prismarine-recipe":380,"prismarine-windows":383,"util":236,"vec3":410}],240:[function(require,module,exports){
var mojangson = require('mojangson');

module.exports = ChatMessage;

/**
 * ChatMessage Constructor
 * @param {String|Object} message content of ChatMessage
 */
function ChatMessage(message) {
  if(typeof message === 'string') {
    this.json = {text: message};
  } else if(typeof message === 'object' && !Array.isArray(message)) {
    this.json = message;
  } else {
    throw new Error('Expected String or Object for Message argument');
  }
  this.parse();
}

/**
 * Parses the this.json property to decorate the properties of the ChatMessage.
 * Called by the Constructor
 * @return {void}
 */
ChatMessage.prototype.parse = function() {
  var json = this.json;
  // Message scope for callback functions
  var that = this;

  // There is EITHER, a text property or a translate property
  // If there is no translate property, there is no with property
  // HOWEVER! If there is a translate property, there may not be a with property
  if(typeof json.text === 'string') {
    this.text = json.text;
  } else if(typeof json.translate === 'string') {
    this.translate = json.translate;
    if(typeof json.with === 'object' || Array.isArray(json.with)) {
      this.with = [];
      json.with.forEach(function(entry) {
        if(typeof entry === 'string') {
          that.with.push(entry);
        } else if(typeof entry === 'object') {
          // Parse ChatMessage
          var subChatMessage = new ChatMessage(entry);
          that.with.push(subChatMessage);
        }
      });
    }
  }
  // Parse extra property
  // Extras are appended to the initial text
  if(typeof json.extra === 'object') {
    if(!Array.isArray(json.extra)) {
      throw new Error('Expected extra property to be an Array in ChatMessage');
    }
    this.extra = [];
    json.extra.forEach(function(entry) {
      if(typeof entry === 'string') {
        that.extra.push(entry);
      } else if(typeof entry === 'object') {
        var subChatMessage = new ChatMessage(entry);
        that.extra.push(subChatMessage);
      }
    });
  }
  // Text modifiers
  this.bold = json.bold;
  this.italic = json.italic;
  this.underlined = json.underlined;
  this.strikethrough = json.strikethrough;
  this.obfuscated = json.obfuscated;

  // Supported constants @ 2014-04-21
  var supportedColors = ['black', 'dark_blue', 'dark_green', 'dark_aqua', 'dark_red', 'dark_purple',
    'gold', 'gray', 'dark_gray', 'blue', 'green', 'aqua', 'red', 'light_purple',
    'yellow', 'white', 'obfuscated', 'bold', 'strikethrough', 'underlined', 'italic',
    'reset'];
  var supportedClick = ['open_url', 'open_file', 'run_command', 'suggest_command'];
  var supportedHover = ['show_text', 'show_achievement', 'show_item', 'show_entity'];

  // Parse color
  this.color = json.color;
  switch(this.color) {
    case 'obfuscated':
      this.obfuscated = true;
      this.color = null;
      break;
    case 'bold':
      this.bold = true;
      this.color = null;
      break;
    case 'strikethrough':
      this.strikethrough = true;
      this.color = null;
      break;
    case 'underlined':
      this.underlined = true;
      this.color = null;
      break;
    case 'italic':
      this.italic = true;
      this.color = null;
      break;
    case 'reset':
      this.reset = true;
      this.color = null;
      break;
  }
  if(Array.prototype.indexOf && this.color &&
    supportedColors.indexOf(this.color) === -1) {
    console.warn('ChatMessage parsed with unsupported color', this.color);
  }

  // Parse click event
  if(typeof json.clickEvent === 'object') {
    this.clickEvent = json.clickEvent;
    if(typeof this.clickEvent.action !== 'string') {
      throw new Error('ClickEvent action missing in ChatMessage');
    } else if(Array.prototype.indexOf && supportedClick.indexOf(this.clickEvent.action) === -1) {
      console.warn('ChatMessage parsed with unsupported clickEvent', this.clickEvent.action);
    }
  }

  // Parse hover event
  if(typeof json.hoverEvent === 'object') {
    this.hoverEvent = json.hoverEvent;
    if(typeof this.hoverEvent.action !== 'string') {
      throw new Error('HoverEvent action missing in ChatMessage');
    } else if(Array.prototype.indexOf && supportedHover.indexOf(this.hoverEvent.action) === -1) {
      console.warn('ChatMessage parsed with unsupported hoverEvent', this.hoverEvent.action);
    }
    // Special case
    if(this.hoverEvent.action === 'show_item') {
      this.hoverEvent.value = mojangson.parse(this.hoverEvent.value instanceof Array ? this.hoverEvent.value[0] : this.hoverEvent.value);
    }
  }
};

/**
 * Returns the count of text extras and child ChatMessages
 * Does not count recursively in to the children
 * @return {Number}
 */
ChatMessage.prototype.length = function() {
  var count = 0;
  if(this.text) count++;
  else if(this.translate) count += this.with.length;

  if(this.extra) count += this.extra.length;
  return count;
};

/**
 * Returns a text part from the message
 * @param  {Number} idx Index of the part
 * @return {String}
 */
ChatMessage.prototype.getText = function(idx) {
  // If the index is not defined is is invalid, return toString
  if(typeof idx !== 'number') return this.toString();
  // If we are not a translating message, return the text
  if(this.text && idx === 0) return this.text;
  // Else return the with child if it's in range
  else if(this.with.length > idx) return this.with[idx].toString();
  // Else return the extra if it's in range
  if(this.extra && this.extra.length + (this.text ? 1 : this.with.length) > idx)
    return this.extra[idx - (this.text ? 1 : this.with.length)].toString();
  // Not sure how you want to default this
  // Undefined, an error ?
  return "";
};

/**
 * Flattens the message in to plain-text
 * @return {String}
 */
ChatMessage.prototype.toString = function() {
  var message = "";
  if(typeof this.text === 'string') message += this.text + " ";
  else if(this.with) {
    this.with.forEach(function(entry) {
      message += entry.toString() + " ";
    })
  }
  if(this.extra) {
    this.extra.forEach(function(entry) {
      message += entry.toString() + " ";
    })
  }
  return message.trim();
};

if(require.main === module) {
  testParseShowItemHoverEventValue();
}

},{"mojangson":372}],241:[function(require,module,exports){
var EventEmitter = require('events').EventEmitter;
var util = require('util');
var assert = require('assert');

module.exports = Chest;

function Chest() {
  EventEmitter.call(this);

  this.window = null;
}
util.inherits(Chest, EventEmitter);

Chest.windowType = 0;

// this function is replaced by the inventory plugin
Chest.prototype.close = function() {
  assert.ok(false, "override");
};

Chest.prototype.deposit = function(itemType, metadata, count) {
  assert.ok(false, "override");
};

Chest.prototype.withdraw = function(itemType, metadata, count) {
  assert.ok(false, "override");
};

Chest.prototype.count = function(itemType, metadata) {
  assert.ok(this.window);
  return this.window.chestCount(itemType, metadata);
};

Chest.prototype.items = function() {
  assert.ok(this.window);
  return this.window.chestItems();
};

},{"assert":2,"events":213,"util":236}],242:[function(require,module,exports){
var math = require('./math');
var euclideanMod = math.euclideanMod;
var PI = Math.PI;
var PI_2 = Math.PI * 2;
var TO_RAD = PI / 180;
var TO_DEG = 1 / TO_RAD;
var FROM_NOTCH_BYTE = 360 / 256;
var FROM_NOTCH_VEL = 5 / 32000;

exports.toRadians = toRadians;
exports.toDegrees = toDegrees;
exports.fromNotchianYaw = fromNotchianYaw;
exports.fromNotchianPitch = fromNotchianPitch;

exports.toNotchianYaw = function(yaw) {
  return toDegrees(PI - yaw);
};

exports.toNotchianPitch = function(pitch) {
  return toDegrees(-pitch);
};

exports.fromNotchianYawByte = function(yaw) {
  return fromNotchianYaw(yaw * FROM_NOTCH_BYTE);
};

exports.fromNotchianPitchByte = function(pitch) {
  return fromNotchianPitch(pitch * FROM_NOTCH_BYTE);
};

exports.fromNotchVelocity = function(vel) {
  return vel.scaled(FROM_NOTCH_VEL);
};

function toRadians(degrees) {
  return TO_RAD * degrees;
}

function toDegrees(radians) {
  return TO_DEG * radians;
}

function fromNotchianYaw(yaw) {
  return euclideanMod(PI - toRadians(yaw), PI_2);
}

function fromNotchianPitch(pitch) {
  return euclideanMod(toRadians(-pitch) + PI, PI_2) - PI;
}

},{"./math":247}],243:[function(require,module,exports){
var EventEmitter = require('events').EventEmitter;
var util = require('util');
var assert = require('assert');

module.exports = Dispenser;

function Dispenser() {
  EventEmitter.call(this);

  this.window = null;
}
util.inherits(Dispenser, EventEmitter);

Dispenser.windowType = 3;

// this function is replaced by the inventory plugin
Dispenser.prototype.close = function() {
  assert.ok(false, "override");
};

Dispenser.prototype.deposit = function(itemType, metadata, count) {
  assert.ok(false, "override");
};

Dispenser.prototype.withdraw = function(itemType, metadata, count) {
  assert.ok(false, "override");
};

Dispenser.prototype.count = function(itemType, metadata) {
  assert.ok(this.window);
  return this.window.dispenserCount(itemType, metadata);
};

Dispenser.prototype.items = function() {
  assert.ok(this.window);
  return this.window.dispenserItems();
};

},{"assert":2,"events":213,"util":236}],244:[function(require,module,exports){
var EventEmitter = require('events').EventEmitter;
var util = require('util');
var assert = require('assert');

module.exports = EnchantmentTable;

function EnchantmentTable() {
  EventEmitter.call(this);

  this.window = null;
}
util.inherits(EnchantmentTable, EventEmitter);

EnchantmentTable.windowType = 4;

// this function is replaced by the inventory plugin
EnchantmentTable.prototype.close = function() {
  assert.ok(false, "override");
};

EnchantmentTable.prototype.targetItem = function() {
  return this.window.slots[0];
};

EnchantmentTable.prototype.enchant = function() {
  assert.ok(false, "override");
};

EnchantmentTable.prototype.takeTargetItem = function() {
  assert.ok(false, "override");
};

EnchantmentTable.prototype.putTargetItem = function() {
  assert.ok(false, "override");
};


EnchantmentTable.prototype.putLapis = function() {
  assert.ok(false, "override");
};

},{"assert":2,"events":213,"util":236}],245:[function(require,module,exports){
var EventEmitter = require('events').EventEmitter;
var util = require('util');
var assert = require('assert');

module.exports = Furnace;

function Furnace() {
  EventEmitter.call(this);

  this.window = null;
  this.fuel = null;
  this.progress = null;
}
util.inherits(Furnace, EventEmitter);

Furnace.windowType = 2;

// this function is replaced by the inventory plugin
Furnace.prototype.close = function() {
  assert.ok(false, "override");
};

Furnace.prototype.takeInput = function(cb) {
  assert.ok(false, "override");
};
Furnace.prototype.takeFuel = function(cb) {
  assert.ok(false, "override");
};
Furnace.prototype.takeOutput = function(cb) {
  assert.ok(false, "override");
};
Furnace.prototype.putInput = function(itemType, metadata, cb) {
  assert.ok(false, "override");
};
Furnace.prototype.putFuel = function(itemType, metadata, cb) {
  assert.ok(false, "override");
};
Furnace.prototype.inputItem = function() {
  assert.notEqual(this.window, null);
  return this.window.slots[0];
};
Furnace.prototype.fuelItem = function() {
  assert.notEqual(this.window, null);
  return this.window.slots[1];
};
Furnace.prototype.outputItem = function() {
  assert.notEqual(this.window, null);
  return this.window.slots[2];
};

},{"assert":2,"events":213,"util":236}],246:[function(require,module,exports){
var Vec3 = require('vec3').Vec3;
var CHUNK_SIZE = new Vec3(16, 16, 16);

module.exports = Location;

function Location(absoluteVector) {
  this.floored = absoluteVector.floored();
  this.blockPoint = this.floored.modulus(CHUNK_SIZE);
  this.chunkCorner = this.floored.minus(this.blockPoint);
  this.blockIndex =
    this.blockPoint.x +
    CHUNK_SIZE.x * this.blockPoint.z +
    CHUNK_SIZE.x * CHUNK_SIZE.z * this.blockPoint.y;
  this.biomeBlockIndex = this.blockPoint.x + CHUNK_SIZE.x * this.blockPoint.z;
  this.chunkYIndex = Math.floor(absoluteVector.y / 16);
}

},{"vec3":410}],247:[function(require,module,exports){
exports.clamp = function clamp(min, x, max) {
  return x < min ? min : x > max ? max : x;
};

exports.sign = function sign(n) {
  return n > 0 ? 1 : n < 0 ? -1 : 0;
};

exports.euclideanMod = function euclideanMod(numerator, denominator) {
  var result = numerator % denominator;
  return result < 0 ? result + denominator : result;
};

},{}],248:[function(require,module,exports){
// provide access to a fixed minecraft data version

var version=require("./version");
var mcData = require('minecraft-data')(version);
module.exports = mcData;
},{"./version":277,"minecraft-data":332}],249:[function(require,module,exports){
var Vec3 = require('vec3').Vec3;

module.exports = Painting;

function Painting(id, pos, name, direction) {
  this.id = id;
  this.position = pos;
  this.name = name;
  this.direction = direction;
}

},{"vec3":410}],250:[function(require,module,exports){
var assert = require('assert');

module.exports = inject;

function inject(bot) {
  bot.isSleeping = false;

  function wake(cb) {
    if(!bot.isSleeping)
      cb(new Error("already awake"));
    else {
      bot._client.write('entity_action', {
        entityId: bot.entity.id,
        actionId: 2,
        jumpBoost: 0
      });
      cb();
    }
  }

  function sleep(bedBlock, cb) {
    if(!(bot.time.day >= 12541 && bot.time.day <= 23458))
      cb(new Error("it's not night"));
    else if(bot.isSleeping)
      cb(new Error("already sleeping"));
    else if(bedBlock.type !== 26)
      cb(new Error("wrong block : not a bed block"));
    else {
      bot.activateBlock(bedBlock);
      cb();
    }
  }

  bot._client.on('game_state_change', function(packet) {
    if(packet.reason === 0) {
      // occurs when you can't spawn in your bed and your spawn point gets reset
      bot.emit('spawnReset');
    }
  });

  bot.on('entitySleep', function(entity) {
    if(entity === bot.entity) {
      bot.isSleeping = true;
      bot.emit('sleep');
    }
  });

  bot.on('entityWake', function(entity) {
    if(entity === bot.entity) {
      bot.isSleeping = false;
      bot.emit('wake');
    }
  });

  bot.wake = wake;
  bot.sleep = sleep;
}

},{"assert":2}],251:[function(require,module,exports){
var instruments = require('../minecraft-data').instruments;
var Vec3 = require('vec3').Vec3;

module.exports = inject;

function inject(bot) {
  bot._client.on('block_action', function(packet) {
    // block action
    var pt = new Vec3(packet.location.x, packet.location.y, packet.location.z);
    var block = bot.blockAt(pt);
    if(packet.blockId === 25) {
      bot.emit('noteHeard', block, instruments[packet.byte1], packet.byte2);
    } else if(packet.blockId === 29 || packet.blockId === 33) {
      bot.emit('pistonMove', block, packet.byte1, packet.byte2);
    } else {
      bot.emit('chestLidMove', block, packet.byte2);
    }
  });

  bot._client.on('block_break_animation', function(packet) {
    var destroyStage = packet.destroyStage;
    var pt = new Vec3(packet.location.x, packet.location.y, packet.location.z);
    var block = bot.blockAt(pt);

    if(destroyStage < 0 || destroyStage > 9) {
      // http://wiki.vg/Protocol#Block_Break_Progress
      // "0-9 to set it, any other value to remove it"
      bot.emit('blockBreakProgressEnd', block);
    } else {
      bot.emit('blockBreakProgressObserved', block, destroyStage);
    }
  });
}

},{"../minecraft-data":248,"vec3":410}],252:[function(require,module,exports){
(function (Buffer){
var vec3 = require('vec3');
var Vec3 = vec3.Vec3;
var assert = require('assert');
var version=require("../version");
var Block = require("prismarine-block")(version);
var Painting = require('../painting');
var Location = require('../location');
var ChatMessage = require('../chat_message');

module.exports = inject;

var paintingFaceToVec = [
  new Vec3(0, 0, -1),
  new Vec3(-1, 0, 0),
  new Vec3(0, 0, 1),
  new Vec3(1, 0, 0),
];

function inject(bot) {
  var columns = {};
  var signs = {};
  var paintingsByPos = {};
  var paintingsById = {};

  function addPainting(painting) {
    paintingsById[painting.id] = painting;
    paintingsByPos[painting.position] = painting;
  }

  function deletePainting(painting) {
    delete paintingsById[painting.id];
    delete paintingsByPos[painting.position];
  }

  function addColumn(args) {
    var columnCorner = new Vec3(args.x * 16, 0, args.z * 16);
    var key = columnKeyXZ(columnCorner.x, columnCorner.z);
    if(!args.bitMap) {
      // stop storing the chunk column
      delete columns[key];
      bot.emit("chunkColumnUnload", columnCorner);
      return;
    }
    var column = columns[key];
    if(!column) columns[key] = column = new Column();
    var chunkIncluded = new Array(16);
    var y;
    for(y = 0; y < 16; ++y) {
      chunkIncluded[y] = args.bitMap & (1 << y);
    }

    var offset = 0;

    // block types
    var size = 16 * 16 * 16 * 2;
    for(y = 0; y < 16; ++y) {
      var blockId = args.data.slice(offset, offset + size);

      // Column.metadata doesn't exist anymore.
      column.blockType[y] = chunkIncluded[y] ? blockId : null;
      offset = chunkIncluded[y] ? offset + size : offset;
    }
    size = 16 * 16 * 16 / 2;
    // light
    for(y = 0; y < 16; ++y) {
      column.light[y] = chunkIncluded[y] ?
        args.data.slice(offset, offset + size) : null;
      offset = chunkIncluded[y] ? offset + size : offset;
    }
    // sky light
    if(args.skyLightSent) {
      for(y = 0; y < 16; ++y) {
        column.skyLight[y] = chunkIncluded[y] ?
          args.data.slice(offset, offset + size) : null;
        offset = chunkIncluded[y] ? offset + size : offset;
      }
    }
    // biome
    if(args.groundUp) {
      size = 256;
      column.biome = args.data.slice(offset, offset + size);
      offset += size;
    }

    assert.strictEqual(offset, args.data.length);
    bot.emit("chunkColumnLoad", columnCorner);
  }

  function findBlock(options) {
    var check;
    if(typeof(options.matching) !== 'function') {
      if(!Array.isArray(options.matching)) {
        options.matching = [options.matching];
      }
      check=isMatchingType;
    }
    else check=options.matching;
    options.point = options.point || bot.entity.position;
    options.maxDistance = options.maxDistance || 16;
    var cursor = vec3();
    var point = options.point;
    var max = options.maxDistance;
    var found;
    for(cursor.x = point.x - max; cursor.x < point.x + max; cursor.x++) {
      for(cursor.y = point.y - max; cursor.y < point.y + max; cursor.y++) {
        for(cursor.z = point.z - max; cursor.z < point.z + max; cursor.z++) {
          found = bot.blockAt(cursor);
          if (check(found)) return found;
        }
      }
    }

    function isMatchingType(block) {
      return options.matching.indexOf(block.type) >= 0;
    }
  }

  function blockAt(absolutePoint) {
    var loc = new Location(absolutePoint);
    var key = columnKeyXZ(loc.chunkCorner.x, loc.chunkCorner.z);
    var column = columns[key];
    // null column means chunk not loaded
    if(!column) return null;
    var blockType = double_bite(column.blockType);
    var nibbleIndex = loc.blockIndex >> 1;
    var lowNibble = loc.blockIndex % 2 === 1;

    var biomeId = column.biome.readUInt8(loc.biomeBlockIndex);

    var block = new Block(blockType >> 4, biomeId, blockType & 0x0f);
    block.light = nib(column.light);
    block.skyLight = nib(column.skyLight);
    block.position = loc.floored;
    block.signText = signs[loc.floored];
    block.painting = paintingsByPos[loc.floored];

    return block;

    function double_bite(array) {
      var buf = array[loc.chunkYIndex];
      return buf ? buf.readUInt16LE(loc.blockIndex * 2) : 0;
    }

    function nib(array) {
      var buf = array[loc.chunkYIndex];
      return buf ? nibble(buf.readUInt8(nibbleIndex), lowNibble) : 0;
    }
  }

  function chunkColumn(x, z) {
    var key = columnKeyXZ(x, z);
    return columns[key];
  }

  function emitBlockUpdate(oldBlock, newBlock) {
    bot.emit("blockUpdate", oldBlock, newBlock);
    var position = oldBlock ? oldBlock.position :
      (newBlock ? newBlock.position : null);
    if(position) bot.emit("blockUpdate:" + newBlock.position, oldBlock, newBlock);
  }

  function updateBlock(point, type, metadata) {
    var oldBlock = blockAt(point);
    var loc = new Location(point);
    var key = columnKeyXZ(loc.chunkCorner.x, loc.chunkCorner.z);
    var column = columns[key];
    // sometimes minecraft server sends us block updates before it sends
    // us the column that the block is in. ignore this.
    if(!column) return;
    var blockTypeBuffer = column.blockType[loc.chunkYIndex];
    // if it's null, it was all air, but now we're inserting a block.
    if(!blockTypeBuffer) {
      blockTypeBuffer = new Buffer(16 * 16 * 16 * 2);
      blockTypeBuffer.fill(0);
      column.blockType[loc.chunkYIndex] = blockTypeBuffer;
    }
    blockTypeBuffer.writeUInt16LE((type << 4) | metadata, loc.blockIndex * 2);

    delete signs[loc.floored];

    var painting = paintingsByPos[loc.floored];
    if(painting) deletePainting(painting);

    emitBlockUpdate(oldBlock, blockAt(point));
  }

  bot._client.on('map_chunk', function(packet) {
    addColumn({
      x: packet.x,
      z: packet.z,
      bitMap: packet.bitMap,
      skyLightSent: bot.game.dimension!=="nether",
      groundUp: packet.groundUp,
      data: packet.chunkData,
    });
  });


  bot._client.on('map_chunk_bulk', function(packet) {
    var offset = 0;
    var meta, i, size;
    for(i = 0; i < packet.meta.length; ++i) {
      meta = packet.meta[i];
      size = (8192 + (packet.skyLightSent ? 2048 : 0)) *
        onesInShort(meta.bitMap) + // block ids
        2048 * onesInShort(meta.bitMap) + // (two bytes per block id)
        256; // biomes
      addColumn({
        x: meta.x,
        z: meta.z,
        bitMap: meta.bitMap,
        skyLightSent: packet.skyLightSent,
        groundUp: true,
        data: packet.data.slice(offset, offset + size),
      });
      offset += size;
    }

    assert.strictEqual(offset, packet.data.length);
  });

  bot._client.on('multi_block_change', function(packet) {
    // multi block change
    var i, record, metadata, type, blockX, blockZ, y, pt;
    for(i = 0; i < packet.records.length; ++i) {
      record = packet.records[i];

      metadata = (record.blockId & 0x0f);
      type = (record.blockId) >> 4;
      y = record.y;
      blockZ = (record.horizontalPos & 0x0f);
      blockX = (record.horizontalPos >> 4) & 0x0f;

      pt = new Vec3(packet.chunkX * 16 + blockX, y, packet.chunkZ * 16 + blockZ);
      updateBlock(pt, type, metadata);
    }
  });

  bot._client.on('block_change', function(packet) {
    // block change
    var pt = new Vec3(packet.location.x, packet.location.y, packet.location.z);
    updateBlock(pt, packet.type >> 4, packet.type & 0x0f);
  });

  bot._client.on('explosion', function(packet) {
    // explosion
    packet.affectedBlockOffsets.forEach(function(offset) {
      var pt = vec3(offset).offset(packet.x, packet.y, packet.z);
      updateBlock(pt.floor(), 0, 0);
    });
  });

  bot._client.on('spawn_entity_painting', function(packet) {
    var pos = new Vec3(packet.location.x, packet.location.y, packet.location.z);
    var painting = new Painting(packet.entityId,
      pos, packet.title, paintingFaceToVec[packet.direction]);
    addPainting(painting);
  });

  bot._client.on('entity_destroy', function(packet) {
    // destroy entity
    packet.entityIds.forEach(function(id) {
      var painting = paintingsById[id];
      if(painting) deletePainting(painting);
    });
  });

  bot._client.on('update_sign', function(packet) {
    // update sign
    var pos = new Vec3(packet.location.x, packet.location.y, packet.location.z);
    var oldBlock = blockAt(pos);

    // Some servers send blank lines in signs wrong, causing the chat handler to crash.
    if(packet.text1 == 'null' || packet.text1 == '') {
      packet.text1 = '""'
    }
    if(packet.text2 == 'null' || packet.text2 == '') {
      packet.text2 = '""'
    }
    if(packet.text3 == 'null' || packet.text3 == '') {
      packet.text3 = '""'
    }
    if(packet.text4 == 'null' || packet.text4 == '') {
      packet.text4 = '""'
    }

    signs[pos] = new ChatMessage(JSON.parse(packet.text1)) + "\n" + new ChatMessage(JSON.parse(packet.text2)) +
      "\n" + new ChatMessage(JSON.parse(packet.text3)) + "\n" + new ChatMessage(JSON.parse(packet.text4));
    emitBlockUpdate(oldBlock, blockAt(pos));
  });
  bot.updateSign = function(block, text) {
    var lines = text.split("\n");
    if(lines.length > 4) {
      bot.emit("error", new Error("too many lines for sign text"));
      return;
    }
    for(var i = 0; i < lines.length; ++i) {
      if(lines[i].length > 15) {
        bot.emit("error", new Error("signs have max line length 15"));
        return;
      }
    }
    bot._client.write('update_sign', {
      location: block.position,
      text1: JSON.stringify(lines[0]),
      text2: JSON.stringify(lines[1]),
      text3: JSON.stringify(lines[2]),
      text4: JSON.stringify(lines[3])
    });
  };

  // if we get a respawn packet and the dimension is changed,
  // unload all chunks from memory.
  var dimension;
  bot._client.on('login', function(packet) {
    dimension = packet.dimension
  });
  bot._client.on('respawn', function(packet) {
    if(dimension === packet.dimension) return;
    dimension = packet.dimension;
    columns = {};
  });

  bot.findBlock = findBlock;
  bot.blockAt = blockAt;
  bot._chunkColumn = chunkColumn;
  bot._updateBlock = updateBlock;
}

function columnKeyXZ(x, z) {
  return x + ',' + z;
}

function onesInShort(n) {
  n = n & 0xffff;
  var count = 0;
  for(var i = 0; i < 16; ++i) {
    count = ((1 << i) & n) ? count + 1 : count;
  }
  return count;
}

function nibble(wholeByte, low) {
  return low ?
  wholeByte & 0x0f :
  wholeByte >> 4;
}

function Column() {
  this.blockType = new Array(16);
  this.light = new Array(16);
  this.skyLight = new Array(16);
  this.biome = null;
}


}).call(this,require("buffer").Buffer)
},{"../chat_message":240,"../location":246,"../painting":249,"../version":277,"assert":2,"buffer":17,"prismarine-block":374,"vec3":410}],253:[function(require,module,exports){
var assert = require('assert');
var ChatMessage = require('../chat_message');
var CHAT_LENGTH_LIMIT = 100;

module.exports = inject;

function inject(bot) {
  // add an array, containing objects such as {pattern:/regex pattern/, chatType:"string", description:"string"}
  // chat.pattern.type will emit an event for bot.on() of the same type, eg chatType = whisper will trigger bot.on('whisper')
  // Default patterns for matching vanilla chat.
  bot.chatPatterns = [
    {pattern: /^<(?:.+? )?(.+?)> (.*)$/, type: "chat", description: "Vanilla chat"},
    {pattern: /^(?:.+? )?(.+?) (?:whispers to you:|whispers) (.*)$/, type: "whisper", description: "Vanilla whisper"}
  ];

  bot.chatAddPattern = function(patternValue, typeValue, descriptionValue) {
    // description is not required but recommended
    if(typeof descriptionValue === 'undefined')
      descriptionValue = 'None';
    bot.chatPatterns.push({pattern: patternValue, type: typeValue, description: descriptionValue});
  };

  bot._client.on('chat', function(packet) {
    // Function used to process "unidentified" messages, such as 1.6 chat and bukkit servers
    function parseOldMessage(stringMsg) {
      var match, username, content;
      // iterate through each object in chat.patterns array and test if .pattern matches
      for(i = 0; i < bot.chatPatterns.length; i++) {
        if(match = stringMsg.match(bot.chatPatterns[i].pattern)) {
          username = match[1];
          message = match[2];
          bot.emit(bot.chatPatterns[i].type, username, message, null, {text: stringMsg}, match);
        }
      }
    }

    /**
     * Parse 1.6.* version message
     * @param  {JSONObject} jsonMessage
     * @return {void}
     */
    function parseJsonMessage6(jsonMessage) {
      var username;
      var content;
      if(typeof jsonMsg.translate === 'string' && jsonMsg.translate.match(/^chat\./)) {
        username = jsonMsg.using[0];
        content = jsonMsg.using[1];
        bot.emit('chat', username, content, jsonMessage.translate, jsonMessage)
      } else if(jsonMsg.translate === "commands.message.display.incoming") {
        username = jsonMsg.using[0];
        content = jsonMsg.using[1];
        bot.emit('whisper', username, content, jsonMsg.translate, jsonMsg);
      } else if(typeof jsonMsg.text === 'string') {
        // craftbukkit message format
        parseOldMessage(jsonMsg.text);
      }
      bot.emit('message', jsonMsg);
    }

    /**
     * Parse 1.7+ version message
     * @param  {JSONObject} jsonMessage
     * @return {void}
     */
    function parseJsonMessage7(jsonMessage) {
      var chatMessage = new ChatMessage(jsonMessage);
      bot.emit('message', chatMessage);
      // Now parse the message type
      var username;
      var extendedMessage;
      switch(chatMessage.translate) {
        case undefined:
        {
          parseOldMessage(chatMessage.toString());
          break;
        }
        case 'chat.type.text':
        {
          username = chatMessage.getText(0);
          extendedMessage = chatMessage.toString().substring(username.length).trim();
          bot.emit('chat', username, extendedMessage, chatMessage.translate, chatMessage);
          break;
        }
        case 'commands.message.display.incoming':
        {
          username = chatMessage.getText(0);
          extendedMessage = chatMessage.toString().substring(username.length).trim();
          bot.emit('whisper', username, extendedMessage, chatMessage.translate, chatMessage);
          break;
        }
      }
    }

    // used by minecraft >= 1.6.2
    function parseJsonMessage(jsonMessage) {
      if(jsonMessage.using) {
        parseJsonMessage6(jsonMessage);
      } else {
        parseJsonMessage7(jsonMessage);
      }
    }

    var jsonMsg;
    // Honestly we should be checking against the server version
    try {
      jsonMsg = JSON.parse(packet.message);
    } catch(e) {
      // old message format
      bot.emit('message', packet.message);
      parseOldMessage(packet.message);
      return;
    }
    parseJsonMessage(jsonMsg)
  });

  function chatWithHeader(header, message) {
    var lengthLimit = CHAT_LENGTH_LIMIT - header.length;
    message.split("\n").forEach(function(subMessage) {
      if(!subMessage) return;
      var i, smallMsg;
      for(i = 0; i < subMessage.length; i += lengthLimit) {
        smallMsg = header + subMessage.substring(i, i + lengthLimit);
        bot._client.write('chat', {message: smallMsg});
      }
    });
  }

  bot.whisper = function(username, message) {
    chatWithHeader("/tell " + username + " ", message);
  };
  bot.chat = function(message) {
    chatWithHeader("", message);
  };
}

},{"../chat_message":240,"assert":2}],254:[function(require,module,exports){
var Chest = require('../chest');
var assert = require('assert');
var version=require("../version");
var windows = require('prismarine-windows')(version).windows;

module.exports = inject;

function inject(bot) {

  function openChest(chestBlock) {
    assert.ok(chestBlock.type === 54 || chestBlock.type === 130 || chestBlock.type === 146);
    var chest = bot.openBlock(chestBlock, Chest);
    chest.withdraw = withdraw;
    chest.deposit = deposit;
    return chest;
    function deposit(itemType, metadata, count, cb) {
      var options = {
        window: chest.window,
        itemType: itemType,
        metadata: metadata,
        count: count,
        sourceStart: chest.window.inventorySlotStart,
        sourceEnd: chest.window.inventorySlotStart + windows.INVENTORY_SLOT_COUNT,
        destStart: 0,
        destEnd: chest.window.inventorySlotStart
      };
      bot.transfer(options, cb);
    }

    function withdraw(itemType, metadata, count, cb) {
      var options = {
        window: chest.window,
        itemType: itemType,
        metadata: metadata,
        count: count,
        sourceStart: 0,
        sourceEnd: chest.window.inventorySlotStart,
        destStart: chest.window.inventorySlotStart,
        destEnd: chest.window.inventorySlotStart + windows.INVENTORY_SLOT_COUNT
      };
      bot.transfer(options, cb);
    }
  }

  bot.openChest = openChest;
}
},{"../chest":241,"../version":277,"assert":2,"prismarine-windows":383}],255:[function(require,module,exports){
var ProtoDef = require("protodef").ProtoDef;

module.exports = inject;

function inject(bot) {

  function setCommandBlock(pos, command, track_output) {

    var proto = new ProtoDef();

    proto.addType("string", ["pstring", {
      countType: "varint"
    }]);

    proto.addType('MC|AdvCdm', [
      "container",
      [
        {
          "name": "mode",
          "type": "byte"
        },
        {
          "name": "x",
          "type": [
            "switch",
            {
              "compareTo": "mode",
              "fields": {
                "0": "int"
              },
              "default": "void"
            }
          ]
        },
        {
          "name": "y",
          "type": [
            "switch",
            {
              "compareTo": "mode",
              "fields": {
                "0": "int"
              },
              "default": "void"
            }
          ]
        },
        {
          "name": "z",
          "type": [
            "switch",
            {
              "compareTo": "mode",
              "fields": {
                "0": "int"
              },
              "default": "void"
            }
          ]
        },
        {
          "name": "eid",
          "type": [
            "switch",
            {
              "compareTo": "mode",
              "fields": {
                "1": "int"
              },
              "default": "void"
            }
          ]
        },
        {
          "name": "command",
          "type": "string"
        },
        {
          "name": "track_output",
          "type": "bool"
        }
      ]
    ]);


    var buffer = proto.createPacketBuffer('MC|AdvCdm', {
      mode: 0,
      x: pos.x,
      y: pos.y,
      z: pos.z,
      command: command,
      track_output: track_output
    });
    bot._client.write('custom_payload', {
      'channel': 'MC|AdvCdm',
      'data': buffer
    });
  }

  bot.setCommandBlock=setCommandBlock;
}

},{"protodef":394}],256:[function(require,module,exports){
var version=require("../version");
var Item = require("prismarine-item")(version);
var Recipe = require('prismarine-recipe')(version).Recipe;
var windows = require('prismarine-windows')(version).windows;
var assert = require('assert');

module.exports = inject;

function inject(bot) {

  function craft(recipe, count, craftingTable, cb) {
    assert.ok(recipe);
    cb = cb || noop;
    count = count == null ? 1 : parseInt(count, 10);
    if(recipe.requiresTable && !craftingTable) {
      cb(new Error("recipe requires craftingTable"));
      return;
    }
    next();
    function next(err) {
      if(err) {
        cb(err);
      } else if(count > 0) {
        count -= 1;
        craftOnce(recipe, craftingTable, next);
      } else {
        cb();
      }
    }
  }

  function craftOnce(recipe, craftingTable, cb) {
    if(craftingTable) {
      bot.activateBlock(craftingTable);
      bot.once('windowOpen', function(window) {
        if(window.type !== 1) {
          cb(new Error("crafting: non craftingTable used as craftingTable"));
          return;
        }
        startClicking(window, 3, 3);
      });
    } else {
      startClicking(bot.inventory, 2, 2);
    }

    function startClicking(window, w, h) {
      var extraSlots = unusedRecipeSlots();
      var ingredientIndex = 0;
      var originalSourceSlot = null;
      var it;
      if(recipe.inShape) {
        it = {
          x: 0,
          y: 0,
          row: recipe.inShape[0]
        };
        clickShape();
      } else {
        nextIngredientsClick();
      }

      function incrementShapeIterator() {
        it.x += 1;
        if(it.x >= it.row.length) {
          it.y += 1;
          if(it.y >= recipe.inShape.length) return null;
          it.x = 0;
          it.row = recipe.inShape[it.y];
        }
        return it;
      }

      function nextShapeClick() {
        if(incrementShapeIterator()) {
          clickShape();
        } else if(!recipe.ingredients) {
          putMaterialsAway();
        } else {
          nextIngredientsClick();
        }
      }

      function clickShape() {
        var destSlot = slot(it.x, it.y);
        var ingredient = it.row[it.x];
        if(ingredient.id === -1) return nextShapeClick();
        if(!window.selectedItem || window.selectedItem.type !== ingredient.id ||
          (ingredient.metadata != null &&
          window.selectedItem.metadata !== ingredient.metadata)) {
          // we are not holding the item we need. click it.
          var sourceItem = window.findInventoryItem(ingredient.id, ingredient.metadata);
          if(!sourceItem) return cb(new Error("missing ingredient"));
          if(originalSourceSlot == null) originalSourceSlot = sourceItem.slot;
          bot.clickWindow(sourceItem.slot, 0, 0, function(err) {
            if(err) return cb(err);
            clickDest();
          });
        } else {
          clickDest();
        }
        function clickDest() {
          bot.clickWindow(destSlot, 1, 0, function(err) {
            if(err) {
              cb(err);
            } else {
              nextShapeClick();
            }
          });
        }
      }

      function nextIngredientsClick() {
        var ingredient = recipe.ingredients[ingredientIndex];
        var destSlot = extraSlots.pop();
        if(!window.selectedItem || window.selectedItem.type !== ingredient.id ||
          (ingredient.metadata != null &&
          window.selectedItem.metadata !== ingredient.metadata)) {
          // we are not holding the item we need. click it.
          var sourceItem = window.findInventoryItem(ingredient.id, ingredient.metadata);
          if(!sourceItem) return cb(new Error("missing ingredient"));
          if(originalSourceSlot == null) originalSourceSlot = sourceItem.slot;
          bot.clickWindow(sourceItem.slot, 0, 0, clickDest);
        } else {
          clickDest();
        }
        function clickDest() {
          bot.clickWindow(destSlot, 1, 0, function(err) {
            if(err) {
              cb(err);
            } else if(++ingredientIndex < recipe.ingredients.length) {
              nextIngredientsClick();
            } else {
              putMaterialsAway();
            }
          });
        }
      }

      function putMaterialsAway() {
        var start = window.inventorySlotStart;
        var end = start + windows.INVENTORY_SLOT_COUNT;
        bot.putSelectedItemRange(start, end, window, originalSourceSlot, function(err) {
          if(err) {
            cb(err);
          } else {
            grabResult();
          }
        });
      }

      function grabResult() {
        assert.equal(window.selectedItem, null);
        // put the recipe result in the output
        var item = new Item(recipe.result.id, recipe.result.count, recipe.result.metadata);
        window.updateSlot(0, item);
        // shift click result
        bot.putAway(0, function(err) {
          if(err) {
            cb(err);
          } else {
            updateOutShape();
          }
        });
      }

      function updateOutShape() {
        if(!recipe.outShape) {
          for(var i = 1; i <= w * h; i++)
            window.updateSlot(i, null);
          closeTheWindow();
          return;
        }
        var slotsToClick = [];
        var x, y, row, item, theSlot;
        for(y = 0; y < recipe.outShape.length; ++y) {
          row = recipe.outShape[y];
          for(x = 0; x < row.length; ++x) {
            theSlot = slot(x, y);
            if(row[x].id !== -1) {
              item = new Item(row[x].id, row[x].count, row[x].metadata || null);
              slotsToClick.push(theSlot);
            } else {
              item = null;
            }
            window.updateSlot(theSlot, item);
          }
        }
        next();
        function next() {
          var theSlot = slotsToClick.pop();
          if(!theSlot) {
            closeTheWindow();
            return
          }
          bot.putAway(theSlot, function(err) {
            if(err) {
              cb(err);
            } else {
              next();
            }
          });
        }
      }

      function closeTheWindow() {
        bot.closeWindow(window);
        cb();
      }

      function slot(x, y) {
        return 1 + x + w * y;
      }

      function unusedRecipeSlots() {
        var result = [];
        var x, y, row;
        if(recipe.inShape) {
          for(y = 0; y < recipe.inShape.length; ++y) {
            row = recipe.inShape[y];
            for(x = 0; x < row.length; ++x) {
              if(row[x].id === -1) result.push(slot(x, y));
            }
            for(; x < w; ++x) {
              result.push(slot(x, y));
            }
          }
          for(; y < h; ++y) {
            for(x = 0; x < w; ++x) {
              result.push(slot(x, y));
            }
          }
        } else {
          for(y = 0; y < h; ++y) {
            for(x = 0; x < w; ++x) {
              result.push(slot(x, y));
            }
          }
        }
        return result;
      }
    }
  }

  function recipesFor(itemType, metadata, minResultCount, craftingTable) {
    minResultCount = minResultCount == null ? 1 : minResultCount;
    var results = [];
    Recipe.find(itemType, metadata).forEach(function(recipe) {
      if(requirementsMetForRecipe(recipe, minResultCount, craftingTable)) {
        results.push(recipe);
      }
    });
    return results;
  }

  function recipesAll(itemType, metadata, craftingTable) {
    var results = [];
    Recipe.find(itemType, metadata).forEach(function(recipe) {
      if(!recipe.requiresTable || craftingTable) {
        results.push(recipe);
      }
    });
    return results;
  }

  function requirementsMetForRecipe(recipe, minResultCount, craftingTable) {
    if(recipe.requiresTable && !craftingTable) return false;

    // how many times we have to perform the craft to achieve minResultCount
    var craftCount = Math.ceil(minResultCount / recipe.result.count);

    // false if not enough inventory to make all the ones that we want
    for(var i = 0; i < recipe.delta.length; ++i) {
      var d = recipe.delta[i];
      if(bot.inventory.count(d.id, d.metadata) + d.count * craftCount < 0) return false;
    }

    // otherwise true
    return true;
  }


  bot.craft = craft;
  bot.recipesFor = recipesFor;
  bot.recipesAll = recipesAll;
}

function noop(err) {
  if(err) throw err;
}
},{"../version":277,"assert":2,"prismarine-item":376,"prismarine-recipe":380,"prismarine-windows":383}],257:[function(require,module,exports){
var assert = require("assert");
var Vec3 = require('vec3').Vec3;
var version=require("../version");
var Item = require("prismarine-item")(version);

module.exports = inject;

function inject(bot) {
  // these features only work when you are in creative mode.
  bot.creative = {
    setInventorySlot: setInventorySlot,
    flyTo: flyTo,
    startFlying: startFlying,
    stopFlying: stopFlying,
  };

  function setInventorySlot(slot, item) {
    assert(0 <= slot && slot <= 44);
    bot._client.write("set_creative_slot", {
      slot: slot,
      item: Item.toNotch(item),
    });
  }

  var normalGravity = null;
  var flyingSpeedPerUpdate = 0.5;

  // straight line, so make sure there's a clear path.
  function flyTo(destination, cb) {
    // TODO: consider sending 0x13
    startFlying();
    var intervalHandle = setInterval(flyStep, 50);

    function flyStep() {
      bot.physics.gravity = 0;
      bot.entity.velocity = new Vec3(0, 0, 0);

      var vector = destination.minus(bot.entity.position);
      var magnitude = vec_magnitude(vector);
      if(magnitude <= flyingSpeedPerUpdate) {
        // last step
        bot.entity.position = destination;
        if(cb != null) bot.once("move", cb);
        clearInterval(intervalHandle);
      } else {
        // small steps
        var normalizedVector = vector.scaled(1 / magnitude);
        bot.entity.position.add(normalizedVector.scaled(flyingSpeedPerUpdate));
      }
    }
  }

  function startFlying() {
    if(normalGravity == null) normalGravity = bot.physics.gravity;
    bot.physics.gravity = 0;
  }

  function stopFlying() {
    bot.physics.gravity = normalGravity;
  }
}

// this should be in the vector library
function vec_magnitude(vec) {
  return Math.sqrt(vec.x * vec.x + vec.y * vec.y + vec.z * vec.z);
}

},{"../version":277,"assert":2,"prismarine-item":376,"vec3":410}],258:[function(require,module,exports){
var assert = require('assert');

module.exports = inject;

function inject(bot) {
  var swingInterval = null;
  var waitTimeout = null;

  bot.targetDigBlock = null;
  bot.lastDigTime = null;

  function dig(block, cb) {
    if(bot.targetDigBlock) bot.stopDigging();
    cb = cb || noop;
    bot.lookAt(block.position.offset(0.5,0.5,0.5), false, function() {
      bot._client.write('block_dig', {
        status: 0, // start digging
        location: block.position,
        face: 1, // hard coded to always dig from the top
      });
      var waitTime = bot.digTime(block);
      waitTimeout = setTimeout(finishDigging, waitTime);
      bot.targetDigBlock = block;
      bot._client.write('arm_animation', {});
      swingInterval = setInterval(function() {
        bot._client.write('arm_animation', {});
      }, 350);
      var eventName = "blockUpdate:" + block.position;
      bot.on(eventName, onBlockUpdate);

      bot.stopDigging = function() {
        bot.removeListener(eventName, onBlockUpdate);
        clearInterval(swingInterval);
        clearTimeout(waitTimeout);
        swingInterval = null;
        waitTimeout = null;
        bot._client.write('block_dig', {
          status: 1, // cancel digging
          location: bot.targetDigBlock.position,
          face: 1, // hard coded to always dig from the top
        });
        var block = bot.targetDigBlock;
        bot.targetDigBlock = null;
        bot.lastDigTime = new Date();
        bot.emit("diggingAborted", block);
        bot.stopDigging = noop;
        cb(new Error("Digging aborted"));
      };

      function onBlockUpdate(oldBlock, newBlock) {
        // vanilla server never actually interrupt digging, but some server send block update when you start digging
        // so ignore block update if not air
        if(newBlock.type !== 0) return;
        bot.removeListener(eventName, onBlockUpdate);
        clearInterval(swingInterval);
        clearTimeout(waitTimeout);
        swingInterval = null;
        waitTimeout = null;
        bot.targetDigBlock = null;
        bot.lastDigTime = new Date();
        bot.emit("diggingCompleted", newBlock);
        cb();
      }

      function finishDigging() {
        clearInterval(swingInterval);
        clearTimeout(waitTimeout);
        swingInterval = null;
        waitTimeout = null;
        bot._client.write('block_dig', {
          status: 2, // finish digging
          location: bot.targetDigBlock.position,
          face: 1, // hard coded to always dig from the top
        });
        bot.targetDigBlock = null;
        bot.lastDigTime = new Date();
        bot._updateBlock(block.position, 0, 0);
      }
    });
  }

  function canDigBlock(block) {
    return block && block.diggable && block.position.offset(0.5, 0.5, 0.5).distanceTo(bot.entity.position) < 6;
  }

  function digTime(block) {
    return block.digTime(bot.heldItem ? bot.heldItem.type : null,bot.game.gameMode === 'creative',
      bot.blockAt(bot.entity.position).type === 9, !bot.entity.onGround); // only stationary water counts
  }

  bot.dig = dig;
  bot.stopDigging = noop;
  bot.canDigBlock = canDigBlock;
  bot.digTime = digTime;
}

function noop(err) {
  if(err) throw err;
}

},{"assert":2}],259:[function(require,module,exports){
var version=require("../version");
var windows = require('prismarine-windows')(version).windows;
var assert = require('assert');
var Dispenser = require('../dispenser');

module.exports = inject;

function inject(bot) {

  function openDispenser(dispenserBlock) {
    assert.strictEqual(dispenserBlock.type, 23);
    var dispenser = bot.openBlock(dispenserBlock, Dispenser);
    dispenser.deposit = deposit;
    dispenser.withdraw = withdraw;
    return dispenser;
    function deposit(itemType, metadata, count, cb) {
      var options = {
        window: dispenser.window,
        itemType: itemType,
        metadata: metadata,
        count: count,
        sourceStart: dispenser.window.inventorySlotStart,
        sourceEnd: dispenser.window.inventorySlotStart + windows.INVENTORY_SLOT_COUNT,
        destStart: 0,
        destEnd: dispenser.window.inventorySlotStart
      };
      bot.transfer(options, cb);
    }

    function withdraw(itemType, metadata, count, cb) {
      var options = {
        window: dispenser.window,
        itemType: itemType,
        metadata: metadata,
        count: count,
        sourceStart: 0,
        sourceEnd: dispenser.window.inventorySlotStart,
        destStart: dispenser.window.inventorySlotStart,
        destEnd: dispenser.window.inventorySlotStart + windows.INVENTORY_SLOT_COUNT
      };
      bot.transfer(options, cb);
    }
  }

  bot.openDispenser = openDispenser;
}
},{"../dispenser":243,"../version":277,"assert":2,"prismarine-windows":383}],260:[function(require,module,exports){
var EnchantmentTable = require('../enchantment_table');
var assert = require('assert');
var version=require("../version");
var windows = require('prismarine-windows')(version).windows;

module.exports = inject;


function noop(err) {
  if(err) throw err;
}

function inject(bot) {

  function openEnchantmentTable(enchantmentTableBlock) {
    assert.strictEqual(enchantmentTableBlock.type, 116);
    var ready = false;
    var enchantmentTable = bot.openBlock(enchantmentTableBlock, EnchantmentTable);
    resetEnchantmentOptions();
    bot._client.on('craft_progress_bar', onUpdateWindowProperty);
    enchantmentTable.on('updateSlot', onUpdateSlot);
    enchantmentTable.once('close', onClose);
    enchantmentTable.enchant = enchant;
    enchantmentTable.takeTargetItem = takeTargetItem;
    enchantmentTable.putTargetItem = putTargetItem;
    enchantmentTable.putLapis = putLapis;
    return enchantmentTable;
    function onClose() {
      bot._client.removeListener('craft_progress_bar', onUpdateWindowProperty);
    }

    function onUpdateWindowProperty(packet) {
      if(!enchantmentTable.window) return;
      if(packet.windowId !== enchantmentTable.window.id) return;
      assert.ok(packet.property >= 0);
      if(packet.property >= 3) return;
      var arr = enchantmentTable.enchantments;
      arr[packet.property].level = packet.value;
      if(arr[0].level && arr[1].level && arr[2].level && !ready) {
        ready = true;
        enchantmentTable.emit("ready");
      }
    }

    function onUpdateSlot(oldItem, newItem) {
      resetEnchantmentOptions();
    }

    function resetEnchantmentOptions() {
      enchantmentTable.enchantments = [{level: null}, {level: null}, {level: null}];
      ready = false;
    }

    function enchant(choice, cb) {
      choice = parseInt(choice, 10); // allow string argument
      cb = cb || noop;
      assert.notEqual(enchantmentTable.enchantments[choice].level, null);
      bot._client.write('enchant_item', {
        windowId: enchantmentTable.window.id,
        enchantment: choice
      });
      enchantmentTable.once('updateSlot', function(oldItem, newItem) {
        cb(null, newItem);
      });
    }

    function takeTargetItem(cb) {
      cb = cb || noop;
      var item = enchantmentTable.targetItem();
      assert.ok(item);
      bot.putAway(item.slot, function(err) {
        cb(err, item);
      });
    }

    function putTargetItem(item, cb) {
      cb = cb || noop;
      bot.moveSlotItem(item.slot, 0, cb);
    }

    function putLapis(item, cb) {
      cb = cb || noop;
      bot.moveSlotItem(item.slot, 1, cb);
    }
  }

  bot.openEnchantmentTable = openEnchantmentTable;
}
},{"../enchantment_table":244,"../version":277,"assert":2,"prismarine-windows":383}],261:[function(require,module,exports){
var Vec3 = require('vec3').Vec3;
var _ = require('lodash');
var Entity = require('prismarine-entity');
var conv = require('../conversions');
var NAMED_ENTITY_HEIGHT = 1.62;
var CROUCH_HEIGHT = NAMED_ENTITY_HEIGHT - 0.08;
var objects = require('../minecraft-data').objects;
var mobs = require('../minecraft-data').mobs;
var version=require("../version");
var Item = require("prismarine-item")(version);

module.exports = inject;

var animationEvents = {
  0: 'entitySwingArm',
  1: 'entityHurt',
  2: 'entityWake',
  3: 'entityEat',
  4: 'entityCriticalEffect',
  5: 'entityMagicCriticalEffect'
};

var entityStatusEvents = {
  2: 'entityHurt',
  3: 'entityDead',
  6: 'entityTaming',
  7: 'entityTamed',
  8: 'entityShakingOffWater',
  10: 'entityEatingGrass',
};

function inject(bot) {

  bot.findPlayer = bot.findPlayers = function(filter) {
    var filterFn = function(entity) {
      if(entity.type !== 'player') return false;
      if(filter == null) return true;
      if(typeof filter === 'object' && filter instanceof RegExp) {
        return entity.username.search(filter) !== -1;
      } else if(typeof filter === 'function') {
        return filter(entity);
      } else if(typeof filter === 'string') {
        return entity.username.toLowerCase() === filter.toLowerCase();
      }
      return false;
    };
    var resultSet = _.transform(bot.entities, function(players, entity) {
      if(filterFn(entity)) players.push(entity);
    }, []);

    if(typeof filter === 'string') {
      switch(resultSet.length) {
        case 0:
          return null;
        case 1:
          return resultSet[0];
        default:
          return resultSet;
      }
    }
    return resultSet;
  };

  bot.players = {};
  bot.uuidToUsername = {};
  bot.entities = {};

  bot._client.once('login', function(packet) {
    // login
    bot.entity = fetchEntity(packet.entityId);
    bot.entity.username = bot.username;
    bot.entity.type = 'player';
  });

  bot._client.on('entity_equipment', function(packet) {
    // entity equipment
    var entity = fetchEntity(packet.entityId);
    entity.setEquipment(packet.slot, packet.item ? Item.fromNotch(packet.item) : null);
    bot.emit('entityEquip', entity);
  });

  bot._client.on('bed', function(packet) {
    // use bed
    var entity = fetchEntity(packet.entityId);
    entity.position.set(packet.location.x, packet.location.y, packet.location.z);
    bot.emit('entitySleep', entity);
  });

  bot._client.on('animation', function(packet) {
    // animation
    var entity = fetchEntity(packet.entityId);
    var eventName = animationEvents[packet.animation];
    if(eventName) bot.emit(eventName, entity);
  });

  bot._client.on('named_entity_spawn', function(packet) {
    // in case player_info packet was not sent before named_entity_spawn : ignore named_entity_spawn (see #213)
    if(packet.playerUUID in bot.uuidToUsername) {
      // spawn named entity
      var entity = fetchEntity(packet.entityId);
      entity.type = 'player';
      entity.username = bot.uuidToUsername[packet.playerUUID];
      entity.uuid = packet.playerUUID;
      entity.dataBlobs = packet.data;
      entity.position.set(packet.x / 32, packet.y / 32, packet.z / 32);
      entity.yaw = conv.fromNotchianYawByte(packet.yaw);
      entity.pitch = conv.fromNotchianPitchByte(packet.pitch);
      entity.height = NAMED_ENTITY_HEIGHT;
      entity.metadata = parseMetadata(packet.metadata);
      if(!bot.players[entity.username].entity) {
        bot.players[entity.username].entity = entity;
      }
      bot.emit('entitySpawn', entity);
    }
  });
  bot.on("entityCrouch", function(entity) {
    entity.height = CROUCH_HEIGHT;
  });
  bot.on("entityUncrouch", function(entity) {
    entity.height = NAMED_ENTITY_HEIGHT;
  });

  bot._client.on('collect', function(packet) {
    // collect item
    var collector = fetchEntity(packet.collectorEntityId);
    var collected = fetchEntity(packet.collectedEntityId);
    bot.emit('playerCollect', collector, collected);
  });

  bot._client.on('spawn_entity', function(packet) {
    // spawn object/vehicle
    var entity = fetchEntity(packet.entityId);
    var entityData = objects[packet.type];
    if(entityData) {
      entity.type = 'object';
      entity.objectType = entityData.displayName;
      entity.displayName = entityData.displayName;
      entity.entityType = entityData.id;
      entity.name = entityData.name;
      entity.kind = entityData.category;
    } else {
      // unknown entity
      entity.type = 'other';
      entity.entityType = packet.type;
    }
    entity.position.set(packet.x / 32, packet.y / 32, packet.z / 32);
    entity.yaw = conv.fromNotchianYawByte(packet.yaw);
    entity.pitch = conv.fromNotchianPitchByte(packet.pitch);
    entity.objectData = packet.objectData;
    bot.emit('entitySpawn', entity);
  });

  bot._client.on('spawn_entity_experience_orb', function(packet) {
    var entity = fetchEntity(packet.entityId);
    entity.type = 'orb';
    entity.position.set(packet.x / 32, packet.y / 32, packet.z / 32);
    entity.count = packet.count;
    bot.emit('entitySpawn', entity);
  });

  bot._client.on('spawn_entity_living', function(packet) {
    // spawn mob
    var entity = fetchEntity(packet.entityId);
    entity.type = 'mob';
    var entityData = mobs[packet.type];
    entity.mobType = entityData.displayName;
    entity.displayName = entityData.displayName;
    entity.entityType = entityData.id;
    entity.name = entityData.name;
    entity.kind = entityData.category;
    entity.position.set(packet.x / 32, packet.y / 32, packet.z / 32);
    entity.yaw = conv.fromNotchianYawByte(packet.yaw);
    entity.pitch = conv.fromNotchianPitchByte(packet.pitch);
    entity.headPitch = conv.fromNotchianPitchByte(packet.headPitch);
    var notchVel = new Vec3(packet.velocityX, packet.velocityY, packet.velocityZ);
    entity.velocity.update(conv.fromNotchVelocity(notchVel));
    entity.metadata = parseMetadata(packet.metadata);
    bot.emit('entitySpawn', entity);
  });

  bot._client.on('entity_velocity', function(packet) {
    // entity velocity
    var entity = fetchEntity(packet.entityId);
    var notchVel = new Vec3(packet.velocityX, packet.velocityY, packet.velocityZ);
    entity.velocity.update(conv.fromNotchVelocity(notchVel));
  });

  bot._client.on('entity_destroy', function(packet) {
    // destroy entity
    packet.entityIds.forEach(function(id) {
      var entity = fetchEntity(id);
      bot.emit('entityGone', entity);
      entity.isValid = false;
      if(entity.username && bot.players[entity.username]) {
        bot.players[entity.username].entity = null;
      }
      delete bot.entities[id];
    });
  });

  bot._client.on('rel_entity_move', function(packet) {
    // entity relative move
    var entity = fetchEntity(packet.entityId);
    entity.position.translate(packet.dX / 32, packet.dY / 32, packet.dZ / 32);
    bot.emit('entityMoved', entity);
  });

  bot._client.on('entity_look', function(packet) {
    // entity look
    var entity = fetchEntity(packet.entityId);
    entity.yaw = conv.fromNotchianYawByte(packet.yaw);
    entity.pitch = conv.fromNotchianPitchByte(packet.pitch);
    bot.emit('entityMoved', entity);
  });

  bot._client.on('entity_move_look', function(packet) {
    // entity look and relative move
    var entity = fetchEntity(packet.entityId);
    entity.position.translate(packet.dX / 32, packet.dY / 32, packet.dZ / 32);
    entity.yaw = conv.fromNotchianYawByte(packet.yaw);
    entity.pitch = conv.fromNotchianPitchByte(packet.pitch);
    bot.emit('entityMoved', entity);
  });

  bot._client.on('entity_teleport', function(packet) {
    // entity teleport
    var entity = fetchEntity(packet.entityId);
    entity.position.set(packet.x / 32, packet.y / 32, packet.z / 32);
    entity.yaw = conv.fromNotchianYawByte(packet.yaw);
    entity.pitch = conv.fromNotchianPitchByte(packet.pitch);
    bot.emit('entityMoved', entity);
  });

  bot._client.on('entity_head_rotation', function(packet) {
    // entity head look
    var entity = fetchEntity(packet.entityId);
    entity.headYaw = conv.fromNotchianYawByte(packet.headYaw);
    bot.emit('entityMoved', entity);
  });

  bot._client.on('entity_status', function(packet) {
    // entity status
    var entity = fetchEntity(packet.entityId);
    var eventName = entityStatusEvents[packet.entityStatus];
    if(eventName) bot.emit(eventName, entity);
  });

  bot._client.on('attach_entity', function(packet) {
    // attach entity
    var entity = fetchEntity(packet.entityId);
    if(packet.vehicleId === -1) {
      var vehicle = entity.vehicle;
      delete entity.vehicle;
      bot.emit('entityDetach', entity, vehicle);
    } else {
      entity.vehicle = fetchEntity(packet.vehicleId);
      bot.emit('entityAttach', entity, entity.vehicle);
    }
  });

  bot._client.on('entity_metadata', function(packet) {
    // entity metadata
    var entity = fetchEntity(packet.entityId);
    entity.metadata = parseMetadata(packet.metadata);
    bot.emit('entityUpdate', entity);
  });

  bot._client.on('entity_effect', function(packet) {
    // entity effect
    var entity = fetchEntity(packet.entityId);
    var effect = {
      id: packet.effectId,
      amplifier: packet.amplifier,
      duration: packet.duration,
    };
    entity.effects[effect.id] = effect;
    bot.emit('entityEffect', entity, effect);
  });

  bot._client.on('remove_entity_effect', function(packet) {
    // remove entity effect
    var entity = fetchEntity(packet.entityId);
    var effect = entity.effects[packet.effectId];
    if(effect) {
      delete entity.effects[effect.id];
    }
    else {
      // unknown effect
      effect = {
        id: packet.effectId,
        amplifier: -1,
        duration: -1,
      };
    }
    bot.emit('entityEffectEnd', entity, effect);
  });

  bot._client.on('spawn_entity_weather', function(packet) {
    // spawn global entity
    var entity = fetchEntity(packet.entityId);
    entity.type = 'global';
    entity.globalType = 'thunderbolt';
    entity.position.set(packet.x / 32, packet.y / 32, packet.z / 32);
    bot.emit('entitySpawn', entity);
  });

  bot.on('spawn', function() {
    bot.emit('entitySpawn', bot.entity);
  });
  bot._client.on('player_info', function(packet) {
    // player list item(s)
    packet.data.forEach(function(item) {
      var playerEntity = bot.findPlayers(item.name);
      var player = bot.uuidToUsername[item.UUID] ? bot.players[bot.uuidToUsername[item.UUID]] : null;
      if(packet.action === 0) {
        // New Player
        if(!player) {
          player = bot.players[item.name] = {username: item.name, ping: item.ping, uuid: item.UUID};
          bot.uuidToUsername[item.UUID] = item.name;
          bot.emit('playerJoined', player);
          // Just an Update
        } else player.ping = item.ping;

        player.entity = playerEntity;
      } else if(packet.action === 1) {
        // TODO: update gamemode
      } else if(packet.action === 2) {
        // TODO: update latency
      } else if(packet.action === 3) {
        // TODO: update display name
      } else if(packet.action === 4) {
        // Player has parted
        if(player) {
          player.entity = null;
          delete bot.players[player.username];
          delete bot.uuidToUsername[item.UUID];
          bot.emit('playerLeft', player);
        }
      }
    });
  });

  // attaching to a vehicle
  bot._client.on('attach_entity', function(packet) {
    if(packet.entityId !== bot.entity.id) return;
    var vehicle = bot.vehicle;
    if(packet.vehicleId === -1) {
      bot.vehicle = null;
      bot.emit("dismount", vehicle);
    } else {
      bot.vehicle = bot.entities[packet.vehicleId];
      bot.emit("mount");
    }
  });


  bot.attack = attack;
  bot.mount = mount;
  bot.dismount = dismount;
  bot.useOn = useOn;
  bot.moveVehicle = moveVehicle;

  function useOn(target) {
    // TODO: check if not crouching will make make this action always use the item
    useEntity(target, 0);
  }

  function attack(target, swing) {
    if(swing) {
      bot._client.write('arm_animation', {});
    }
    useEntity(target, 1);
  }

  function mount(target) {
    // TODO: check if crouching will make make this action always mount
    useEntity(target, 0);
  }

  function moveVehicle(left, forward) {
    bot._client.write('steer_vehicle', {
      "sideways": left,
      "forward": forward,
      "jump": 0x01
    });
  }

  function dismount() {
    if(bot.vehicle) {
      bot._client.write('steer_vehicle', {
        "sideways": 0.0,
        "forward": 0.0,
        "jump": 0x02
      });
    } else {
      bot.emit("error", new Error("dismount: not mounted"));
    }
  }

  function useEntity(target, leftClick, x, y, z) {
    if(x && y && z) {
      bot._client.write('use_entity', {
        target: target.id,
        mouse: leftClick,
        x: x,
        y: y,
        z: z
      });
    }
    else bot._client.write('use_entity', {
      target: target.id,
      mouse: leftClick
    });
  }

  function fetchEntity(id) {
    return bot.entities[id] || (bot.entities[id] = new Entity(id));
  }
}

function parseMetadata(metadata) {
  var o = {};
  metadata.forEach(function(pair) {
    o[pair.key] = pair.value;
  });
  return o;
}

},{"../conversions":242,"../minecraft-data":248,"../version":277,"lodash":327,"prismarine-entity":375,"prismarine-item":376,"vec3":410}],262:[function(require,module,exports){
module.exports = inject;

function inject(bot) {
  bot.experience = {
    level: null,
    points: null,
    progress: null,
  };
  bot._client.on('experience', function(packet) {
    bot.experience.level = packet.level;
    bot.experience.points = packet.totalExperience;
    bot.experience.progress = packet.experienceBar;
    bot.emit('experience');
  });
}

},{}],263:[function(require,module,exports){
var Furnace = require('../furnace');
var assert = require('assert');
var version=require("../version");
var windows = require('prismarine-windows')(version).windows;

module.exports = inject;

function inject(bot) {
  function openFurnace(furnaceBlock) {
    assert.ok(furnaceBlock.type === 61 || furnaceBlock.type === 62);
    var furnace = bot.openBlock(furnaceBlock, Furnace);
    furnace.takeInput = takeInput;
    furnace.takeFuel = takeFuel;
    furnace.takeOutput = takeOutput;
    furnace.putInput = putInput;
    furnace.putFuel = putFuel;
    bot._client.on('craft_progress_bar', onUpdateWindowProperty);
    furnace.once("close", onClose);
    return furnace;
    function onClose() {
      bot._client.removeListener('craft_progress_bar', onUpdateWindowProperty);
    }

    function onUpdateWindowProperty(packet) {
      if(!furnace.window) return;
      if(packet.windowId !== furnace.window.id) return;
      if(packet.property === 0) {
        furnace.progress = packet.value / 200;
      } else if(packet.property === 1) {
        furnace.fuel = packet.value / 300;
      }
      furnace.emit("update");
    }

    function takeSomething(item, cb) {
      assert.ok(item);
      bot.putAway(item.slot, function(err) {
        if(err) {
          cb(err);
        } else {
          cb(null, item);
        }
      });
    }

    function takeInput(cb) {
      takeSomething(furnace.inputItem(), cb);
    }

    function takeFuel(cb) {
      takeSomething(furnace.fuelItem(), cb);
    }

    function takeOutput(cb) {
      takeSomething(furnace.outputItem(), cb);
    }

    function putSomething(destSlot, itemType, metadata, count, cb) {
      var options = {
        window: furnace.window,
        itemType: itemType,
        metadata: metadata,
        count: count,
        sourceStart: furnace.window.inventorySlotStart,
        sourceEnd: furnace.window.inventorySlotStart + windows.INVENTORY_SLOT_COUNT,
        destStart: destSlot
      };
      bot.transfer(options, cb);
    }

    function putInput(itemType, metadata, count, cb) {
      putSomething(0, itemType, metadata, count, cb);
    }

    function putFuel(itemType, metadata, count, cb) {
      putSomething(1, itemType, metadata, count, cb);
    }
  }

  bot.openFurnace = openFurnace;
}
},{"../furnace":245,"../version":277,"assert":2,"prismarine-windows":383}],264:[function(require,module,exports){
(function (Buffer){
module.exports = inject;

var dimensionNames = {
  '-1': 'nether',
  '0': 'overworld',
  '1': 'end',
};

var difficultyNames = ['peaceful', 'easy', 'normal', 'hard'];

function inject(bot) {
  bot.game = {};

  bot._client.on('login', function(packet) {
    bot.game.levelType = packet.levelType;
    bot.game.gameMode = parseGameMode(packet.gameMode);
    bot.game.hardcore = parseHardcore(packet.gameMode);
    bot.game.dimension = dimensionNames[packet.dimension];
    bot.game.difficulty = difficultyNames[packet.difficulty];
    bot.game.maxPlayers = packet.maxPlayers;
    bot.emit('login');
    bot.emit('game');
    bot._client.write('held_item_slot', {slotId: 0});
    bot._client.write('custom_payload', {channel: 'MC|Brand', data: new Buffer('\x07vanilla')}); // varint length-prefixed string TODO: encode varint, see GH-253

    //autoRespawn(bot);
  });

  bot._client.on('respawn', function(packet) {
    bot.game.levelType = packet.levelType;
    bot.game.dimension = dimensionNames[packet.dimension];
    bot.game.difficulty = difficultyNames[packet.difficulty];
    bot.game.gameMode = parseGameMode(packet.gameMode);
    bot.game.hardcore = parseHardcore(packet.gameMode);
    bot.emit('game');
  });

  bot._client.on('game_state_change', function(packet) {
    if(packet.reason === 3) {
      bot.game.gameMode = parseGameMode(packet.gameMode);
      bot.emit('game');
    }
  });
}

var gameModes = ['survival', 'creative', 'adventure'];

function parseGameMode(gameModeBits) {
  return gameModes[(gameModeBits & 0x03)];
}

function parseHardcore(gameModeBits) {
  return !!(gameModeBits & 0x04);
}

/**
 * AutoRespawn if dead on login
 * Waits 2 seconds for the update_health packet,
 * on timeout of this packet it sends a respawn request
 * I can't think of a cleaner way to do this at the moment.
 * @param  {Bot} bot
 * @return {void}
 */
function autoRespawn(bot) {
  var timer = setTimeout(function() {
    bot._client.write('client_command', {payload: 0});
  }, 2000);
  bot._client.once('update_health', function() {
    clearTimeout(timer);
  })
}


}).call(this,require("buffer").Buffer)
},{"buffer":17}],265:[function(require,module,exports){
module.exports = inject;

function inject(bot) {
  bot.isAlive = false;

  bot._client.on('respawn', function(packet) {
    bot.isAlive = false;
    bot.emit("respawn");
  });

  bot._client.on('update_health', function(packet) {
    bot.health = packet.health;
    bot.food = packet.food;
    bot.foodSaturation = packet.foodSaturation;
    bot.emit('health');
    if(bot.health <= 0) {
      bot.isAlive = false;
      bot.emit('death');
      bot._client.write('client_command', {payload: 0});
    } else if(bot.health > 0 && !bot.isAlive) {
      bot.isAlive = true;
      bot.emit('spawn');
    }
  });
}

},{}],266:[function(require,module,exports){
var version=require("../version");
var Item = require("prismarine-item")(version);
var assert = require('assert');
var Vec3 = require('vec3').Vec3;
var windows = require('prismarine-windows')(version).windows;

module.exports = inject;


// ms to wait before clicking on a tool so the server can send the new
// damage information
var DIG_CLICK_TIMEOUT = 500;


function inject(bot) {
  var nextActionNumber = 0;
  var windowClickQueue = [];

  // 0-8, null = uninitialized
  // which quick bar slot is selected
  bot.quickBarSlot = null;
  bot.inventory = new windows.InventoryWindow(0, "Inventory", 44);
  bot.currentWindow = null;
  bot.heldItem = null;

  function activateItem() {
    bot._client.write('block_place', {
      location: new Vec3(-1, 255, -1),
      direction: -1,
      heldItem: Item.toNotch(bot.heldItem),
      cursorX: -1,
      cursorY: -1,
      cursorZ: -1
    });
  }

  function deactivateItem() {
    bot._client.write('block_dig', {
      status: 5,
      location: new Vec3(0, 0, 0),
      face: 5
    });
  }


  function putSelectedItemRange(start, end, window, slot, cb) {
    // put the selected item back indow the slot range in window

    // try to put it in an item that already exists and just increase
    // the count.
    tryToJoin();

    function tryToJoin() {
      if(!window.selectedItem) {
        cb();
        return;
      }
      var item = window.findItemRange(start, end, window.selectedItem.type,
        window.selectedItem.metadata, true);
      if(item) {
        clickWindow(item.slot, 0, 0, onClick);
      } else {
        tryToFindEmpty();
      }

      function onClick(err) {
        if(err) {
          cb(err);
        } else {
          tryToJoin();
        }
      }
    }

    function tryToFindEmpty() {
      var emptySlot = window.firstEmptySlotRange(start, end);
      if(emptySlot == null) {
        // if there is still some leftover and slot is not null, click slot
        if(slot == null) {
          tossLeftover();
        } else {
          clickWindow(slot, 0, 0, tossLeftover);
        }
      } else {
        clickWindow(emptySlot, 0, 0, cb);
      }
    }

    function tossLeftover() {
      if(window.selectedItem) {
        clickWindow(-999, 0, 0, cb);
      } else {
        cb();
      }
    }
  }

  function activateBlock(block) {
    // TODO: tell the server that we are not sneaking while doing this
    bot.lookAt(block.position.offset(0.5, 0.5, 0.5),false,function(){
      // swing arm animation
      bot._client.write('arm_animation', {});
      // place block message
      bot._client.write('block_place', {
        location: block.position,
        direction: 1,
        heldItem: Item.toNotch(bot.heldItem),
        cursorX: 8,
        cursorY: 8,
        cursorZ: 8
      });
    });
  }


  function transfer(options, cb) {
    var window = options.window || bot.currentWindow || bot.inventory;
    var itemType = options.itemType;
    var metadata = options.metadata;
    var count = options.count == null ? 1 : options.count;
    cb = cb || noop;
    var firstSourceSlot = null;

    // ranges
    var sourceStart = options.sourceStart;
    var destStart = options.destStart;
    assert.notEqual(sourceStart, null);
    assert.notEqual(destStart, null);
    var sourceEnd = options.sourceEnd == null ? sourceStart + 1 : options.sourceEnd;
    var destEnd = options.destEnd == null ? destStart + 1 : options.destEnd;

    transferOne();

    function transferOne() {
      if(count === 0) {
        putSelectedItemRange(sourceStart, sourceEnd, window, firstSourceSlot, cb);
        return;
      }
      if(!window.selectedItem || window.selectedItem.type !== itemType ||
        (metadata != null && window.selectedItem.metadata !== metadata)) {
        // we are not holding the item we need. click it.
        var sourceItem = window.findItemRange(sourceStart, sourceEnd, itemType, metadata);
        if(!sourceItem) return cb(new Error("missing source item " + itemType + ":" + metadata + " in (" + sourceStart + "," + sourceEnd + ")"));
        if(firstSourceSlot == null) firstSourceSlot = sourceItem.slot;
        // number of item that can be moved from that slot
        var sourceItemCount = sourceItem.count;
        clickWindow(sourceItem.slot, 0, 0, function(err) {
          if(err) {
            cb(err);
          } else {
            clickDest();
          }
        });
      } else {
        clickDest();
      }

      function clickDest() {
        assert.notEqual(window.selectedItem.type, null);
        assert.notEqual(window.selectedItem.metadata, null);
        var destItem, destSlot;
        // special case for tossing
        if(destStart === -999) {
          destSlot = -999;
        } else {
          // find a non full item that we can drop into
          destItem = window.findItemRange(destStart, destEnd,
            window.selectedItem.type, window.selectedItem.metadata, true);
          // if that didn't work find an empty slot to drop into
          destSlot = destItem ? destItem.slot :
            window.firstEmptySlotRange(destStart, destEnd);
          // if that didn't work, give up
          if(destSlot == null) {
            cb(new Error("destination full"));
            return;
          }
        }
        // move the maximum number of item that can be moved
        var destSlotCount = destSlot.count ? destSlot.count : 0;
        var movedItems = Math.min(64 - destSlotCount, sourceItemCount);
        // if the number of item the left click moves is less than the number of item we want to move
        // several at the same time (left click)
        if(movedItems <= count) {
          clickWindow(destSlot, 0, 0, function(err) {
            if(err) {
              cb(err);
            } else {
              // update the number of item that can be moved at the source slot (sourceItemCount)
              sourceItemCount -= movedItems;
              // and the number of item we want to move (count)
              count -= movedItems;
              transferOne();
            }
          });
        }
        // one by one (right click)
        else {
          clickWindow(destSlot, 1, 0, function(err) {
            if(err) {
              cb(err);
            } else {
              count -= 1;
              transferOne();
            }
          });
        }
      }
    }
  }

  function openBlock(block, Class) {
    var session = new Class();
    session.close = close;
    bot.once("windowOpen", onWindowOpen);
    bot.activateBlock(block);
    return session;
    function onWindowOpen(window) {
      if(window.type !== Class.windowType) return;
      session.window = window;
      bot.once("windowClose", onClose);
      bot.on("setSlot:" + window.id, onSetSlot);
      session.emit("open");
    }

    function close() {
      assert.notEqual(session.window, null);
      closeWindow(session.window);
    }

    function onClose() {
      bot.removeListener("setSlot:" + session.window.id, onSetSlot);
      session.window = null;
      session.emit("close");
    }

    function onSetSlot(oldItem, newItem) {
      if(!Item.equal(oldItem, newItem)) {
        session.emit("updateSlot", oldItem, newItem);
      }
    }
  }

  function placeBlock(referenceBlock, faceVector, cb) {
    cb = cb || noop;
    if(!bot.heldItem) cb(new Error("must be holding an item to place a block"));
    bot.lookAt(referenceBlock.position.offset(0.5,0.5,0.5),false,function(){
      // TODO: tell the server that we are sneaking while doing this
      bot._client.write('arm_animation', {});
      var pos = referenceBlock.position;
      bot._client.write('block_place', {
        location: pos,
        direction: vectorToDirection(faceVector),
        heldItem: Item.toNotch(bot.heldItem),
        cursorX: 8,
        cursorY: 8,
        cursorZ: 8
      });
      var dest = pos.plus(faceVector);
      var eventName = "blockUpdate:" + dest;
      bot.on(eventName, onBlockUpdate);
      function onBlockUpdate(oldBlock,newBlock){
        bot.removeListener(eventName, onBlockUpdate);
        if(oldBlock.type === newBlock.type)
          cb(new Error("No block has been placed : the block is still "+oldBlock.name));
        else
          cb();

      }
    });
  }

  function createActionNumber() {
    return nextActionNumber++;
  }


  function updateHeldItem() {
    bot.heldItem = bot.inventory.slots[bot.QUICK_BAR_START + bot.quickBarSlot];
    bot.entity.heldItem = bot.heldItem;
  }

  function closeWindow(window) {
    bot._client.write('close_window', {
      windowId: window.id
    });
    bot.currentWindow = null;
    bot.emit("windowClose", window);
  }

  function confirmTransaction(windowId, actionId, accepted) {
    // drop the queue entries for all the clicks that the server did not send
    // transaction packets for.
    var click = windowClickQueue.shift();
    assert.ok(click.id <= actionId);
    while(actionId > click.id) {
      onAccepted();
      click = windowClickQueue.shift();
    }
    assert.ok(click);

    if(accepted) {
      onAccepted();
    } else {
      onRejected();
    }
    updateHeldItem();

    function onAccepted() {
      var window = windowId === 0 ? bot.inventory : bot.currentWindow;
      if(!window || window.id !== click.windowId) return;
      window.acceptClick(click);
      bot.emit("confirmTransaction" + click.id, true);
    }

    function onRejected() {
      bot._client.write('transaction', {
        windowId: 0,
        action: click.id,
        accepted: false
      });
      bot.emit("confirmTransaction" + click.id, false);
    }
  }

  function clickWindow(slot, mouseButton, mode, cb) {
    // if you click on the quick bar and have dug recently,
    // wait a bit
    if(slot >= bot.QUICK_BAR_START && bot.lastDigTime != null) {
      var timeSinceLastDig = new Date() - bot.lastDigTime;
      if(timeSinceLastDig < DIG_CLICK_TIMEOUT) {
        setTimeout(function() {
          clickWindow(slot, mouseButton, mode, cb);
        }, DIG_CLICK_TIMEOUT - timeSinceLastDig);
        return;
      }
    }
    cb = cb || noop;
    var window = bot.currentWindow || bot.inventory;

    assert.ok(mouseButton === 0 || mouseButton === 1);
    assert.strictEqual(mode, 0);
    var actionId = createActionNumber();

    var click = {
      slot: slot,
      mouseButton: mouseButton,
      mode: mode,
      id: actionId,
      windowId: window.id
    };
    windowClickQueue.push(click);
    bot._client.write('window_click', {
      windowId: window.id,
      slot: slot,
      mouseButton: mouseButton,
      action: actionId,
      mode: mode,
      item: slot === -999 ? {blockId: -1} : Item.toNotch(window.slots[slot])
    });
    bot.once("confirmTransaction" + actionId, function(success) {
      if(success) {
        cb();
      } else {
        cb(new Error("Server rejected transaction."));
      }
    });
    // notchian servers are assholes and only confirm certain transactions.
    if(!window.transactionRequiresConfirmation(click)) {
      // jump the gun and accept the click
      confirmTransaction(window.id, actionId, true);
    }
  }

  function putAway(slot, cb) {
    clickWindow(slot, 0, 0, function(err) {
      if(err) return cb(err);
      var window = bot.currentWindow || bot.inventory;
      var start = window.inventorySlotStart;
      var end = start + windows.INVENTORY_SLOT_COUNT;
      putSelectedItemRange(start, end, window, null, cb);
    });
  }

  function moveSlotItem(sourceSlot, destSlot, cb) {
    clickWindow(sourceSlot, 0, 0, function(err) {
      if(err) return cb(err);
      clickWindow(destSlot, 0, 0, function(err) {
        // if we're holding an item, put it back where the source item was.
        // otherwise we're done.
        if(err) {
          cb(err);
        } else if(bot.inventory.selectedItem) {
          clickWindow(sourceSlot, 0, 0, cb);
        } else {
          cb();
        }
      });
    });
  }

  bot._client.on('transaction', function(packet) {
    // confirm transaction
    confirmTransaction(packet.windowId, packet.action, packet.accepted);
  });

  bot._client.on('held_item_slot', function(packet) {
    // held item change
    bot.quickBarSlot = packet.slot;
    updateHeldItem();
  });
  bot._client.on('open_window', function(packet) {
    // open window
    bot.currentWindow = windows.createWindow(packet.windowId,
      packet.inventoryType, packet.windowTitle, packet.slotCount);
    // don't emit windowOpen until we have the slot data
    var window = bot.currentWindow;
    bot.once("setWindowItems:" + window.id, function() {
      bot.emit("windowOpen", window);
    });
  });
  bot._client.on('close_window', function(packet) {
    // close window
    var oldWindow = bot.currentWindow;
    bot.currentWindow = null;
    bot.emit("windowClose", oldWindow);
  });
  bot._client.on('set_slot', function(packet) {
    // set slot
    var window = packet.windowId === 0 ? bot.inventory : bot.currentWindow;
    if(!window || window.id !== packet.windowId) return;
    var newItem = Item.fromNotch(packet.item);
    var oldItem = window.slots[packet.slot];
    window.updateSlot(packet.slot, newItem);
    updateHeldItem();
    bot.emit("setSlot:" + window.id, oldItem, newItem);
  });
  bot._client.on('window_items', function(packet) {
    // set window items
    var window = packet.windowId === 0 ? bot.inventory : bot.currentWindow;
    if(!window || window.id !== packet.windowId) return;
    var i, item;
    for(i = 0; i < packet.items.length; ++i) {
      item = Item.fromNotch(packet.items[i]);
      window.updateSlot(i, item);
    }
    updateHeldItem();
    bot.emit("setWindowItems:" + window.id);
  });

  bot.activateBlock = activateBlock;
  bot.placeBlock = placeBlock;
  bot.activateItem = activateItem;
  bot.deactivateItem = deactivateItem;

  // not really in the public API
  bot.clickWindow = clickWindow;
  bot.putSelectedItemRange = putSelectedItemRange;
  bot.putAway = putAway;
  bot.closeWindow = closeWindow;
  bot.transfer = transfer;
  bot.openBlock = openBlock;
  bot.moveSlotItem = moveSlotItem;
  bot.updateHeldItem = updateHeldItem;

}

function noop(err) {
  if(err) throw err;
}

function vectorToDirection(v) {
  if(v.y < 0) {
    return 0;
  } else if(v.y > 0) {
    return 1;
  } else if(v.z < 0) {
    return 2;
  } else if(v.z > 0) {
    return 3;
  } else if(v.x < 0) {
    return 4;
  } else if(v.x > 0) {
    return 5;
  }
  assert.ok(false, "invalid direction vector " + v);
}

},{"../version":277,"assert":2,"prismarine-item":376,"prismarine-windows":383,"vec3":410}],267:[function(require,module,exports){
module.exports = inject;

function inject(bot) {
  bot._client.on('kick_disconnect', function(packet) {
    bot.emit('kicked', packet.reason, true);
  });
  bot._client.on('disconnect', function(packet) {
    bot.emit('kicked', packet.reason, false);
  });
  bot.quit = function(reason) {
    reason = reason || 'disconnect.quitting';
    bot._client.end(reason);
  };
}

},{}],268:[function(require,module,exports){
var Vec3 = require('vec3').Vec3;
var assert = require('assert');
var math = require('../math');
var conv = require('../conversions');

module.exports = inject;

var EPSILON = 0.000001
  , PI = Math.PI
  , PI_2 = Math.PI * 2
  , POSITION_UPDATE_INTERVAL_MS = 50
  , PHYSICS_INTERVAL_MS = 50
  , MAX_PHYSICS_DELTA_SECONDS = 0.2
  , WAIT_TIME_BEFORE_NEW_JUMP = 0.3; // good enough so that the player can actually see the bot landing and so the bot doesn't die from "fell from high ground"

function inject(bot) {
  var physics = {
    maxGroundSpeed: 4.27, // according to the internet
    terminalVelocity: 20.0, // guess
    walkingAcceleration: 100.0, // seems good
    gravity: 27.0, // seems good
    groundFriction: 0.9, // seems good
    playerApothem: 0.32, // notch's client F3 says 0.30, but that caused spankings
    playerHeight: 1.74, // tested with a binary search
    jumpSpeed: 9.0, // seems good
    yawSpeed: 3.0, // seems good
    sprintSpeed: 1.3, // correct
  };
  physics.maxGroundSpeedSoulSand=physics.maxGroundSpeed*0.4;

  var controlState = {
    forward: false,
    back: false,
    left: false,
    right: false,
    jump: false,
    sprint: false,
  };
  var jumpQueued = false;
  var lastSentYaw = null;
  var positionUpdateTimer = null;
  var doPhysicsTimer = null;
  var lastPositionSentTime = null;
  var lastPhysicsFrameTime = null;
  var lastFlyingUpdate = 0;

  function doPhysics() {
    var now = new Date();
    var deltaSeconds = (now - lastPhysicsFrameTime) / 1000;
    lastPhysicsFrameTime = now;
    var deltaToUse = deltaSeconds < MAX_PHYSICS_DELTA_SECONDS ?
      deltaSeconds : MAX_PHYSICS_DELTA_SECONDS;
    nextFrame(deltaToUse);
  }

  function cleanup() {
    stopPhysics();
    stopPositionUpdates();
  }

  function stopPositionUpdates() {
    clearInterval(positionUpdateTimer);
    positionUpdateTimer = null;
  }

  function stopPhysics() {
    clearInterval(doPhysicsTimer);
    doPhysicsTimer = null;
  }

  function nextFrame(deltaSeconds) {
    if(deltaSeconds < EPSILON) return; // too fast
    var pos = bot.entity.position;
    var vel = bot.entity.velocity;

    // derive xy movement vector from controls
    var movementRight = 0;
    if(controlState.right) movementRight += 1;
    if(controlState.left) movementRight -= 1;
    var movementForward = 0;
    if(controlState.forward) movementForward += 1;
    if(controlState.back) movementForward -= 1;

    // acceleration is m/s/s
    var acceleration = new Vec3(0, 0, 0);
    if(movementForward || movementRight) {
      // input acceleration
      var rotationFromInput = Math.atan2(-movementRight, movementForward);
      var inputYaw = bot.entity.yaw + rotationFromInput;
      acceleration.x += physics.walkingAcceleration * -Math.sin(inputYaw);
      acceleration.z += physics.walkingAcceleration * -Math.cos(inputYaw);
      if(controlState.sprint) {
        acceleration.x *= physics.sprintSpeed;
        acceleration.z *= physics.sprintSpeed;
      }
    }

    // jumping
    if((controlState.jump || jumpQueued) && bot.entity.onGround && bot.entity.timeSinceOnGround > WAIT_TIME_BEFORE_NEW_JUMP) {
      vel.y = physics.jumpSpeed;
    }
    jumpQueued = false;

    // gravity
    acceleration.y -= physics.gravity;

    var oldGroundSpeedSquared = calcGroundSpeedSquared();
    if(oldGroundSpeedSquared < EPSILON) {
      // stopped
      vel.x = 0;
      vel.z = 0;
    } else {
      // non-zero ground speed
      var oldGroundSpeed = Math.sqrt(oldGroundSpeedSquared);
      var groundFriction = physics.groundFriction * physics.walkingAcceleration;
      // less friction for air
      if(!bot.entity.onGround) groundFriction *= 0.05;
      // if friction would stop the motion, do it
      var maybeNewGroundFriction = oldGroundSpeed / deltaSeconds;
      groundFriction = groundFriction > maybeNewGroundFriction ?
        maybeNewGroundFriction : groundFriction;
      acceleration.x -= vel.x / oldGroundSpeed * groundFriction;
      acceleration.z -= vel.z / oldGroundSpeed * groundFriction;
    }

    // calculate new speed
    vel.add(acceleration.scaled(deltaSeconds));

    // limit speed
    var currentMaxGroundSpeed;
    var underBlock=bot.blockAt(pos.offset(0,-1,0));
    if(underBlock && underBlock.type===88)
      currentMaxGroundSpeed=physics.maxGroundSpeedSoulSand;
    else
      currentMaxGroundSpeed=physics.maxGroundSpeed;

    var groundSpeedSquared = calcGroundSpeedSquared();
    if(groundSpeedSquared > currentMaxGroundSpeed * currentMaxGroundSpeed) {
      var groundSpeed = Math.sqrt(groundSpeedSquared);
      var correctionScale = currentMaxGroundSpeed / groundSpeed;
      vel.x *= correctionScale;
      vel.z *= correctionScale;
    }
    vel.y = math.clamp(-physics.terminalVelocity, vel.y, physics.terminalVelocity);

    // calculate new positions and resolve collisions
    var boundingBox = getBoundingBox();
    var boundingBoxMin, boundingBoxMax;
    if(vel.x !== 0) {
      pos.x += vel.x * deltaSeconds;
      var blockX = Math.floor(pos.x + math.sign(vel.x) * physics.playerApothem);
      boundingBoxMin = new Vec3(blockX, boundingBox.min.y, boundingBox.min.z);
      boundingBoxMax = new Vec3(blockX, boundingBox.max.y, boundingBox.max.z);
      if(collisionInRange(boundingBoxMin, boundingBoxMax)) {
        pos.x = blockX + (vel.x < 0 ? 1 + physics.playerApothem : -physics.playerApothem) * 1.001;
        vel.x = 0;
        boundingBox = getBoundingBox();
      }
    }

    if(vel.z !== 0) {
      pos.z += vel.z * deltaSeconds;
      var blockZ = Math.floor(pos.z + math.sign(vel.z) * physics.playerApothem);
      boundingBoxMin = new Vec3(boundingBox.min.x, boundingBox.min.y, blockZ);
      boundingBoxMax = new Vec3(boundingBox.max.x, boundingBox.max.y, blockZ);
      if(collisionInRange(boundingBoxMin, boundingBoxMax)) {
        pos.z = blockZ + (vel.z < 0 ? 1 + physics.playerApothem : -physics.playerApothem) * 1.001;
        vel.z = 0;
        boundingBox = getBoundingBox();
      }
    }


    bot.entity.onGround = false;
    if(vel.y !== 0) {
      pos.y += vel.y * deltaSeconds;
      var playerHalfHeight = physics.playerHeight / 2;
      var blockY = Math.floor(pos.y + playerHalfHeight + math.sign(vel.y) * playerHalfHeight);
      boundingBoxMin = new Vec3(boundingBox.min.x, blockY, boundingBox.min.z);
      boundingBoxMax = new Vec3(boundingBox.max.x, blockY, boundingBox.max.z);
      if(collisionInRange(boundingBoxMin, boundingBoxMax)) {
        pos.y = blockY + (vel.y < 0 ? 1 : -physics.playerHeight) * 1.001;
        bot.entity.onGround = vel.y < 0 ? true : bot.entity.onGround;
        vel.y = 0;
      }
    }
    if(bot.entity.onGround)
      bot.entity.timeSinceOnGround += deltaSeconds;
    else
      bot.entity.timeSinceOnGround = 0;

  }

  function collisionInRange(boundingBoxMin, boundingBoxMax) {
    var cursor = new Vec3(0, 0, 0);
    var block;
    for(cursor.x = boundingBoxMin.x; cursor.x <= boundingBoxMax.x; cursor.x++) {
      for(cursor.y = boundingBoxMin.y; cursor.y <= boundingBoxMax.y; cursor.y++) {
        for(cursor.z = boundingBoxMin.z; cursor.z <= boundingBoxMax.z; cursor.z++) {
          block = bot.blockAt(cursor);
          if(block && block.boundingBox === 'block') return true;
        }
      }
    }

    return false;
  }

  function calcGroundSpeedSquared() {
    var vel = bot.entity.velocity;
    return vel.x * vel.x + vel.z * vel.z;
  }

  function getBoundingBox() {
    var pos = bot.entity.position;
    return {
      min: new Vec3(
        pos.x - physics.playerApothem,
        pos.y,
        pos.z - physics.playerApothem
      ).floor(),
      max: new Vec3(
        pos.x + physics.playerApothem,
        pos.y + physics.playerHeight,
        pos.z + physics.playerApothem
      ).floor(),
    };
  }

  function sendPositionAndLook(entity) {
    // sends data, no logic
    var packet = {
      x: entity.position.x,
      y: entity.position.y,
      z: entity.position.z,
      onGround: entity.onGround,
    };
    packet.yaw = conv.toNotchianYaw(entity.yaw);
    packet.pitch = conv.toNotchianPitch(entity.pitch);
    bot._client.write('position_look', packet);

    bot.emit('move');
  }

  function sendPosition() {
    // increment the yaw in baby steps so that notchian clients (not the server) can keep up.
    if(typeof bot.entity.height !== 'number' || isNaN(bot.entity.height) || bot.entity.height < 0.1 || bot.entity.height > 1.65) {
      // Sometimes this is NaN, not sure of why, it seems it's set via a position packet
      // Note seems some packets handled by 'position' event do not have a stance. 
      bot.entity.height = 1.62;
    }
    var sentPosition = {
      yaw: bot.entity.yaw % PI_2,
      pitch: bot.entity.pitch,
      position: bot.entity.position,
      velocity: bot.entity.velocity,
      height: bot.entity.height,
      onGround: bot.entity.onGround,
    };
    var deltaYaw = math.euclideanMod(sentPosition.yaw - lastSentYaw, PI_2);
    deltaYaw = deltaYaw < 0 ?
      (deltaYaw < -PI ? deltaYaw + PI_2 : deltaYaw) :
      (deltaYaw > PI ? deltaYaw - PI_2 : deltaYaw);
    var absDeltaYaw = Math.abs(deltaYaw);
    assert.ok(absDeltaYaw < PI + 0.001);

    var now = new Date();
    var deltaMs = now - lastPositionSentTime;
    lastPositionSentTime = now;
    var maxDeltaYaw = deltaMs / 1000 * physics.yawSpeed;
    deltaYaw = absDeltaYaw > maxDeltaYaw ? maxDeltaYaw * math.sign(deltaYaw) : deltaYaw;
    lastSentYaw = (lastSentYaw + deltaYaw) % PI_2;
    sentPosition.yaw = lastSentYaw;

    if(new Date() - lastFlyingUpdate > 1000) {
      // Always send flying messages
      // If you're dead, you're probably on the ground though ...
      if(!bot.isAlive) bot.entity.onGround = true;
      bot._client.write('flying', {onGround: bot.entity.onGround});
      lastFlyingUpdate = new Date();
    }

    // Only send location when alive though
    if(bot.isAlive) {
      sendPositionAndLook(sentPosition);
    }
  }

  bot.physics = physics;

  bot.setControlState = function(control, state) {
    assert.ok(control in controlState, "invalid control: " + control);
    if(controlState[control] === state) return;
    controlState[control] = state;
    if(control === 'jump' && state) {
      jumpQueued = true;
    } else if(control === 'sprint') {
      bot._client.write('entity_action', {
        entityId: bot.entity.id,
        actionId: state ? 3 : 4,
        jumpBoost: 0
      });
    }
  };

  bot.clearControlStates = function() {
    for(var control in controlState) {
      bot.setControlState(control, false);
    }
  };

  function noop(err) {
    if(err) throw err;
  }

  bot.look = function(yaw, pitch, force, cb) {
    var haveCb=cb ? true : false;
    cb = cb || noop;
    bot.entity.yaw = yaw;
    bot.entity.pitch = pitch;
    if(force) lastSentYaw = yaw;
    function checkYaw()
    {
      if(Math.abs((lastSentYaw-yaw)%PI_2)<0.001) {
        bot.removeListener("move", checkYaw);
        cb();
      }
    }
    if(haveCb) bot.on("move",checkYaw);
  };

  bot.lookAt = function(point, force, cb) {
    var delta = point.minus(bot.entity.position.offset(0, bot.entity.height, 0));
    var yaw = Math.atan2(-delta.x, -delta.z);
    var groundDistance = Math.sqrt(delta.x * delta.x + delta.z * delta.z);
    var pitch = Math.atan2(delta.y, groundDistance);
    bot.look(yaw, pitch, force, cb);
  };

  // player position and look
  bot._client.on('position', function(packet) {
    if(positionUpdateTimer == null) {
      // got first 0x0d. start the clocks
      bot.entity.yaw = conv.fromNotchianYaw(packet.yaw);
      bot.entity.pitch = conv.fromNotchianPitch(packet.pitch);
      positionUpdateTimer = setInterval(sendPosition, POSITION_UPDATE_INTERVAL_MS);
    }

    bot.entity.velocity.set(0, 0, 0);
    bot.entity.position.set(packet.x, packet.y, packet.z);

    // Packet 0x08 Player Position And Look, does not send a stance
    if(packet.stance) bot.entity.height = packet.stance - bot.entity.position.y;
    else bot.entity.height = 1.62;

    // apologize to the notchian server by echoing an identical position back
    sendPositionAndLook(bot.entity);

    if(doPhysicsTimer == null) {
      bot.entity.timeSinceOnGround = 0;
      lastSentYaw = math.euclideanMod(bot.entity.yaw, PI_2);
      lastPositionSentTime = new Date();
      lastPhysicsFrameTime = new Date();
      doPhysicsTimer = setInterval(doPhysics, PHYSICS_INTERVAL_MS);
    }
    bot.emit("forcedMove");
  });

  bot.on('mount', stopPhysics);
  bot.on('respawn', stopPhysics);
  bot.on('end', cleanup);
}

},{"../conversions":242,"../math":247,"assert":2,"vec3":410}],269:[function(require,module,exports){
module.exports = inject;

function inject(bot) {
  bot.isRaining = false;
  bot._client.on('game_state_change', function(packet) {
    if(packet.reason === 1) {
      bot.isRaining = true;
      bot.emit('rain');
    } else if(packet.reason === 2) {
      bot.isRaining = false;
      bot.emit('rain');
    }
  });
}

},{}],270:[function(require,module,exports){
var ScoreBoard=require("../scoreboard");

module.exports = inject;

function inject(bot) {
  bot.scoreboards = {};

  bot._client.on('scoreboard_objective', function(packet) {
    var name=packet.name;
    var displayText=packet.displayText;
    var scoreBoard=new ScoreBoard(name);
    scoreBoard.displayText=displayText;
    bot.scoreboards[name]=scoreBoard;

    bot.emit('scoreboardObjective', name, displayText);

  });

  bot._client.on('scoreboard_score', function(packet) {

    var scoreName=packet.scoreName;
    var itemName=packet.itemName;
    var value=packet.value;
    if(!bot.scoreboards[scoreName])
      bot.scoreboards[scoreName] = new ScoreBoard(scoreName);

    var scoreBoard=bot.scoreboards[packet.scoreName];

    if(!scoreBoard.items[itemName])
      scoreBoard.items[itemName]= {};
    scoreBoard.items[itemName]= value;
    
    bot.emit('scoreboardScore', scoreName,itemName, value);

  });

  bot._client.on('scoreboard_display_objective', function(packet) {
    var name=packet["name"];
    var position=packet["position"];

    if(!bot.scoreboards[name])
      bot.scoreboards[name] = new ScoreBoard(name);
    var scoreBoard=bot.scoreboards[name];
    scoreBoard.position= position;

    bot.emit('scoreboardDisplayObjective', name, position);
    
  });

}

},{"../scoreboard":276}],271:[function(require,module,exports){
var assert = require('assert');

module.exports = inject;

var chatToBits = {
  enabled: 0,
  commandsOnly: 1,
  disabled: 2
};

var viewDistanceToBits = {
  'far': 12,
  'normal': 10,
  'short': 8,
  'tiny': 6
};

function inject(bot, options) {
  function setSettings(settings) {
    extend(bot.settings, settings);
    var chatBits = chatToBits[bot.settings.chat];
    assert.ok(chatBits != null, "invalid chat setting: " + bot.settings.chat);
    var viewDistanceBits = viewDistanceToBits[bot.settings.viewDistance];
    assert.ok(viewDistanceBits != null, "invalid view distance setting: " + bot.settings.viewDistance);
    bot.settings.showCape = !!bot.settings.showCape;
    bot._client.write('settings', {
      locale: bot.settings.locale || 'en_US',
      viewDistance: viewDistanceBits,
      chatFlags: chatBits,
      chatColors: bot.settings.colorsEnabled,
      skinParts: 255
    });
  }

  bot.settings = {
    chat: options.chat || 'enabled',
    colorsEnabled: options.colorsEnabled == null ? true : options.colorsEnabled,
    viewDistance: options.viewDistance || 'far',
    difficulty: options.difficulty == null ? 2 : options.difficulty,
    showCape: options.showCape == null ? true : !!options.showCape,
  };

  bot._client.once('login', function() {
    setSettings({});
  });

  bot.setSettings = setSettings;
}

var hasOwn = {}.hasOwnProperty;
function extend(obj, src) {
  for(var key in src) {
    if(hasOwn.call(src, key)) obj[key] = src[key];
  }
  return obj;
}

},{"assert":2}],272:[function(require,module,exports){
(function (process){
var assert = require('assert');
var version=require("../version");
var windows = require('prismarine-windows')(version).windows;

module.exports = inject;

var QUICK_BAR_COUNT = 9;
var QUICK_BAR_START = 36;

var armorSlots = {
  head: 5,
  torso: 6,
  legs: 7,
  feet: 8
};

function noop(err) {
  if(err) throw err;
}

function inject(bot) {
  var nextQuickBarSlot = 0;

  function tossStack(item, cb) {
    cb = cb || noop;
    assert.ok(item);
    bot.clickWindow(item.slot, 0, 0, function(err) {
      if(err) return cb(err);
      bot.clickWindow(-999, 0, 0, cb);
      bot.closeWindow(bot.currentWindow || bot.inventory);
    });
  }

  function toss(itemType, metadata, count, cb) {
    var window = bot.currentWindow || bot.inventory;
    var options = {
      window: window,
      itemType: itemType,
      metadata: metadata,
      count: count,
      sourceStart: window.inventorySlotStart,
      sourceEnd: window.inventorySlotStart + windows.INVENTORY_SLOT_COUNT,
      destStart: -999
    };
    bot.transfer(options, cb);
  }

  function unequip(destination, cb) {
    cb = cb || noop;
    if(destination === 'hand') {
      equipEmpty(cb);
    } else {
      disrobe(destination, cb);
    }
  }


  function setQuickBarSlot(slot) {
    assert.ok(slot >= 0);
    assert.ok(slot < 9);
    if(bot.quickBarSlot === slot) return;
    bot.quickBarSlot = slot;
    bot._client.write('held_item_slot', {
      slotId: slot
    });
    bot.updateHeldItem();
  }

  function equipEmpty(cb) {
    for(var i = 0; i < 9; ++i) {
      if(!bot.inventory.slots[QUICK_BAR_START + i]) {
        setQuickBarSlot(i);
        process.nextTick(cb);
        return;
      }
    }
    var slot = bot.inventory.firstEmptyInventorySlot();
    if(!slot) {
      bot.tossStack(bot.heldItem, cb);
      return;
    }
    var equipSlot = QUICK_BAR_START + bot.quickBarSlot;
    bot.clickWindow(equipSlot, 0, 0, function(err) {
      if(err) return cb(err);
      bot.clickWindow(slot, 0, 0, function(err) {
        if(err) return cb(err);
        if(bot.inventory.selectedItem) {
          bot.clickWindow(-999, 0, 0, cb);
        } else {
          cb();
        }
      });
    });
  }


  function disrobe(destination, cb) {
    assert.equal(bot.currentWindow, null);
    var destSlot = getDestSlot(destination);
    bot.putAway(destSlot, cb);
  }

  function equip(item, destination, cb) {
    cb = cb || noop;
    if(typeof item === 'number') {
      item = bot.inventory.findInventoryItem(item);
    }
    if(item == null || typeof item !== 'object') {
      return cb(new Error('Invalid item object in equip'));
    }
    var sourceSlot = item.slot;
    var destSlot = getDestSlot(destination);

    if(sourceSlot === destSlot) {
      // don't need to do anything
      process.nextTick(cb);
      return;
    }

    if(destSlot >= QUICK_BAR_START && sourceSlot >= QUICK_BAR_START) {
      // all we have to do is change the quick bar selection
      bot.setQuickBarSlot(sourceSlot - QUICK_BAR_START);
      process.nextTick(cb);
      return;
    }

    if(destination !== 'hand') {
      bot.moveSlotItem(sourceSlot, destSlot, cb);
      return;
    }

    // find an empty slot on the quick bar to put the source item in
    destSlot = bot.inventory.firstEmptySlotRange(QUICK_BAR_START, QUICK_BAR_START + QUICK_BAR_COUNT);
    if(destSlot == null) {
      // LRU cache for the quick bar items
      destSlot = QUICK_BAR_START + nextQuickBarSlot;
      nextQuickBarSlot = (nextQuickBarSlot + 1) % QUICK_BAR_COUNT;
    }
    setQuickBarSlot(destSlot - QUICK_BAR_START);
    bot.moveSlotItem(sourceSlot, destSlot, cb);
  }


  function getDestSlot(destination) {
    if(destination === 'hand') {
      return QUICK_BAR_START + bot.quickBarSlot;
    } else {
      var destSlot = armorSlots[destination];
      assert.ok(destSlot != null, "invalid destination: " + destination);
      return destSlot;
    }
  }


  bot.equip = equip;
  bot.unequip = unequip;
  bot.toss = toss;
  bot.tossStack = tossStack;
  bot.setQuickBarSlot = setQuickBarSlot;

  // constants
  bot.QUICK_BAR_START = QUICK_BAR_START;

}
}).call(this,require('_process'))
},{"../version":277,"_process":219,"assert":2,"prismarine-windows":383}],273:[function(require,module,exports){
var Vec3 = require('vec3').Vec3;

module.exports = inject;

function inject(bot) {
  bot._client.on('named_sound_effect', function(packet) {
    var soundName = packet.soundName;
    var pt = new Vec3(packet.x / 8, packet.y / 8, packet.z / 8);
    var volume = packet.volume;
    var pitch = packet.pitch;

    bot.emit('soundEffectHeard', soundName, pt, volume, pitch);
  });
  // TODO: world_particles sound effects
}

},{"vec3":410}],274:[function(require,module,exports){
var Vec3 = require('vec3').Vec3;

module.exports = inject;

function inject(bot) {
  bot.spawnPoint = new Vec3(0, 0, 0);
  bot._client.on('spawn_position', function(packet) {
    bot.spawnPoint = new Vec3(packet.location.x, packet.location.y, packet.location.z);
    bot.emit('game');
  });
}

},{"vec3":410}],275:[function(require,module,exports){
module.exports = inject;

function inject(bot) {
  bot.time = {
    day: null,
    age: null,
  };
  bot._client.on('update_time', function(packet) {
    // for day we ignore the big number since it is always 0
    bot.time.day = longToNumber(packet.time) % 24000;
    bot.time.age = longToNumber(packet.age);
    bot.emit('time');
  });
}

function longToNumber(arr) {
  return arr[1] + 4294967296 * arr[0];
}

},{}],276:[function(require,module,exports){
module.exports = ScoreBoard;

function ScoreBoard(name) {
  this.name=name;
  this.displayText=null;
  this.items={};
  this.position=null;
}

},{}],277:[function(require,module,exports){
module.exports="1.8";
},{}],278:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/create"), __esModule: true };
},{"core-js/library/fn/object/create":288}],279:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/define-property"), __esModule: true };
},{"core-js/library/fn/object/define-property":289}],280:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/get-own-property-descriptor"), __esModule: true };
},{"core-js/library/fn/object/get-own-property-descriptor":290}],281:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/keys"), __esModule: true };
},{"core-js/library/fn/object/keys":291}],282:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/set-prototype-of"), __esModule: true };
},{"core-js/library/fn/object/set-prototype-of":292}],283:[function(require,module,exports){
"use strict";

exports["default"] = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

exports.__esModule = true;
},{}],284:[function(require,module,exports){
"use strict";

var _Object$defineProperty = require("babel-runtime/core-js/object/define-property")["default"];

exports["default"] = (function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;

      _Object$defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
})();

exports.__esModule = true;
},{"babel-runtime/core-js/object/define-property":279}],285:[function(require,module,exports){
"use strict";

var _Object$getOwnPropertyDescriptor = require("babel-runtime/core-js/object/get-own-property-descriptor")["default"];

exports["default"] = function get(_x, _x2, _x3) {
  var _again = true;

  _function: while (_again) {
    var object = _x,
        property = _x2,
        receiver = _x3;
    _again = false;
    if (object === null) object = Function.prototype;

    var desc = _Object$getOwnPropertyDescriptor(object, property);

    if (desc === undefined) {
      var parent = Object.getPrototypeOf(object);

      if (parent === null) {
        return undefined;
      } else {
        _x = parent;
        _x2 = property;
        _x3 = receiver;
        _again = true;
        desc = parent = undefined;
        continue _function;
      }
    } else if ("value" in desc) {
      return desc.value;
    } else {
      var getter = desc.get;

      if (getter === undefined) {
        return undefined;
      }

      return getter.call(receiver);
    }
  }
};

exports.__esModule = true;
},{"babel-runtime/core-js/object/get-own-property-descriptor":280}],286:[function(require,module,exports){
"use strict";

var _Object$create = require("babel-runtime/core-js/object/create")["default"];

var _Object$setPrototypeOf = require("babel-runtime/core-js/object/set-prototype-of")["default"];

exports["default"] = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = _Object$create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _Object$setPrototypeOf ? _Object$setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

exports.__esModule = true;
},{"babel-runtime/core-js/object/create":278,"babel-runtime/core-js/object/set-prototype-of":282}],287:[function(require,module,exports){
"use strict";

exports["default"] = function (obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
};

exports.__esModule = true;
},{}],288:[function(require,module,exports){
var $ = require('../../modules/$');
module.exports = function create(P, D){
  return $.create(P, D);
};
},{"../../modules/$":304}],289:[function(require,module,exports){
var $ = require('../../modules/$');
module.exports = function defineProperty(it, key, desc){
  return $.setDesc(it, key, desc);
};
},{"../../modules/$":304}],290:[function(require,module,exports){
var $ = require('../../modules/$');
require('../../modules/es6.object.get-own-property-descriptor');
module.exports = function getOwnPropertyDescriptor(it, key){
  return $.getDesc(it, key);
};
},{"../../modules/$":304,"../../modules/es6.object.get-own-property-descriptor":309}],291:[function(require,module,exports){
require('../../modules/es6.object.keys');
module.exports = require('../../modules/$.core').Object.keys;
},{"../../modules/$.core":296,"../../modules/es6.object.keys":310}],292:[function(require,module,exports){
require('../../modules/es6.object.set-prototype-of');
module.exports = require('../../modules/$.core').Object.setPrototypeOf;
},{"../../modules/$.core":296,"../../modules/es6.object.set-prototype-of":311}],293:[function(require,module,exports){
module.exports = function(it){
  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
  return it;
};
},{}],294:[function(require,module,exports){
var isObject = require('./$.is-object');
module.exports = function(it){
  if(!isObject(it))throw TypeError(it + ' is not an object!');
  return it;
};
},{"./$.is-object":303}],295:[function(require,module,exports){
var toString = {}.toString;

module.exports = function(it){
  return toString.call(it).slice(8, -1);
};
},{}],296:[function(require,module,exports){
var core = module.exports = {version: '1.2.6'};
if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
},{}],297:[function(require,module,exports){
// optional / simple context binding
var aFunction = require('./$.a-function');
module.exports = function(fn, that, length){
  aFunction(fn);
  if(that === undefined)return fn;
  switch(length){
    case 1: return function(a){
      return fn.call(that, a);
    };
    case 2: return function(a, b){
      return fn.call(that, a, b);
    };
    case 3: return function(a, b, c){
      return fn.call(that, a, b, c);
    };
  }
  return function(/* ...args */){
    return fn.apply(that, arguments);
  };
};
},{"./$.a-function":293}],298:[function(require,module,exports){
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function(it){
  if(it == undefined)throw TypeError("Can't call method on  " + it);
  return it;
};
},{}],299:[function(require,module,exports){
var global    = require('./$.global')
  , core      = require('./$.core')
  , ctx       = require('./$.ctx')
  , PROTOTYPE = 'prototype';

var $export = function(type, name, source){
  var IS_FORCED = type & $export.F
    , IS_GLOBAL = type & $export.G
    , IS_STATIC = type & $export.S
    , IS_PROTO  = type & $export.P
    , IS_BIND   = type & $export.B
    , IS_WRAP   = type & $export.W
    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
    , key, own, out;
  if(IS_GLOBAL)source = name;
  for(key in source){
    // contains in native
    own = !IS_FORCED && target && key in target;
    if(own && key in exports)continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function(C){
      var F = function(param){
        return this instanceof C ? new C(param) : C(param);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    if(IS_PROTO)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;
  }
};
// type bitmap
$export.F = 1;  // forced
$export.G = 2;  // global
$export.S = 4;  // static
$export.P = 8;  // proto
$export.B = 16; // bind
$export.W = 32; // wrap
module.exports = $export;
},{"./$.core":296,"./$.ctx":297,"./$.global":301}],300:[function(require,module,exports){
module.exports = function(exec){
  try {
    return !!exec();
  } catch(e){
    return true;
  }
};
},{}],301:[function(require,module,exports){
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
},{}],302:[function(require,module,exports){
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = require('./$.cof');
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
  return cof(it) == 'String' ? it.split('') : Object(it);
};
},{"./$.cof":295}],303:[function(require,module,exports){
module.exports = function(it){
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};
},{}],304:[function(require,module,exports){
var $Object = Object;
module.exports = {
  create:     $Object.create,
  getProto:   $Object.getPrototypeOf,
  isEnum:     {}.propertyIsEnumerable,
  getDesc:    $Object.getOwnPropertyDescriptor,
  setDesc:    $Object.defineProperty,
  setDescs:   $Object.defineProperties,
  getKeys:    $Object.keys,
  getNames:   $Object.getOwnPropertyNames,
  getSymbols: $Object.getOwnPropertySymbols,
  each:       [].forEach
};
},{}],305:[function(require,module,exports){
// most Object methods by ES6 should accept primitives
var $export = require('./$.export')
  , core    = require('./$.core')
  , fails   = require('./$.fails');
module.exports = function(KEY, exec){
  var fn  = (core.Object || {})[KEY] || Object[KEY]
    , exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
};
},{"./$.core":296,"./$.export":299,"./$.fails":300}],306:[function(require,module,exports){
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var getDesc  = require('./$').getDesc
  , isObject = require('./$.is-object')
  , anObject = require('./$.an-object');
var check = function(O, proto){
  anObject(O);
  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function(test, buggy, set){
      try {
        set = require('./$.ctx')(Function.call, getDesc(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch(e){ buggy = true; }
      return function setPrototypeOf(O, proto){
        check(O, proto);
        if(buggy)O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};
},{"./$":304,"./$.an-object":294,"./$.ctx":297,"./$.is-object":303}],307:[function(require,module,exports){
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = require('./$.iobject')
  , defined = require('./$.defined');
module.exports = function(it){
  return IObject(defined(it));
};
},{"./$.defined":298,"./$.iobject":302}],308:[function(require,module,exports){
// 7.1.13 ToObject(argument)
var defined = require('./$.defined');
module.exports = function(it){
  return Object(defined(it));
};
},{"./$.defined":298}],309:[function(require,module,exports){
// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject = require('./$.to-iobject');

require('./$.object-sap')('getOwnPropertyDescriptor', function($getOwnPropertyDescriptor){
  return function getOwnPropertyDescriptor(it, key){
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});
},{"./$.object-sap":305,"./$.to-iobject":307}],310:[function(require,module,exports){
// 19.1.2.14 Object.keys(O)
var toObject = require('./$.to-object');

require('./$.object-sap')('keys', function($keys){
  return function keys(it){
    return $keys(toObject(it));
  };
});
},{"./$.object-sap":305,"./$.to-object":308}],311:[function(require,module,exports){
// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = require('./$.export');
$export($export.S, 'Object', {setPrototypeOf: require('./$.set-proto').set});
},{"./$.export":299,"./$.set-proto":306}],312:[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":require("../../../../../../.nvm/versions/node/v4.2.4/lib/node_modules/browserify/node_modules/insert-module-globals/node_modules/is-buffer/index.js")})
},{"../../../../../../.nvm/versions/node/v4.2.4/lib/node_modules/browserify/node_modules/insert-module-globals/node_modules/is-buffer/index.js":215}],313:[function(require,module,exports){
arguments[4][214][0].apply(exports,arguments)
},{"dup":214}],314:[function(require,module,exports){
arguments[4][216][0].apply(exports,arguments)
},{"dup":216}],315:[function(require,module,exports){
/**
 * lodash 3.3.1 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern modularize exports="npm" -o ./`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */
var baseIsEqual = require('lodash._baseisequal'),
    bindCallback = require('lodash._bindcallback'),
    isArray = require('lodash.isarray'),
    pairs = require('lodash.pairs');

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/,
    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `value` to a string if it's not one. An empty string is returned
 * for `null` or `undefined` values.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  return value == null ? '' : (value + '');
}

/**
 * The base implementation of `_.callback` which supports specifying the
 * number of arguments to provide to `func`.
 *
 * @private
 * @param {*} [func=_.identity] The value to convert to a callback.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {number} [argCount] The number of arguments to provide to `func`.
 * @returns {Function} Returns the callback.
 */
function baseCallback(func, thisArg, argCount) {
  var type = typeof func;
  if (type == 'function') {
    return thisArg === undefined
      ? func
      : bindCallback(func, thisArg, argCount);
  }
  if (func == null) {
    return identity;
  }
  if (type == 'object') {
    return baseMatches(func);
  }
  return thisArg === undefined
    ? property(func)
    : baseMatchesProperty(func, thisArg);
}

/**
 * The base implementation of `get` without support for string paths
 * and default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} path The path of the property to get.
 * @param {string} [pathKey] The key representation of path.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path, pathKey) {
  if (object == null) {
    return;
  }
  if (pathKey !== undefined && pathKey in toObject(object)) {
    path = [pathKey];
  }
  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[path[index++]];
  }
  return (index && index == length) ? object : undefined;
}

/**
 * The base implementation of `_.isMatch` without support for callback
 * shorthands and `this` binding.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Array} matchData The propery names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparing objects.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = toObject(object);
  while (index--) {
    var data = matchData[index];
    if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
        ) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var result = customizer ? customizer(objValue, srcValue, key) : undefined;
      if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {
        return false;
      }
    }
  }
  return true;
}

/**
 * The base implementation of `_.matches` which does not clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new function.
 */
function baseMatches(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    var key = matchData[0][0],
        value = matchData[0][1];

    return function(object) {
      if (object == null) {
        return false;
      }
      return object[key] === value && (value !== undefined || (key in toObject(object)));
    };
  }
  return function(object) {
    return baseIsMatch(object, matchData);
  };
}

/**
 * The base implementation of `_.matchesProperty` which does not clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to compare.
 * @returns {Function} Returns the new function.
 */
function baseMatchesProperty(path, srcValue) {
  var isArr = isArray(path),
      isCommon = isKey(path) && isStrictComparable(srcValue),
      pathKey = (path + '');

  path = toPath(path);
  return function(object) {
    if (object == null) {
      return false;
    }
    var key = pathKey;
    object = toObject(object);
    if ((isArr || !isCommon) && !(key in object)) {
      object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
      if (object == null) {
        return false;
      }
      key = last(path);
      object = toObject(object);
    }
    return object[key] === srcValue
      ? (srcValue !== undefined || (key in object))
      : baseIsEqual(srcValue, object[key], undefined, true);
  };
}

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new function.
 */
function basePropertyDeep(path) {
  var pathKey = (path + '');
  path = toPath(path);
  return function(object) {
    return baseGet(object, path, pathKey);
  };
}

/**
 * The base implementation of `_.slice` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */
function baseSlice(array, start, end) {
  var index = -1,
      length = array.length;

  start = start == null ? 0 : (+start || 0);
  if (start < 0) {
    start = -start > length ? 0 : (length + start);
  }
  end = (end === undefined || end > length) ? length : (+end || 0);
  if (end < 0) {
    end += length;
  }
  length = start > end ? 0 : ((end - start) >>> 0);
  start >>>= 0;

  var result = Array(length);
  while (++index < length) {
    result[index] = array[index + start];
  }
  return result;
}

/**
 * Gets the propery names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
  var result = pairs(object),
      length = result.length;

  while (length--) {
    result[length][2] = isStrictComparable(result[length][1]);
  }
  return result;
}

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  var type = typeof value;
  if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {
    return true;
  }
  if (isArray(value)) {
    return false;
  }
  var result = !reIsDeepProp.test(value);
  return result || (object != null && value in toObject(object));
}

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !isObject(value);
}

/**
 * Converts `value` to an object if it's not one.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {Object} Returns the object.
 */
function toObject(value) {
  return isObject(value) ? value : Object(value);
}

/**
 * Converts `value` to property path array if it's not one.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {Array} Returns the property path array.
 */
function toPath(value) {
  if (isArray(value)) {
    return value;
  }
  var result = [];
  baseToString(value).replace(rePropName, function(match, number, quote, string) {
    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
}

/**
 * Gets the last element of `array`.
 *
 * @static
 * @memberOf _
 * @category Array
 * @param {Array} array The array to query.
 * @returns {*} Returns the last element of `array`.
 * @example
 *
 * _.last([1, 2, 3]);
 * // => 3
 */
function last(array) {
  var length = array ? array.length : 0;
  return length ? array[length - 1] : undefined;
}

/**
 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(1);
 * // => false
 */
function isObject(value) {
  // Avoid a V8 JIT bug in Chrome 19-20.
  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * This method returns the first argument provided to it.
 *
 * @static
 * @memberOf _
 * @category Utility
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'user': 'fred' };
 *
 * _.identity(object) === object;
 * // => true
 */
function identity(value) {
  return value;
}

/**
 * Creates a function that returns the property value at `path` on a
 * given object.
 *
 * @static
 * @memberOf _
 * @category Utility
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': { 'c': 2 } } },
 *   { 'a': { 'b': { 'c': 1 } } }
 * ];
 *
 * _.map(objects, _.property('a.b.c'));
 * // => [2, 1]
 *
 * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
 * // => [1, 2]
 */
function property(path) {
  return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
}

module.exports = baseCallback;

},{"lodash._baseisequal":317,"lodash._bindcallback":319,"lodash.isarray":322,"lodash.pairs":325}],316:[function(require,module,exports){
/**
 * lodash 3.0.4 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern modularize exports="npm" -o ./`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */
var keys = require('lodash.keys');

/**
 * Used as the [maximum length](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.max_safe_integer)
 * of an array-like value.
 */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * The base implementation of `_.forEach` without support for callback
 * shorthands and `this` binding.
 *
 * @private
 * @param {Array|Object|string} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object|string} Returns `collection`.
 */
var baseEach = createBaseEach(baseForOwn);

/**
 * The base implementation of `baseForIn` and `baseForOwn` which iterates
 * over `object` properties returned by `keysFunc` invoking `iteratee` for
 * each property. Iteratee functions may exit iteration early by explicitly
 * returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

/**
 * The base implementation of `_.forOwn` without support for callback
 * shorthands and `this` binding.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return baseFor(object, iteratee, keys);
}

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseEach(eachFunc, fromRight) {
  return function(collection, iteratee) {
    var length = collection ? getLength(collection) : 0;
    if (!isLength(length)) {
      return eachFunc(collection, iteratee);
    }
    var index = fromRight ? length : -1,
        iterable = toObject(collection);

    while ((fromRight ? index-- : ++index < length)) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}

/**
 * Creates a base function for `_.forIn` or `_.forInRight`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var iterable = toObject(object),
        props = keysFunc(object),
        length = props.length,
        index = fromRight ? length : -1;

    while ((fromRight ? index-- : ++index < length)) {
      var key = props[index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

/**
 * Gets the "length" property value of `object`.
 *
 * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
 * that affects Safari on at least iOS 8.1-8.3 ARM64.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {*} Returns the "length" value.
 */
var getLength = baseProperty('length');

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This function is based on [`ToLength`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength).
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 */
function isLength(value) {
  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Converts `value` to an object if it's not one.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {Object} Returns the object.
 */
function toObject(value) {
  return isObject(value) ? value : Object(value);
}

/**
 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(1);
 * // => false
 */
function isObject(value) {
  // Avoid a V8 JIT bug in Chrome 19-20.
  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

module.exports = baseEach;

},{"lodash.keys":324}],317:[function(require,module,exports){
/**
 * lodash 3.0.7 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern modularize exports="npm" -o ./`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */
var isArray = require('lodash.isarray'),
    isTypedArray = require('lodash.istypedarray'),
    keys = require('lodash.keys');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    stringTag = '[object String]';

/**
 * Checks if `value` is object-like.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/** Used for native method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the [`toStringTag`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.prototype.tostring)
 * of values.
 */
var objToString = objectProto.toString;

/**
 * A specialized version of `_.some` for arrays without support for callback
 * shorthands and `this` binding.
 *
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

/**
 * The base implementation of `_.isEqual` without support for `this` binding
 * `customizer` functions.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {Function} [customizer] The function to customize comparing values.
 * @param {boolean} [isLoose] Specify performing partial comparisons.
 * @param {Array} [stackA] Tracks traversed `value` objects.
 * @param {Array} [stackB] Tracks traversed `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
}

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} [customizer] The function to customize comparing objects.
 * @param {boolean} [isLoose] Specify performing partial comparisons.
 * @param {Array} [stackA=[]] Tracks traversed `value` objects.
 * @param {Array} [stackB=[]] Tracks traversed `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = arrayTag,
      othTag = arrayTag;

  if (!objIsArr) {
    objTag = objToString.call(object);
    if (objTag == argsTag) {
      objTag = objectTag;
    } else if (objTag != objectTag) {
      objIsArr = isTypedArray(object);
    }
  }
  if (!othIsArr) {
    othTag = objToString.call(other);
    if (othTag == argsTag) {
      othTag = objectTag;
    } else if (othTag != objectTag) {
      othIsArr = isTypedArray(other);
    }
  }
  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && !(objIsArr || objIsObj)) {
    return equalByTag(object, other, objTag);
  }
  if (!isLoose) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
    }
  }
  if (!isSameTag) {
    return false;
  }
  // Assume cyclic values are equal.
  // For more information on detecting circular references see https://es5.github.io/#JO.
  stackA || (stackA = []);
  stackB || (stackB = []);

  var length = stackA.length;
  while (length--) {
    if (stackA[length] == object) {
      return stackB[length] == other;
    }
  }
  // Add `object` and `other` to the stack of traversed objects.
  stackA.push(object);
  stackB.push(other);

  var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);

  stackA.pop();
  stackB.pop();

  return result;
}

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} [customizer] The function to customize comparing arrays.
 * @param {boolean} [isLoose] Specify performing partial comparisons.
 * @param {Array} [stackA] Tracks traversed `value` objects.
 * @param {Array} [stackB] Tracks traversed `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
  var index = -1,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
    return false;
  }
  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index],
        result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;

    if (result !== undefined) {
      if (result) {
        continue;
      }
      return false;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (isLoose) {
      if (!arraySome(other, function(othValue) {
            return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
          })) {
        return false;
      }
    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {
      return false;
    }
  }
  return true;
}

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} value The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag) {
  switch (tag) {
    case boolTag:
    case dateTag:
      // Coerce dates and booleans to numbers, dates to milliseconds and booleans
      // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
      return +object == +other;

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case numberTag:
      // Treat `NaN` vs. `NaN` as equal.
      return (object != +object)
        ? other != +other
        : object == +other;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings primitives and string
      // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
      return object == (other + '');
  }
  return false;
}

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} [customizer] The function to customize comparing values.
 * @param {boolean} [isLoose] Specify performing partial comparisons.
 * @param {Array} [stackA] Tracks traversed `value` objects.
 * @param {Array} [stackB] Tracks traversed `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
  var objProps = keys(object),
      objLength = objProps.length,
      othProps = keys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isLoose) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  var skipCtor = isLoose;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key],
        result = customizer ? customizer(isLoose ? othValue : objValue, isLoose? objValue : othValue, key) : undefined;

    // Recursively compare objects (susceptible to call stack limits).
    if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {
      return false;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (!skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      return false;
    }
  }
  return true;
}

/**
 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(1);
 * // => false
 */
function isObject(value) {
  // Avoid a V8 JIT bug in Chrome 19-20.
  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

module.exports = baseIsEqual;

},{"lodash.isarray":322,"lodash.istypedarray":323,"lodash.keys":324}],318:[function(require,module,exports){
/**
 * lodash 3.0.2 (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

/**
 * The base implementation of `_.reduce` and `_.reduceRight`, without support
 * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} accumulator The initial value.
 * @param {boolean} initAccum Specify using the first or last element of `collection` as the initial value.
 * @param {Function} eachFunc The function to iterate over `collection`.
 * @returns {*} Returns the accumulated value.
 */
function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
  eachFunc(collection, function(value, index, collection) {
    accumulator = initAccum
      ? (initAccum = false, value)
      : iteratee(accumulator, value, index, collection);
  });
  return accumulator;
}

module.exports = baseReduce;

},{}],319:[function(require,module,exports){
/**
 * lodash 3.0.1 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern modularize exports="npm" -o ./`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

/**
 * A specialized version of `baseCallback` which only supports `this` binding
 * and specifying the number of arguments to provide to `func`.
 *
 * @private
 * @param {Function} func The function to bind.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {number} [argCount] The number of arguments to provide to `func`.
 * @returns {Function} Returns the callback.
 */
function bindCallback(func, thisArg, argCount) {
  if (typeof func != 'function') {
    return identity;
  }
  if (thisArg === undefined) {
    return func;
  }
  switch (argCount) {
    case 1: return function(value) {
      return func.call(thisArg, value);
    };
    case 3: return function(value, index, collection) {
      return func.call(thisArg, value, index, collection);
    };
    case 4: return function(accumulator, value, index, collection) {
      return func.call(thisArg, accumulator, value, index, collection);
    };
    case 5: return function(value, other, key, object, source) {
      return func.call(thisArg, value, other, key, object, source);
    };
  }
  return function() {
    return func.apply(thisArg, arguments);
  };
}

/**
 * This method returns the first argument provided to it.
 *
 * @static
 * @memberOf _
 * @category Utility
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'user': 'fred' };
 *
 * _.identity(object) === object;
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = bindCallback;

},{}],320:[function(require,module,exports){
/**
 * lodash 3.9.1 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern modularize exports="npm" -o ./`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

/** `Object#toString` result references. */
var funcTag = '[object Function]';

/** Used to detect host constructors (Safari > 5). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/**
 * Checks if `value` is object-like.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/** Used for native method references. */
var objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var fnToString = Function.prototype.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objToString = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = object == null ? undefined : object[key];
  return isNative(value) ? value : undefined;
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in older versions of Chrome and Safari which return 'function' for regexes
  // and Safari 8 equivalents which return 'object' for typed array constructors.
  return isObject(value) && objToString.call(value) == funcTag;
}

/**
 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(1);
 * // => false
 */
function isObject(value) {
  // Avoid a V8 JIT bug in Chrome 19-20.
  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is a native function.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
 * @example
 *
 * _.isNative(Array.prototype.push);
 * // => true
 *
 * _.isNative(_);
 * // => false
 */
function isNative(value) {
  if (value == null) {
    return false;
  }
  if (isFunction(value)) {
    return reIsNative.test(fnToString.call(value));
  }
  return isObjectLike(value) && reIsHostCtor.test(value);
}

module.exports = getNative;

},{}],321:[function(require,module,exports){
/**
 * lodash 3.0.6 (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

/**
 * Gets the "length" property value of `object`.
 *
 * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
 * that affects Safari on at least iOS 8.1-8.3 ARM64.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {*} Returns the "length" value.
 */
var getLength = baseProperty('length');

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments(value) {
  // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.
  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @type Function
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null &&
    !(typeof value == 'function' && isFunction(value)) && isLength(getLength(value));
}

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @type Function
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object, else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8 which returns 'object' for typed array constructors, and
  // PhantomJS 1.9 which returns 'function' for `NodeList` instances.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This function is loosely based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

module.exports = isArguments;

},{}],322:[function(require,module,exports){
/**
 * lodash 3.0.4 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern modularize exports="npm" -o ./`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

/** `Object#toString` result references. */
var arrayTag = '[object Array]',
    funcTag = '[object Function]';

/** Used to detect host constructors (Safari > 5). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/**
 * Checks if `value` is object-like.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/** Used for native method references. */
var objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var fnToString = Function.prototype.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objToString = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/* Native method references for those with the same name as other `lodash` methods. */
var nativeIsArray = getNative(Array, 'isArray');

/**
 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
 * of an array-like value.
 */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = object == null ? undefined : object[key];
  return isNative(value) ? value : undefined;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 */
function isLength(value) {
  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(function() { return arguments; }());
 * // => false
 */
var isArray = nativeIsArray || function(value) {
  return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
};

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in older versions of Chrome and Safari which return 'function' for regexes
  // and Safari 8 equivalents which return 'object' for typed array constructors.
  return isObject(value) && objToString.call(value) == funcTag;
}

/**
 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(1);
 * // => false
 */
function isObject(value) {
  // Avoid a V8 JIT bug in Chrome 19-20.
  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is a native function.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
 * @example
 *
 * _.isNative(Array.prototype.push);
 * // => true
 *
 * _.isNative(_);
 * // => false
 */
function isNative(value) {
  if (value == null) {
    return false;
  }
  if (isFunction(value)) {
    return reIsNative.test(fnToString.call(value));
  }
  return isObjectLike(value) && reIsHostCtor.test(value);
}

module.exports = isArray;

},{}],323:[function(require,module,exports){
/**
 * lodash 3.0.4 (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dateTag] = typedArrayTags[errorTag] =
typedArrayTags[funcTag] = typedArrayTags[mapTag] =
typedArrayTags[numberTag] = typedArrayTags[objectTag] =
typedArrayTags[regexpTag] = typedArrayTags[setTag] =
typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This function is loosely based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
function isTypedArray(value) {
  return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
}

module.exports = isTypedArray;

},{}],324:[function(require,module,exports){
/**
 * lodash 3.1.2 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern modularize exports="npm" -o ./`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */
var getNative = require('lodash._getnative'),
    isArguments = require('lodash.isarguments'),
    isArray = require('lodash.isarray');

/** Used to detect unsigned integer values. */
var reIsUint = /^\d+$/;

/** Used for native method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/* Native method references for those with the same name as other `lodash` methods. */
var nativeKeys = getNative(Object, 'keys');

/**
 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
 * of an array-like value.
 */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

/**
 * Gets the "length" property value of `object`.
 *
 * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
 * that affects Safari on at least iOS 8.1-8.3 ARM64.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {*} Returns the "length" value.
 */
var getLength = baseProperty('length');

/**
 * Checks if `value` is array-like.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 */
function isArrayLike(value) {
  return value != null && isLength(getLength(value));
}

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
  length = length == null ? MAX_SAFE_INTEGER : length;
  return value > -1 && value % 1 == 0 && value < length;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 */
function isLength(value) {
  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * A fallback implementation of `Object.keys` which creates an array of the
 * own enumerable property names of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function shimKeys(object) {
  var props = keysIn(object),
      propsLength = props.length,
      length = propsLength && object.length;

  var allowIndexes = !!length && isLength(length) &&
    (isArray(object) || isArguments(object));

  var index = -1,
      result = [];

  while (++index < propsLength) {
    var key = props[index];
    if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(1);
 * // => false
 */
function isObject(value) {
  // Avoid a V8 JIT bug in Chrome 19-20.
  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
var keys = !nativeKeys ? shimKeys : function(object) {
  var Ctor = object == null ? undefined : object.constructor;
  if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
      (typeof object != 'function' && isArrayLike(object))) {
    return shimKeys(object);
  }
  return isObject(object) ? nativeKeys(object) : [];
};

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn(object) {
  if (object == null) {
    return [];
  }
  if (!isObject(object)) {
    object = Object(object);
  }
  var length = object.length;
  length = (length && isLength(length) &&
    (isArray(object) || isArguments(object)) && length) || 0;

  var Ctor = object.constructor,
      index = -1,
      isProto = typeof Ctor == 'function' && Ctor.prototype === object,
      result = Array(length),
      skipIndexes = length > 0;

  while (++index < length) {
    result[index] = (index + '');
  }
  for (var key in object) {
    if (!(skipIndexes && isIndex(key, length)) &&
        !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = keys;

},{"lodash._getnative":320,"lodash.isarguments":321,"lodash.isarray":322}],325:[function(require,module,exports){
/**
 * lodash 3.0.1 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern modularize exports="npm" -o ./`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */
var keys = require('lodash.keys');

/**
 * Converts `value` to an object if it's not one.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {Object} Returns the object.
 */
function toObject(value) {
  return isObject(value) ? value : Object(value);
}

/**
 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(1);
 * // => false
 */
function isObject(value) {
  // Avoid a V8 JIT bug in Chrome 19-20.
  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Creates a two dimensional array of the key-value pairs for `object`,
 * e.g. `[[key1, value1], [key2, value2]]`.
 *
 * @static
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the new array of key-value pairs.
 * @example
 *
 * _.pairs({ 'barney': 36, 'fred': 40 });
 * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
 */
function pairs(object) {
  object = toObject(object);

  var index = -1,
      props = keys(object),
      length = props.length,
      result = Array(length);

  while (++index < length) {
    var key = props[index];
    result[index] = [key, object[key]];
  }
  return result;
}

module.exports = pairs;

},{"lodash.keys":324}],326:[function(require,module,exports){
/**
 * lodash 3.1.2 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern modularize exports="npm" -o ./`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */
var baseCallback = require('lodash._basecallback'),
    baseEach = require('lodash._baseeach'),
    baseReduce = require('lodash._basereduce'),
    isArray = require('lodash.isarray');

/**
 * A specialized version of `_.reduce` for arrays without support for callback
 * shorthands and `this` binding.
 *
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initFromArray] Specify using the first element of `array`
 *  as the initial value.
 * @returns {*} Returns the accumulated value.
 */
function arrayReduce(array, iteratee, accumulator, initFromArray) {
  var index = -1,
      length = array.length;

  if (initFromArray && length) {
    accumulator = array[++index];
  }
  while (++index < length) {
    accumulator = iteratee(accumulator, array[index], index, array);
  }
  return accumulator;
}

/**
 * Creates a function for `_.reduce` or `_.reduceRight`.
 *
 * @private
 * @param {Function} arrayFunc The function to iterate over an array.
 * @param {Function} eachFunc The function to iterate over a collection.
 * @returns {Function} Returns the new each function.
 */
function createReduce(arrayFunc, eachFunc) {
  return function(collection, iteratee, accumulator, thisArg) {
    var initFromArray = arguments.length < 3;
    return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
      ? arrayFunc(collection, iteratee, accumulator, initFromArray)
      : baseReduce(collection, baseCallback(iteratee, thisArg, 4), accumulator, initFromArray, eachFunc);
  };
}

/**
 * Reduces `collection` to a value which is the accumulated result of running
 * each element in `collection` through `iteratee`, where each successive
 * invocation is supplied the return value of the previous. If `accumulator`
 * is not provided the first element of `collection` is used as the initial
 * value. The `iteratee` is bound to `thisArg` and invoked with four arguments:
 * (accumulator, value, index|key, collection).
 *
 * Many lodash methods are guarded to work as iteratees for methods like
 * `_.reduce`, `_.reduceRight`, and `_.transform`.
 *
 * The guarded methods are:
 * `assign`, `defaults`, `includes`, `merge`, `sortByAll`, and `sortByOrder`
 *
 * @static
 * @memberOf _
 * @alias foldl, inject
 * @category Collection
 * @param {Array|Object|string} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {*} [thisArg] The `this` binding of `iteratee`.
 * @returns {*} Returns the accumulated value.
 * @example
 *
 * _.reduce([1, 2], function(total, n) {
 *   return total + n;
 * });
 * // => 3
 *
 * _.reduce({ 'a': 1, 'b': 2 }, function(result, n, key) {
 *   result[key] = n * 3;
 *   return result;
 * }, {});
 * // => { 'a': 3, 'b': 6 } (iteration order is not guaranteed)
 */
var reduce = createReduce(arrayReduce, baseEach);

module.exports = reduce;

},{"lodash._basecallback":315,"lodash._baseeach":316,"lodash._basereduce":318,"lodash.isarray":322}],327:[function(require,module,exports){
(function (global){
/**
 * @license
 * lodash 4.3.0 (Custom Build) <https://lodash.com/>
 * Build: `lodash -d -o ./foo/lodash.js`
 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.3.0';

  /** Used to compose bitmasks for wrapper metadata. */
  var BIND_FLAG = 1,
      BIND_KEY_FLAG = 2,
      CURRY_BOUND_FLAG = 4,
      CURRY_FLAG = 8,
      CURRY_RIGHT_FLAG = 16,
      PARTIAL_FLAG = 32,
      PARTIAL_RIGHT_FLAG = 64,
      ARY_FLAG = 128,
      REARG_FLAG = 256,
      FLIP_FLAG = 512;

  /** Used to compose bitmasks for comparison styles. */
  var UNORDERED_COMPARE_FLAG = 1,
      PARTIAL_COMPARE_FLAG = 2;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 150,
      HOT_SPAN = 16;

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as the `TypeError` message for "Functions" methods. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
      reUnescapedHtml = /[&<>"'`]/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]/g;

  /** Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns). */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect hexadecimal string values. */
  var reHasHexPrefix = /^0x/i;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari > 5). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23',
      rsComboSymbolsRange = '\\u20d0-\\u20f0',
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsQuoteRange = '\\u2018\\u2019\\u201c\\u201d',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsQuoteRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',
      rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reComplexSymbol = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasComplexSymbol = RegExp('[' + rsZWJ + rsAstralRange  + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');

  /** Used to match non-compound words composed of alphanumeric characters. */
  var reBasicWord = /[a-zA-Z0-9]+/g;

  /** Used to match complex or compound words. */
  var reComplexWord = RegExp([
    rsUpper + '?' + rsLower + '+(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsUpperMisc + '+(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')',
    rsUpper + '?' + rsLowerMisc + '+',
    rsUpper + '+',
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasComplexWord = /[a-z][A-Z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Reflect', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap', '_',
    'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dateTag] = typedArrayTags[errorTag] =
  typedArrayTags[funcTag] = typedArrayTags[mapTag] =
  typedArrayTags[numberTag] = typedArrayTags[objectTag] =
  typedArrayTags[regexpTag] = typedArrayTags[setTag] =
  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
  cloneableTags[dateTag] = cloneableTags[float32Tag] =
  cloneableTags[float64Tag] = cloneableTags[int8Tag] =
  cloneableTags[int16Tag] = cloneableTags[int32Tag] =
  cloneableTags[mapTag] = cloneableTags[numberTag] =
  cloneableTags[objectTag] = cloneableTags[regexpTag] =
  cloneableTags[setTag] = cloneableTags[stringTag] =
  cloneableTags[symbolTag] = cloneableTags[uint8Tag] =
  cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] =
  cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map latin-1 supplementary letters to basic latin letters. */
  var deburredLetters = {
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;',
    '`': '&#96;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'",
    '&#96;': '`'
  };

  /** Used to determine if values are of the language type `Object`. */
  var objectTypes = {
    'function': true,
    'object': true
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `exports`. */
  var freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType) ? exports : null;

  /** Detect free variable `module`. */
  var freeModule = (objectTypes[typeof module] && module && !module.nodeType) ? module : null;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = checkGlobal(freeExports && freeModule && typeof global == 'object' && global);

  /** Detect free variable `self`. */
  var freeSelf = checkGlobal(objectTypes[typeof self] && self);

  /** Detect free variable `window`. */
  var freeWindow = checkGlobal(objectTypes[typeof window] && window);

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = (freeModule && freeModule.exports === freeExports) ? freeExports : null;

  /** Detect `this` as the global object. */
  var thisGlobal = checkGlobal(objectTypes[typeof this] && this);

  /**
   * Used as a reference to the global object.
   *
   * The `this` value is used if it's the global object to avoid Greasemonkey's
   * restricted `window` object, otherwise the `window` object is used.
   */
  var root = freeGlobal || ((freeWindow !== (thisGlobal && thisGlobal.window)) && freeWindow) || freeSelf || thisGlobal || Function('return this')();

  /*--------------------------------------------------------------------------*/

  /**
   * Adds the key-value `pair` to `map`.
   *
   * @private
   * @param {Object} map The map to modify.
   * @param {Array} pair The key-value pair to add.
   * @returns {Object} Returns `map`.
   */
  function addMapEntry(map, pair) {
    map.set(pair[0], pair[1]);
    return map;
  }

  /**
   * Adds `value` to `set`.
   *
   * @private
   * @param {Object} set The set to modify.
   * @param {*} value The value to add.
   * @returns {Object} Returns `set`.
   */
  function addSetEntry(set, value) {
    set.add(value);
    return set;
  }

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {...*} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    var length = args.length;
    switch (length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * Creates a new array concatenating `array` with `other`.
   *
   * @private
   * @param {Array} array The first array to concatenate.
   * @param {Array} other The second array to concatenate.
   * @returns {Array} Returns the new concatenated array.
   */
  function arrayConcat(array, other) {
    var index = -1,
        length = array.length,
        othIndex = -1,
        othLength = other.length,
        result = Array(length + othLength);

    while (++index < length) {
      result[index] = array[index];
    }
    while (++othIndex < othLength) {
      result[index++] = other[othIndex];
    }
    return result;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check, else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array.length,
        resIndex = -1,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[++resIndex] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    return !!array.length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * A specialized version of `_.includesWith` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * The base implementation of methods like `_.max` and `_.min` which accepts a
   * `comparator` to determine the extremum value.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The iteratee invoked per iteration.
   * @param {Function} comparator The comparator used to compare values.
   * @returns {*} Returns the extremum value.
   */
  function baseExtremum(array, iteratee, comparator) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      var value = array[index],
          current = iteratee(value);

      if (current != null && (computed === undefined
            ? current === current
            : comparator(current, computed)
          )) {
        var computed = current,
            result = value;
      }
    }
    return result;
  }

  /**
   * The base implementation of methods like `_.find` and `_.findKey`, without
   * support for iteratee shorthands, which iterates over `collection` using
   * `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to search.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @param {boolean} [retKey] Specify returning the key of the found element instead of the element itself.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFind(collection, predicate, eachFunc, retKey) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = retKey ? key : value;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {Function} predicate The function invoked per iteration.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromRight) {
    var length = array.length,
        index = fromRight ? length : -1;

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    if (value !== value) {
      return indexOfNaN(array, fromIndex);
    }
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define
   * the sort order of `array` and replaces criteria objects with their
   * corresponding values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` without support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the new array of key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing wrapper metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Checks if `value` is a global object.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {null|Object} Returns `value` if it's a global object, else `null`.
   */
  function checkGlobal(value) {
    return (value && value.Object === Object) ? value : null;
  }

  /**
   * Compares values to sort them in ascending order.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {number} Returns the sort order indicator for `value`.
   */
  function compareAscending(value, other) {
    if (value !== other) {
      var valIsNull = value === null,
          valIsUndef = value === undefined,
          valIsReflexive = value === value;

      var othIsNull = other === null,
          othIsUndef = other === undefined,
          othIsReflexive = other === other;

      if ((value > other && !othIsNull) || !valIsReflexive ||
          (valIsNull && !othIsUndef && othIsReflexive) ||
          (valIsUndef && othIsReflexive)) {
        return 1;
      }
      if ((value < other && !valIsNull) || !othIsReflexive ||
          (othIsNull && !valIsUndef && valIsReflexive) ||
          (othIsUndef && valIsReflexive)) {
        return -1;
      }
    }
    return 0;
  }

  /**
   * Used by `_.orderBy` to compare multiple properties of a value to another
   * and stable sort them.
   *
   * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
   * specify an order of "desc" for descending or "asc" for ascending sort order
   * of corresponding values.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {boolean[]|string[]} orders The order to sort by for each property.
   * @returns {number} Returns the sort order indicator for `object`.
   */
  function compareMultiple(object, other, orders) {
    var index = -1,
        objCriteria = object.criteria,
        othCriteria = other.criteria,
        length = objCriteria.length,
        ordersLength = orders.length;

    while (++index < length) {
      var result = compareAscending(objCriteria[index], othCriteria[index]);
      if (result) {
        if (index >= ordersLength) {
          return result;
        }
        var order = orders[index];
        return result * (order == 'desc' ? -1 : 1);
      }
    }
    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
    // that causes it, under certain circumstances, to provide the same value for
    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
    // for more details.
    //
    // This also ensures a stable sort in V8 and other engines.
    // See https://code.google.com/p/v8/issues/detail?id=90 for more details.
    return object.index - other.index;
  }

  /**
   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  function deburrLetter(letter) {
    return deburredLetters[letter];
  }

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeHtmlChar(chr) {
    return htmlEscapes[chr];
  }

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the index at which the first occurrence of `NaN` is found in `array`.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
   */
  function indexOfNaN(array, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 0 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      var other = array[index];
      if (other !== other) {
        return index;
      }
    }
    return -1;
  }

  /**
   * Checks if `value` is a host object in IE < 9.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
   */
  function isHostObject(value) {
    // Many host objects are `Object` objects that can coerce to strings
    // despite having improperly defined `toString` methods.
    var result = false;
    if (value != null && typeof value.toString != 'function') {
      try {
        result = !!(value + '');
      } catch (e) {}
    }
    return result;
  }

  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */
  function isIndex(value, length) {
    value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
    length = length == null ? MAX_SAFE_INTEGER : length;
    return value > -1 && value % 1 == 0 && value < length;
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to an array.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the converted array.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = -1,
        result = [];

    while (++index < length) {
      if (array[index] === placeholder) {
        array[index] = PLACEHOLDER;
        result[++resIndex] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the converted array.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    if (!(string && reHasComplexSymbol.test(string))) {
      return string.length;
    }
    var result = reComplexSymbol.lastIndex = 0;
    while (reComplexSymbol.test(string)) {
      result++;
    }
    return result;
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return string.match(reComplexSymbol);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  function unescapeHtmlChar(chr) {
    return htmlUnescapes[chr];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Use `context` to mock `Date#getTime` use in `_.now`.
   * var mock = _.runInContext({
   *   'Date': function() {
   *     return { 'getTime': getTimeMock };
   *   }
   * });
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  function runInContext(context) {
    context = context ? _.defaults({}, context, _.pick(root, contextProps)) : root;

    /** Built-in constructor references. */
    var Date = context.Date,
        Error = context.Error,
        Math = context.Math,
        RegExp = context.RegExp,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = context.Array.prototype,
        objectProto = context.Object.prototype;

    /** Used to resolve the decompiled source of functions. */
    var funcToString = context.Function.prototype.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /**
     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objectToString = objectProto.toString;

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Reflect = context.Reflect,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        clearTimeout = context.clearTimeout,
        enumerate = Reflect ? Reflect.enumerate : undefined,
        getPrototypeOf = Object.getPrototypeOf,
        getOwnPropertySymbols = Object.getOwnPropertySymbols,
        iteratorSymbol = typeof (iteratorSymbol = Symbol && Symbol.iterator) == 'symbol' ? iteratorSymbol : undefined,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        setTimeout = context.setTimeout,
        splice = arrayProto.splice;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = Object.keys,
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var Map = getNative(context, 'Map'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to detect maps, sets, and weakmaps. */
    var mapCtorString = Map ? funcToString.call(Map) : '',
        setCtorString = Set ? funcToString.call(Set) : '',
        weakMapCtorString = WeakMap ? funcToString.call(WeakMap) : '';

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = Symbol ? symbolProto.valueOf : undefined,
        symbolToString = Symbol ? symbolProto.toString : undefined;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chaining. Methods that operate on and return arrays, collections, and
     * functions can be chained together. Methods that retrieve a single value or
     * may return a primitive value will automatically end the chain sequence and
     * return the unwrapped value. Otherwise, the value must be unwrapped with
     * `_#value`.
     *
     * Explicit chaining, which must be unwrapped with `_#value` in all cases,
     * may be enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut
     * fusion is an optimization to merge iteratee calls; this avoids the creation
     * of intermediate arrays and can greatly reduce the number of iteratee executions.
     * Sections of a chain sequence qualify for shortcut fusion if the section is
     * applied to an array of at least two hundred elements and any iteratees
     * accept only one argument. The heuristic for whether a section qualifies
     * for shortcut fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`,
     * `at`, `before`, `bind`, `bindAll`, `bindKey`, `chain`, `chunk`, `commit`,
     * `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`, `curry`,
     * `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`, `difference`,
     * `differenceBy`, `differenceWith`, `drop`, `dropRight`, `dropRightWhile`,
     * `dropWhile`, `fill`, `filter`, `flatten`, `flattenDeep`, `flip`, `flow`,
     * `flowRight`, `fromPairs`, `functions`, `functionsIn`, `groupBy`, `initial`,
     * `intersection`, `intersectionBy`, `intersectionWith`, `invert`, `invertBy`,
     * `invokeMap`, `iteratee`, `keyBy`, `keys`, `keysIn`, `map`, `mapKeys`,
     * `mapValues`, `matches`, `matchesProperty`, `memoize`, `merge`, `mergeWith`,
     * `method`, `methodOf`, `mixin`, `negate`, `nthArg`, `omit`, `omitBy`, `once`,
     * `orderBy`, `over`, `overArgs`, `overEvery`, `overSome`, `partial`,
     * `partialRight`, `partition`, `pick`, `pickBy`, `plant`, `property`,
     * `propertyOf`, `pull`, `pullAll`, `pullAllBy`, `pullAt`, `push`, `range`,
     * `rangeRight`, `rearg`, `reject`, `remove`, `rest`, `reverse`, `sampleSize`,
     * `set`, `setWith`, `shuffle`, `slice`, `sort`, `sortBy`, `splice`, `spread`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `tap`, `throttle`,
     * `thru`, `toArray`, `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`,
     * `transform`, `unary`, `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`,
     * `uniqWith`, `unset`, `unshift`, `unzip`, `unzipWith`, `values`, `valuesIn`,
     * `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`, `zipObject`,
     * `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `deburr`, `endsWith`, `eq`,
     * `escape`, `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`,
     * `findLast`, `findLastIndex`, `findLastKey`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayLike`, `isArrayLikeObject`, `isBoolean`,
     * `isDate`, `isElement`, `isEmpty`, `isEqual`, `isEqualWith`, `isError`,
     * `isFinite`, `isFunction`, `isInteger`, `isLength`, `isMatch`, `isMatchWith`,
     * `isNaN`, `isNative`, `isNil`, `isNull`, `isNumber`, `isObject`, `isObjectLike`,
     * `isPlainObject`, `isRegExp`, `isSafeInteger`, `isString`, `isUndefined`,
     * `isTypedArray`, `join`, `kebabCase`, `last`, `lastIndexOf`, `lowerCase`,
     * `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `min`, `minBy`,
     * `noConflict`, `noop`, `now`, `pad`, `padEnd`, `padStart`, `parseInt`,
     * `pop`, `random`, `reduce`, `reduceRight`, `repeat`, `result`, `round`,
     * `runInContext`, `sample`, `shift`, `size`, `snakeCase`, `some`, `sortedIndex`,
     * `sortedIndexBy`, `sortedLastIndex`, `sortedLastIndexBy`, `startCase`,
     * `startsWith`, `subtract`, `sum`, `sumBy`, `template`, `times`, `toLower`,
     * `toInteger`, `toLength`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`,
     * `trim`, `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`,
     * `upperCase`, `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The function whose prototype all chaining wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB). Change the following template settings to use
     * alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type string
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type Object
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type Function
         */
        '_': lodash
      }
    };

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || arrLength < LARGE_ARRAY_SIZE || (arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an hash object.
     *
     * @private
     * @returns {Object} Returns the new hash object.
     */
    function Hash() {}

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(hash, key) {
      return hashHas(hash, key) && delete hash[key];
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @param {Object} hash The hash to query.
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(hash, key) {
      if (nativeCreate) {
        var result = hash[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(hash, key) ? hash[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @param {Object} hash The hash to query.
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(hash, key) {
      return nativeCreate ? hash[key] !== undefined : hasOwnProperty.call(hash, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     */
    function hashSet(hash, key, value) {
      hash[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @param {Array} [values] The values to cache.
     */
    function MapCache(values) {
      var index = -1,
          length = values ? values.length : 0;

      this.clear();
      while (++index < length) {
        var entry = values[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapClear() {
      this.__data__ = { 'hash': new Hash, 'map': Map ? new Map : [], 'string': new Hash };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapDelete(key) {
      var data = this.__data__;
      if (isKeyable(key)) {
        return hashDelete(typeof key == 'string' ? data.string : data.hash, key);
      }
      return Map ? data.map['delete'](key) : assocDelete(data.map, key);
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapGet(key) {
      var data = this.__data__;
      if (isKeyable(key)) {
        return hashGet(typeof key == 'string' ? data.string : data.hash, key);
      }
      return Map ? data.map.get(key) : assocGet(data.map, key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapHas(key) {
      var data = this.__data__;
      if (isKeyable(key)) {
        return hashHas(typeof key == 'string' ? data.string : data.hash, key);
      }
      return Map ? data.map.has(key) : assocHas(data.map, key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache object.
     */
    function mapSet(key, value) {
      var data = this.__data__;
      if (isKeyable(key)) {
        hashSet(typeof key == 'string' ? data.string : data.hash, key, value);
      } else if (Map) {
        data.map.set(key, value);
      } else {
        assocSet(data.map, key, value);
      }
      return this;
    }

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates a set cache object to store unique values.
     *
     * @private
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values ? values.length : 0;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.push(values[index]);
      }
    }

    /**
     * Checks if `value` is in `cache`.
     *
     * @private
     * @param {Object} cache The set cache to search.
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function cacheHas(cache, value) {
      var map = cache.__data__;
      if (isKeyable(value)) {
        var data = map.__data__,
            hash = typeof value == 'string' ? data.string : data.hash;

        return hash[value] === HASH_UNDEFINED;
      }
      return map.has(value);
    }

    /**
     * Adds `value` to the set cache.
     *
     * @private
     * @name push
     * @memberOf SetCache
     * @param {*} value The value to cache.
     */
    function cachePush(value) {
      var map = this.__data__;
      if (isKeyable(value)) {
        var data = map.__data__,
            hash = typeof value == 'string' ? data.string : data.hash;

        hash[value] = HASH_UNDEFINED;
      }
      else {
        map.set(value, HASH_UNDEFINED);
      }
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @param {Array} [values] The values to cache.
     */
    function Stack(values) {
      var index = -1,
          length = values ? values.length : 0;

      this.clear();
      while (++index < length) {
        var entry = values[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = { 'array': [], 'map': null };
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          array = data.array;

      return array ? assocDelete(array, key) : data.map['delete'](key);
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      var data = this.__data__,
          array = data.array;

      return array ? assocGet(array, key) : data.map.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      var data = this.__data__,
          array = data.array;

      return array ? assocHas(array, key) : data.map.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache object.
     */
    function stackSet(key, value) {
      var data = this.__data__,
          array = data.array;

      if (array) {
        if (array.length < (LARGE_ARRAY_SIZE - 1)) {
          assocSet(array, key, value);
        } else {
          data.array = null;
          data.map = new MapCache(array);
        }
      }
      var map = data.map;
      if (map) {
        map.set(key, value);
      }
      return this;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Removes `key` and its value from the associative array.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function assocDelete(array, key) {
      var index = assocIndexOf(array, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = array.length - 1;
      if (index == lastIndex) {
        array.pop();
      } else {
        splice.call(array, index, 1);
      }
      return true;
    }

    /**
     * Gets the associative array value for `key`.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function assocGet(array, key) {
      var index = assocIndexOf(array, key);
      return index < 0 ? undefined : array[index][1];
    }

    /**
     * Checks if an associative array value for `key` exists.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function assocHas(array, key) {
      return assocIndexOf(array, key) > -1;
    }

    /**
     * Gets the index at which the first occurrence of `key` is found in `array`
     * of key-value pairs.
     *
     * @private
     * @param {Array} array The array to search.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Sets the associative array `key` to `value`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     */
    function assocSet(array, key, value) {
      var index = assocIndexOf(array, key);
      if (index < 0) {
        array.push([key, value]);
      } else {
        array[index][1] = value;
      }
    }

    /*------------------------------------------------------------------------*/

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function assignInDefaults(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * This function is like `assignValue` except that it doesn't assign `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (typeof key == 'number' && value === undefined && !(key in object))) {
        object[key] = value;
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if ((!eq(objValue, value) ||
            (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) ||
          (value === undefined && !(key in object))) {
        object[key] = value;
      }
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths of elements to pick.
     * @returns {Array} Returns the new array of picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          isNil = object == null,
          length = paths.length,
          result = Array(length);

      while (++index < length) {
        result[index] = isNil ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments to numbers.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, isDeep, customizer, key, object, stack) {
      var result;
      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          if (isHostObject(value)) {
            return object ? value : {};
          }
          result = initCloneObject(isFunc ? {} : value);
          if (!isDeep) {
            return copySymbols(value, baseAssign(result, value));
          }
        } else {
          return cloneableTags[tag]
            ? initCloneByTag(value, tag, isDeep)
            : (object ? value : {});
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      // Recursively populate clone (susceptible to call stack limits).
      (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
        assignValue(result, key, baseClone(subValue, isDeep, customizer, key, value, stack));
      });
      return isArr ? result : copySymbols(value, result);
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new function.
     */
    function baseConforms(source) {
      var props = keys(source),
          length = props.length;

      return function(object) {
        if (object == null) {
          return !length;
        }
        var index = length;
        while (index--) {
          var key = props[index],
              predicate = source[key],
              value = object[key];

          if ((value === undefined && !(key in Object(object))) || !predicate(value)) {
            return false;
          }
        }
        return true;
      };
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} prototype The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(prototype) {
        if (isObject(prototype)) {
          object.prototype = prototype;
          var result = new object;
          object.prototype = undefined;
        }
        return result || {};
      };
    }());

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts an array
     * of `func` arguments.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Object} args The arguments to provide to `func`.
     * @returns {number} Returns the timer id.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support for
     * excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check, else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {boolean} [isDeep] Specify a deep flatten.
     * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, isDeep, isStrict, result) {
      result || (result = []);

      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index];
        if (isArrayLikeObject(value) &&
            (isStrict || isArray(value) || isArguments(value))) {
          if (isDeep) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, isDeep, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForIn` and `baseForOwn` which iterates
     * over `object` properties returned by `keysFunc` invoking `iteratee` for
     * each property. Iteratee functions may exit iteration early by explicitly
     * returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forIn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForIn(object, iteratee) {
      return object == null ? object : baseFor(object, iteratee, keysIn);
    }

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the new array of filtered property names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = isKey(path, object) ? [path + ''] : baseToPath(path);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[path[index++]];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      // Avoid a bug in IE 10-11 where objects with a [[Prototype]] of `null`,
      // that are composed entirely of index properties, return `false` for
      // `hasOwnProperty` checks of them.
      return hasOwnProperty.call(object, key) ||
        (typeof object == 'object' && key in object && getPrototypeOf(object) === null);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments to numbers.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        caches[othIndex] = !comparator && (iteratee || array.length >= 120)
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          length = array.length,
          seen = caches[0];

      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {
          var othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      if (!isKey(path, object)) {
        path = baseToPath(path);
        object = parent(object, path);
        path = last(path);
      }
      var func = object == null ? object : object[path];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {boolean} [bitmask] The bitmask of comparison flags.
     *  The bitmask may be composed of the following flags:
     *     1 - Unordered comparison
     *     2 - Partial comparison
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, customizer, bitmask, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = arrayTag,
          othTag = arrayTag;

      if (!objIsArr) {
        objTag = getTag(object);
        if (objTag == argsTag) {
          objTag = objectTag;
        } else if (objTag != objectTag) {
          objIsArr = isTypedArray(object);
        }
      }
      if (!othIsArr) {
        othTag = getTag(other);
        if (othTag == argsTag) {
          othTag = objectTag;
        } else if (othTag != objectTag) {
          othIsArr = isTypedArray(other);
        }
      }
      var objIsObj = objTag == objectTag && !isHostObject(object),
          othIsObj = othTag == objectTag && !isHostObject(other),
          isSameTag = objTag == othTag;

      if (isSameTag && !(objIsArr || objIsObj)) {
        return equalByTag(object, other, objTag, equalFunc, customizer, bitmask);
      }
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
      if (!isPartial) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, bitmask, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, bitmask, stack);
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack,
              result = customizer ? customizer(objValue, srcValue, key, object, source, stack) : undefined;

          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      var type = typeof value;
      if (type == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (type == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't skip the constructor
     * property of prototypes or treat sparse arrays as dense.
     *
     * @private
     * @type Function
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      return nativeKeys(Object(object));
    }

    /**
     * The base implementation of `_.keysIn` which doesn't skip the constructor
     * property of prototypes or treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      object = object == null ? object : Object(object);

      var result = [];
      for (var key in object) {
        result.push(key);
      }
      return result;
    }

    // Fallback for IE < 9 with es6-shim.
    if (enumerate && !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf')) {
      baseKeysIn = function(object) {
        return iteratorToArray(enumerate(object));
      };
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        var key = matchData[0][0],
            value = matchData[0][1];

        return function(object) {
          if (object == null) {
            return false;
          }
          return object[key] === value &&
            (value !== undefined || (key in Object(object)));
        };
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new function.
     */
    function baseMatchesProperty(path, srcValue) {
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      var props = (isArray(source) || isTypedArray(source)) ? undefined : keysIn(source);
      arrayEach(props || source, function(srcValue, key) {
        if (props) {
          key = srcValue;
          srcValue = source[key];
        }
        if (isObject(srcValue)) {
          stack || (stack = new Stack);
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer ? customizer(object[key], srcValue, (key + ''), object, source, stack) : undefined;
          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      });
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = object[key],
          srcValue = source[key],
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer ? customizer(objValue, srcValue, (key + ''), object, source, stack) : undefined,
          isCommon = newValue === undefined;

      if (isCommon) {
        newValue = srcValue;
        if (isArray(srcValue) || isTypedArray(srcValue)) {
          if (isArray(objValue)) {
            newValue = srcIndex ? copyArray(objValue) : objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else {
            isCommon = false;
            newValue = baseClone(srcValue);
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
            isCommon = false;
            newValue = baseClone(srcValue);
          }
          else {
            newValue = srcIndex ? baseClone(objValue) : objValue;
          }
        }
        else {
          isCommon = false;
        }
      }
      stack.set(srcValue, newValue);

      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1,
          toIteratee = getIteratee();

      iteratees = arrayMap(iteratees.length ? iteratees : Array(1), function(iteratee) {
        return toIteratee(iteratee);
      });

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property names.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} props The property names to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, props) {
      object = Object(object);
      return arrayReduce(props, function(result, key) {
        if (key in object) {
          result[key] = object[key];
        }
        return result;
      }, {});
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, predicate) {
      var result = {};
      baseForIn(object, function(value, key) {
        if (predicate(value, key)) {
          result[key] = value;
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.property` without support for deep paths.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new function.
     */
    function baseProperty(key) {
      return function(object) {
        return object == null ? undefined : object[key];
      };
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAll`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values) {
      return basePullAllBy(array, values);
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAllBy(array, values, iteratee) {
      var index = -1,
          length = values.length,
          seen = array;

      if (iteratee) {
        seen = arrayMap(array, function(value) { return iteratee(value); });
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = baseIndexOf(seen, computed, fromIndex)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (lastIndex == length || index != previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          }
          else if (!isKey(index, array)) {
            var path = baseToPath(index),
                object = parent(array, path);

            if (object != null) {
              delete object[last(path)];
            }
          }
          else {
            delete array[index];
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments to numbers.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the new array of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      path = isKey(path, object) ? [path + ''] : baseToPath(path);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = path[index];
        if (isObject(nested)) {
          var newValue = value;
          if (index != lastIndex) {
            var objValue = nested[key];
            newValue = customizer ? customizer(objValue, key, nested) : undefined;
            if (newValue === undefined) {
              newValue = objValue == null ? (isIndex(path[index + 1]) ? [] : {}) : objValue;
            }
          }
          assignValue(nested, key, newValue);
        }
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop detection.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array ? array.length : low;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array ? array.length : 0,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsUndef = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            isDef = computed !== undefined,
            isReflexive = computed === computed;

        if (valIsNaN) {
          var setLow = isReflexive || retHighest;
        } else if (valIsNull) {
          setLow = isReflexive && isDef && (retHighest || computed != null);
        } else if (valIsUndef) {
          setLow = isReflexive && (retHighest || isDef);
        } else if (computed == null) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array) {
      return baseSortedUniqBy(array);
    }

    /**
     * The base implementation of `_.sortedUniqBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniqBy(array, iteratee) {
      var index = 0,
          length = array.length,
          value = array[0],
          computed = iteratee ? iteratee(value) : value,
          seen = computed,
          resIndex = 0,
          result = [value];

      while (++index < length) {
        value = array[index],
        computed = iteratee ? iteratee(value) : value;

        if (!eq(computed, seen)) {
          seen = computed;
          result[++resIndex] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toPath` which only converts `value` to a
     * path if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Array} Returns the property path array.
     */
    function baseToPath(value) {
      return isArray(value) ? value : stringToPath(value);
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = isKey(path, object) ? [path + ''] : baseToPath(path);
      object = parent(object, path);
      var key = last(path);
      return (object != null && has(object, key)) ? delete object[key] : true;
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var index = -1,
          length = arrays.length;

      while (++index < length) {
        var result = result
          ? arrayPush(
              baseDifference(result, arrays[index], iteratee, comparator),
              baseDifference(arrays[index], result, iteratee, comparator)
            )
          : arrays[index];
      }
      return (result && result.length) ? baseUniq(result, iteratee, comparator) : [];
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property names.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        assignFunc(result, props[index], index < valsLength ? values[index] : undefined);
      }
      return result;
    }

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var Ctor = buffer.constructor,
          result = new Ctor(buffer.length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var Ctor = arrayBuffer.constructor,
          result = new Ctor(arrayBuffer.byteLength),
          view = new Uint8Array(result);

      view.set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `map`.
     *
     * @private
     * @param {Object} map The map to clone.
     * @returns {Object} Returns the cloned map.
     */
    function cloneMap(map) {
      var Ctor = map.constructor;
      return arrayReduce(mapToArray(map), addMapEntry, new Ctor);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var Ctor = regexp.constructor,
          result = new Ctor(regexp.source, reFlags.exec(regexp));

      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of `set`.
     *
     * @private
     * @param {Object} set The set to clone.
     * @returns {Object} Returns the cloned set.
     */
    function cloneSet(set) {
      var Ctor = set.constructor;
      return arrayReduce(setToArray(set), addSetEntry, new Ctor);
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return Symbol ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = typedArray.buffer,
          Ctor = typedArray.constructor;

      return new Ctor(isDeep ? cloneArrayBuffer(buffer) : buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array|Object} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders) {
      var holdersLength = holders.length,
          argsIndex = -1,
          argsLength = nativeMax(args.length - holdersLength, 0),
          leftIndex = -1,
          leftLength = partials.length,
          result = Array(leftLength + argsLength);

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        result[holders[argsIndex]] = args[argsIndex];
      }
      while (argsLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array|Object} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders) {
      var holdersIndex = -1,
          holdersLength = holders.length,
          argsIndex = -1,
          argsLength = nativeMax(args.length - holdersLength, 0),
          rightIndex = -1,
          rightLength = partials.length,
          result = Array(argsLength + rightLength);

      while (++argsIndex < argsLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        result[offset + holders[holdersIndex]] = args[argsIndex++];
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property names to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object) {
      return copyObjectWith(source, props, object);
    }

    /**
     * This function is like `copyObject` except that it accepts a function to
     * customize copied values.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property names to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObjectWith(source, props, object, customizer) {
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index],
            newValue = customizer ? customizer(object[key], source[key], key, object, source) : source[key];

        assignValue(object, key, newValue);
      }
      return object;
    }

    /**
     * Copies own symbol properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return rest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = typeof customizer == 'function' ? (length--, customizer) : undefined;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBaseWrapper(func, bitmask, thisArg) {
      var isBind = bitmask & BIND_FLAG,
          Ctor = createCtorWrapper(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = reHasComplexSymbol.test(string) ? stringToArray(string) : undefined,
            chr = strSymbols ? strSymbols[0] : string.charAt(0),
            trailing = strSymbols ? strSymbols.slice(1).join('') : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string)), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtorWrapper(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors.
        // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurryWrapper(func, bitmask, arity) {
      var Ctor = createCtorWrapper(func);

      function wrapper() {
        var length = arguments.length,
            index = length,
            args = Array(length),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func,
            placeholder = lodash.placeholder || wrapper.placeholder;

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        return length < arity
          ? createRecurryWrapper(func, bitmask, createHybridWrapper, placeholder, undefined, args, holders, undefined, undefined, arity - length)
          : apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return rest(function(funcs) {
        funcs = baseFlatten(funcs);

        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & ARY_FLAG,
          isBind = bitmask & BIND_FLAG,
          isBindKey = bitmask & BIND_KEY_FLAG,
          isCurry = bitmask & CURRY_FLAG,
          isCurryRight = bitmask & CURRY_RIGHT_FLAG,
          isFlip = bitmask & FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtorWrapper(func);

      function wrapper() {
        var length = arguments.length,
            index = length,
            args = Array(length);

        while (index--) {
          args[index] = arguments[index];
        }
        if (partials) {
          args = composeArgs(args, partials, holders);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight);
        }
        if (isCurry || isCurryRight) {
          var placeholder = lodash.placeholder || wrapper.placeholder,
              argsHolders = replaceHolders(args, placeholder);

          length -= argsHolders.length;
          if (length < arity) {
            return createRecurryWrapper(func, bitmask, createHybridWrapper, placeholder, thisArg, args, argsHolders, argPos, ary, arity - length);
          }
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && args.length > 1) {
          args.reverse();
        }
        if (isAry && ary < args.length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtorWrapper(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new invoker function.
     */
    function createOver(arrayFunc) {
      return rest(function(iteratees) {
        iteratees = arrayMap(baseFlatten(iteratees), getIteratee());
        return rest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {string} string The string to create padding for.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(string, length, chars) {
      length = toInteger(length);

      var strLength = stringSize(string);
      if (!length || strLength >= length) {
        return '';
      }
      var padLength = length - strLength;
      chars = chars === undefined ? ' ' : (chars + '');

      var result = repeat(chars, nativeCeil(padLength / stringSize(chars)));
      return reHasComplexSymbol.test(chars)
        ? stringToArray(result).slice(0, padLength).join('')
        : result.slice(0, padLength);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg` and the `partials` prepended to those provided to
     * the wrapper.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartialWrapper(func, bitmask, thisArg, partials) {
      var isBind = bitmask & BIND_FLAG,
          Ctor = createCtorWrapper(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toNumber(start);
        start = start === start ? start : 0;
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toNumber(end) || 0;
        }
        step = step === undefined ? (start < end ? 1 : -1) : (toNumber(step) || 0);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder to replace.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurryWrapper(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & CURRY_FLAG,
          newArgPos = argPos ? copyArray(argPos) : undefined,
          newsHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

      if (!(bitmask & CURRY_BOUND_FLAG)) {
        bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
      }
      var newData = [func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, arity],
          result = wrapFunc.apply(undefined, newData);

      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return result;
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = toInteger(precision);
        if (precision) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && new Set([1, 2]).size === 2) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask of wrapper flags.
     *  The bitmask may be composed of the following flags:
     *     1 - `_.bind`
     *     2 - `_.bindKey`
     *     4 - `_.curry` or `_.curryRight` of a bound function
     *     8 - `_.curry`
     *    16 - `_.curryRight`
     *    32 - `_.partial`
     *    64 - `_.partialRight`
     *   128 - `_.rearg`
     *   256 - `_.ary`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func),
          newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] == null
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG)) {
        bitmask &= ~(CURRY_FLAG | CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == BIND_FLAG) {
        var result = createBaseWrapper(func, bitmask, thisArg);
      } else if (bitmask == CURRY_FLAG || bitmask == CURRY_RIGHT_FLAG) {
        result = createCurryWrapper(func, bitmask, arity);
      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !holders.length) {
        result = createPartialWrapper(func, bitmask, thisArg, partials);
      } else {
        result = createHybridWrapper.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setter(result, newData);
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.
     * @param {Object} [stack] Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
      var index = -1,
          isPartial = bitmask & PARTIAL_COMPARE_FLAG,
          isUnordered = bitmask & UNORDERED_COMPARE_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked) {
        return stacked == other;
      }
      var result = true;
      stack.set(array, other);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (isUnordered) {
          if (!arraySome(other, function(othValue) {
                return arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack);
              })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, equalFunc, customizer, bitmask) {
      switch (tag) {
        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
          // Coerce dates and booleans to numbers, dates to milliseconds and booleans
          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
          return +object == +other;

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case numberTag:
          // Treat `NaN` vs. `NaN` as equal.
          return (object != +object) ? other != +other : object == +other;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings primitives and string
          // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
          convert || (convert = setToArray);

          // Recursively compare objects (susceptible to call stack limits).
          return (isPartial || object.size == other.size) &&
            equalFunc(convert(object), convert(other), customizer, bitmask | UNORDERED_COMPARE_FLAG);

        case symbolTag:
          return !!Symbol && (symbolValueOf.call(object) == symbolValueOf.call(other));
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
          objProps = keys(object),
          objLength = objProps.length,
          othProps = keys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : baseHas(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      return result;
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the appropriate "iteratee" function. If the `_.iteratee` method is
     * customized this function returns the custom method, otherwise it returns
     * `baseIteratee`. If arguments are provided the chosen function is invoked
     * with them and its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the "length" property value of `object`.
     *
     * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
     * that affects Safari on at least iOS 8.1-8.3 ARM64.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {*} Returns the "length" value.
     */
    var getLength = baseProperty('length');

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = toPairs(object),
          length = result.length;

      while (length--) {
        result[length][2] = isStrictComparable(result[length][1]);
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = object == null ? undefined : object[key];
      return isNative(value) ? value : undefined;
    }

    /**
     * Creates an array of the own symbol properties of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = getOwnPropertySymbols || function() {
      return [];
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function getTag(value) {
      return objectToString.call(value);
    }

    // Fallback for IE 11 providing `toStringTag` values for maps, sets, and weakmaps.
    if ((Map && getTag(new Map) != mapTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = objectToString.call(value),
            Ctor = result == objectTag ? value.constructor : null,
            ctorString = typeof Ctor == 'function' ? funcToString.call(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case mapCtorString: return mapTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      if (object == null) {
        return false;
      }
      var result = hasFunc(object, path);
      if (!result && !isKey(path)) {
        path = baseToPath(path);
        object = parent(object, path);
        if (object != null) {
          path = last(path);
          result = hasFunc(object, path);
        }
      }
      var length = object ? object.length : undefined;
      return result || (
        !!length && isLength(length) && isIndex(path, length) &&
        (isArray(object) || isString(object) || isArguments(object))
      );
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      if (isPrototype(object)) {
        return {};
      }
      var Ctor = object.constructor;
      return baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return cloneMap(object);

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return cloneSet(object);

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Creates an array of index keys for `object` values of arrays,
     * `arguments` objects, and strings, otherwise `null` is returned.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array|null} Returns index keys, else `null`.
     */
    function indexKeys(object) {
      var length = object ? object.length : undefined;
      if (isLength(length) &&
          (isArray(object) || isString(object) || isArguments(object))) {
        return baseTimes(length, String);
      }
      return null;
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
          ? (isArrayLike(object) && isIndex(index, object.length))
          : (type == 'string' && index in object)) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (typeof value == 'number') {
        return true;
      }
      return !isArray(value) &&
        (reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
          (object != null && value in Object(object)));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return type == 'number' || type == 'boolean' ||
        (type == 'string' && value !== '__proto__') || value == null;
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`
     * modify function arguments, making the order in which they are executed important,
     * preventing the merging of metadata. However, we make an exception for a safe
     * combined case where curried functions have `_.ary` and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (BIND_FLAG | BIND_KEY_FLAG | ARY_FLAG);

      var isCombo =
        (srcBitmask == ARY_FLAG && (bitmask == CURRY_FLAG)) ||
        (srcBitmask == ARY_FLAG && (bitmask == REARG_FLAG) && (data[7].length <= source[8])) ||
        (srcBitmask == (ARY_FLAG | REARG_FLAG) && (source[7].length <= source[8]) && (bitmask == CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : copyArray(value);
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : copyArray(source[4]);
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : copyArray(value);
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : copyArray(source[6]);
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = copyArray(value);
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged counterparts.
     * @returns {*} Returns the value to assign.
     */
    function mergeDefaults(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, mergeDefaults, stack);
      }
      return objValue;
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length == 1 ? object : get(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity function
     * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = (function() {
      var count = 0,
          lastCalled = 0;

      return function(key, value) {
        var stamp = now(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return key;
          }
        } else {
          count = 0;
        }
        return baseSetData(key, value);
      };
    }());

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    function stringToPath(string) {
      var result = [];
      toString(string).replace(rePropName, function(match, number, quote, string) {
        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    }

    /**
     * Converts `value` to an array-like object if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Array} Returns the array-like object.
     */
    function toArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Converts `value` to a function if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Function} Returns the function.
     */
    function toFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=0] The length of each chunk.
     * @returns {Array} Returns the new array containing chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size) {
      size = nativeMax(toInteger(size), 0);

      var length = array ? array.length : 0;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = -1,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[++resIndex] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array ? array.length : 0,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[++resIndex] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    var concat = rest(function(array, values) {
      if (!isArray(array)) {
        array = array == null ? [] : [Object(array)];
      }
      values = baseFlatten(values);
      return arrayConcat(array, values);
    });

    /**
     * Creates an array of unique `array` values not included in the other
     * given arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.difference([3, 2, 1], [4, 2]);
     * // => [3, 1]
     */
    var difference = rest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, false, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which uniqueness is computed. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([3.1, 2.2, 1.3], [4.4, 2.5], Math.floor);
     * // => [3.1, 1.3]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = rest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, false, true), getIteratee(iteratee))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = rest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, false, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate) {
      return (array && array.length)
        ? baseFindIndex(array, getIteratee(predicate, 3))
        : -1;
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate) {
      return (array && array.length)
        ? baseFindIndex(array, getIteratee(predicate, 3), true)
        : -1;
    }

    /**
     * Flattens `array` a single level.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, 3, [4]]]);
     * // => [1, 2, 3, [4]]
     */
    function flatten(array) {
      var length = array ? array.length : 0;
      return length ? baseFlatten(array) : [];
    }

    /**
     * This method is like `_.flatten` except that it recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to recursively flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, 3, [4]]]);
     * // => [1, 2, 3, 4]
     */
    function flattenDeep(array) {
      var length = array ? array.length : 0;
      return length ? baseFlatten(array, true) : [];
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['fred', 30], ['barney', 40]]);
     * // => { 'fred': 30, 'barney': 40 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs ? pairs.length : 0,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return array ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the offset
     * from the end of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      fromIndex = toInteger(fromIndex);
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return baseIndexOf(array, value, fromIndex);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      return dropRight(array, 1);
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of shared values.
     * @example
     *
     * _.intersection([2, 1], [4, 2], [1, 2]);
     * // => [2]
     */
    var intersection = rest(function(arrays) {
      var mapped = arrayMap(arrays, toArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which uniqueness is computed. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of shared values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [4.3, 2.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = rest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, toArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = rest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, toArrayLikeObject);

      if (comparator === last(mapped)) {
        comparator = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array ? nativeJoin.call(array, separator) : '';
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array ? array.length : 0;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = (index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1)) + 1;
      }
      if (value !== value) {
        return indexOfNaN(array, index, true);
      }
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3, 1, 2, 3];
     *
     * _.pull(array, 2, 3);
     * console.log(array);
     * // => [1, 1]
     */
    var pull = rest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3, 1, 2, 3];
     *
     * _.pullAll(array, [2, 3]);
     * console.log(array);
     * // => [1, 1]
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which uniqueness is computed. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAllBy(array, values, getIteratee(iteratee))
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove,
     *  specified individually or in arrays.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [5, 10, 15, 20];
     * var evens = _.pullAt(array, 1, 3);
     *
     * console.log(array);
     * // => [5, 15]
     *
     * console.log(evens);
     * // => [10, 20]
     */
    var pullAt = rest(function(array, indexes) {
      indexes = arrayMap(baseFlatten(indexes), String);

      var result = baseAt(array, indexes);
      basePullAt(array, indexes.sort(compareAscending));
      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @category Array
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array ? nativeReverse.call(array) : array;
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of [`Array#slice`](https://mdn.io/Array/slice)
     * to ensure dense arrays are returned.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value` should
     * be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     *
     * _.sortedIndex([4, 5], 4);
     * // => 0
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted into `array`.
     * @example
     *
     * var dict = { 'thirty': 30, 'forty': 40, 'fifty': 50 };
     *
     * _.sortedIndexBy(['thirty', 'fifty'], 'forty', _.propertyOf(dict));
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([1, 1, 2, 2], 2);
     * // => 2
     */
    function sortedIndexOf(array, value) {
      var length = array ? array.length : 0;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5], 4);
     * // => 1
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted into `array`.
     * @example
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([1, 1, 2, 2], 2);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array ? array.length : 0;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniqBy(array, getIteratee(iteratee))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      return drop(array, 1);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with three
     * arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false},
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2, 1], [4, 2], [1, 2]);
     * // => [2, 1, 4]
     */
    var union = rest(function(arrays) {
      return baseUniq(baseFlatten(arrays, false, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by which
     * uniqueness is computed. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1, 1.2], [4.3, 2.4], Math.floor);
     * // => [2.1, 1.2, 4.3]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = rest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, false, true), getIteratee(iteratee));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = rest(function(arrays) {
      var comparator = last(arrays);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return baseUniq(baseFlatten(arrays, false, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length)
        ? baseUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length)
        ? baseUniq(array, getIteratee(iteratee))
        : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The comparator is invoked with
     * two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 },  { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      return (array && array.length)
        ? baseUniq(array, undefined, comparator)
        : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     *
     * _.unzip(zipped);
     * // => [['fred', 'barney'], [30, 40], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to filter.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.without([1, 2, 1, 3], 1, 2);
     * // => [3]
     */
    var without = rest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of values.
     * @example
     *
     * _.xor([2, 1], [4, 2]);
     * // => [1, 4]
     */
    var xor = rest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by which
     * uniqueness is computed. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [4.3, 2.4], Math.floor);
     * // => [1.2, 4.3]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = rest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The comparator is invoked with
     * two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = rest(function(arrays) {
      var comparator = last(arrays);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the first
     * elements of the given arrays, the second of which contains the second elements
     * of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     */
    var zip = rest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property names and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} [props=[]] The property names.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} [props=[]] The property names.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = rest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object that wraps `value` with explicit method chaining enabled.
     * The result of such method chaining must be unwrapped with `_#value`.
     *
     * @static
     * @memberOf _
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain.
     *
     * @static
     * @memberOf _
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths of elements to pick,
     *  specified individually or in arrays.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     *
     * _(['a', 'b', 'c']).at(0, 2).value();
     * // => ['a', 'c']
     */
    var wrapperAt = rest(function(paths) {
      paths = baseFlatten(paths);
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Enables explicit method chaining on the wrapper object.
     *
     * @name chain
     * @memberOf _
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chained sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * This method is the wrapper version of `_.flatMap`.
     *
     * @name flatMap
     * @memberOf _
     * @category Seq
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _([1, 2]).flatMap(duplicate).value();
     * // => [1, 1, 2, 2]
     */
    function wrapperFlatMap(iteratee) {
      return this.map(iteratee).flatten();
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chained sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({ 'func': thru, 'args': [reverse], 'thisArg': undefined });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chained sequence to extract the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is the number of times the key was returned by `iteratee`.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check, else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'active': false },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three arguments:
     * (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three arguments:
     * (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    function find(collection, predicate) {
      predicate = getIteratee(predicate, 3);
      if (isArray(collection)) {
        var index = baseFindIndex(collection, predicate);
        return index > -1 ? collection[index] : undefined;
      }
      return baseFind(collection, predicate, baseEach);
    }

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    function findLast(collection, predicate) {
      predicate = getIteratee(predicate, 3);
      if (isArray(collection)) {
        var index = baseFindIndex(collection, predicate, true);
        return index > -1 ? collection[index] : undefined;
      }
      return baseFind(collection, predicate, baseEachRight);
    }

    /**
     * Creates an array of flattened values by running each element in `collection`
     * through `iteratee` and concating its result to the other mapped values.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee));
    }

    /**
     * Iterates over elements of `collection` invoking `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length" property
     * are iterated like arrays. To avoid this behavior use `_.forIn` or `_.forOwn`
     * for object iteration.
     *
     * @static
     * @memberOf _
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @example
     *
     * _([1, 2]).forEach(function(value) {
     *   console.log(value);
     * });
     * // => logs `1` then `2`
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a' then 'b' (iteration order is not guaranteed)
     */
    function forEach(collection, iteratee) {
      return (typeof iteratee == 'function' && isArray(collection))
        ? arrayEach(collection, iteratee)
        : baseEach(collection, toFunction(iteratee));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => logs `2` then `1`
     */
    function forEachRight(collection, iteratee) {
      return (typeof iteratee == 'function' && isArray(collection))
        ? arrayEachRight(collection, iteratee)
        : baseEachRight(collection, toFunction(iteratee));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is an array of elements responsible for generating the key.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        result[key] = [value];
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string it's checked
     * for a substring of `value`, otherwise [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
     * // => true
     *
     * _.includes('pebbles', 'eb');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `methodName` is a function it's
     * invoked for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = rest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          isProp = isKey(path),
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);
        result[++index] = func ? apply(func, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      result[key] = value;
    });

    /**
     * Creates an array of values by running each element in `collection` through
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `curry`, `curryRight`, `drop`, `dropRight`, `every`, `fill`,
     * `invert`, `parseInt`, `random`, `range`, `rangeRight`, `slice`, `some`,
     * `sortBy`, `take`, `takeRight`, `template`, `trim`, `trimEnd`, `trimStart`,
     * and `words`
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} [iteratees=[_.identity]] The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 42 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` through `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      predicate = getIteratee(predicate, 3);
      return func(collection, function(value, index, collection) {
        return !predicate(value, index, collection);
      });
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var array = isArrayLike(collection) ? collection : values(collection),
          length = array.length;

      return length > 0 ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=0] The number of elements to sample.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n) {
      var index = -1,
          result = toArray(collection),
          length = result.length,
          lastIndex = length - 1;

      n = baseClamp(toInteger(n), 0, length);
      while (++index < n) {
        var rand = baseRandom(index, lastIndex),
            value = result[rand];

        result[rand] = result[index];
        result[index] = value;
      }
      result.length = n;
      return result;
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      return sampleSize(collection, MAX_ARRAY_LENGTH);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable properties for objects.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        var result = collection.length;
        return (result && isString(collection)) ? stringSize(collection) : result;
      }
      return keys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection through each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[]|Object|Object[]|string|string[])} [iteratees=[_.identity]]
     *  The iteratees to sort by, specified individually or in arrays.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 42 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, function(o) { return o.user; });
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]
     *
     * _.sortBy(users, 'user', function(o) {
     *   return Math.floor(o.age / 10);
     * });
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
     */
    var sortBy = rest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees.length = 1;
      }
      return baseOrderBy(collection, baseFlatten(iteratees), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => logs the number of milliseconds it took for the deferred function to be invoked
     */
    var now = Date.now;

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => logs 'done saving!' after the two async saves have completed
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that accepts up to `n` arguments, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Function} Returns the new function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => allows adding up to 4 contacts to the list
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and prepends any additional `_.bind` arguments to those provided to the
     * bound function.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind` this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var greet = function(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * };
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = rest(function(func, thisArg, partials) {
      var bitmask = BIND_FLAG;
      if (partials.length) {
        var placeholder = lodash.placeholder || bind.placeholder,
            holders = replaceHolders(partials, placeholder);

        bitmask |= PARTIAL_FLAG;
      }
      return createWrapper(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` and prepends
     * any additional `_.bindKey` arguments to those provided to the bound function.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist.
     * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = rest(function(object, key, partials) {
      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
      if (partials.length) {
        var placeholder = lodash.placeholder || bindKey.placeholder,
            holders = replaceHolders(partials, placeholder);

        bitmask |= PARTIAL_FLAG;
      }
      return createWrapper(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrapper(func, CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = lodash.placeholder || curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrapper(func, CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = lodash.placeholder || curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide an options object to indicate whether `func` should be invoked on
     * the leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent calls
     * to the debounced function return the result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the debounced function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=false] Specify invoking on the leading
     *  edge of the timeout.
     * @param {number} [options.maxWait] The maximum time `func` is allowed to be
     *  delayed before it's invoked.
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
     *  edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var args,
          maxTimeoutId,
          result,
          stamp,
          thisArg,
          timeoutId,
          trailingCall,
          lastCalled = 0,
          leading = false,
          maxWait = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxWait = 'maxWait' in options && nativeMax(toNumber(options.maxWait) || 0, wait);
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function cancel() {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        if (maxTimeoutId) {
          clearTimeout(maxTimeoutId);
        }
        lastCalled = 0;
        args = maxTimeoutId = thisArg = timeoutId = trailingCall = undefined;
      }

      function complete(isCalled, id) {
        if (id) {
          clearTimeout(id);
        }
        maxTimeoutId = timeoutId = trailingCall = undefined;
        if (isCalled) {
          lastCalled = now();
          result = func.apply(thisArg, args);
          if (!timeoutId && !maxTimeoutId) {
            args = thisArg = undefined;
          }
        }
      }

      function delayed() {
        var remaining = wait - (now() - stamp);
        if (remaining <= 0 || remaining > wait) {
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }

      function flush() {
        if ((timeoutId && trailingCall) || (maxTimeoutId && trailing)) {
          result = func.apply(thisArg, args);
        }
        cancel();
        return result;
      }

      function maxDelayed() {
        complete(trailing, timeoutId);
      }

      function debounced() {
        args = arguments;
        stamp = now();
        thisArg = this;
        trailingCall = trailing && (timeoutId || !leading);

        if (maxWait === false) {
          var leadingCall = leading && !timeoutId;
        } else {
          if (!lastCalled && !maxTimeoutId && !leading) {
            lastCalled = stamp;
          }
          var remaining = maxWait - (stamp - lastCalled),
              isCalled = remaining <= 0 || remaining > maxWait;

          if (isCalled) {
            if (maxTimeoutId) {
              maxTimeoutId = clearTimeout(maxTimeoutId);
            }
            lastCalled = stamp;
            result = func.apply(thisArg, args);
          }
          else if (!maxTimeoutId) {
            maxTimeoutId = setTimeout(maxDelayed, remaining);
          }
        }
        if (isCalled && timeoutId) {
          timeoutId = clearTimeout(timeoutId);
        }
        else if (!timeoutId && wait !== maxWait) {
          timeoutId = setTimeout(delayed, wait);
        }
        if (leadingCall) {
          isCalled = true;
          result = func.apply(thisArg, args);
        }
        if (isCalled && !timeoutId && !maxTimeoutId) {
          args = thisArg = undefined;
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => logs 'deferred' after one or more milliseconds
     */
    var defer = rest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => logs 'later' after one second
     */
    var delay = rest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrapper(func, FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoizing function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result);
        return result;
      };
      memoized.cache = new memoize.Cache;
      return memoized;
    }

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        return !predicate.apply(this, arguments);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // `initialize` invokes `createApplication` once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with arguments transformed by
     * corresponding `transforms`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms] The functions to transform
     * arguments, specified individually or in arrays.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, square, doubled);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = rest(function(func, transforms) {
      transforms = arrayMap(baseFlatten(transforms), getIteratee());

      var funcsLength = transforms.length;
      return rest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partial` arguments prepended
     * to those provided to the new function. This method is like `_.bind` except
     * it does **not** alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) {
     *   return greeting + ' ' + name;
     * };
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = rest(function(func, partials) {
      var placeholder = lodash.placeholder || partial.placeholder,
          holders = replaceHolders(partials, placeholder);

      return createWrapper(func, PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to those provided to the new function.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) {
     *   return greeting + ' ' + name;
     * };
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = rest(function(func, partials) {
      var placeholder = lodash.placeholder || partialRight.placeholder,
          holders = replaceHolders(partials, placeholder);

      return createWrapper(func, PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified indexes where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes,
     *  specified individually or in arrays.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, 2, 0, 1);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = rest(function(func, indexes) {
      return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes));
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as an array.
     *
     * **Note:** This method is based on the [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = nativeMax(start === undefined ? (func.length - 1) : toInteger(start), 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        switch (start) {
          case 0: return func.call(this, array);
          case 1: return func.call(this, args[0], array);
          case 2: return func.call(this, args[0], args[1], array);
        }
        var otherArgs = Array(start + 1);
        index = -1;
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = array;
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the created
     * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).
     *
     * **Note:** This method is based on the [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? 0 : nativeMax(toInteger(start), 0);
      return rest(function(args) {
        var array = args[start],
            otherArgs = args.slice(0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide an options object to indicate whether
     * `func` should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the throttled function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=true] Specify invoking on the leading
     *  edge of the timeout.
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
     *  edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, { 'leading': leading, 'maxWait': wait, 'trailing': trailing });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to the wrapper function as its
     * first argument. Any additional arguments provided to the function are
     * appended to those provided to the wrapper function. The wrapper is invoked
     * with the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} wrapper The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      wrapper = wrapper == null ? identity : wrapper;
      return partial(wrapper, value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      return baseClone(value, false, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, true);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      return baseClone(value, true, customizer);
    }

    /**
     * Performs a [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'fred' };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    function gt(value, other) {
      return value > other;
    }

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    function gte(value, other) {
      return value >= other;
    }

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    function isArguments(value) {
      // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.
      return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
        (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
    }

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    function isArrayBuffer(value) {
      return isObjectLike(value) && objectToString.call(value) == arrayBufferTag;
    }

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null &&
        !(typeof value == 'function' && isFunction(value)) && isLength(getLength(value));
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object, else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && objectToString.call(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = !Buffer ? constant(false) : function(value) {
      return value instanceof Buffer;
    };

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    function isDate(value) {
      return isObjectLike(value) && objectToString.call(value) == dateTag;
    }

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
    }

    /**
     * Checks if `value` is empty. A value is considered empty unless it's an
     * `arguments` object, array, string, or jQuery-like collection with a length
     * greater than `0` or an object with own enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Array|Object|string} value The value to inspect.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (isArrayLike(value) &&
          (isArray(value) || isString(value) || isFunction(value.splice) || isArguments(value))) {
        return !value.length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are **not** supported.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'fred' };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which is
     * invoked to compare values. If `customizer` returns `undefined` comparisons are
     * handled by the method instead. The `customizer` is invoked with up to six arguments:
     * (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      return isObjectLike(value) &&
        typeof value.message == 'string' && objectToString.call(value) == errorTag;
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MAX_VALUE);
     * // => true
     *
     * _.isFinite(3.14);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 8 which returns 'object' for typed array constructors, and
      // PhantomJS 1.9 which returns 'function' for `NodeList` instances.
      var tag = isObject(value) ? objectToString.call(value) : '';
      return tag == funcTag || tag == genTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This function is loosely based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return !!value && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    function isMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * Performs a deep comparison between `object` and `source` to determine if
     * `object` contains equivalent property values.
     *
     * **Note:** This method supports comparing the same values as `_.isEqual`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.isMatch(object, { 'age': 40 });
     * // => true
     *
     * _.isMatch(object, { 'age': 36 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined` comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)
     * which returns `true` for `undefined` and other non-numeric values.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a native function.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (value == null) {
        return false;
      }
      if (isFunction(value)) {
        return reIsNative.test(funcToString.call(value));
      }
      return isObjectLike(value) &&
        (isHostObject(value) ? reIsNative : reIsHostCtor).test(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
     * as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && objectToString.call(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || objectToString.call(value) != objectTag || isHostObject(value)) {
        return false;
      }
      var proto = objectProto;
      if (typeof value.constructor == 'function') {
        proto = getPrototypeOf(value);
      }
      if (proto === null) {
        return true;
      }
      var Ctor = proto.constructor;
      return (typeof Ctor == 'function' &&
        Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    function isRegExp(value) {
      return isObject(value) && objectToString.call(value) == regexpTag;
    }

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    function isSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && objectToString.call(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    function isTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
    }

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && objectToString.call(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    function lt(value, other) {
      return value < other;
    }

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    function lte(value, other) {
      return value <= other;
    }

    /**
     * Converts `value` to an array.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (iteratorSymbol && value[iteratorSymbol]) {
        return iteratorToArray(value[iteratorSymbol]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This function is loosely based on [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3');
     * // => 3
     */
    function toInteger(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      var remainder = value % 1;
      return value === value ? (remainder ? value - remainder : value) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3);
     * // => 3
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3');
     * // => 3
     */
    function toNumber(value) {
      if (isObject(value)) {
        var other = isFunction(value.valueOf) ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable
     * properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3');
     * // => 3
     */
    function toSafeInteger(value) {
      return baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
    }

    /**
     * Converts `value` to a string if it's not one. An empty string is returned
     * for `null` and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (value == null) {
        return '';
      }
      if (isSymbol(value)) {
        return Symbol ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable properties of source objects to the destination
     * object. Source objects are applied from left to right. Subsequent sources
     * overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.c = 3;
     * }
     *
     * function Bar() {
     *   this.e = 5;
     * }
     *
     * Foo.prototype.d = 4;
     * Bar.prototype.f = 6;
     *
     * _.assign({ 'a': 1 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3, 'e': 5 }
     */
    var assign = createAssigner(function(object, source) {
      copyObject(source, keys(source), object);
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * function Bar() {
     *   this.d = 4;
     * }
     *
     * Foo.prototype.c = 3;
     * Bar.prototype.e = 5;
     *
     * _.assignIn({ 'a': 1 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer` which
     * is invoked to produce the assigned values. If `customizer` returns `undefined`
     * assignment is handled by the method instead. The `customizer` is invoked
     * with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObjectWith(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer` which
     * is invoked to produce the assigned values. If `customizer` returns `undefined`
     * assignment is handled by the method instead. The `customizer` is invoked
     * with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObjectWith(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths of elements to pick,
     *  specified individually or in arrays.
     * @returns {Array} Returns the new array of picked elements.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     *
     * _.at(['a', 'b', 'c'], 0, 2);
     * // => ['a', 'c']
     */
    var at = rest(function(object, paths) {
      return baseAt(object, baseFlatten(paths));
    });

    /**
     * Creates an object that inherits from the `prototype` object. If a `properties`
     * object is given its own enumerable properties are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties ? baseAssign(result, properties) : result;
    }

    /**
     * Assigns own and inherited enumerable properties of source objects to the
     * destination object for all destination properties that resolve to `undefined`.
     * Source objects are applied from left to right. Once a property is set,
     * additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
     * // => { 'user': 'barney', 'age': 36 }
     */
    var defaults = rest(function(args) {
      args.push(undefined, assignInDefaults);
      return apply(assignInWith, undefined, args);
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });
     * // => { 'user': { 'name': 'barney', 'age': 36 } }
     *
     */
    var defaultsDeep = rest(function(args) {
      args.push(undefined, mergeDefaults);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFind(object, getIteratee(predicate, 3), baseForOwn, true);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFind(object, getIteratee(predicate, 3), baseForOwnRight, true);
    }

    /**
     * Iterates over own and inherited enumerable properties of an object invoking
     * `iteratee` for each property. The iteratee is invoked with three arguments:
     * (value, key, object). Iteratee functions may exit iteration early by explicitly
     * returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a', 'b', then 'c' (iteration order is not guaranteed)
     */
    function forIn(object, iteratee) {
      return object == null ? object : baseFor(object, toFunction(iteratee), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'
     */
    function forInRight(object, iteratee) {
      return object == null ? object : baseForRight(object, toFunction(iteratee), keysIn);
    }

    /**
     * Iterates over own enumerable properties of an object invoking `iteratee`
     * for each property. The iteratee is invoked with three arguments:
     * (value, key, object). Iteratee functions may exit iteration early by
     * explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a' then 'b' (iteration order is not guaranteed)
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, toFunction(iteratee));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, toFunction(iteratee));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the new array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the new array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined` the `defaultValue` is used in its place.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': { 'c': 3 } } };
     * var other = _.create({ 'a': _.create({ 'b': _.create({ 'c': 3 }) }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b.c');
     * // => true
     *
     * _.has(object, ['a', 'b', 'c']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': _.create({ 'c': 3 }) }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b.c');
     * // => true
     *
     * _.hasIn(object, ['a', 'b', 'c']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite property
     * assignments of previous values.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` through `iteratee`.
     * The corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = rest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      var isProto = isPrototype(object);
      if (!(isProto || isArrayLike(object))) {
        return baseKeys(object);
      }
      var indexes = indexKeys(object),
          skipIndexes = !!indexes,
          result = indexes || [],
          length = result.length;

      for (var key in object) {
        if (baseHas(object, key) &&
            !(skipIndexes && (key == 'length' || isIndex(key, length))) &&
            !(isProto && key == 'constructor')) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      var index = -1,
          isProto = isPrototype(object),
          props = baseKeysIn(object),
          propsLength = props.length,
          indexes = indexKeys(object),
          skipIndexes = !!indexes,
          result = indexes || [],
          length = result.length;

      while (++index < propsLength) {
        var key = props[index];
        if (!(skipIndexes && (key == 'length' || isIndex(key, length))) &&
            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * property of `object` through `iteratee`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        result[iteratee(value, key, object)] = value;
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated by
     * running each own enumerable property of `object` through `iteratee`. The
     * iteratee function is invoked with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        result[key] = iteratee(value, key, object);
      });
      return result;
    }

    /**
     * Recursively merges own and inherited enumerable properties of source
     * objects into the destination object, skipping source properties that resolve
     * to `undefined`. Array and plain object properties are merged recursively.
     * Other objects and value types are overridden by assignment. Source objects
     * are applied from left to right. Subsequent sources overwrite property
     * assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var users = {
     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
     * };
     *
     * var ages = {
     *   'data': [{ 'age': 36 }, { 'age': 40 }]
     * };
     *
     * _.merge(users, ages);
     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined` merging is handled by the
     * method instead. The `customizer` is invoked with seven arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = {
     *   'fruits': ['apple'],
     *   'vegetables': ['beet']
     * };
     *
     * var other = {
     *   'fruits': ['banana'],
     *   'vegetables': ['carrot']
     * };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable properties of `object` that are not omitted.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [props] The property names to omit, specified
     *  individually or in arrays..
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = rest(function(object, props) {
      if (object == null) {
        return {};
      }
      props = arrayMap(baseFlatten(props), String);
      return basePick(object, baseDifference(keysIn(object), props));
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of the
     * own and inherited enumerable properties of `object` that `predicate`
     * doesn't return truthy for.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      predicate = getIteratee(predicate, 2);
      return basePickBy(object, function(value, key) {
        return !predicate(value, key);
      });
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [props] The property names to pick, specified
     *  individually or in arrays.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = rest(function(object, props) {
      return object == null ? {} : basePick(object, baseFlatten(props));
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      return object == null ? {} : basePickBy(object, getIteratee(predicate, 2));
    }

    /**
     * This method is like `_.get` except that if the resolved value is a function
     * it's invoked with the `this` binding of its parent object and its result
     * is returned.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      if (!isKey(path, object)) {
        path = baseToPath(path);
        var result = get(object, path);
        object = parent(object, path);
      } else {
        result = object == null ? undefined : object[path];
      }
      if (result === undefined) {
        result = defaultValue;
      }
      return isFunction(result) ? result.call(object) : result;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, 'x[0].y.z', 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.setWith({ '0': { 'length': 2 } }, '[0][1][2]', 3, Object);
     * // => { '0': { '1': { '2': 3 }, 'length': 2 } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable key-value pairs for `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the new array of key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    function toPairs(object) {
      return baseToPairs(object, keys(object));
    }

    /**
     * Creates an array of own and inherited enumerable key-value pairs for `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the new array of key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 1]] (iteration order is not guaranteed)
     */
    function toPairsIn(object) {
      return baseToPairs(object, keysIn(object));
    }

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own enumerable
     * properties through `iteratee`, with each invocation potentially mutating
     * the `accumulator` object. The iteratee is invoked with four arguments:
     * (accumulator, value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Array|Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object) || isTypedArray(object);
      iteratee = getIteratee(iteratee, 4);

      if (accumulator == null) {
        if (isArr || isObject(object)) {
          var Ctor = object.constructor;
          if (isArr) {
            accumulator = isArray(object) ? new Ctor : [];
          } else {
            accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);
          }
        } else {
          accumulator = {};
        }
      }
      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * Creates an array of the own enumerable property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object ? baseValues(object, keys(object)) : [];
    }

    /**
     * Creates an array of the own and inherited enumerable property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? baseValues(object, keysIn(object)) : [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to but not including, `end`. If
     * `end` is not specified it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toNumber(start) || 0;
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toNumber(end) || 0;
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are floats,
     * a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toNumber(lower) || 0;
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toNumber(upper) || 0;
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar');
     * // => 'fooBar'
     *
     * _.camelCase('__foo_bar__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search from.
     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = typeof target == 'string' ? target : (target + '');

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      position -= target.length;
      return position >= 0 && string.indexOf(target, position) == position;
    }

    /**
     * Converts the characters "&", "<", ">", '"', "'", and "\`" in `string` to
     * their corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value.
     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * Backticks are escaped because in IE < 9, they can break out of
     * attribute values or HTML comments. See [#59](https://html5sec.org/#59),
     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
     * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)
     * for more details.
     *
     * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)
     * to reduce XSS vectors.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__foo_bar__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = stringSize(string);
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2,
          leftLength = nativeFloor(mid),
          rightLength = nativeCeil(mid);

      return createPadding('', leftLength, chars) + string + createPadding('', rightLength, chars);
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      return string + createPadding(string, length, chars);
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      return createPadding(string, length, chars) + string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,
     * in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#x15.1.2.2)
     * of `parseInt`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      // Chrome fails to trim leading <BOM> whitespace characters.
      // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      string = toString(string).replace(reTrim, '');
      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=0] The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n) {
      string = toString(string);
      n = toInteger(n);

      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        string += string;
      } while (n);

      return result;
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--foo-bar');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the new array of string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      return toString(string).split(separator, limit);
    }

    /**
     * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__foo_bar__');
     * // => 'Foo Bar'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + capitalize(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = baseClamp(toInteger(position), 0, string.length);
      return string.lastIndexOf(target, position) == position;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options] The options object.
     * @param {RegExp} [options.escape] The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
     * @param {Object} [options.imports] An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.
     * @param {string} [options.variable] The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES delimiter as an alternative to the default "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, assignInDefaults);

      var imports = assignInWith({}, options.imports, settings.imports, assignInDefaults),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar');
     * // => '--foo-bar'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar');
     * // => '--FOO-BAR'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (!string) {
        return string;
      }
      if (guard || chars === undefined) {
        return string.replace(reTrim, '');
      }
      chars = (chars + '');
      if (!chars) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars);

      return strSymbols.slice(charsStartIndex(strSymbols, chrSymbols), charsEndIndex(strSymbols, chrSymbols) + 1).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (!string) {
        return string;
      }
      if (guard || chars === undefined) {
        return string.replace(reTrimEnd, '');
      }
      chars = (chars + '');
      if (!chars) {
        return string;
      }
      var strSymbols = stringToArray(string);
      return strSymbols.slice(0, charsEndIndex(strSymbols, stringToArray(chars)) + 1).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (!string) {
        return string;
      }
      if (guard || chars === undefined) {
        return string.replace(reTrimStart, '');
      }
      chars = (chars + '');
      if (!chars) {
        return string;
      }
      var strSymbols = stringToArray(string);
      return strSymbols.slice(charsStartIndex(strSymbols, stringToArray(chars))).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? toString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (reHasComplexSymbol.test(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? strSymbols.slice(0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(separator, end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their
     * corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional HTML
     * entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        pattern = reHasComplexWord.test(string) ? reComplexWord : reBasicWord;
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Function} func The function to attempt.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = rest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isObject(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind,
     *  specified individually or in arrays.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'onClick': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, 'onClick');
     * jQuery(element).on('click', view.onClick);
     * // => logs 'clicked docs' when clicked
     */
    var bindAll = rest(function(object, methodNames) {
      arrayEach(baseFlatten(methodNames), function(key) {
        object[key] = bind(object[key], object);
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` invoking the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.constant(true),                _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs ? pairs.length : 0,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return rest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.filter(users, _.conforms({ 'age': _.partial(_.gt, _, 38) }));
     * // => [{ 'user': 'fred', 'age': 40 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, true));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var getter = _.constant(object);
     *
     * getter() === object;
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] Functions to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow(_.add, square);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] Functions to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight(square, _.add);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument given to it.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'user': 'fred' };
     *
     * _.identity(object) === object;
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name the created callback returns the
     * property value for a given element. If `func` is an object the created
     * callback returns `true` for elements that contain the equivalent object properties, otherwise it returns `false`.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(callback, func) {
     *   var p = /^(\S+)\s*([<>])\s*(\S+)$/.exec(func);
     *   return !p ? callback(func) : function(object) {
     *     return (p[2] == '>' ? object[p[1]] > p[3] : object[p[1]] < p[3]);
     *   };
     * });
     *
     * _.filter(users, 'age > 36');
     * // => [{ 'user': 'fred', 'age': 40 }]
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, true));
    }

    /**
     * Creates a function that performs a deep partial comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** This method supports comparing the same values as `_.isEqual`.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, _.matches({ 'age': 40, 'active': false }));
     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, true));
    }

    /**
     * Creates a function that performs a deep partial comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** This method supports comparing the same values as `_.isEqual`.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * _.find(users, _.matchesProperty('user', 'fred'));
     * // => { 'user': 'fred' }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, true));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': { 'c': _.constant(2) } } },
     *   { 'a': { 'b': { 'c': _.constant(1) } } }
     * ];
     *
     * _.map(objects, _.method('a.b.c'));
     * // => [2, 1]
     *
     * _.invokeMap(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');
     * // => [1, 2]
     */
    var method = rest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = rest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable function properties of a source object to the
     * destination object. If `object` is a function then methods are added to
     * its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.chain=true] Specify whether the functions added
     *  are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = (isObject(options) && 'chain' in options) ? options.chain : true,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * A no-operation function that returns `undefined` regardless of the
     * arguments it receives.
     *
     * @static
     * @memberOf _
     * @category Util
     * @example
     *
     * var object = { 'user': 'fred' };
     *
     * _.noop(object) === undefined;
     * // => true
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that returns its nth argument.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.nthArg(1);
     *
     * func('a', 'b', 'c');
     * // => 'b'
     */
    function nthArg(n) {
      n = toInteger(n);
      return function() {
        return arguments[n];
      };
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments provided
     * to the created function and returns their results.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} iteratees The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over(Math.max, Math.min);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments provided to the created function.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} predicates The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery(Boolean, isFinite);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments provided to the created function.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} predicates The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome(Boolean, isFinite);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': { 'c': 2 } } },
     *   { 'a': { 'b': { 'c': 1 } } }
     * ];
     *
     * _.map(objects, _.property('a.b.c'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the new array of numbers.
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the new array of numbers.
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * Invokes the iteratee function `n` times, returning an array of the results
     * of each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(true));
     * // => [true, true, true, true]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = toFunction(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     *
     * var path = ['a', 'b', 'c'],
     *     newPath = _.toPath(path);
     *
     * console.log(newPath);
     * // => ['a', 'b', 'c']
     *
     * console.log(path === newPath);
     * // => false
     */
    function toPath(value) {
      return isArray(value) ? arrayMap(value, String) : stringToPath(value);
    }

    /**
     * Generates a unique ID. If `prefix` is given the ID is appended to it.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {string} [prefix] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    function add(augend, addend) {
      var result;
      if (augend === undefined && addend === undefined) {
        return 0;
      }
      if (augend !== undefined) {
        result = augend;
      }
      if (addend !== undefined) {
        result = result === undefined ? addend : (result + addend);
      }
      return result;
    }

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey
     * `undefined` is returned.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, gt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee), gt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return sum(array) / (array ? array.length : 0);
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey
     * `undefined` is returned.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, lt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee), lt)
        : undefined;
    }

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    function subtract(minuend, subtrahend) {
      var result;
      if (minuend === undefined && subtrahend === undefined) {
        return 0;
      }
      if (minuend !== undefined) {
        result = minuend;
      }
      if (subtrahend !== undefined) {
        result = result === undefined ? subtrahend : (result - subtrahend);
      }
      return result;
    }

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    // Avoid inheriting from `Object.prototype` when possible.
    Hash.prototype = nativeCreate ? nativeCreate(null) : objectProto;

    // Add functions to the `MapCache`.
    MapCache.prototype.clear = mapClear;
    MapCache.prototype['delete'] = mapDelete;
    MapCache.prototype.get = mapGet;
    MapCache.prototype.has = mapHas;
    MapCache.prototype.set = mapSet;

    // Add functions to the `SetCache`.
    SetCache.prototype.push = cachePush;

    // Add functions to the `Stack` cache.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    // Assign cache to `_.memoize`.
    memoize.Cache = MapCache;

    // Add functions that return wrapped values when chaining.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add functions to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add functions that return unwrapped values when chaining.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.deburr = deburr;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type string
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        var filtered = this.__filtered__;
        if (filtered && !index) {
          return new LazyWrapper(this);
        }
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = this.clone();
        if (filtered) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({ 'size': nativeMin(n, MAX_ARRAY_LENGTH), 'type': methodName + (result.__dir__ < 0 ? 'Right' : '') });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({ 'iteratee': getIteratee(iteratee, 3), 'type': type });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = rest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      predicate = getIteratee(predicate, 3);
      return this.filter(function(value) {
        return !predicate(value);
      });
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` and `String` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          return func.apply(this.value(), args);
        }
        return this[chainName](function(value) {
          return func.apply(value, args);
        });
      };
    });

    // Map minified function names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = (lodashFunc.name + ''),
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{ 'name': 'wrapper', 'func': undefined }];

    // Add functions to the lazy wrapper.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chaining functions to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.flatMap = wrapperFlatMap;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    if (iteratorSymbol) {
      lodash.prototype[iteratorSymbol] = wrapperToIterator;
    }
    return lodash;
  }

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Expose lodash on the free variable `window` or `self` when available. This
  // prevents errors in cases where lodash is loaded by a script tag in the presence
  // of an AMD loader. See http://requirejs.org/docs/errors.html#mismatch for more details.
  (freeWindow || freeSelf || {})._ = _;

  // Some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function() {
      return _;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
  else if (freeExports && freeModule) {
    // Export for Node.js.
    if (moduleExports) {
      (freeModule.exports = _)._ = _;
    }
    // Export for CommonJS support.
    freeExports._ = _;
  }
  else {
    // Export to the global object.
    root._ = _;
  }
}.call(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],328:[function(require,module,exports){
(function (global){
var os = require('os');

var lib = {};

function parallel(tasks, done) {
    var results = [];
    var errs = [];
    var length = 0;
    var doneLength = 0;
    function doneIt(ix, err, result) {
        if (err) {
            errs[ix] = err;
        } else {
            results[ix] = result;
        }
        doneLength += 1;
        if (doneLength >= length) {
            done(errs.length > 0 ? errs : errs, results);
        }
    }
    Object.keys(tasks).forEach(function (key) {
        length += 1;
        var task = tasks[key];
        (global.setImmediate || global.setTimeout)(function () {
            task(doneIt.bind(null, key), 1);
        });
    });
}

lib.networkInterfaces = function () {
    var ifaces = os.networkInterfaces();
    var allAddresses = {};
    Object.keys(ifaces).forEach(function (iface) {
        addresses = {};
        var hasAddresses = false;
        ifaces[iface].forEach(function (address) {
            if (!address.internal) {
                addresses[(address.family || "").toLowerCase()] = address.address;
                hasAddresses = true;
                if (address.mac) {
                    addresses.mac = address.mac;
                }
            }
        });
        if (hasAddresses) {
            allAddresses[iface] = addresses;
        }
    });
    return allAddresses;
};

var _getMacAddress;
switch (os.platform()) {

    case 'win32':
        _getMacAddress = require('./lib/windows.js');
        break;

    case 'linux':
        _getMacAddress = require('./lib/linux.js');
        break;

    case 'darwin':
    case 'sunos':
        _getMacAddress = require('./lib/unix.js');
        break;
        
    default:
        console.warn("node-macaddress: Unkown os.platform(), defaulting to `unix'.");
        _getMacAddress = require('./lib/unix.js');
        break;

}

lib.one = function (iface, callback) {
    if (typeof iface === 'function') {
        callback = iface;

        var ifaces = lib.networkInterfaces();
        var alleged = [ 'eth0', 'eth1', 'en0', 'en1' ];
        iface = Object.keys(ifaces)[0];
        for (var i = 0; i < alleged.length; i++) {
            if (ifaces[alleged[i]]) {
                iface = alleged[i];
                break;
            }
        }
        if (!ifaces[iface]) {
            if (typeof callback === 'function') {
                callback("no interfaces found", null);
            }
            return null;
        }
        if (ifaces[iface].mac) {
            if (typeof callback === 'function') {
                callback(null, ifaces[iface].mac);
            }
            return ifaces[iface].mac;
        }
    }
    if (typeof callback === 'function') {
        _getMacAddress(iface, callback);
    }
    return null;
};

lib.all = function (callback) {

    var ifaces = lib.networkInterfaces();
    var resolve = {};

    Object.keys(ifaces).forEach(function (iface) {
        if (!ifaces[iface].mac) {
            resolve[iface] = _getMacAddress.bind(null, iface);
        }
    });

    if (Object.keys(resolve).length === 0) {
        if (typeof callback === 'function') {
            callback(null, ifaces);
        }
        return ifaces;
    }

    parallel(resolve, function (err, result) {
        Object.keys(result).forEach(function (iface) {
            ifaces[iface].mac = result[iface];
        });
        if (typeof callback === 'function') {
            callback(null, ifaces);
        }
    });
    return null;
};

module.exports = lib;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./lib/linux.js":329,"./lib/unix.js":330,"./lib/windows.js":331,"os":217}],329:[function(require,module,exports){
var exec = require('child_process').exec;

module.exports = function (iface, callback) {
    exec("cat /sys/class/net/" + iface + "/address", function (err, out) {
        if (err) {
            callback(err, null);
            return;
        }
        callback(null, out.trim().toLowerCase());
    });
};

},{"child_process":1}],330:[function(require,module,exports){
var exec = require('child_process').exec;

module.exports = function (iface, callback) {
    exec("ifconfig " + iface, function (err, out) {
        if (err) {
            callback(err, null);
            return;
        }
        var match = /[a-f0-9]{2}(:[a-f0-9]{2}){5}/.exec(out.toLowerCase());
        if (!match) {
            callback("did not find a mac address", null);
            return;
        }
        callback(null, match[0].toLowerCase());
    });
};

},{"child_process":1}],331:[function(require,module,exports){
var exec = require('child_process').exec;

var regexRegex = /[-\/\\^$*+?.()|[\]{}]/g;

function escape(string) {
    return string.replace(regexRegex, '\\$&');
}

module.exports = function (iface, callback) {
    exec("ipconfig /all", function (err, out) {
        if (err) {
            callback(err, null);
            return;
        }
        var match = new RegExp(escape(iface)).exec(out);
        if (!match) {
            callback("did not find interface in `ipconfig /all`", null);
            return;
        }
        out = out.substring(match.index + iface.length);
        match = /[A-Fa-f0-9]{2}(\-[A-Fa-f0-9]{2}){5}/.exec(out);
        if (!match) {
            callback("did not find a mac address", null);
            return;
        }
        callback(null, match[0].toLowerCase().replace(/\-/g, ':'));
    });
};

},{"child_process":1}],332:[function(require,module,exports){
var mcDataToNode=require("./lib/loader");
var indexer=require("./lib/indexer.js");
var protocolVersions=require('./minecraft-data/data/common/protocolVersions');
var versionsByMinecraftVersion=indexer.buildIndexFromArray(protocolVersions,"minecraftVersion");
var preNettyVersionsByProtocolVersion=indexer.buildIndexFromArrayNonUnique(protocolVersions.filter(function(e){return !e.usesNetty}),"version");
var postNettyVersionsByProtocolVersion=indexer.buildIndexFromArrayNonUnique(protocolVersions.filter(function(e){return e.usesNetty}),"version");

var cache={}; // prevent reindexing when requiring multiple time the same version

module.exports = function(mcVersion,preNetty)
{
  preNetty=preNetty || false;
  var majorVersion=toMajor(mcVersion,preNetty);
  if(majorVersion==null)
    return null;
  if(cache[majorVersion])
    return cache[majorVersion];
  var mcData=data[majorVersion];
  if(mcData==null)
    return null;
  var nmcData=mcDataToNode(mcData);
  cache[majorVersion]=nmcData;
  return nmcData;
};

function toMajor(mcVersion,preNetty)
{
  if(data[mcVersion])
    return mcVersion;
  if(versionsByMinecraftVersion[mcVersion])
    return versionsByMinecraftVersion[mcVersion].majorVersion;
  if(preNetty && preNettyVersionsByProtocolVersion[mcVersion])
    return preNettyVersionsByProtocolVersion[mcVersion][0].majorVersion;
  if(!preNetty && postNettyVersionsByProtocolVersion[mcVersion])
    return postNettyVersionsByProtocolVersion[mcVersion][0].majorVersion;
}

module.exports.versions=protocolVersions;
module.exports.versionsByMinecraftVersion=versionsByMinecraftVersion;
module.exports.preNettyVersionsByProtocolVersion=preNettyVersionsByProtocolVersion;
module.exports.postNettyVersionsByProtocolVersion=postNettyVersionsByProtocolVersion;

var data={
  "1.8":{
    blocks:require('./minecraft-data/data/1.8/blocks'),
    biomes: require('./minecraft-data/data/1.8/biomes'),
    effects: require('./minecraft-data/data/1.8/effects'),
    items: require('./minecraft-data/data/1.8/items'),
    recipes: require('./minecraft-data/data/1.8/recipes'),
    instruments: require('./minecraft-data/data/1.8/instruments'),
    materials: require('./minecraft-data/data/1.8/materials'),
    entities: require('./minecraft-data/data/1.8/entities'),
    protocol: require('./minecraft-data/data/1.8/protocol'),
    windows: require('./minecraft-data/data/1.8/windows'),
    version: require('./minecraft-data/data/1.8/version')
  },
  "1.9":{
    blocks:require('./minecraft-data/data/1.9/blocks'),
    biomes: require('./minecraft-data/data/1.9/biomes'),
    effects: require('./minecraft-data/data/1.9/effects'),
    items: require('./minecraft-data/data/1.9/items'),
    recipes: require('./minecraft-data/data/1.9/recipes'),
    instruments: require('./minecraft-data/data/1.9/instruments'),
    materials: require('./minecraft-data/data/1.9/materials'),
    entities: require('./minecraft-data/data/1.9/entities'),
    protocol: require('./minecraft-data/data/1.9/protocol'),
    windows: require('./minecraft-data/data/1.9/windows'),
    version: require('./minecraft-data/data/1.9/version')
  }
};
},{"./lib/indexer.js":333,"./lib/loader":335,"./minecraft-data/data/1.8/biomes":336,"./minecraft-data/data/1.8/blocks":337,"./minecraft-data/data/1.8/effects":338,"./minecraft-data/data/1.8/entities":339,"./minecraft-data/data/1.8/instruments":340,"./minecraft-data/data/1.8/items":341,"./minecraft-data/data/1.8/materials":342,"./minecraft-data/data/1.8/protocol":343,"./minecraft-data/data/1.8/recipes":344,"./minecraft-data/data/1.8/version":345,"./minecraft-data/data/1.8/windows":346,"./minecraft-data/data/1.9/biomes":347,"./minecraft-data/data/1.9/blocks":348,"./minecraft-data/data/1.9/effects":349,"./minecraft-data/data/1.9/entities":350,"./minecraft-data/data/1.9/instruments":351,"./minecraft-data/data/1.9/items":352,"./minecraft-data/data/1.9/materials":353,"./minecraft-data/data/1.9/protocol":354,"./minecraft-data/data/1.9/recipes":355,"./minecraft-data/data/1.9/version":356,"./minecraft-data/data/1.9/windows":357,"./minecraft-data/data/common/protocolVersions":358}],333:[function(require,module,exports){
module.exports={
  buildIndexFromObject:
    function(object,fieldToIndex) {
      return Object.keys(object).reduce(function(index,key){
        index[object[key][fieldToIndex]]=object[key];
        return index;
      },{});
    },
  buildIndexFromArray:
    function(array,fieldToIndex) {
      return array.reduce(function(index,element){
        index[element[fieldToIndex]]=element;
        return index;
      },{});
    },
  buildIndexFromArrayNonUnique:
    function(array,fieldToIndex) {
      return array.reduce(function(index,element){
        if(!index[element[fieldToIndex]])
          index[element[fieldToIndex]]=[];
        index[element[fieldToIndex]].push(element);
        return index;
      },{});
    }
};
},{}],334:[function(require,module,exports){
var indexer=require("./indexer.js");

module.exports= function(mcData){
  return {
    biomesById:indexer.buildIndexFromArray(mcData.biomes,"id"),

    blocksById:indexer.buildIndexFromArray(mcData.blocks,"id"),
    blocksByName:indexer.buildIndexFromArray(mcData.blocks,"name"),

    entitiesByName:indexer.buildIndexFromArray(mcData.entities,"name"),
    mobsById:indexer.buildIndexFromArray(mcData.entities.filter(function(e){return e.type=='mob'}),"id"),
    objectsById:indexer.buildIndexFromArray(mcData.entities.filter(function(e){return e.type=='object'}),"id"),

    instrumentsById:indexer.buildIndexFromArray(mcData.instruments,"id"),

    itemsById:indexer.buildIndexFromArray(mcData.items,"id"),
    itemsByName:indexer.buildIndexFromArray(mcData.items,"name"),

    windowsById:indexer.buildIndexFromArray(mcData.windows,"id"),
    windowsByName:indexer.buildIndexFromArray(mcData.windows,"name"),

    effectsById:indexer.buildIndexFromArray(mcData.effects,"id"),
    effectsByName:indexer.buildIndexFromArray(mcData.effects,"name")
  };
};
},{"./indexer.js":333}],335:[function(require,module,exports){
module.exports=mcDataToNode;

function mcDataToNode(mcData) {
  var indexes=require("./indexes.js")(mcData);
  return {
    blocks: indexes.blocksById,
    blocksByName: indexes.blocksByName,
    blocksArray: mcData.blocks,

    biomes: indexes.biomesById,
    biomesArray: mcData.biomes,

    items: indexes.itemsById,
    itemsByName: indexes.itemsByName,
    itemsArray: mcData.items,

    recipes: mcData.recipes,

    instruments: indexes.instrumentsById,
    instrumentsArray: mcData.instruments,

    materials: mcData.materials,

    mobs: indexes.mobsById,
    objects: indexes.objectsById,
    entitiesByName: indexes.entitiesByName,
    entitiesArray: mcData.entities,

    windows: indexes.windowsById,
    windowsByName: indexes.windowsByName,
    windowsArray: mcData.windows,

    protocol: mcData.protocol,

    version: mcData.version,

    effects: indexes.effectsById,
    effectsByName: indexes.effectsByName,
    effectsArray: mcData.effects,

    findItemOrBlockById: function (id) {
      var item = indexes.itemsById[id];
      if (item !== undefined) return item;
      return indexes.blocksById[id];
    },
    findItemOrBlockByName: function (name) {
      var item = indexes.itemsByName[name];
      if (item !== undefined) return item;
      return indexes.blocksByName[name];
    }
  };
}

},{"./indexes.js":334}],336:[function(require,module,exports){
module.exports=[
  {
    "id": 0,
    "color": 112,
    "name": "Ocean",
    "rainfall": 0.5,
    "temperature": 0.5
  },
  {
    "id": 1,
    "color": 9286496,
    "name": "Plains",
    "rainfall": 0.4,
    "temperature": 0.8
  },
  {
    "id": 2,
    "color": 16421912,
    "name": "Desert",
    "rainfall": 0,
    "temperature": 2
  },
  {
    "id": 3,
    "color": 6316128,
    "name": "Extreme Hills",
    "rainfall": 0.3,
    "temperature": 0.2
  },
  {
    "id": 4,
    "color": 353825,
    "name": "Forest",
    "rainfall": 0.8,
    "temperature": 0.7
  },
  {
    "id": 5,
    "color": 747097,
    "name": "Taiga",
    "rainfall": 0.8,
    "temperature": 0.05
  },
  {
    "id": 6,
    "color": 522674,
    "name": "Swampland",
    "rainfall": 0.9,
    "temperature": 0.8
  },
  {
    "id": 7,
    "color": 255,
    "name": "River",
    "rainfall": 0.5,
    "temperature": 0.5
  },
  {
    "id": 8,
    "color": 16711680,
    "name": "Hell",
    "rainfall": 0,
    "temperature": 2
  },
  {
    "id": 9,
    "color": 8421631,
    "name": "The End",
    "rainfall": 0.5,
    "temperature": 0.5
  },
  {
    "id": 10,
    "color": 9474208,
    "name": "FrozenOcean",
    "rainfall": 0.5,
    "temperature": 0
  },
  {
    "id": 11,
    "color": 10526975,
    "name": "FrozenRiver",
    "rainfall": 0.5,
    "temperature": 0
  },
  {
    "id": 12,
    "color": 16777215,
    "name": "Ice Plains",
    "rainfall": 0.5,
    "temperature": 0
  },
  {
    "id": 13,
    "color": 10526880,
    "name": "Ice Mountains",
    "rainfall": 0.5,
    "temperature": 0
  },
  {
    "id": 14,
    "color": 16711935,
    "name": "MushroomIsland",
    "rainfall": 1,
    "temperature": 0.9
  },
  {
    "id": 15,
    "color": 10486015,
    "name": "MushroomIslandShore",
    "rainfall": 1,
    "temperature": 0.9
  },
  {
    "id": 16,
    "color": 16440917,
    "name": "Beach",
    "rainfall": 0.4,
    "temperature": 0.8
  },
  {
    "id": 17,
    "color": 13786898,
    "name": "DesertHills",
    "rainfall": 0,
    "temperature": 2
  },
  {
    "id": 18,
    "color": 2250012,
    "name": "ForestHills",
    "rainfall": 0.8,
    "temperature": 0.7
  },
  {
    "id": 19,
    "color": 1456435,
    "name": "TaigaHills",
    "rainfall": 0.7,
    "temperature": 0.2
  },
  {
    "id": 20,
    "color": 7501978,
    "name": "Extreme Hills Edge",
    "rainfall": 0.3,
    "temperature": 0.2
  },
  {
    "id": 21,
    "color": 5470985,
    "name": "Jungle",
    "rainfall": 0.9,
    "temperature": 1.2
  },
  {
    "id": 22,
    "color": 2900485,
    "name": "JungleHills",
    "rainfall": 0.9,
    "temperature": 1.2
  },
  {
    "id": 23,
    "color": 6458135,
    "name": "JungleEdge",
    "rainfall": 0.8,
    "temperature": 0.95
  },
  {
    "id": 24,
    "color": 48,
    "name": "Deep Ocean",
    "rainfall": 0.5,
    "temperature": 0.5
  },
  {
    "id": 25,
    "color": 10658436,
    "name": "Stone Beach",
    "rainfall": 0.3,
    "temperature": 0.2
  },
  {
    "id": 26,
    "color": 16445632,
    "name": "Cold Beach",
    "rainfall": 0.3,
    "temperature": 0.05
  },
  {
    "id": 27,
    "color": 3175492,
    "name": "Birch Forest",
    "rainfall": 0.6,
    "temperature": 0.6
  },
  {
    "id": 28,
    "color": 2055986,
    "name": "Birch Forest Hills",
    "rainfall": 0.6,
    "temperature": 0.6
  },
  {
    "id": 29,
    "color": 4215066,
    "name": "Roofed Forest",
    "rainfall": 0.8,
    "temperature": 0.7
  },
  {
    "id": 30,
    "color": 3233098,
    "name": "Cold Taiga",
    "rainfall": 0.4,
    "temperature": -0.5
  },
  {
    "id": 31,
    "color": 2375478,
    "name": "Cold Taiga Hills",
    "rainfall": 0.4,
    "temperature": -0.5
  },
  {
    "id": 32,
    "color": 5858897,
    "name": "Mega Taiga",
    "rainfall": 0.8,
    "temperature": 0.3
  },
  {
    "id": 33,
    "color": 4542270,
    "name": "Mega Taiga Hills",
    "rainfall": 0.8,
    "temperature": 0.3
  },
  {
    "id": 34,
    "color": 5271632,
    "name": "Extreme Hills+",
    "rainfall": 0.3,
    "temperature": 0.2
  },
  {
    "id": 35,
    "color": 12431967,
    "name": "Savanna",
    "rainfall": 0,
    "temperature": 1.2
  },
  {
    "id": 36,
    "color": 10984804,
    "name": "Savanna Plateau",
    "rainfall": 0,
    "temperature": 1
  },
  {
    "id": 37,
    "color": 14238997,
    "name": "Mesa",
    "rainfall": 0.5,
    "temperature": 2.0
  },
  {
    "id": 38,
    "color": 11573093,
    "name": "Mesa Plateau F",
    "rainfall": 0.5,
    "temperature": 2.0
  },
  {
    "id": 39,
    "color": 13274213,
    "name": "Redwood Taiga Hills M",
    "rainfall": 0.5,
    "temperature": 2.0
  }
]
},{}],337:[function(require,module,exports){
module.exports=[
  {
    "id": 0,
    "displayName": "Air",
    "name": "air",
    "hardness": 0,
    "stackSize": 0,
    "diggable": false,
    "boundingBox": "empty",
    "drops": []
  },
  {
    "id": 1,
    "displayName": "Stone",
    "name": "stone",
    "hardness": 1.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "variations": [
      {
        "metadata": 0,
        "displayName": "Stone"
      },
      {
        "metadata": 1,
        "displayName": "Granite"
      },
      {
        "metadata": 2,
        "displayName": "Polished Granite"
      },
      {
        "metadata": 3,
        "displayName": "Diorite"
      },
      {
        "metadata": 4,
        "displayName": "Polished Diorite"
      },
      {
        "metadata": 5,
        "displayName": "Andesite"
      },
      {
        "metadata": 6,
        "displayName": "Polished Andesite"
      }
    ],
    "drops": [
      {
        "drop": 4
      }
    ]
  },
  {
    "id": 2,
    "displayName": "Grass Block",
    "name": "grass",
    "hardness": 0.6,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "dirt",
    "drops": [
      {
        "drop": {
          "id": 3,
          "metadata": 0
        }
      }
    ]
  },
  {
    "id": 3,
    "displayName": "Dirt",
    "name": "dirt",
    "hardness": 0.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "dirt",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Dirt"
      },
      {
        "metadata": 1,
        "displayName": "Coarse Dirt"
      },
      {
        "metadata": 2,
        "displayName": "Podzol"
      }
    ],
    "drops": [
      {
        "drop": 3
      }
    ]
  },
  {
    "id": 4,
    "displayName": "Cobblestone",
    "name": "cobblestone",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 4
      }
    ]
  },
  {
    "id": 5,
    "displayName": "Wood Planks",
    "name": "planks",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Oak Wood Planks"
      },
      {
        "metadata": 1,
        "displayName": "Spruce Wood Planks"
      },
      {
        "metadata": 2,
        "displayName": "Birch Wood Planks"
      },
      {
        "metadata": 3,
        "displayName": "Jungle Wood Planks"
      },
      {
        "metadata": 4,
        "displayName": "Acacia Wood Planks"
      },
      {
        "metadata": 5,
        "displayName": "Dark Oak Wood Planks"
      }
    ],
    "drops": [
      {
        "drop": 5
      }
    ]
  },
  {
    "id": 6,
    "displayName": "Sapling",
    "name": "sapling",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "plant",
    "drops": [
      {
        "drop": 6
      }
    ]
  },
  {
    "id": 7,
    "displayName": "Bedrock",
    "name": "bedrock",
    "hardness": null,
    "stackSize": 64,
    "diggable": false,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 7
      }
    ]
  },
  {
    "id": 8,
    "displayName": "Water",
    "name": "flowing_water",
    "hardness": 100,
    "stackSize": 64,
    "diggable": false,
    "boundingBox": "empty",
    "drops": []
  },
  {
    "id": 9,
    "displayName": "Stationary Water",
    "name": "water",
    "hardness": 100,
    "stackSize": 64,
    "diggable": false,
    "boundingBox": "empty",
    "drops": []
  },
  {
    "id": 10,
    "displayName": "Lava",
    "name": "flowing_lava",
    "hardness": 100,
    "stackSize": 64,
    "diggable": false,
    "boundingBox": "empty",
    "drops": []
  },
  {
    "id": 11,
    "displayName": "Stationary Lava",
    "name": "lava",
    "hardness": 100,
    "stackSize": 64,
    "diggable": false,
    "boundingBox": "empty",
    "drops": []
  },
  {
    "id": 12,
    "displayName": "Sand",
    "name": "sand",
    "hardness": 0.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "dirt",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Sand"
      },
      {
        "metadata": 1,
        "displayName": "Red sand"
      }
    ],
    "drops": [
      {
        "drop": 12
      }
    ]
  },
  {
    "id": 13,
    "displayName": "Gravel",
    "name": "gravel",
    "hardness": 0.6,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "dirt",
    "drops": [
      {
        "drop": 13,
        "minCount": 0.9
      },
      {
        "drop": 318,
        "minCount": 0.1
      }
    ]
  },
  {
    "id": 14,
    "displayName": "Gold Ore",
    "name": "gold_ore",
    "hardness": 3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "278": true
    },
    "drops": [
      {
        "drop": 14
      }
    ]
  },
  {
    "id": 15,
    "displayName": "Iron Ore",
    "name": "iron_ore",
    "hardness": 3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "274": true,
      "278": true
    },
    "drops": [
      {
        "drop": 15
      }
    ]
  },
  {
    "id": 16,
    "displayName": "Coal Ore",
    "name": "coal_ore",
    "hardness": 3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": {
          "id": 263,
          "metadata": 0
        }
      }
    ]
  },
  {
    "id": 17,
    "displayName": "Wood",
    "name": "log",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Oak wood facing up/down"
      },
      {
        "metadata": 1,
        "displayName": "Spruce wood facing up/down"
      },
      {
        "metadata": 2,
        "displayName": "Birch wood facing up/down"
      },
      {
        "metadata": 3,
        "displayName": "Jungle wood facing up/down"
      },
      {
        "metadata": 4,
        "displayName": "Oak wood facing East/West"
      },
      {
        "metadata": 5,
        "displayName": "Spruce wood facing East/West"
      },
      {
        "metadata": 6,
        "displayName": "Birch wood facing East/West"
      },
      {
        "metadata": 7,
        "displayName": "Jungle wood facing East/West"
      },
      {
        "metadata": 8,
        "displayName": "Oak wood facing North/South"
      },
      {
        "metadata": 9,
        "displayName": "Spruce wood facing North/South"
      },
      {
        "metadata": 10,
        "displayName": "Birch wood facing North/South"
      },
      {
        "metadata": 11,
        "displayName": "Jungle wood facing North/South"
      },
      {
        "metadata": 12,
        "displayName": "Oak wood with only bark"
      },
      {
        "metadata": 13,
        "displayName": "Spruce wood with only bark"
      },
      {
        "metadata": 14,
        "displayName": "Birch wood with only bark"
      },
      {
        "metadata": 15,
        "displayName": "Jungle wood with only bark"
      }
    ],
    "drops": [
      {
        "drop": 17
      }
    ]
  },
  {
    "id": 18,
    "displayName": "Leaves",
    "name": "leaves",
    "hardness": 0.2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "leaves",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Oak Leaves"
      },
      {
        "metadata": 1,
        "displayName": "Spruce Leaves"
      },
      {
        "metadata": 2,
        "displayName": "Birch Leaves"
      },
      {
        "metadata": 3,
        "displayName": "Jungle Leaves"
      },
      {
        "metadata": 4,
        "displayName": "Oak Leaves (no decay)"
      },
      {
        "metadata": 5,
        "displayName": "Spruce Leaves (no decay)"
      },
      {
        "metadata": 6,
        "displayName": "Birch Leaves (no decay)"
      },
      {
        "metadata": 7,
        "displayName": "Jungle Leaves (no decay)"
      },
      {
        "metadata": 8,
        "displayName": "Oak Leaves (check decay)"
      },
      {
        "metadata": 9,
        "displayName": "Spruce Leaves (check decay)"
      },
      {
        "metadata": 10,
        "displayName": "Birch Leaves (check decay)"
      },
      {
        "metadata": 11,
        "displayName": "Jungle Leaves (check decay)"
      },
      {
        "metadata": 12,
        "displayName": "Oak Leaves (no decay and check decay)"
      },
      {
        "metadata": 13,
        "displayName": "Spruce Leaves (no decay and check decay)"
      },
      {
        "metadata": 14,
        "displayName": "Birch Leaves (no decay and check decay)"
      },
      {
        "metadata": 15,
        "displayName": "Jungle Leaves (no decay and check decay)"
      }
    ],
    "drops": [
      {
        "drop": 6,
        "minCount": 0,
        "maxCount": 1
      },
      {
        "drop": 260,
        "minCount": 0,
        "maxCount": 1
      }
    ]
  },
  {
    "id": 19,
    "displayName": "Sponge",
    "name": "sponge",
    "hardness": 0.6,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Sponge"
      },
      {
        "metadata": 1,
        "displayName": "Wet Sponge"
      }
    ],
    "drops": [
      {
        "drop": 19
      }
    ]
  },
  {
    "id": 20,
    "displayName": "Glass",
    "name": "glass",
    "hardness": 0.3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "drops": []
  },
  {
    "id": 21,
    "displayName": "Lapis Lazuli Ore",
    "name": "lapis_ore",
    "hardness": 3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "274": true,
      "278": true
    },
    "drops": [
      {
        "drop": {
          "id": 351,
          "metadata": 4
        },
        "minCount": 4,
        "maxCount": 8
      }
    ]
  },
  {
    "id": 22,
    "displayName": "Lapis Lazuli Block",
    "name": "lapis_block",
    "hardness": 3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "274": true,
      "278": true
    },
    "drops": [
      {
        "drop": 22
      }
    ]
  },
  {
    "id": 23,
    "displayName": "Dispenser",
    "name": "dispenser",
    "hardness": 3.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 23
      }
    ]
  },
  {
    "id": 24,
    "displayName": "Sandstone",
    "name": "sandstone",
    "hardness": 0.8,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "variations": [
      {
        "metadata": 0,
        "displayName": "Sandstone"
      },
      {
        "metadata": 1,
        "displayName": "Chiseled sandstone"
      },
      {
        "metadata": 2,
        "displayName": "Smooth sandstone"
      }
    ],
    "drops": [
      {
        "drop": 24
      }
    ]
  },
  {
    "id": 25,
    "displayName": "Note Block",
    "name": "noteblock",
    "hardness": 0.8,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 25
      }
    ]
  },
  {
    "id": 26,
    "displayName": "Bed",
    "name": "bed",
    "hardness": 0.2,
    "stackSize": 1,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 26
      }
    ]
  },
  {
    "id": 27,
    "displayName": "Powered Rail",
    "name": "golden_rail",
    "hardness": 0.7,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "rock",
    "drops": [
      {
        "drop": 27
      }
    ]
  },
  {
    "id": 28,
    "displayName": "Detector Rail",
    "name": "detector_rail",
    "hardness": 0.7,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "rock",
    "drops": [
      {
        "drop": 28
      }
    ]
  },
  {
    "id": 29,
    "displayName": "Sticky Piston",
    "name": "sticky_piston",
    "hardness": 0.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 29
      }
    ]
  },
  {
    "id": 30,
    "displayName": "Cobweb",
    "name": "web",
    "hardness": 4,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "web",
    "harvestTools": {
      "267": true,
      "268": true,
      "272": true,
      "276": true,
      "283": true,
      "359": true
    },
    "drops": [
      {
        "drop": 287
      }
    ]
  },
  {
    "id": 31,
    "displayName": "Grass",
    "name": "tallgrass",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "dirt",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Shrub"
      },
      {
        "metadata": 1,
        "displayName": "Tall Grass"
      },
      {
        "metadata": 2,
        "displayName": "Fern"
      }
    ],
    "drops": [
      {
        "drop": 295,
        "minCount": 0,
        "maxCount": 1
      }
    ]
  },
  {
    "id": 32,
    "displayName": "Dead Bush",
    "name": "deadbush",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "plant",
    "drops": [
      {
        "drop": 32
      }
    ]
  },
  {
    "id": 33,
    "displayName": "Piston",
    "name": "piston",
    "hardness": 0.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 33
      }
    ]
  },
  {
    "id": 34,
    "displayName": "Piston Head",
    "name": "piston_head",
    "hardness": 0.5,
    "stackSize": 0,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 34
      }
    ]
  },
  {
    "id": 35,
    "displayName": "Wool",
    "name": "wool",
    "hardness": 0.8,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wool",
    "drops": [
      {
        "drop": 35
      }
    ]
  },
  {
    "id": 36,
    "displayName": "Block moved by Piston",
    "name": "piston_extension",
    "hardness": null,
    "stackSize": 0,
    "diggable": false,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 36
      }
    ]
  },
  {
    "id": 37,
    "displayName": "Dandelion",
    "name": "yellow_flower",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "plant",
    "drops": [
      {
        "drop": 37
      }
    ]
  },
  {
    "id": 38,
    "displayName": "Poppy",
    "name": "red_flower",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "plant",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Poppy"
      },
      {
        "metadata": 1,
        "displayName": "Blue Orchid"
      },
      {
        "metadata": 2,
        "displayName": "Allium"
      },
      {
        "metadata": 3,
        "displayName": "Azure Bluet"
      },
      {
        "metadata": 4,
        "displayName": "Red Tulip"
      },
      {
        "metadata": 5,
        "displayName": "Orange Tulip"
      },
      {
        "metadata": 6,
        "displayName": "White Tulip"
      },
      {
        "metadata": 7,
        "displayName": "Pink Tulip"
      },
      {
        "metadata": 8,
        "displayName": "Oxeye Daisy"
      }
    ],
    "drops": [
      {
        "drop": 38
      }
    ]
  },
  {
    "id": 39,
    "displayName": "Brown Mushroom",
    "name": "brown_mushroom",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "plant",
    "drops": [
      {
        "drop": 39
      }
    ]
  },
  {
    "id": 40,
    "displayName": "Red Mushroom",
    "name": "red_mushroom",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "plant",
    "drops": [
      {
        "drop": 40
      }
    ]
  },
  {
    "id": 41,
    "displayName": "Block of Gold",
    "name": "gold_block",
    "hardness": 3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "278": true
    },
    "drops": [
      {
        "drop": 41
      }
    ]
  },
  {
    "id": 42,
    "displayName": "Block of Iron",
    "name": "iron_block",
    "hardness": 5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "274": true,
      "278": true
    },
    "drops": [
      {
        "drop": 42
      }
    ]
  },
  {
    "id": 43,
    "displayName": "Double Stone Slab",
    "name": "double_stone_slab",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "variations": [
      {
        "metadata": 0,
        "displayName": "Double Stone Slab"
      },
      {
        "metadata": 1,
        "displayName": "Double Sandstone Slab"
      },
      {
        "metadata": 2,
        "displayName": "Double (Stone) Wooden Slab"
      },
      {
        "metadata": 3,
        "displayName": "Double Cobblestone Slab"
      },
      {
        "metadata": 4,
        "displayName": "Double Bricks Slab"
      },
      {
        "metadata": 5,
        "displayName": "Double Stone Brick Slab"
      },
      {
        "metadata": 6,
        "displayName": "Double Nether Brick Slab"
      },
      {
        "metadata": 7,
        "displayName": "Double Quartz Slab"
      },
      {
        "metadata": 8,
        "displayName": "Smooth Double Stone Slab"
      },
      {
        "metadata": 9,
        "displayName": "Smooth Double Sandstone Slab"
      },
      {
        "metadata": 15,
        "displayName": "Tile Double Quartz Slab (note the underside)"
      }
    ],
    "drops": [
      {
        "drop": {
          "id": 44,
          "metadata": 0
        }
      }
    ]
  },
  {
    "id": 44,
    "displayName": "Stone Slab",
    "name": "stone_slab",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "variations": [
      {
        "metadata": 0,
        "displayName": "Stone Slab"
      },
      {
        "metadata": 1,
        "displayName": "Sandstone Slab"
      },
      {
        "metadata": 2,
        "displayName": "(Stone) Wooden Slab"
      },
      {
        "metadata": 3,
        "displayName": "Cobblestone Slab"
      },
      {
        "metadata": 4,
        "displayName": "Bricks Slab"
      },
      {
        "metadata": 5,
        "displayName": "Stone Brick Slab"
      },
      {
        "metadata": 6,
        "displayName": "Nether Brick Slab"
      },
      {
        "metadata": 7,
        "displayName": "Quartz Slab"
      },
      {
        "metadata": 8,
        "displayName": "Upper Stone Slab"
      },
      {
        "metadata": 9,
        "displayName": "Upper Sandstone Slab"
      },
      {
        "metadata": 10,
        "displayName": "Upper (Stone) Wooden Slab"
      },
      {
        "metadata": 11,
        "displayName": "Upper Cobblestone Slab"
      },
      {
        "metadata": 12,
        "displayName": "Upper Bricks Slab"
      },
      {
        "metadata": 13,
        "displayName": "Upper Stone Brick Slab"
      },
      {
        "metadata": 14,
        "displayName": "Upper Nether Brick Slab"
      },
      {
        "metadata": 15,
        "displayName": "Upper Quartz Slab"
      }
    ],
    "drops": [
      {
        "drop": {
          "id": 44,
          "metadata": 0
        }
      }
    ]
  },
  {
    "id": 45,
    "displayName": "Bricks",
    "name": "brick_block",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 45
      }
    ]
  },
  {
    "id": 46,
    "displayName": "TNT",
    "name": "tnt",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Drops a TNT item when broken"
      },
      {
        "metadata": 1,
        "displayName": "Activates when broken"
      }
    ],
    "drops": [
      {
        "drop": 46
      }
    ]
  },
  {
    "id": 47,
    "displayName": "Bookshelf",
    "name": "bookshelf",
    "hardness": 1.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 340,
        "minCount": 3
      }
    ]
  },
  {
    "id": 48,
    "displayName": "Moss Stone",
    "name": "mossy_cobblestone",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 48
      }
    ]
  },
  {
    "id": 49,
    "displayName": "Obsidian",
    "name": "obsidian",
    "hardness": 50,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "278": true
    },
    "drops": [
      {
        "drop": 49
      }
    ]
  },
  {
    "id": 50,
    "displayName": "Torch",
    "name": "torch",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Facing east (attached to a block to its west)"
      },
      {
        "metadata": 1,
        "displayName": "Facing west (attached to a block to its east)"
      },
      {
        "metadata": 2,
        "displayName": "Facing south (attached to a block to its north)"
      },
      {
        "metadata": 3,
        "displayName": "Facing north (attached to a block to its south)"
      },
      {
        "metadata": 4,
        "displayName": "Facing up (attached to a block beneath it)"
      }
    ],
    "drops": [
      {
        "drop": 50
      }
    ]
  },
  {
    "id": 51,
    "displayName": "Fire",
    "name": "fire",
    "hardness": 0,
    "stackSize": 0,
    "diggable": true,
    "boundingBox": "empty",
    "drops": []
  },
  {
    "id": 52,
    "displayName": "Monster Spawner",
    "name": "mob_spawner",
    "hardness": 5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 52
      }
    ]
  },
  {
    "id": 53,
    "displayName": "Oak Wood Stairs",
    "name": "oak_stairs",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 53
      }
    ]
  },
  {
    "id": 54,
    "displayName": "Chest",
    "name": "chest",
    "hardness": 2.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 54
      }
    ]
  },
  {
    "id": 55,
    "displayName": "Redstone Wire",
    "name": "redstone_wire",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 55
      }
    ]
  },
  {
    "id": 56,
    "displayName": "Diamond Ore",
    "name": "diamond_ore",
    "hardness": 3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "278": true
    },
    "drops": [
      {
        "drop": 264
      }
    ]
  },
  {
    "id": 57,
    "displayName": "Block of Diamond",
    "name": "diamond_block",
    "hardness": 5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "278": true
    },
    "drops": [
      {
        "drop": 57
      }
    ]
  },
  {
    "id": 58,
    "displayName": "Crafting Table",
    "name": "crafting_table",
    "hardness": 2.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 58
      }
    ]
  },
  {
    "id": 59,
    "displayName": "Wheat",
    "name": "wheat",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "plant",
    "drops": [
      {
        "drop": 296
      },
      {
        "drop": 295,
        "minCount": 0,
        "maxCount": 3
      }
    ]
  },
  {
    "id": 60,
    "displayName": "Farmland",
    "name": "farmland",
    "hardness": 0.6,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "dirt",
    "drops": [
      {
        "drop": {
          "id": 3,
          "metadata": 0
        }
      }
    ]
  },
  {
    "id": 61,
    "displayName": "Furnace",
    "name": "furnace",
    "hardness": 3.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 61
      }
    ]
  },
  {
    "id": 62,
    "displayName": "Burning Furnace",
    "name": "lit_furnace",
    "hardness": 3.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 62
      }
    ]
  },
  {
    "id": 63,
    "displayName": "Standing Sign",
    "name": "standing_sign",
    "hardness": 1,
    "stackSize": 16,
    "diggable": true,
    "boundingBox": "empty",
    "material": "wood",
    "drops": [
      {
        "drop": 63
      }
    ]
  },
  {
    "id": 64,
    "displayName": "Oak Door",
    "name": "wooden_door",
    "hardness": 3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 64
      }
    ]
  },
  {
    "id": 65,
    "displayName": "Ladder",
    "name": "ladder",
    "hardness": 0.4,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 65
      }
    ]
  },
  {
    "id": 66,
    "displayName": "Rail",
    "name": "rail",
    "hardness": 0.7,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "rock",
    "drops": [
      {
        "drop": 66
      }
    ]
  },
  {
    "id": 67,
    "displayName": "Cobblestone Stairs",
    "name": "stone_stairs",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 67
      }
    ]
  },
  {
    "id": 68,
    "displayName": "Wall Sign",
    "name": "wall_sign",
    "hardness": 1,
    "stackSize": 16,
    "diggable": true,
    "boundingBox": "empty",
    "material": "wood",
    "drops": [
      {
        "drop": 68
      }
    ]
  },
  {
    "id": 69,
    "displayName": "Lever",
    "name": "lever",
    "hardness": 0.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "drops": [
      {
        "drop": 69
      }
    ]
  },
  {
    "id": 70,
    "displayName": "Stone Pressure Plate",
    "name": "stone_pressure_plate",
    "hardness": 0.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 70
      }
    ]
  },
  {
    "id": 71,
    "displayName": "Iron Door",
    "name": "iron_door",
    "hardness": 5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 71
      }
    ]
  },
  {
    "id": 72,
    "displayName": "Wooden Pressure Plate",
    "name": "wooden_pressure_plate",
    "hardness": 0.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "wood",
    "drops": [
      {
        "drop": 72
      }
    ]
  },
  {
    "id": 73,
    "displayName": "Redstone Ore",
    "name": "redstone_ore",
    "hardness": 3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "278": true
    },
    "drops": [
      {
        "drop": 331,
        "minCount": 4,
        "maxCount": 5
      }
    ]
  },
  {
    "id": 74,
    "displayName": "Glowing Redstone Ore",
    "name": "lit_redstone_ore",
    "hardness": 3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "278": true
    },
    "drops": [
      {
        "drop": 331,
        "minCount": 4,
        "maxCount": 5
      }
    ]
  },
  {
    "id": 75,
    "displayName": "Redstone Torch (inactive)",
    "name": "unlit_redstone_torch",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Facing east (attached to a block to its west)"
      },
      {
        "metadata": 1,
        "displayName": "Facing west (attached to a block to its east)"
      },
      {
        "metadata": 2,
        "displayName": "Facing south (attached to a block to its north)"
      },
      {
        "metadata": 3,
        "displayName": "Facing north (attached to a block to its south)"
      },
      {
        "metadata": 4,
        "displayName": "Facing up (attached to a block beneath it)"
      }
    ],
    "drops": [
      {
        "drop": 75
      }
    ]
  },
  {
    "id": 76,
    "displayName": "Redstone Torch (active)",
    "name": "redstone_torch",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Facing east (attached to a block to its west)"
      },
      {
        "metadata": 1,
        "displayName": "Facing west (attached to a block to its east)"
      },
      {
        "metadata": 2,
        "displayName": "Facing south (attached to a block to its north)"
      },
      {
        "metadata": 3,
        "displayName": "Facing north (attached to a block to its south)"
      },
      {
        "metadata": 4,
        "displayName": "Facing up (attached to a block beneath it)"
      }
    ],
    "drops": [
      {
        "drop": 76
      }
    ]
  },
  {
    "id": 77,
    "displayName": "Stone Button",
    "name": "stone_button",
    "hardness": 0.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "drops": [
      {
        "drop": 77
      }
    ]
  },
  {
    "id": 78,
    "displayName": "Snow (layer)",
    "name": "snow_layer",
    "hardness": 0.2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "dirt",
    "harvestTools": {
      "256": true,
      "269": true,
      "273": true,
      "277": true,
      "284": true
    },
    "variations": [
      {
        "metadata": 0,
        "displayName": "One layer, 2 pixels thick"
      },
      {
        "metadata": 1,
        "displayName": "Two layers, 4 pixels thick"
      },
      {
        "metadata": 2,
        "displayName": "Three layers, 6 pixels thick"
      },
      {
        "metadata": 3,
        "displayName": "Four layers, 8 pixels thick"
      },
      {
        "metadata": 4,
        "displayName": "Five layers, 10 pixels thick"
      },
      {
        "metadata": 5,
        "displayName": "Six layers, 12 pixels thick"
      },
      {
        "metadata": 6,
        "displayName": "Seven layers, 14 pixels thick"
      },
      {
        "metadata": 7,
        "displayName": "Eight layers, 16 pixels thick"
      }
    ],
    "drops": [
      {
        "drop": 332,
        "minCount": 2,
        "maxCount": 9
      }
    ]
  },
  {
    "id": 79,
    "displayName": "Ice",
    "name": "ice",
    "hardness": 0.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "drops": []
  },
  {
    "id": 80,
    "displayName": "Snow",
    "name": "snow",
    "hardness": 0.2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "dirt",
    "harvestTools": {
      "256": true,
      "269": true,
      "273": true,
      "277": true,
      "284": true
    },
    "drops": [
      {
        "drop": 332,
        "minCount": 4
      }
    ]
  },
  {
    "id": 81,
    "displayName": "Cactus",
    "name": "cactus",
    "hardness": 0.4,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "plant",
    "drops": [
      {
        "drop": 81
      }
    ]
  },
  {
    "id": 82,
    "displayName": "Clay",
    "name": "clay",
    "hardness": 0.6,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "dirt",
    "drops": [
      {
        "drop": 337,
        "minCount": 4
      }
    ]
  },
  {
    "id": 83,
    "displayName": "Sugar Cane",
    "name": "reeds",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "plant",
    "drops": [
      {
        "drop": 83
      }
    ]
  },
  {
    "id": 84,
    "displayName": "Jukebox",
    "name": "jukebox",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "variations": [
      {
        "metadata": 0,
        "displayName": "No disc inserted"
      },
      {
        "metadata": 1,
        "displayName": "Contains a disc"
      }
    ],
    "drops": [
      {
        "drop": 84
      }
    ]
  },
  {
    "id": 85,
    "displayName": "Fence",
    "name": "fence",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 85
      }
    ]
  },
  {
    "id": 86,
    "displayName": "Pumpkin",
    "name": "pumpkin",
    "hardness": 1,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "plant",
    "drops": [
      {
        "drop": 86
      }
    ]
  },
  {
    "id": 87,
    "displayName": "Netherrack",
    "name": "netherrack",
    "hardness": 0.4,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 87
      }
    ]
  },
  {
    "id": 88,
    "displayName": "Soul Sand",
    "name": "soul_sand",
    "hardness": 0.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "dirt",
    "drops": [
      {
        "drop": 88
      }
    ]
  },
  {
    "id": 89,
    "displayName": "Glowstone",
    "name": "glowstone",
    "hardness": 0.3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 348,
        "minCount": 2,
        "maxCount": 4
      }
    ]
  },
  {
    "id": 90,
    "displayName": "Nether Portal",
    "name": "portal",
    "hardness": null,
    "stackSize": 0,
    "diggable": false,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 90
      }
    ]
  },
  {
    "id": 91,
    "displayName": "Jack o'Lantern",
    "name": "lit_pumpkin",
    "hardness": 1,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "plant",
    "drops": [
      {
        "drop": 91
      }
    ]
  },
  {
    "id": 92,
    "displayName": "Cake",
    "name": "cake",
    "hardness": 0.5,
    "stackSize": 1,
    "diggable": true,
    "boundingBox": "empty",
    "drops": []
  },
  {
    "id": 93,
    "displayName": "Redstone Repeater (inactive)",
    "name": "unpowered_repeater",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 93
      }
    ]
  },
  {
    "id": 94,
    "displayName": "Redstone Repeater (active)",
    "name": "powered_repeater",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 94
      }
    ]
  },
  {
    "id": 95,
    "displayName": "Stained Glass",
    "name": "stained_glass",
    "hardness": 0.3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "variations": [
      {
        "metadata": 0,
        "displayName": "White Stained Glass"
      },
      {
        "metadata": 1,
        "displayName": "Orange Stained Glass"
      },
      {
        "metadata": 2,
        "displayName": "Magenta Stained Glass"
      },
      {
        "metadata": 3,
        "displayName": "Light Blue Stained Glass"
      },
      {
        "metadata": 4,
        "displayName": "Yellow Stained Glass"
      },
      {
        "metadata": 5,
        "displayName": "Lime Stained Glass"
      },
      {
        "metadata": 6,
        "displayName": "Pink Stained Glass"
      },
      {
        "metadata": 7,
        "displayName": "Gray Stained Glass"
      },
      {
        "metadata": 8,
        "displayName": "Light Gray Stained Glass"
      },
      {
        "metadata": 9,
        "displayName": "Cyan Stained Glass"
      },
      {
        "metadata": 10,
        "displayName": "Purple Stained Glass"
      },
      {
        "metadata": 11,
        "displayName": "Blue Stained Glass"
      },
      {
        "metadata": 12,
        "displayName": "Brown Stained Glass"
      },
      {
        "metadata": 13,
        "displayName": "Green Stained Glass"
      },
      {
        "metadata": 14,
        "displayName": "Red Stained Glass"
      },
      {
        "metadata": 15,
        "displayName": "Black Stained Glass"
      }
    ],
    "drops": []
  },
  {
    "id": 96,
    "displayName": "Trapdoor",
    "name": "trapdoor",
    "hardness": 3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 96
      }
    ]
  },
  {
    "id": 97,
    "displayName": "Monster Egg",
    "name": "monster_egg",
    "hardness": 0.75,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Stone Monster Egg"
      },
      {
        "metadata": 1,
        "displayName": "Cobblestone Monster Egg"
      },
      {
        "metadata": 2,
        "displayName": "Stone Brick Monster Egg"
      },
      {
        "metadata": 3,
        "displayName": "Mossy Stone Brick Monster Egg"
      },
      {
        "metadata": 4,
        "displayName": "Cracked Stone Brick Monster Egg"
      },
      {
        "metadata": 5,
        "displayName": "Chiseled Stone Brick Monster Egg"
      }
    ],
    "drops": []
  },
  {
    "id": 98,
    "displayName": "Stone Bricks",
    "name": "stonebrick",
    "hardness": 1.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "variations": [
      {
        "metadata": 0,
        "displayName": "Stone brick"
      },
      {
        "metadata": 1,
        "displayName": "Mossy stone brick"
      },
      {
        "metadata": 2,
        "displayName": "Cracked stone brick"
      },
      {
        "metadata": 3,
        "displayName": "Chiseled stone brick"
      }
    ],
    "drops": [
      {
        "drop": 98
      }
    ]
  },
  {
    "id": 99,
    "displayName": "Brown Mushroom (block)",
    "name": "brown_mushroom_block",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Pores on all sides"
      },
      {
        "metadata": 1,
        "displayName": "Cap texture on top, west and north"
      },
      {
        "metadata": 2,
        "displayName": "Cap texture on top and north"
      },
      {
        "metadata": 3,
        "displayName": "Cap texture on top, north and east"
      },
      {
        "metadata": 4,
        "displayName": "Cap texture on top and west"
      },
      {
        "metadata": 5,
        "displayName": "Cap texture on top"
      },
      {
        "metadata": 6,
        "displayName": "Cap texture on top and east"
      },
      {
        "metadata": 7,
        "displayName": "Cap texture on top, south and west"
      },
      {
        "metadata": 8,
        "displayName": "Cap texture on top and south"
      },
      {
        "metadata": 9,
        "displayName": "Cap texture on top, east and south"
      },
      {
        "metadata": 10,
        "displayName": "Stem texture on all four sides, pores on top and bottom"
      },
      {
        "metadata": 14,
        "displayName": "Cap texture on all six sides"
      },
      {
        "metadata": 15,
        "displayName": "Stem texture on all six sides"
      }
    ],
    "drops": [
      {
        "drop": 40,
        "minCount": 0,
        "maxCount": 2
      }
    ]
  },
  {
    "id": 100,
    "displayName": "Red Mushroom (block)",
    "name": "red_mushroom_block",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Pores on all sides"
      },
      {
        "metadata": 1,
        "displayName": "Cap texture on top, west and north"
      },
      {
        "metadata": 2,
        "displayName": "Cap texture on top and north"
      },
      {
        "metadata": 3,
        "displayName": "Cap texture on top, north and east"
      },
      {
        "metadata": 4,
        "displayName": "Cap texture on top and west"
      },
      {
        "metadata": 5,
        "displayName": "Cap texture on top"
      },
      {
        "metadata": 6,
        "displayName": "Cap texture on top and east"
      },
      {
        "metadata": 7,
        "displayName": "Cap texture on top, south and west"
      },
      {
        "metadata": 8,
        "displayName": "Cap texture on top and south"
      },
      {
        "metadata": 9,
        "displayName": "Cap texture on top, east and south"
      },
      {
        "metadata": 10,
        "displayName": "Stem texture on all four sides, pores on top and bottom"
      },
      {
        "metadata": 14,
        "displayName": "Cap texture on all six sides"
      },
      {
        "metadata": 15,
        "displayName": "Stem texture on all six sides"
      }
    ],
    "drops": [
      {
        "drop": 40,
        "minCount": 0,
        "maxCount": 2
      }
    ]
  },
  {
    "id": 101,
    "displayName": "Iron Bars",
    "name": "iron_bars",
    "hardness": 5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 101
      }
    ]
  },
  {
    "id": 102,
    "displayName": "Glass Pane",
    "name": "glass_pane",
    "hardness": 0.3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "drops": []
  },
  {
    "id": 103,
    "displayName": "Melon",
    "name": "melon_block",
    "hardness": 1,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "plant",
    "drops": [
      {
        "drop": 360,
        "minCount": 3,
        "maxCount": 7
      }
    ]
  },
  {
    "id": 104,
    "displayName": "Pumpkin Stem",
    "name": "pumpkin_stem",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "plant",
    "drops": [
      {
        "drop": 104
      }
    ]
  },
  {
    "id": 105,
    "displayName": "Melon Stem",
    "name": "melon_stem",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "plant",
    "drops": [
      {
        "drop": 105
      }
    ]
  },
  {
    "id": 106,
    "displayName": "Vines",
    "name": "vine",
    "hardness": 0.2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "plant",
    "drops": [
      {
        "drop": 106
      }
    ]
  },
  {
    "id": 107,
    "displayName": "Fence Gate",
    "name": "fence_gate",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 107
      }
    ]
  },
  {
    "id": 108,
    "displayName": "Brick Stairs",
    "name": "brick_stairs",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 108
      }
    ]
  },
  {
    "id": 109,
    "displayName": "Stone Brick Stairs",
    "name": "stone_brick_stairs",
    "hardness": 1.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 109
      }
    ]
  },
  {
    "id": 110,
    "displayName": "Mycelium",
    "name": "mycelium",
    "hardness": 0.6,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "dirt",
    "drops": [
      {
        "drop": {
          "id": 3,
          "metadata": 0
        }
      }
    ]
  },
  {
    "id": 111,
    "displayName": "Lily Pad",
    "name": "waterlily",
    "hardness": 0.6,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "plant",
    "drops": [
      {
        "drop": 111
      }
    ]
  },
  {
    "id": 112,
    "displayName": "Nether Brick",
    "name": "nether_brick",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 112
      }
    ]
  },
  {
    "id": 113,
    "displayName": "Nether Brick Fence",
    "name": "nether_brick_fence",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 113
      }
    ]
  },
  {
    "id": 114,
    "displayName": "Nether Brick Stairs",
    "name": "nether_brick_stairs",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 114
      }
    ]
  },
  {
    "id": 115,
    "displayName": "Nether Wart",
    "name": "nether_wart",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "plant",
    "drops": [
      {
        "drop": 372
      },
      {
        "drop": 372,
        "minCount": 2,
        "maxCount": 4
      }
    ]
  },
  {
    "id": 116,
    "displayName": "Enchantment Table",
    "name": "enchanting_table",
    "hardness": 5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 116
      }
    ]
  },
  {
    "id": 117,
    "displayName": "Brewing Stand",
    "name": "brewing_stand",
    "hardness": 0.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 117
      }
    ]
  },
  {
    "id": 118,
    "displayName": "Cauldron",
    "name": "cauldron",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 118
      }
    ]
  },
  {
    "id": 119,
    "displayName": "End Portal",
    "name": "end_portal",
    "hardness": null,
    "stackSize": 0,
    "diggable": false,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 119
      }
    ]
  },
  {
    "id": 120,
    "displayName": "End Portal Block",
    "name": "end_portal_frame",
    "hardness": null,
    "stackSize": 64,
    "diggable": false,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 120
      }
    ]
  },
  {
    "id": 121,
    "displayName": "End Stone",
    "name": "end_stone",
    "hardness": 3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 121
      }
    ]
  },
  {
    "id": 122,
    "displayName": "Dragon Egg",
    "name": "dragon_egg",
    "hardness": 3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 122
      }
    ]
  },
  {
    "id": 123,
    "displayName": "Redstone Lamp (inactive)",
    "name": "redstone_lamp",
    "hardness": 0.3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 123
      }
    ]
  },
  {
    "id": 124,
    "displayName": "Redstone Lamp (active)",
    "name": "lit_redstone_lamp",
    "hardness": 0.3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 124
      }
    ]
  },
  {
    "id": 125,
    "displayName": "Double Wooden Slab",
    "name": "double_wooden_slab",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Double Oak Wood Slab"
      },
      {
        "metadata": 1,
        "displayName": "Double Spruce Wood Slab"
      },
      {
        "metadata": 2,
        "displayName": "Double Birch Wood Slab"
      },
      {
        "metadata": 3,
        "displayName": "Double Jungle Wood Slab"
      },
      {
        "metadata": 4,
        "displayName": "Double Acacia Wood Slab"
      },
      {
        "metadata": 5,
        "displayName": "Double Dark Oak Wood Slab"
      }
    ],
    "drops": [
      {
        "drop": {
          "id": 44,
          "metadata": 0
        }
      }
    ]
  },
  {
    "id": 126,
    "displayName": "Wooden Slab",
    "name": "wooden_slab",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Oak Wood Slab"
      },
      {
        "metadata": 1,
        "displayName": "Spruce Wood Slab"
      },
      {
        "metadata": 2,
        "displayName": "Birch Wood Slab"
      },
      {
        "metadata": 3,
        "displayName": "Jungle Wood Slab"
      },
      {
        "metadata": 4,
        "displayName": "Acacia Wood Slab"
      },
      {
        "metadata": 5,
        "displayName": "Dark Oak Wood Slab"
      },
      {
        "metadata": 8,
        "displayName": "Upper Oak Wood Slab"
      },
      {
        "metadata": 9,
        "displayName": "Upper Spruce Wood Slab"
      },
      {
        "metadata": 10,
        "displayName": "Upper Birch Wood Slab"
      },
      {
        "metadata": 11,
        "displayName": "Upper Jungle Wood Slab"
      },
      {
        "metadata": 12,
        "displayName": "Upper Acacia Wood Slab"
      },
      {
        "metadata": 13,
        "displayName": "Upper Dark Oak Wood Slab"
      }
    ],
    "drops": [
      {
        "drop": {
          "id": 44,
          "metadata": 0
        }
      }
    ]
  },
  {
    "id": 127,
    "displayName": "Cocoa",
    "name": "cocoa",
    "hardness": 0.2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "plant",
    "drops": [
      {
        "drop": {
          "id": 351,
          "metadata": 3
        }
      },
      {
        "drop": {
          "id": 351,
          "metadata": 3
        },
        "minCount": 3
      }
    ]
  },
  {
    "id": 128,
    "displayName": "Sandstone Stairs",
    "name": "sandstone_stairs",
    "hardness": 0.8,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 128
      }
    ]
  },
  {
    "id": 129,
    "displayName": "Emerald Ore",
    "name": "emerald_ore",
    "hardness": 3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "278": true
    },
    "drops": [
      {
        "drop": 388
      }
    ]
  },
  {
    "id": 130,
    "displayName": "Ender Chest",
    "name": "ender_chest",
    "hardness": 22.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 49,
        "minCount": 8
      }
    ]
  },
  {
    "id": 131,
    "displayName": "Tripwire Hook",
    "name": "tripwire_hook",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "drops": [
      {
        "drop": 131
      }
    ]
  },
  {
    "id": 132,
    "displayName": "Tripwire",
    "name": "tripwire",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "drops": [
      {
        "drop": 132
      }
    ]
  },
  {
    "id": 133,
    "displayName": "Block of Emerald",
    "name": "emerald_block",
    "hardness": 5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "278": true
    },
    "drops": [
      {
        "drop": 133
      }
    ]
  },
  {
    "id": 134,
    "displayName": "Spruce Wood Stairs",
    "name": "spruce_stairs",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 134
      }
    ]
  },
  {
    "id": 135,
    "displayName": "Birch Wood Stairs",
    "name": "birch_stairs",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 135
      }
    ]
  },
  {
    "id": 136,
    "displayName": "Jungle Wood Stairs",
    "name": "jungle_stairs",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 136
      }
    ]
  },
  {
    "id": 137,
    "displayName": "Command Block",
    "name": "command_block",
    "hardness": null,
    "stackSize": 64,
    "diggable": false,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 137
      }
    ]
  },
  {
    "id": 138,
    "displayName": "Beacon",
    "name": "beacon",
    "hardness": 3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 138
      }
    ]
  },
  {
    "id": 139,
    "displayName": "Cobblestone Wall",
    "name": "cobblestone_wall",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "variations": [
      {
        "metadata": 0,
        "displayName": "Cobblestone Wall"
      },
      {
        "metadata": 1,
        "displayName": "Mossy Cobblestone Wall"
      }
    ],
    "drops": [
      {
        "drop": 139
      }
    ]
  },
  {
    "id": 140,
    "displayName": "Flower Pot",
    "name": "flower_pot",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Empty Flower Pot"
      },
      {
        "metadata": 1,
        "displayName": "Poppy Flower Pot"
      },
      {
        "metadata": 2,
        "displayName": "Dandelion Flower Pot"
      },
      {
        "metadata": 3,
        "displayName": "Oak sapling Flower Pot"
      },
      {
        "metadata": 4,
        "displayName": "Spruce sapling Flower Pot"
      },
      {
        "metadata": 5,
        "displayName": "Birch sapling Flower Pot"
      },
      {
        "metadata": 6,
        "displayName": "Jungle sapling Flower Pot"
      },
      {
        "metadata": 7,
        "displayName": "Red mushroom Flower Pot"
      },
      {
        "metadata": 8,
        "displayName": "Brown mushroom Flower Pot"
      },
      {
        "metadata": 9,
        "displayName": "Cactus Flower Pot"
      },
      {
        "metadata": 10,
        "displayName": "Dead bush Flower Pot"
      },
      {
        "metadata": 11,
        "displayName": "Fern Flower Pot"
      },
      {
        "metadata": 12,
        "displayName": "Acacia sapling Flower Pot"
      },
      {
        "metadata": 13,
        "displayName": "Dark oak sapling Flower Pot"
      }
    ],
    "drops": [
      {
        "drop": 140
      }
    ]
  },
  {
    "id": 141,
    "displayName": "Carrot",
    "name": "carrots",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "plant",
    "drops": [
      {
        "drop": 141
      }
    ]
  },
  {
    "id": 142,
    "displayName": "Potato",
    "name": "potatoes",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "plant",
    "drops": [
      {
        "drop": 142
      }
    ]
  },
  {
    "id": 143,
    "displayName": "Wooden Button",
    "name": "wooden_button",
    "hardness": 0.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "drops": [
      {
        "drop": 143
      }
    ]
  },
  {
    "id": 144,
    "displayName": "Mob head",
    "name": "skull",
    "hardness": 1,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Skeleton Skull"
      },
      {
        "metadata": 1,
        "displayName": "Wither Skeleton Skull"
      },
      {
        "metadata": 2,
        "displayName": "Zombie Head"
      },
      {
        "metadata": 3,
        "displayName": "Head"
      },
      {
        "metadata": 4,
        "displayName": "Creeper Head"
      }
    ],
    "drops": [
      {
        "drop": 144
      }
    ]
  },
  {
    "id": 145,
    "displayName": "Anvil",
    "name": "anvil",
    "hardness": 5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "variations": [
      {
        "metadata": 0,
        "displayName": "Anvil"
      },
      {
        "metadata": 1,
        "displayName": "Slightly Damaged Anvil"
      },
      {
        "metadata": 2,
        "displayName": "Very Damaged Anvil"
      },
      {
        "metadata": 3,
        "displayName": "Anvil (North/South)"
      },
      {
        "metadata": 4,
        "displayName": "Anvil (East/West)"
      },
      {
        "metadata": 5,
        "displayName": "Anvil (South/North)"
      },
      {
        "metadata": 6,
        "displayName": "Anvil (West/East)"
      },
      {
        "metadata": 7,
        "displayName": "Slightly Damaged Anvil (North/South)"
      },
      {
        "metadata": 8,
        "displayName": "Slightly Damaged Anvil (East/West)"
      },
      {
        "metadata": 9,
        "displayName": "Slightly Damaged Anvil (West/East)"
      },
      {
        "metadata": 10,
        "displayName": "Slightly Damaged Anvil (South/North)"
      },
      {
        "metadata": 11,
        "displayName": "Very Damaged Anvil (North/South)"
      },
      {
        "metadata": 12,
        "displayName": "Very Damaged Anvil (East/West)"
      },
      {
        "metadata": 13,
        "displayName": "Very Damaged Anvil (West/East)"
      },
      {
        "metadata": 14,
        "displayName": "Very Damaged Anvil (South/North)"
      }
    ],
    "drops": [
      {
        "drop": 145
      }
    ]
  },
  {
    "id": 146,
    "displayName": "Trapped Chest",
    "name": "trapped_chest",
    "hardness": 2.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 146
      }
    ]
  },
  {
    "id": 147,
    "displayName": "Weighted Pressure Plate (Light)",
    "name": "light_weighted_pressure_plate",
    "hardness": 0.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 147
      }
    ]
  },
  {
    "id": 148,
    "displayName": "Weighted Pressure Plate (Heavy)",
    "name": "heavy_weighted_pressure_plate",
    "hardness": 0.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 148
      }
    ]
  },
  {
    "id": 149,
    "displayName": "Redstone Comparator",
    "name": "unpowered_comparator",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 149
      }
    ]
  },
  {
    "id": 150,
    "displayName": "Redstone Comparator (deprecated)",
    "name": "powered_comparator",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 150
      }
    ]
  },
  {
    "id": 151,
    "displayName": "Daylight Sensor",
    "name": "daylight_detector",
    "hardness": 0.2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 151
      }
    ]
  },
  {
    "id": 152,
    "displayName": "Block of Redstone",
    "name": "redstone_block",
    "hardness": 5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 152
      }
    ]
  },
  {
    "id": 153,
    "displayName": "Nether Quartz Ore",
    "name": "quartz_ore",
    "hardness": 3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 406
      }
    ]
  },
  {
    "id": 154,
    "displayName": "Hopper",
    "name": "hopper",
    "hardness": 3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 154
      }
    ]
  },
  {
    "id": 155,
    "displayName": "Block of Quartz",
    "name": "quartz_block",
    "hardness": 0.8,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "variations": [
      {
        "metadata": 0,
        "displayName": "Block of Quartz"
      },
      {
        "metadata": 1,
        "displayName": "Chiseled Quartz Block"
      },
      {
        "metadata": 2,
        "displayName": "Pillar Quartz Block (vertical)"
      },
      {
        "metadata": 3,
        "displayName": "Pillar Quartz Block (north-south)"
      },
      {
        "metadata": 4,
        "displayName": "Pillar Quartz Block (east-west)"
      }
    ],
    "drops": [
      {
        "drop": 155
      }
    ]
  },
  {
    "id": 156,
    "displayName": "Quartz Stairs",
    "name": "quartz_stairs",
    "hardness": 0.8,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 156
      }
    ]
  },
  {
    "id": 157,
    "displayName": "Activator Rail",
    "name": "activator_rail",
    "hardness": 0.7,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "rock",
    "drops": [
      {
        "drop": 157
      }
    ]
  },
  {
    "id": 158,
    "displayName": "Dropper",
    "name": "dropper",
    "hardness": 3.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 158
      }
    ]
  },
  {
    "id": 159,
    "displayName": "Stained Clay",
    "name": "stained_hardened_clay",
    "hardness": 1.25,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 159
      }
    ]
  },
  {
    "id": 160,
    "displayName": "Stained Glass Pane",
    "name": "stained_glass_pane",
    "hardness": 0.3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "variations": [
      {
        "metadata": 0,
        "displayName": "White Stained Glass Pane"
      },
      {
        "metadata": 1,
        "displayName": "Orange Stained Glass Pane"
      },
      {
        "metadata": 2,
        "displayName": "Magenta Stained Glass Pane"
      },
      {
        "metadata": 3,
        "displayName": "Light Blue Stained Glass Pane"
      },
      {
        "metadata": 4,
        "displayName": "Yellow Stained Glass Pane"
      },
      {
        "metadata": 5,
        "displayName": "Lime Stained Glass Pane"
      },
      {
        "metadata": 6,
        "displayName": "Pink Stained Glass Pane"
      },
      {
        "metadata": 7,
        "displayName": "Gray Stained Glass Pane"
      },
      {
        "metadata": 8,
        "displayName": "Light Gray Stained Glass Pane"
      },
      {
        "metadata": 9,
        "displayName": "Cyan Stained Glass Pane"
      },
      {
        "metadata": 10,
        "displayName": "Purple Stained Glass Pane"
      },
      {
        "metadata": 11,
        "displayName": "Blue Stained Glass Pane"
      },
      {
        "metadata": 12,
        "displayName": "Brown Stained Glass Pane"
      },
      {
        "metadata": 13,
        "displayName": "Green Stained Glass Pane"
      },
      {
        "metadata": 14,
        "displayName": "Red Stained Glass Pane"
      },
      {
        "metadata": 15,
        "displayName": "Black Stained Glass Pane"
      }
    ],
    "drops": []
  },
  {
    "id": 161,
    "displayName": "Leaves (Acacia/Dark Oak)",
    "name": "leaves2",
    "hardness": 0.2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "leaves",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Acacia Leaves"
      },
      {
        "metadata": 1,
        "displayName": "Dark Oak Leaves"
      },
      {
        "metadata": 4,
        "displayName": "Acacia Leaves (no decay)"
      },
      {
        "metadata": 5,
        "displayName": "Dark Oak Leaves (no decay)"
      },
      {
        "metadata": 8,
        "displayName": "Acacia Leaves (check decay)"
      },
      {
        "metadata": 9,
        "displayName": "Dark Oak Leaves (check decay)"
      },
      {
        "metadata": 12,
        "displayName": "Acacia Leaves (no decay and check decay)"
      },
      {
        "metadata": 13,
        "displayName": "Dark Oak Leaves (no decay and check decay)"
      }
    ],
    "drops": [
      {
        "drop": 6,
        "minCount": 0,
        "maxCount": 1
      },
      {
        "drop": 260,
        "minCount": 0,
        "maxCount": 1
      }
    ]
  },
  {
    "id": 162,
    "displayName": "Wood (Acacia/Dark Oak)",
    "name": "log2",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Acacia wood facing up/down"
      },
      {
        "metadata": 1,
        "displayName": "Dark Oak wood facing up/down"
      },
      {
        "metadata": 4,
        "displayName": "Acacia wood facing East/West"
      },
      {
        "metadata": 5,
        "displayName": "Dark Oak wood facing East/West"
      },
      {
        "metadata": 8,
        "displayName": "Acacia wood facing North/South"
      },
      {
        "metadata": 9,
        "displayName": "Dark Oak wood facing North/South"
      },
      {
        "metadata": 12,
        "displayName": "Acacia wood with only bark"
      },
      {
        "metadata": 13,
        "displayName": "Dark Oak wood with only bark"
      }
    ],
    "drops": [
      {
        "drop": 162
      }
    ]
  },
  {
    "id": 163,
    "displayName": "Acacia Wood Stairs",
    "name": "acacia_stairs",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 163
      }
    ]
  },
  {
    "id": 164,
    "displayName": "Dark Oak Wood Stairs",
    "name": "dark_oak_stairs",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 164
      }
    ]
  },
  {
    "id": 165,
    "displayName": "Slime Block",
    "name": "slime",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 165
      }
    ]
  },
  {
    "id": 166,
    "displayName": "Barrier",
    "name": "barrier",
    "hardness": null,
    "stackSize": 64,
    "diggable": false,
    "boundingBox": "block",
    "drops": []
  },
  {
    "id": 167,
    "displayName": "Iron Trapdoor",
    "name": "iron_trapdoor",
    "hardness": 5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 167
      }
    ]
  },
  {
    "id": 168,
    "displayName": "Prismarine",
    "name": "prismarine",
    "hardness": 1.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "variations": [
      {
        "metadata": 0,
        "displayName": "Prismarine"
      },
      {
        "metadata": 1,
        "displayName": "Prismarine Bricks"
      },
      {
        "metadata": 2,
        "displayName": "Dark Prismarine"
      }
    ],
    "drops": [
      {
        "drop": 168
      }
    ]
  },
  {
    "id": 169,
    "displayName": "Sea Lantern",
    "name": "sea_lantern",
    "hardness": 0.3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 410,
        "minCount": 2,
        "maxCount": 3
      }
    ]
  },
  {
    "id": 170,
    "displayName": "Hay Bale",
    "name": "hay_block",
    "hardness": 0.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 170
      }
    ]
  },
  {
    "id": 171,
    "displayName": "Carpet",
    "name": "carpet",
    "hardness": 0.1,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "variations": [
      {
        "metadata": 0,
        "displayName": "White Carpet"
      },
      {
        "metadata": 1,
        "displayName": "Orange Carpet"
      },
      {
        "metadata": 2,
        "displayName": "Magenta Carpet"
      },
      {
        "metadata": 3,
        "displayName": "Light Blue Carpet"
      },
      {
        "metadata": 4,
        "displayName": "Yellow Carpet"
      },
      {
        "metadata": 5,
        "displayName": "Lime Carpet"
      },
      {
        "metadata": 6,
        "displayName": "Pink Carpet"
      },
      {
        "metadata": 7,
        "displayName": "Gray Carpet"
      },
      {
        "metadata": 8,
        "displayName": "Light Gray Carpet"
      },
      {
        "metadata": 9,
        "displayName": "Cyan Carpet"
      },
      {
        "metadata": 10,
        "displayName": "Purple Carpet"
      },
      {
        "metadata": 11,
        "displayName": "Blue Carpet"
      },
      {
        "metadata": 12,
        "displayName": "Brown Carpet"
      },
      {
        "metadata": 13,
        "displayName": "Green Carpet"
      },
      {
        "metadata": 14,
        "displayName": "Red Carpet"
      },
      {
        "metadata": 15,
        "displayName": "Black Carpet"
      }
    ],
    "drops": [
      {
        "drop": 171
      }
    ]
  },
  {
    "id": 172,
    "displayName": "Hardened Clay",
    "name": "hardened_clay",
    "hardness": 1.25,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 172
      }
    ]
  },
  {
    "id": 173,
    "displayName": "Block of Coal",
    "name": "coal_block",
    "hardness": 5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 173
      }
    ]
  },
  {
    "id": 174,
    "displayName": "Packed Ice",
    "name": "packed_ice",
    "hardness": 0.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "drops": []
  },
  {
    "id": 175,
    "displayName": "Large Flowers",
    "name": "double_plant",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "plant",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Sunflower"
      },
      {
        "metadata": 1,
        "displayName": "Lilac"
      },
      {
        "metadata": 2,
        "displayName": "Double Tallgrass"
      },
      {
        "metadata": 3,
        "displayName": "Large Fern"
      },
      {
        "metadata": 4,
        "displayName": "Rose Bush"
      },
      {
        "metadata": 5,
        "displayName": "Peony"
      },
      {
        "metadata": 8,
        "displayName": "Top Half of any Large Plant; low three bits 0x7 are derived from the block below."
      }
    ],
    "drops": [
      {
        "drop": 175
      }
    ]
  },
  {
    "id": 176,
    "displayName": "Standing Banner",
    "name": "standing_banner",
    "hardness": 1,
    "stackSize": 16,
    "diggable": true,
    "boundingBox": "empty",
    "material": "wood",
    "drops": [
      {
        "drop": 176
      }
    ]
  },
  {
    "id": 177,
    "displayName": "Wall Banner",
    "name": "wall_banner",
    "hardness": 1,
    "stackSize": 16,
    "diggable": true,
    "boundingBox": "empty",
    "material": "wood",
    "drops": [
      {
        "drop": 177
      }
    ]
  },
  {
    "id": 178,
    "displayName": "Inverted Daylight Sensor",
    "name": "daylight_detector_inverted",
    "hardness": 0.2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 178
      }
    ]
  },
  {
    "id": 179,
    "displayName": "Red Sandstone",
    "name": "red_sandstone",
    "hardness": 0.8,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "variations": [
      {
        "metadata": 0,
        "displayName": "Sandstone"
      },
      {
        "metadata": 1,
        "displayName": "Chiseled sandstone"
      },
      {
        "metadata": 2,
        "displayName": "Smooth sandstone"
      }
    ],
    "drops": [
      {
        "drop": 179
      }
    ]
  },
  {
    "id": 180,
    "displayName": "Red Sandstone Stairs",
    "name": "red_sandstone_stairs",
    "hardness": 0.8,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 180
      }
    ]
  },
  {
    "id": 181,
    "displayName": "Double Red Sandstone Slab",
    "name": "double_stone_slab2",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "variations": [
      {
        "metadata": 0,
        "displayName": "Double Red Sandstone Slab"
      },
      {
        "metadata": 8,
        "displayName": "Smooth Double Red Sandstone Slab"
      }
    ],
    "drops": [
      {
        "drop": {
          "id": 44,
          "metadata": 0
        }
      }
    ]
  },
  {
    "id": 182,
    "displayName": "Red Sandstone Slab",
    "name": "stone_slab2",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "variations": [
      {
        "metadata": 0,
        "displayName": "Red Sandstone Slab"
      },
      {
        "metadata": 8,
        "displayName": "Upper Red Sandstone Slab"
      }
    ],
    "drops": [
      {
        "drop": {
          "id": 44,
          "metadata": 0
        }
      }
    ]
  },
  {
    "id": 183,
    "displayName": "Spruce Fence Gate",
    "name": "spruce_fence_gate",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 183
      }
    ]
  },
  {
    "id": 184,
    "displayName": "Birch Fence Gate",
    "name": "birch_fence_gate",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 184
      }
    ]
  },
  {
    "id": 185,
    "displayName": "Jungle Fence Gate",
    "name": "jungle_fence_gate",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 185
      }
    ]
  },
  {
    "id": 186,
    "displayName": "Dark Oak Fence Gate",
    "name": "dark_oak_fence_gate",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 186
      }
    ]
  },
  {
    "id": 187,
    "displayName": "Acacia Fence Gate",
    "name": "acacia_fence_gate",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 187
      }
    ]
  },
  {
    "id": 188,
    "displayName": "Spruce Fence",
    "name": "spruce_fence",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 188
      }
    ]
  },
  {
    "id": 189,
    "displayName": "Birch Fence",
    "name": "birch_fence",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 189
      }
    ]
  },
  {
    "id": 190,
    "displayName": "Jungle Fence",
    "name": "jungle_fence",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 190
      }
    ]
  },
  {
    "id": 191,
    "displayName": "Dark Oak Fence",
    "name": "dark_oak_fence",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 191
      }
    ]
  },
  {
    "id": 192,
    "displayName": "Acacia Fence",
    "name": "acacia_fence",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 192
      }
    ]
  },
  {
    "id": 193,
    "displayName": "Spruce Door",
    "name": "spruce_door",
    "hardness": 3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 193
      }
    ]
  },
  {
    "id": 194,
    "displayName": "Birch Door",
    "name": "birch_door",
    "hardness": 3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 194
      }
    ]
  },
  {
    "id": 195,
    "displayName": "Jungle Door",
    "name": "jungle_door",
    "hardness": 3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 195
      }
    ]
  },
  {
    "id": 196,
    "displayName": "Acacia Door",
    "name": "acacia_door",
    "hardness": 3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 196
      }
    ]
  },
  {
    "id": 197,
    "displayName": "Dark Oak Door",
    "name": "dark_oak_door",
    "hardness": 3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 197
      }
    ]
  }
]
},{}],338:[function(require,module,exports){
module.exports=[
  {
    "id": 1,
    "name": "Speed",
    "displayName": "Speed",
    "type": "good"
  },
  {
    "id": 2,
    "name": "Slowness",
    "displayName": "Slowness",
    "type": "bad"
  },
  {
    "id": 3,
    "name": "Haste",
    "displayName": "Haste",
    "type": "good"
  },
  {
    "id": 4,
    "name": "MiningFatigue",
    "displayName": "Mining Fatigue",
    "type": "bad"
  },
  {
    "id": 5,
    "name": "Strength",
    "displayName": "Strength",
    "type": "good"
  },
  {
    "id": 6,
    "name": "InstantHealth",
    "displayName": "Instant Health",
    "type": "good"
  },
  {
    "id": 7,
    "name": "InstantDamage",
    "displayName": "Instant Damage",
    "type": "bad"
  },
  {
    "id": 8,
    "name": "JumpBoost",
    "displayName": "Jump Boost",
    "type": "good"
  },
  {
    "id": 9,
    "name": "Nausea",
    "displayName": "Nausea",
    "type": "bad"
  },
  {
    "id": 10,
    "name": "Regeneration",
    "displayName": "Regeneration",
    "type": "good"
  },
  {
    "id": 11,
    "name": "Resistance",
    "displayName": "Resistance",
    "type": "good"
  },
  {
    "id": 12,
    "name": "FireResistance",
    "displayName": "Fire Resistance",
    "type": "good"
  },
  {
    "id": 13,
    "name": "WaterBreathing",
    "displayName": "Water Breathing",
    "type": "good"
  },
  {
    "id": 14,
    "name": "Invisibility",
    "displayName": "Invisibility",
    "type": "good"
  },
  {
    "id": 15,
    "name": "Blindness",
    "displayName": "Blindness",
    "type": "bad"
  },
  {
    "id": 16,
    "name": "NightVision",
    "displayName": "Night Vision",
    "type": "good"
  },
  {
    "id": 17,
    "name": "Hunger",
    "displayName": "Hunger",
    "type": "bad"
  },
  {
    "id": 18,
    "name": "Weakness",
    "displayName": "Weakness",
    "type": "bad"
  },
  {
    "id": 19,
    "name": "Poison",
    "displayName": "Poison",
    "type": "bad"
  },
  {
    "id": 20,
    "name": "Wither",
    "displayName": "Wither",
    "type": "bad"
  },
  {
    "id": 21,
    "name": "HealthBoost",
    "displayName": "Health Boost",
    "type": "good"
  },
  {
    "id": 22,
    "name": "Absorption",
    "displayName": "Absorption",
    "type": "good"
  },
  {
    "id": 23,
    "name": "Saturation",
    "displayName": "Saturation",
    "type": "good"
  }
]

},{}],339:[function(require,module,exports){
module.exports=[
  {
    "id": 48,
    "internalId": 48,
    "name": "Mob",
    "displayName": "Mob",
    "type": "mob",
    "width": null,
    "height": null,
    "category": "Generic"
  },
  {
    "id": 49,
    "internalId": 49,
    "name": "Monster",
    "displayName": "Monster",
    "type": "mob",
    "width": null,
    "height": null,
    "category": "Generic"
  },
  {
    "id": 50,
    "internalId": 50,
    "name": "Creeper",
    "displayName": "Creeper",
    "type": "mob",
    "width": 0.6,
    "height": 1.8,
    "category": "Hostile mobs"
  },
  {
    "id": 51,
    "internalId": 51,
    "name": "Skeleton",
    "displayName": "Skeleton",
    "type": "mob",
    "width": 0.6,
    "height": 1.95,
    "category": "Hostile mobs"
  },
  {
    "id": 52,
    "internalId": 52,
    "name": "Spider",
    "displayName": "Spider",
    "type": "mob",
    "width": 1.4,
    "height": 0.9,
    "category": "Hostile mobs"
  },
  {
    "id": 53,
    "internalId": 53,
    "name": "Giant",
    "displayName": "Giant",
    "type": "mob",
    "width": 3.5999999999999996,
    "height": 10.8,
    "category": "Hostile mobs"
  },
  {
    "id": 54,
    "internalId": 54,
    "name": "Zombie",
    "displayName": "Zombie",
    "type": "mob",
    "width": 0.6,
    "height": 1.8,
    "category": "Hostile mobs"
  },
  {
    "id": 55,
    "internalId": 55,
    "name": "Slime",
    "displayName": "Slime",
    "type": "mob",
    "width": 0.51000005,
    "height": 0.51000005,
    "category": "Hostile mobs"
  },
  {
    "id": 56,
    "internalId": 56,
    "name": "Ghast",
    "displayName": "Ghast",
    "type": "mob",
    "width": 4,
    "height": 4,
    "category": "Hostile mobs"
  },
  {
    "id": 57,
    "internalId": 57,
    "name": "PigZombie",
    "displayName": "Zombie Pigman",
    "type": "mob",
    "width": 0.6,
    "height": 1.8,
    "category": "Hostile mobs"
  },
  {
    "id": 58,
    "internalId": 58,
    "name": "Enderman",
    "displayName": "Enderman",
    "type": "mob",
    "width": 0.6,
    "height": 2.9,
    "category": "Hostile mobs"
  },
  {
    "id": 59,
    "internalId": 59,
    "name": "CaveSpider",
    "displayName": "Cave Spider",
    "type": "mob",
    "width": 0.7,
    "height": 0.5,
    "category": "Hostile mobs"
  },
  {
    "id": 60,
    "internalId": 60,
    "name": "Silverfish",
    "displayName": "Silverfish",
    "type": "mob",
    "width": 0.4,
    "height": 0.3,
    "category": "Hostile mobs"
  },
  {
    "id": 61,
    "internalId": 61,
    "name": "Blaze",
    "displayName": "Blaze",
    "type": "mob",
    "width": 0.6,
    "height": 1.8,
    "category": "Hostile mobs"
  },
  {
    "id": 62,
    "internalId": 62,
    "name": "LavaSlime",
    "displayName": "Magma Cube",
    "type": "mob",
    "width": 0.51000005,
    "height": 0.51000005,
    "category": "Hostile mobs"
  },
  {
    "id": 63,
    "internalId": 63,
    "name": "EnderDragon",
    "displayName": "Ender Dragon",
    "type": "mob",
    "width": 16,
    "height": 8,
    "category": "Hostile mobs"
  },
  {
    "id": 64,
    "internalId": 64,
    "name": "WitherBoss",
    "displayName": "Wither",
    "type": "mob",
    "width": 0.9,
    "height": 3.5,
    "category": "Hostile mobs"
  },
  {
    "id": 65,
    "internalId": 65,
    "name": "Bat",
    "displayName": "Bat",
    "type": "mob",
    "width": 0.5,
    "height": 0.9,
    "category": "Passive mobs"
  },
  {
    "id": 66,
    "internalId": 66,
    "name": "Witch",
    "displayName": "Witch",
    "type": "mob",
    "width": 0.6,
    "height": 1.8,
    "category": "Hostile mobs"
  },
  {
    "id": 67,
    "internalId": 67,
    "name": "Endermite",
    "displayName": "Endermite",
    "type": "mob",
    "width": 0.4,
    "height": 0.3,
    "category": "Hostile mobs"
  },
  {
    "id": 68,
    "internalId": 68,
    "name": "Guardian",
    "displayName": "Guardian",
    "type": "mob",
    "width": 0.85,
    "height": 0.85,
    "category": "Hostile mobs"
  },
  {
    "id": 90,
    "internalId": 90,
    "name": "Pig",
    "displayName": "Pig",
    "type": "mob",
    "width": 0.9,
    "height": 0.9,
    "category": "Passive mobs"
  },
  {
    "id": 91,
    "internalId": 91,
    "name": "Sheep",
    "displayName": "Sheep",
    "type": "mob",
    "width": 0.9,
    "height": 1.3,
    "category": "Passive mobs"
  },
  {
    "id": 92,
    "internalId": 92,
    "name": "Cow",
    "displayName": "Cow",
    "type": "mob",
    "width": 0.9,
    "height": 1.3,
    "category": "Passive mobs"
  },
  {
    "id": 93,
    "internalId": 93,
    "name": "Chicken",
    "displayName": "Chicken",
    "type": "mob",
    "width": 0.4,
    "height": 0.7,
    "category": "Passive mobs"
  },
  {
    "id": 94,
    "internalId": 94,
    "name": "Squid",
    "displayName": "Squid",
    "type": "mob",
    "width": 0.95,
    "height": 0.95,
    "category": "Passive mobs"
  },
  {
    "id": 95,
    "internalId": 95,
    "name": "Wolf",
    "displayName": "Wolf",
    "type": "mob",
    "width": 0.6,
    "height": 0.8,
    "category": "Passive mobs"
  },
  {
    "id": 96,
    "internalId": 96,
    "name": "MushroomCow",
    "displayName": "Mooshroom",
    "type": "mob",
    "width": 0.9,
    "height": 1.3,
    "category": "Passive mobs"
  },
  {
    "id": 97,
    "internalId": 97,
    "name": "SnowMan",
    "displayName": "Snow Golem",
    "type": "mob",
    "width": 0.7,
    "height": 1.9,
    "category": "Passive mobs"
  },
  {
    "id": 98,
    "internalId": 98,
    "name": "Ozelot",
    "displayName": "Ocelot",
    "type": "mob",
    "width": 0.6,
    "height": 0.8,
    "category": "Passive mobs"
  },
  {
    "id": 99,
    "internalId": 99,
    "name": "VillagerGolem",
    "displayName": "Iron Golem",
    "type": "mob",
    "width": 1.4,
    "height": 2.9,
    "category": "Passive mobs"
  },
  {
    "id": 100,
    "internalId": 100,
    "name": "EntityHorse",
    "displayName": "Horse",
    "type": "mob",
    "width": 1.4,
    "height": 1.6,
    "category": "Passive mobs"
  },
  {
    "id": 101,
    "internalId": 101,
    "name": "Rabbit",
    "displayName": "Rabbit",
    "type": "mob",
    "width": 0.6,
    "height": 0.7,
    "category": "Passive mobs"
  },
  {
    "id": 120,
    "internalId": 120,
    "name": "Villager",
    "displayName": "Villager",
    "type": "mob",
    "width": 0.6,
    "height": 1.8,
    "category": "NPCs"
  },
  {
    "id": 1,
    "internalId": 41,
    "name": "Boat",
    "displayName": "Boat",
    "type": "object",
    "width": 1.5,
    "height": 0.6,
    "category": "Vehicles"
  },
  {
    "id": 2,
    "internalId": 1,
    "name": "Item",
    "displayName": "Dropped item",
    "type": "object",
    "width": 0.25,
    "height": 0.25,
    "category": "Drops"
  },
  {
    "id": 10,
    "internalId": 42,
    "name": "MinecartRideable",
    "displayName": "Minecart",
    "type": "object",
    "width": 0.98,
    "height": 0.7,
    "category": "Vehicles"
  },
  {
    "id": 11,
    "internalId": 42,
    "name": "MinecartRideable",
    "displayName": "Minecart",
    "type": "object",
    "width": 0.98,
    "height": 0.7,
    "category": "Vehicles"
  },
  {
    "id": 12,
    "internalId": 42,
    "name": "MinecartRideable",
    "displayName": "Minecart",
    "type": "object",
    "width": 0.98,
    "height": 0.7,
    "category": "Vehicles"
  },
  {
    "id": 50,
    "internalId": 20,
    "name": "PrimedTnt",
    "displayName": "Primed TNT",
    "type": "object",
    "width": 0.98,
    "height": 0.98,
    "category": "Blocks"
  },
  {
    "id": 51,
    "internalId": 200,
    "name": "EnderCrystal",
    "displayName": "Ender Crystal",
    "type": "object",
    "width": 2,
    "height": 2,
    "category": "Immobile"
  },
  {
    "id": 60,
    "internalId": 10,
    "name": "Arrow",
    "displayName": "Shot arrow",
    "type": "object",
    "width": 0.5,
    "height": 0.5,
    "category": "Projectiles"
  },
  {
    "id": 61,
    "internalId": 11,
    "name": "Snowball",
    "displayName": "Thrown snowball",
    "type": "object",
    "width": 0.25,
    "height": 0.25,
    "category": "Projectiles"
  },
  {
    "id": 62,
    "internalId": 7,
    "name": "ThrownEgg",
    "displayName": "Thrown egg",
    "type": "object",
    "width": 0.25,
    "height": 0.25,
    "category": "Projectiles"
  },
  {
    "id": 63,
    "internalId": 12,
    "name": "Fireball",
    "displayName": "Ghast fireball",
    "type": "object",
    "width": 1,
    "height": 1,
    "category": "Projectiles"
  },
  {
    "id": 64,
    "internalId": 13,
    "name": "SmallFireball",
    "displayName": "Blaze fireball",
    "type": "object",
    "width": 0.3125,
    "height": 0.3125,
    "category": "Projectiles"
  },
  {
    "id": 65,
    "internalId": 14,
    "name": "ThrownEnderpearl",
    "displayName": "Thrown Ender Pearl",
    "type": "object",
    "width": 0.25,
    "height": 0.25,
    "category": "Projectiles"
  },
  {
    "id": 66,
    "internalId": 19,
    "name": "WitherSkull",
    "displayName": "Wither Skull",
    "type": "object",
    "width": 0.3125,
    "height": 0.3125,
    "category": "Projectiles"
  },
  {
    "id": 70,
    "internalId": 21,
    "name": "FallingSand",
    "displayName": "Falling block",
    "type": "object",
    "width": 0.98,
    "height": 0.98,
    "category": "Blocks"
  },
  {
    "id": 71,
    "internalId": 18,
    "name": "ItemFrame",
    "displayName": "Item Frame",
    "type": "object",
    "width": null,
    "height": null,
    "category": "Immobile"
  },
  {
    "id": 72,
    "internalId": 15,
    "name": "EyeOfEnderSignal",
    "displayName": "Thrown Eye of Ender",
    "type": "object",
    "width": 0.25,
    "height": 0.25,
    "category": "Projectiles"
  },
  {
    "id": 73,
    "internalId": 16,
    "name": "ThrownPotion",
    "displayName": "Thrown splash potion",
    "type": "object",
    "width": 0.25,
    "height": 0.25,
    "category": "Projectiles"
  },
  {
    "id": 74,
    "internalId": 21,
    "name": "FallingSand",
    "displayName": "Falling block",
    "type": "object",
    "width": 0.98,
    "height": 0.98,
    "category": "Blocks"
  },
  {
    "id": 75,
    "internalId": 17,
    "name": "ThrownExpBottle",
    "displayName": "Thrown Bottle o' Enchanting",
    "type": "object",
    "width": 0.25,
    "height": 0.25,
    "category": "Projectiles"
  },
  {
    "id": 76,
    "internalId": 22,
    "name": "FireworksRocketEntity",
    "displayName": "Firework Rocket",
    "type": "object",
    "width": 0.25,
    "height": 0.25,
    "category": "Projectiles"
  },
  {
    "id": 77,
    "internalId": 8,
    "name": "LeashKnot",
    "displayName": "Lead knot",
    "type": "object",
    "width": 0.5,
    "height": 0.5,
    "category": "Immobile"
  },
  {
    "id": 78,
    "internalId": 30,
    "name": "ArmorStand",
    "displayName": "Armor Stand",
    "type": "object",
    "width": 0.5,
    "height": 2,
    "category": "Immobile"
  },
  {
    "id": 90,
    "name": "Fishing Float",
    "displayName": "Fishing Float",
    "type": "object",
    "width": 0.25,
    "height": 0.25
  }
]
},{}],340:[function(require,module,exports){
module.exports=[
  {
    "id": 0,
    "name": "harp"
  },
  {
    "id": 1,
    "name": "doubleBass"
  },
  {
    "id": 2,
    "name": "snareDrum"
  },
  {
    "id": 3,
    "name": "sticks"
  },
  {
    "id": 4,
    "name": "bassDrum"
  }
]

},{}],341:[function(require,module,exports){
module.exports=[
  {
    "id": 256,
    "displayName": "Iron Shovel",
    "stackSize": 1,
    "name": "iron_shovel"
  },
  {
    "id": 257,
    "displayName": "Iron Pickaxe",
    "stackSize": 1,
    "name": "iron_pickaxe"
  },
  {
    "id": 258,
    "displayName": "Iron Axe",
    "stackSize": 1,
    "name": "iron_axe"
  },
  {
    "id": 259,
    "displayName": "Flint and Steel",
    "stackSize": 1,
    "name": "flint_and_steel"
  },
  {
    "id": 260,
    "displayName": "Apple",
    "stackSize": 64,
    "name": "apple"
  },
  {
    "id": 261,
    "displayName": "Bow",
    "stackSize": 1,
    "name": "bow"
  },
  {
    "id": 262,
    "displayName": "Arrow",
    "stackSize": 64,
    "name": "arrow"
  },
  {
    "id": 263,
    "displayName": "Coal",
    "stackSize": 64,
    "name": "coal",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Coal"
      },
      {
        "metadata": 1,
        "displayName": "Charcoal"
      }
    ]
  },
  {
    "id": 264,
    "displayName": "Diamond",
    "stackSize": 64,
    "name": "diamond"
  },
  {
    "id": 265,
    "displayName": "Iron Ingot",
    "stackSize": 64,
    "name": "iron_ingot"
  },
  {
    "id": 266,
    "displayName": "Gold Ingot",
    "stackSize": 64,
    "name": "gold_ingot"
  },
  {
    "id": 267,
    "displayName": "Iron Sword",
    "stackSize": 1,
    "name": "iron_sword"
  },
  {
    "id": 268,
    "displayName": "Wooden Sword",
    "stackSize": 1,
    "name": "wooden_sword"
  },
  {
    "id": 269,
    "displayName": "Wooden Shovel",
    "stackSize": 1,
    "name": "wooden_shovel"
  },
  {
    "id": 270,
    "displayName": "Wooden Pickaxe",
    "stackSize": 1,
    "name": "wooden_pickaxe"
  },
  {
    "id": 271,
    "displayName": "Wooden Axe",
    "stackSize": 1,
    "name": "wooden_axe"
  },
  {
    "id": 272,
    "displayName": "Stone Sword",
    "stackSize": 1,
    "name": "stone_sword"
  },
  {
    "id": 273,
    "displayName": "Stone Shovel",
    "stackSize": 1,
    "name": "stone_shovel"
  },
  {
    "id": 274,
    "displayName": "Stone Pickaxe",
    "stackSize": 1,
    "name": "stone_pickaxe"
  },
  {
    "id": 275,
    "displayName": "Stone Axe",
    "stackSize": 1,
    "name": "stone_axe"
  },
  {
    "id": 276,
    "displayName": "Diamond Sword",
    "stackSize": 1,
    "name": "diamond_sword"
  },
  {
    "id": 277,
    "displayName": "Diamond Shovel",
    "stackSize": 1,
    "name": "diamond_shovel"
  },
  {
    "id": 278,
    "displayName": "Diamond Pickaxe",
    "stackSize": 1,
    "name": "diamond_pickaxe"
  },
  {
    "id": 279,
    "displayName": "Diamond Axe",
    "stackSize": 1,
    "name": "diamond_axe"
  },
  {
    "id": 280,
    "displayName": "Stick",
    "stackSize": 64,
    "name": "stick"
  },
  {
    "id": 281,
    "displayName": "Bowl",
    "stackSize": 64,
    "name": "bowl"
  },
  {
    "id": 282,
    "displayName": "Mushroom Stew",
    "stackSize": 1,
    "name": "mushroom_stew"
  },
  {
    "id": 283,
    "displayName": "Golden Sword",
    "stackSize": 1,
    "name": "golden_sword"
  },
  {
    "id": 284,
    "displayName": "Golden Shovel",
    "stackSize": 1,
    "name": "golden_shovel"
  },
  {
    "id": 285,
    "displayName": "Golden Pickaxe",
    "stackSize": 1,
    "name": "golden_pickaxe"
  },
  {
    "id": 286,
    "displayName": "Golden Axe",
    "stackSize": 1,
    "name": "golden_axe"
  },
  {
    "id": 287,
    "displayName": "String",
    "stackSize": 64,
    "name": "string"
  },
  {
    "id": 288,
    "displayName": "Feather",
    "stackSize": 64,
    "name": "feather"
  },
  {
    "id": 289,
    "displayName": "Gunpowder",
    "stackSize": 64,
    "name": "gunpowder"
  },
  {
    "id": 290,
    "displayName": "Wooden Hoe",
    "stackSize": 1,
    "name": "wooden_hoe"
  },
  {
    "id": 291,
    "displayName": "Stone Hoe",
    "stackSize": 1,
    "name": "stone_hoe"
  },
  {
    "id": 292,
    "displayName": "Iron Hoe",
    "stackSize": 1,
    "name": "iron_hoe"
  },
  {
    "id": 293,
    "displayName": "Diamond Hoe",
    "stackSize": 1,
    "name": "diamond_hoe"
  },
  {
    "id": 294,
    "displayName": "Golden Hoe",
    "stackSize": 1,
    "name": "golden_hoe"
  },
  {
    "id": 295,
    "displayName": "Seeds",
    "stackSize": 64,
    "name": "wheat_seeds"
  },
  {
    "id": 296,
    "displayName": "Wheat",
    "stackSize": 64,
    "name": "wheat"
  },
  {
    "id": 297,
    "displayName": "Bread",
    "stackSize": 64,
    "name": "bread"
  },
  {
    "id": 298,
    "displayName": "Leather Cap",
    "stackSize": 1,
    "name": "leather_helmet"
  },
  {
    "id": 299,
    "displayName": "Leather Tunic",
    "stackSize": 1,
    "name": "leather_chestplate"
  },
  {
    "id": 300,
    "displayName": "Leather Pants",
    "stackSize": 1,
    "name": "leather_leggings"
  },
  {
    "id": 301,
    "displayName": "Leather Boots",
    "stackSize": 1,
    "name": "leather_boots"
  },
  {
    "id": 302,
    "displayName": "Chain Helmet",
    "stackSize": 1,
    "name": "chainmail_helmet"
  },
  {
    "id": 303,
    "displayName": "Chain Chestplate",
    "stackSize": 1,
    "name": "chainmail_chestplate"
  },
  {
    "id": 304,
    "displayName": "Chain Leggings",
    "stackSize": 1,
    "name": "chainmail_leggings"
  },
  {
    "id": 305,
    "displayName": "Chain Boots",
    "stackSize": 1,
    "name": "chainmail_boots"
  },
  {
    "id": 306,
    "displayName": "Iron Helmet",
    "stackSize": 1,
    "name": "iron_helmet"
  },
  {
    "id": 307,
    "displayName": "Iron Chestplate",
    "stackSize": 1,
    "name": "iron_chestplate"
  },
  {
    "id": 308,
    "displayName": "Iron Leggings",
    "stackSize": 1,
    "name": "iron_leggings"
  },
  {
    "id": 309,
    "displayName": "Iron Boots",
    "stackSize": 1,
    "name": "iron_boots"
  },
  {
    "id": 310,
    "displayName": "Diamond Helmet",
    "stackSize": 1,
    "name": "diamond_helmet"
  },
  {
    "id": 311,
    "displayName": "Diamond Chestplate",
    "stackSize": 1,
    "name": "diamond_chestplate"
  },
  {
    "id": 312,
    "displayName": "Diamond Leggings",
    "stackSize": 1,
    "name": "diamond_leggings"
  },
  {
    "id": 313,
    "displayName": "Diamond Boots",
    "stackSize": 1,
    "name": "diamond_boots"
  },
  {
    "id": 314,
    "displayName": "Golden Helmet",
    "stackSize": 1,
    "name": "golden_helmet"
  },
  {
    "id": 315,
    "displayName": "Golden Chestplate",
    "stackSize": 1,
    "name": "golden_chestplate"
  },
  {
    "id": 316,
    "displayName": "Golden Leggings",
    "stackSize": 1,
    "name": "golden_leggings"
  },
  {
    "id": 317,
    "displayName": "Golden Boots",
    "stackSize": 1,
    "name": "golden_boots"
  },
  {
    "id": 318,
    "displayName": "Flint",
    "stackSize": 64,
    "name": "flint"
  },
  {
    "id": 319,
    "displayName": "Raw Porkchop",
    "stackSize": 64,
    "name": "porkchop"
  },
  {
    "id": 320,
    "displayName": "Cooked Porkchop",
    "stackSize": 64,
    "name": "cooked_porkchop"
  },
  {
    "id": 321,
    "displayName": "Painting",
    "stackSize": 64,
    "name": "painting"
  },
  {
    "id": 322,
    "displayName": "Golden Apple",
    "stackSize": 64,
    "name": "golden_apple",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Golden Apple"
      },
      {
        "metadata": 1,
        "displayName": "Enchanted Golden Apple"
      }
    ]
  },
  {
    "id": 323,
    "displayName": "Sign",
    "stackSize": 16,
    "name": "sign"
  },
  {
    "id": 324,
    "displayName": "Oak Door",
    "stackSize": 64,
    "name": "wooden_door"
  },
  {
    "id": 325,
    "displayName": "Bucket",
    "stackSize": 16,
    "name": "bucket"
  },
  {
    "id": 326,
    "displayName": "Water Bucket",
    "stackSize": 64,
    "name": "water_bucket"
  },
  {
    "id": 327,
    "displayName": "Lava Bucket",
    "stackSize": 64,
    "name": "lava_bucket"
  },
  {
    "id": 328,
    "displayName": "Minecart",
    "stackSize": 1,
    "name": "minecart"
  },
  {
    "id": 329,
    "displayName": "Saddle",
    "stackSize": 1,
    "name": "saddle"
  },
  {
    "id": 330,
    "displayName": "Iron Door",
    "stackSize": 64,
    "name": "iron_door"
  },
  {
    "id": 331,
    "displayName": "Redstone",
    "stackSize": 64,
    "name": "redstone"
  },
  {
    "id": 332,
    "displayName": "Snowball",
    "stackSize": 16,
    "name": "snowball"
  },
  {
    "id": 333,
    "displayName": "Boat",
    "stackSize": 1,
    "name": "boat"
  },
  {
    "id": 334,
    "displayName": "Leather",
    "stackSize": 64,
    "name": "leather"
  },
  {
    "id": 335,
    "displayName": "Milk",
    "stackSize": 1,
    "name": "milk_bucket"
  },
  {
    "id": 336,
    "displayName": "Brick",
    "stackSize": 64,
    "name": "brick"
  },
  {
    "id": 337,
    "displayName": "Clay",
    "stackSize": 64,
    "name": "clay_ball"
  },
  {
    "id": 338,
    "displayName": "Sugar Cane",
    "stackSize": 64,
    "name": "reeds"
  },
  {
    "id": 339,
    "displayName": "Paper",
    "stackSize": 64,
    "name": "paper"
  },
  {
    "id": 340,
    "displayName": "Book",
    "stackSize": 64,
    "name": "book"
  },
  {
    "id": 341,
    "displayName": "Slimeball",
    "stackSize": 64,
    "name": "slime_ball"
  },
  {
    "id": 342,
    "displayName": "Minecart with Chest",
    "stackSize": 1,
    "name": "chest_minecart"
  },
  {
    "id": 343,
    "displayName": "Minecart with Furnace",
    "stackSize": 1,
    "name": "furnace_minecart"
  },
  {
    "id": 344,
    "displayName": "Egg",
    "stackSize": 16,
    "name": "egg"
  },
  {
    "id": 345,
    "displayName": "Compass",
    "stackSize": 64,
    "name": "compass"
  },
  {
    "id": 346,
    "displayName": "Fishing Rod",
    "stackSize": 1,
    "name": "fishing_rod"
  },
  {
    "id": 347,
    "displayName": "Clock",
    "stackSize": 64,
    "name": "clock"
  },
  {
    "id": 348,
    "displayName": "Glowstone Dust",
    "stackSize": 64,
    "name": "glowstone_dust"
  },
  {
    "id": 349,
    "displayName": "Raw Fish",
    "stackSize": 64,
    "name": "fish",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Raw Fish"
      },
      {
        "metadata": 1,
        "displayName": "Raw Salmon"
      },
      {
        "metadata": 2,
        "displayName": "Clownfish"
      },
      {
        "metadata": 3,
        "displayName": "Pufferfish"
      }
    ]
  },
  {
    "id": 350,
    "displayName": "Cooked Fish",
    "stackSize": 64,
    "name": "cooked_fish"
  },
  {
    "id": 351,
    "displayName": "Dye",
    "stackSize": 64,
    "name": "dye",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Ink Sac"
      },
      {
        "metadata": 1,
        "displayName": "Rose Red"
      },
      {
        "metadata": 2,
        "displayName": "Cactus Green"
      },
      {
        "metadata": 3,
        "displayName": "Cocoa Beans"
      },
      {
        "metadata": 4,
        "displayName": "Lapis Lazuli"
      },
      {
        "metadata": 5,
        "displayName": "Purple Dye"
      },
      {
        "metadata": 6,
        "displayName": "Cyan Dye"
      },
      {
        "metadata": 7,
        "displayName": "Light Gray Dye"
      },
      {
        "metadata": 8,
        "displayName": "Gray Dye"
      },
      {
        "metadata": 9,
        "displayName": "Pink Dye"
      },
      {
        "metadata": 10,
        "displayName": "Lime Dye"
      },
      {
        "metadata": 11,
        "displayName": "Dandelion Yellow"
      },
      {
        "metadata": 12,
        "displayName": "Light Blue Dye"
      },
      {
        "metadata": 13,
        "displayName": "Magenta Dye"
      },
      {
        "metadata": 14,
        "displayName": "Orange Dye"
      },
      {
        "metadata": 15,
        "displayName": "Bone Meal"
      }
    ]
  },
  {
    "id": 352,
    "displayName": "Bone",
    "stackSize": 64,
    "name": "bone"
  },
  {
    "id": 353,
    "displayName": "Sugar",
    "stackSize": 64,
    "name": "sugar"
  },
  {
    "id": 354,
    "displayName": "Cake",
    "stackSize": 1,
    "name": "cake"
  },
  {
    "id": 355,
    "displayName": "Bed",
    "stackSize": 1,
    "name": "bed"
  },
  {
    "id": 356,
    "displayName": "Redstone Repeater",
    "stackSize": 64,
    "name": "repeater"
  },
  {
    "id": 357,
    "displayName": "Cookie",
    "stackSize": 64,
    "name": "cookie"
  },
  {
    "id": 358,
    "displayName": "Map",
    "stackSize": 64,
    "name": "filled_map"
  },
  {
    "id": 359,
    "displayName": "Shears",
    "stackSize": 1,
    "name": "shears"
  },
  {
    "id": 360,
    "displayName": "Melon",
    "stackSize": 64,
    "name": "melon"
  },
  {
    "id": 361,
    "displayName": "Pumpkin Seeds",
    "stackSize": 64,
    "name": "pumpkin_seeds"
  },
  {
    "id": 362,
    "displayName": "Melon Seeds",
    "stackSize": 64,
    "name": "melon_seeds"
  },
  {
    "id": 363,
    "displayName": "Raw Beef",
    "stackSize": 64,
    "name": "beef"
  },
  {
    "id": 364,
    "displayName": "Steak",
    "stackSize": 64,
    "name": "cooked_beef"
  },
  {
    "id": 365,
    "displayName": "Raw Chicken",
    "stackSize": 64,
    "name": "chicken"
  },
  {
    "id": 366,
    "displayName": "Cooked Chicken",
    "stackSize": 64,
    "name": "cooked_chicken"
  },
  {
    "id": 367,
    "displayName": "Rotten Flesh",
    "stackSize": 64,
    "name": "rotten_flesh"
  },
  {
    "id": 368,
    "displayName": "Ender Pearl",
    "stackSize": 16,
    "name": "ender_pearl"
  },
  {
    "id": 369,
    "displayName": "Blaze Rod",
    "stackSize": 64,
    "name": "blaze_rod"
  },
  {
    "id": 370,
    "displayName": "Ghast Tear",
    "stackSize": 64,
    "name": "ghast_tear"
  },
  {
    "id": 371,
    "displayName": "Gold Nugget",
    "stackSize": 64,
    "name": "gold_nugget"
  },
  {
    "id": 372,
    "displayName": "Nether Wart",
    "stackSize": 64,
    "name": "nether_wart"
  },
  {
    "id": 373,
    "displayName": "Potion",
    "stackSize": 1,
    "name": "potion"
  },
  {
    "id": 374,
    "displayName": "Glass Bottle",
    "stackSize": 64,
    "name": "glass_bottle"
  },
  {
    "id": 375,
    "displayName": "Spider Eye",
    "stackSize": 64,
    "name": "spider_eye"
  },
  {
    "id": 376,
    "displayName": "Fermented Spider Eye",
    "stackSize": 64,
    "name": "fermented_spider_eye"
  },
  {
    "id": 377,
    "displayName": "Blaze Powder",
    "stackSize": 64,
    "name": "blaze_powder"
  },
  {
    "id": 378,
    "displayName": "Magma Cream",
    "stackSize": 64,
    "name": "magma_cream"
  },
  {
    "id": 379,
    "displayName": "Brewing Stand",
    "stackSize": 64,
    "name": "brewing_stand"
  },
  {
    "id": 380,
    "displayName": "Cauldron",
    "stackSize": 64,
    "name": "cauldron"
  },
  {
    "id": 381,
    "displayName": "Eye of Ender",
    "stackSize": 64,
    "name": "ender_eye"
  },
  {
    "id": 382,
    "displayName": "Glistering Melon",
    "stackSize": 64,
    "name": "speckled_melon"
  },
  {
    "id": 383,
    "displayName": "Spawn Egg",
    "stackSize": 64,
    "name": "spawn_egg"
  },
  {
    "id": 384,
    "displayName": "Bottle o' Enchanting",
    "stackSize": 64,
    "name": "experience_bottle"
  },
  {
    "id": 385,
    "displayName": "Fire Charge",
    "stackSize": 64,
    "name": "fire_charge"
  },
  {
    "id": 386,
    "displayName": "Book and Quill",
    "stackSize": 1,
    "name": "writable_book"
  },
  {
    "id": 387,
    "displayName": "Written Book",
    "stackSize": 16,
    "name": "written_book"
  },
  {
    "id": 388,
    "displayName": "Emerald",
    "stackSize": 64,
    "name": "emerald"
  },
  {
    "id": 389,
    "displayName": "Item Frame",
    "stackSize": 64,
    "name": "item_frame"
  },
  {
    "id": 390,
    "displayName": "Flower Pot",
    "stackSize": 64,
    "name": "flower_pot",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Empty Flower Pot"
      },
      {
        "metadata": 1,
        "displayName": "Poppy Flower Pot"
      },
      {
        "metadata": 2,
        "displayName": "Dandelion Flower Pot"
      },
      {
        "metadata": 3,
        "displayName": "Oak sapling Flower Pot"
      },
      {
        "metadata": 4,
        "displayName": "Spruce sapling Flower Pot"
      },
      {
        "metadata": 5,
        "displayName": "Birch sapling Flower Pot"
      },
      {
        "metadata": 6,
        "displayName": "Jungle sapling Flower Pot"
      },
      {
        "metadata": 7,
        "displayName": "Red mushroom Flower Pot"
      },
      {
        "metadata": 8,
        "displayName": "Brown mushroom Flower Pot"
      },
      {
        "metadata": 9,
        "displayName": "Cactus Flower Pot"
      },
      {
        "metadata": 10,
        "displayName": "Dead bush Flower Pot"
      },
      {
        "metadata": 11,
        "displayName": "Fern Flower Pot"
      },
      {
        "metadata": 12,
        "displayName": "Acacia sapling Flower Pot"
      },
      {
        "metadata": 13,
        "displayName": "Dark oak sapling Flower Pot"
      }
    ]
  },
  {
    "id": 391,
    "displayName": "Carrot",
    "stackSize": 64,
    "name": "carrot"
  },
  {
    "id": 392,
    "displayName": "Potato",
    "stackSize": 64,
    "name": "potato"
  },
  {
    "id": 393,
    "displayName": "Baked Potato",
    "stackSize": 64,
    "name": "baked_potato"
  },
  {
    "id": 394,
    "displayName": "Poisonous Potato",
    "stackSize": 64,
    "name": "poisonous_potato"
  },
  {
    "id": 395,
    "displayName": "Empty Map",
    "stackSize": 64,
    "name": "map"
  },
  {
    "id": 396,
    "displayName": "Golden Carrot",
    "stackSize": 64,
    "name": "golden_carrot"
  },
  {
    "id": 397,
    "displayName": "Mob head",
    "stackSize": 64,
    "name": "skull",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Skeleton Skull"
      },
      {
        "metadata": 1,
        "displayName": "Wither Skeleton Skull"
      },
      {
        "metadata": 2,
        "displayName": "Zombie Head"
      },
      {
        "metadata": 3,
        "displayName": "Head"
      },
      {
        "metadata": 4,
        "displayName": "Creeper Head"
      }
    ]
  },
  {
    "id": 398,
    "displayName": "Carrot on a Stick",
    "stackSize": 1,
    "name": "carrot_on_a_stick"
  },
  {
    "id": 399,
    "displayName": "Nether Star",
    "stackSize": 64,
    "name": "nether_star"
  },
  {
    "id": 400,
    "displayName": "Pumpkin Pie",
    "stackSize": 64,
    "name": "pumpkin_pie"
  },
  {
    "id": 401,
    "displayName": "Firework Rocket",
    "stackSize": 64,
    "name": "fireworks"
  },
  {
    "id": 402,
    "displayName": "Firework Star",
    "stackSize": 64,
    "name": "firework_charge"
  },
  {
    "id": 403,
    "displayName": "Enchanted Book",
    "stackSize": 1,
    "name": "enchanted_book"
  },
  {
    "id": 404,
    "displayName": "Redstone Comparator",
    "stackSize": 64,
    "name": "comparator"
  },
  {
    "id": 405,
    "displayName": "Nether Brick",
    "stackSize": 64,
    "name": "netherbrick"
  },
  {
    "id": 406,
    "displayName": "Nether Quartz",
    "stackSize": 64,
    "name": "quartz"
  },
  {
    "id": 407,
    "displayName": "Minecart with TNT",
    "stackSize": 1,
    "name": "tnt_minecart"
  },
  {
    "id": 408,
    "displayName": "Minecart with Hopper",
    "stackSize": 1,
    "name": "hopper_minecart"
  },
  {
    "id": 409,
    "displayName": "Prismarine Shard",
    "stackSize": 64,
    "name": "prismarine_shard"
  },
  {
    "id": 410,
    "displayName": "Prismarine Crystals",
    "stackSize": 64,
    "name": "prismarine_crystals"
  },
  {
    "id": 411,
    "displayName": "Raw Rabbit",
    "stackSize": 64,
    "name": "rabbit"
  },
  {
    "id": 412,
    "displayName": "Cooked Rabbit",
    "stackSize": 64,
    "name": "cooked_rabbit"
  },
  {
    "id": 413,
    "displayName": "Rabbit Stew",
    "stackSize": 1,
    "name": "rabbit_stew"
  },
  {
    "id": 414,
    "displayName": "Rabbit's Foot",
    "stackSize": 64,
    "name": "rabbit_foot"
  },
  {
    "id": 415,
    "displayName": "Rabbit Hide",
    "stackSize": 64,
    "name": "rabbit_hide"
  },
  {
    "id": 416,
    "displayName": "Armor Stand",
    "stackSize": 16,
    "name": "armor_stand"
  },
  {
    "id": 417,
    "displayName": "Iron Horse Armor",
    "stackSize": 1,
    "name": "iron_horse_armor"
  },
  {
    "id": 418,
    "displayName": "Golden Horse Armor",
    "stackSize": 1,
    "name": "golden_horse_armor"
  },
  {
    "id": 419,
    "displayName": "Diamond Horse Armor",
    "stackSize": 1,
    "name": "diamond_horse_armor"
  },
  {
    "id": 420,
    "displayName": "Lead",
    "stackSize": 64,
    "name": "lead"
  },
  {
    "id": 421,
    "displayName": "Name Tag",
    "stackSize": 64,
    "name": "name_tag"
  },
  {
    "id": 422,
    "displayName": "Minecart with Command Block",
    "stackSize": 1,
    "name": "command_block_minecart"
  },
  {
    "id": 423,
    "displayName": "Raw Mutton",
    "stackSize": 64,
    "name": "mutton"
  },
  {
    "id": 424,
    "displayName": "Cooked Mutton",
    "stackSize": 64,
    "name": "cooked_mutton"
  },
  {
    "id": 425,
    "displayName": "Banner",
    "stackSize": 16,
    "name": "banner"
  },
  {
    "id": 427,
    "displayName": "Spruce Door",
    "stackSize": 64,
    "name": "spruce_door"
  },
  {
    "id": 428,
    "displayName": "Birch Door",
    "stackSize": 64,
    "name": "birch_door"
  },
  {
    "id": 429,
    "displayName": "Jungle Door",
    "stackSize": 64,
    "name": "jungle_door"
  },
  {
    "id": 430,
    "displayName": "Acacia Door",
    "stackSize": 64,
    "name": "acacia_door"
  },
  {
    "id": 431,
    "displayName": "Dark Oak Door",
    "stackSize": 64,
    "name": "dark_oak_door"
  },
  {
    "id": 2256,
    "displayName": "13 Disc",
    "stackSize": 1,
    "name": "record_13"
  },
  {
    "id": 2257,
    "displayName": "Cat Disc",
    "stackSize": 1,
    "name": "record_cat"
  },
  {
    "id": 2258,
    "displayName": "Blocks Disc",
    "stackSize": 1,
    "name": "record_blocks"
  },
  {
    "id": 2259,
    "displayName": "Chirp Disc",
    "stackSize": 1,
    "name": "record_chirp"
  },
  {
    "id": 2260,
    "displayName": "Far Disc",
    "stackSize": 1,
    "name": "record_far"
  },
  {
    "id": 2261,
    "displayName": "Mall Disc",
    "stackSize": 1,
    "name": "record_mall"
  },
  {
    "id": 2262,
    "displayName": "Mellohi Disc",
    "stackSize": 1,
    "name": "record_mellohi"
  },
  {
    "id": 2263,
    "displayName": "Stal Disc",
    "stackSize": 1,
    "name": "record_stal"
  },
  {
    "id": 2264,
    "displayName": "Strad Disc",
    "stackSize": 1,
    "name": "record_strad"
  },
  {
    "id": 2265,
    "displayName": "Ward Disc",
    "stackSize": 1,
    "name": "record_ward"
  },
  {
    "id": 2266,
    "displayName": "11 Disc",
    "stackSize": 1,
    "name": "record_11"
  },
  {
    "id": 2267,
    "displayName": "Wait Disc",
    "stackSize": 1,
    "name": "record_wait"
  }
]
},{}],342:[function(require,module,exports){
module.exports={
  "rock": {
    "257": 6,
    "270": 2,
    "274": 4,
    "278": 8,
    "285": 12
  },
  "wood": {
    "258": 6,
    "271": 2,
    "275": 4,
    "279": 8,
    "286": 12
  },
  "plant": {
    "258": 6,
    "267": 1.5,
    "268": 1.5,
    "271": 2,
    "272": 1.5,
    "275": 4,
    "276": 1.5,
    "279": 8,
    "283": 1.5,
    "286": 12
  },
  "melon": {
    "267": 1.5,
    "268": 1.5,
    "272": 1.5,
    "276": 1.5,
    "283": 1.5
  },
  "leaves": {
    "267": 1.5,
    "268": 1.5,
    "272": 1.5,
    "276": 1.5,
    "283": 1.5,
    "359": 6
  },
  "dirt": {
    "256": 6,
    "269": 2,
    "273": 4,
    "277": 8,
    "284": 12
  },
  "web": {
    "267": 15,
    "268": 15,
    "272": 15,
    "276": 15,
    "283": 15,
    "359": 15
  },
  "wool": {
    "359": 4.8
  }
}
},{}],343:[function(require,module,exports){
module.exports={
  "types": {
    "varint": "native",
    "string": "native",
    "ushort": "native",
    "ubyte": "native",
    "long": "native",
    "buffer": "native",
    "int": "native",
    "byte": "native",
    "bool": "native",
    "short": "native",
    "float": "native",
    "double": "native",
    "UUID": "native",
    "option": "native",
    "entityMetadataLoop": "native",
    "bitfield": "native",
    "container": "native",
    "switch": "native",
    "void": "native",
    "array": "native",
    "restBuffer": "native",
    "nbt":"native",
    "optionalNbt":"native",
    "slot": ["container",[
      {
        "name":"blockId",
        "type":"short"
      },
      {
        "anon":true,
        "type":["switch",
          {
            "compareTo":"blockId",
            "fields": {
              "-1": "void"
            },
            "default":[
              "container",[
                {
                  "name":"itemCount",
                  "type":"byte"
                },
                {
                  "name":"itemDamage",
                  "type":"short"
                },
                {
                  "name":"nbtData",
                  "type":"optionalNbt"
                }
              ]
            ]
          }
        ]
      }
    ]],
    "position": ["bitfield", [
      { "name": "x", "size": 26, "signed": true },
      { "name": "y", "size": 12, "signed": true },
      { "name": "z", "size": 26, "signed": true }
    ]],
    "entityMetadataItem": [
      "switch",
      {
        "compareTo": "$compareTo",
        "fields": {
          "0": "byte",
          "1": "short",
          "2": "int",
          "3": "float",
          "4": "string",
          "5": "slot",
          "6": [
            "container",
            [
              {
                "name": "x",
                "type": "int"
              },
              {
                "name": "y",
                "type": "int"
              },
              {
                "name": "z",
                "type": "int"
              }
            ]
          ],
          "7": [
            "container",
            [
              {
                "name": "pitch",
                "type": "float"
              },
              {
                "name": "yaw",
                "type": "float"
              },
              {
                "name": "roll",
                "type": "float"
              }
            ]
          ]
        }
      }
    ],
    "entityMetadata": ["entityMetadataLoop", {
      "endVal": 127,
      "type": ["container", [
        { "anon": true, "type": ["bitfield", [
          { "name": "type", "size": 3, "signed": false },
          { "name": "key", "size": 5, "signed": false }
        ]]},
        { "name": "value", "type": ["entityMetadataItem", { "compareTo": "type" }]}
      ]]
    }]
  },
  "states": {
    "handshaking": {
      "toClient": {},
      "toServer": {
        "set_protocol": {
          "id": "0x00",
          "fields": [
            {
              "name": "protocolVersion",
              "type": "varint"
            },
            {
              "name": "serverHost",
              "type": "string"
            },
            {
              "name": "serverPort",
              "type": "ushort"
            },
            {
              "name": "nextState",
              "type": "varint"
            }
          ]
        },
        "legacy_server_list_ping": {
          "id": "0xfe",
          "fields": [
            {
              "name": "payload",
              "type": "ubyte"
            }
          ]
        }
      }
    },
    "status": {
      "toClient": {
        "server_info": {
          "id": "0x00",
          "fields": [
            {
              "name": "response",
              "type": "string"
            }
          ]
        },
        "ping": {
          "id": "0x01",
          "fields": [
            {
              "name": "time",
              "type": "long"
            }
          ]
        }
      },
      "toServer": {
        "ping_start": {
          "id": "0x00",
          "fields": []
        },
        "ping": {
          "id": "0x01",
          "fields": [
            {
              "name": "time",
              "type": "long"
            }
          ]
        }
      }
    },
    "login": {
      "toClient": {
        "disconnect": {
          "id": "0x00",
          "fields": [
            {
              "name": "reason",
              "type": "string"
            }
          ]
        },
        "encryption_begin": {
          "id": "0x01",
          "fields": [
            {
              "name": "serverId",
              "type": "string"
            },
            {
              "name": "publicKey",
              "type": [
                "buffer",
                {
                  "countType": "varint"
                }
              ]
            },
            {
              "name": "verifyToken",
              "type": [
                "buffer",
                {
                  "countType": "varint"
                }
              ]
            }
          ]
        },
        "success": {
          "id": "0x02",
          "fields": [
            {
              "name": "uuid",
              "type": "string"
            },
            {
              "name": "username",
              "type": "string"
            }
          ]
        },
        "compress": {
          "id": "0x03",
          "fields": [
            {
              "name": "threshold",
              "type": "varint"
            }
          ]
        }
      },
      "toServer": {
        "login_start": {
          "id": "0x00",
          "fields": [
            {
              "name": "username",
              "type": "string"
            }
          ]
        },
        "encryption_begin": {
          "id": "0x01",
          "fields": [
            {
              "name": "sharedSecret",
              "type": [
                "buffer",
                {
                  "countType": "varint"
                }
              ]
            },
            {
              "name": "verifyToken",
              "type": [
                "buffer",
                {
                  "countType": "varint"
                }
              ]
            }
          ]
        }
      }
    },
    "play": {
      "toClient": {
        "keep_alive": {
          "id": "0x00",
          "fields": [
            {
              "name": "keepAliveId",
              "type": "varint"
            }
          ]
        },
        "login": {
          "id": "0x01",
          "fields": [
            {
              "name": "entityId",
              "type": "int"
            },
            {
              "name": "gameMode",
              "type": "ubyte"
            },
            {
              "name": "dimension",
              "type": "byte"
            },
            {
              "name": "difficulty",
              "type": "ubyte"
            },
            {
              "name": "maxPlayers",
              "type": "ubyte"
            },
            {
              "name": "levelType",
              "type": "string"
            },
            {
              "name": "reducedDebugInfo",
              "type": "bool"
            }
          ]
        },
        "chat": {
          "id": "0x02",
          "fields": [
            {
              "name": "message",
              "type": "string"
            },
            {
              "name": "position",
              "type": "byte"
            }
          ]
        },
        "update_time": {
          "id": "0x03",
          "fields": [
            {
              "name": "age",
              "type": "long"
            },
            {
              "name": "time",
              "type": "long"
            }
          ]
        },
        "entity_equipment": {
          "id": "0x04",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "slot",
              "type": "short"
            },
            {
              "name": "item",
              "type": "slot"
            }
          ]
        },
        "spawn_position": {
          "id": "0x05",
          "fields": [
            {
              "name": "location",
              "type": "position"
            }
          ]
        },
        "update_health": {
          "id": "0x06",
          "fields": [
            {
              "name": "health",
              "type": "float"
            },
            {
              "name": "food",
              "type": "varint"
            },
            {
              "name": "foodSaturation",
              "type": "float"
            }
          ]
        },
        "respawn": {
          "id": "0x07",
          "fields": [
            {
              "name": "dimension",
              "type": "int"
            },
            {
              "name": "difficulty",
              "type": "ubyte"
            },
            {
              "name": "gamemode",
              "type": "ubyte"
            },
            {
              "name": "levelType",
              "type": "string"
            }
          ]
        },
        "position": {
          "id": "0x08",
          "fields": [
            {
              "name": "x",
              "type": "double"
            },
            {
              "name": "y",
              "type": "double"
            },
            {
              "name": "z",
              "type": "double"
            },
            {
              "name": "yaw",
              "type": "float"
            },
            {
              "name": "pitch",
              "type": "float"
            },
            {
              "name": "flags",
              "type": "byte"
            }
          ]
        },
        "held_item_slot": {
          "id": "0x09",
          "fields": [
            {
              "name": "slot",
              "type": "byte"
            }
          ]
        },
        "bed": {
          "id": "0x0a",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "location",
              "type": "position"
            }
          ]
        },
        "animation": {
          "id": "0x0b",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "animation",
              "type": "ubyte"
            }
          ]
        },
        "named_entity_spawn": {
          "id": "0x0c",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "playerUUID",
              "type": "UUID"
            },
            {
              "name": "x",
              "type": "int"
            },
            {
              "name": "y",
              "type": "int"
            },
            {
              "name": "z",
              "type": "int"
            },
            {
              "name": "yaw",
              "type": "byte"
            },
            {
              "name": "pitch",
              "type": "byte"
            },
            {
              "name": "currentItem",
              "type": "short"
            },
            {
              "name": "metadata",
              "type": "entityMetadata"
            }
          ]
        },
        "collect": {
          "id": "0x0d",
          "fields": [
            {
              "name": "collectedEntityId",
              "type": "varint"
            },
            {
              "name": "collectorEntityId",
              "type": "varint"
            }
          ]
        },
        "spawn_entity": {
          "id": "0x0e",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "type",
              "type": "byte"
            },
            {
              "name": "x",
              "type": "int"
            },
            {
              "name": "y",
              "type": "int"
            },
            {
              "name": "z",
              "type": "int"
            },
            {
              "name": "pitch",
              "type": "byte"
            },
            {
              "name": "yaw",
              "type": "byte"
            },
            {
              "name": "objectData",
              "type": [
                "container",
                [
                  {
                    "name": "intField",
                    "type": "int"
                  },
                  {
                    "name": "velocityX",
                    "type": [
                      "switch",
                      {
                        "compareTo": "intField",
                        "fields": {
                          "0": "void"
                        },
                        "default": "short"
                      }
                    ]
                  },
                  {
                    "name": "velocityY",
                    "type": [
                      "switch",
                      {
                        "compareTo": "intField",
                        "fields": {
                          "0": "void"
                        },
                        "default": "short"
                      }
                    ]
                  },
                  {
                    "name": "velocityZ",
                    "type": [
                      "switch",
                      {
                        "compareTo": "intField",
                        "fields": {
                          "0": "void"
                        },
                        "default": "short"
                      }
                    ]
                  }
                ]
              ]
            }
          ]
        },
        "spawn_entity_living": {
          "id": "0x0f",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "type",
              "type": "ubyte"
            },
            {
              "name": "x",
              "type": "int"
            },
            {
              "name": "y",
              "type": "int"
            },
            {
              "name": "z",
              "type": "int"
            },
            {
              "name": "yaw",
              "type": "byte"
            },
            {
              "name": "pitch",
              "type": "byte"
            },
            {
              "name": "headPitch",
              "type": "byte"
            },
            {
              "name": "velocityX",
              "type": "short"
            },
            {
              "name": "velocityY",
              "type": "short"
            },
            {
              "name": "velocityZ",
              "type": "short"
            },
            {
              "name": "metadata",
              "type": "entityMetadata"
            }
          ]
        },
        "spawn_entity_painting": {
          "id": "0x10",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "title",
              "type": "string"
            },
            {
              "name": "location",
              "type": "position"
            },
            {
              "name": "direction",
              "type": "ubyte"
            }
          ]
        },
        "spawn_entity_experience_orb": {
          "id": "0x11",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "x",
              "type": "int"
            },
            {
              "name": "y",
              "type": "int"
            },
            {
              "name": "z",
              "type": "int"
            },
            {
              "name": "count",
              "type": "short"
            }
          ]
        },
        "entity_velocity": {
          "id": "0x12",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "velocityX",
              "type": "short"
            },
            {
              "name": "velocityY",
              "type": "short"
            },
            {
              "name": "velocityZ",
              "type": "short"
            }
          ]
        },
        "entity_destroy": {
          "id": "0x13",
          "fields": [
            {
              "name": "entityIds",
              "type": [
                "array",
                {
                  "countType": "varint",
                  "type": "varint"
                }
              ]
            }
          ]
        },
        "entity": {
          "id": "0x14",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            }
          ]
        },
        "rel_entity_move": {
          "id": "0x15",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "dX",
              "type": "byte"
            },
            {
              "name": "dY",
              "type": "byte"
            },
            {
              "name": "dZ",
              "type": "byte"
            },
            {
              "name": "onGround",
              "type": "bool"
            }
          ]
        },
        "entity_look": {
          "id": "0x16",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "yaw",
              "type": "byte"
            },
            {
              "name": "pitch",
              "type": "byte"
            },
            {
              "name": "onGround",
              "type": "bool"
            }
          ]
        },
        "entity_move_look": {
          "id": "0x17",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "dX",
              "type": "byte"
            },
            {
              "name": "dY",
              "type": "byte"
            },
            {
              "name": "dZ",
              "type": "byte"
            },
            {
              "name": "yaw",
              "type": "byte"
            },
            {
              "name": "pitch",
              "type": "byte"
            },
            {
              "name": "onGround",
              "type": "bool"
            }
          ]
        },
        "entity_teleport": {
          "id": "0x18",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "x",
              "type": "int"
            },
            {
              "name": "y",
              "type": "int"
            },
            {
              "name": "z",
              "type": "int"
            },
            {
              "name": "yaw",
              "type": "byte"
            },
            {
              "name": "pitch",
              "type": "byte"
            },
            {
              "name": "onGround",
              "type": "bool"
            }
          ]
        },
        "entity_head_rotation": {
          "id": "0x19",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "headYaw",
              "type": "byte"
            }
          ]
        },
        "entity_status": {
          "id": "0x1a",
          "fields": [
            {
              "name": "entityId",
              "type": "int"
            },
            {
              "name": "entityStatus",
              "type": "byte"
            }
          ]
        },
        "attach_entity": {
          "id": "0x1b",
          "fields": [
            {
              "name": "entityId",
              "type": "int"
            },
            {
              "name": "vehicleId",
              "type": "int"
            },
            {
              "name": "leash",
              "type": "bool"
            }
          ]
        },
        "entity_metadata": {
          "id": "0x1c",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "metadata",
              "type": "entityMetadata"
            }
          ]
        },
        "entity_effect": {
          "id": "0x1d",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "effectId",
              "type": "byte"
            },
            {
              "name": "amplifier",
              "type": "byte"
            },
            {
              "name": "duration",
              "type": "varint"
            },
            {
              "name": "hideParticles",
              "type": "bool"
            }
          ]
        },
        "remove_entity_effect": {
          "id": "0x1e",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "effectId",
              "type": "byte"
            }
          ]
        },
        "experience": {
          "id": "0x1f",
          "fields": [
            {
              "name": "experienceBar",
              "type": "float"
            },
            {
              "name": "level",
              "type": "varint"
            },
            {
              "name": "totalExperience",
              "type": "varint"
            }
          ]
        },
        "update_attributes": {
          "id": "0x20",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "properties",
              "type": [
                "array",
                {
                  "countType": "int",
                  "type": [
                    "container",
                    [
                      {
                        "name": "key",
                        "type": "string"
                      },
                      {
                        "name": "value",
                        "type": "double"
                      },
                      {
                        "name": "modifiers",
                        "type": [
                          "array",
                          {
                            "countType": "varint",
                            "type": [
                              "container",
                              [
                                {
                                  "name": "UUID",
                                  "type": "UUID"
                                },
                                {
                                  "name": "amount",
                                  "type": "double"
                                },
                                {
                                  "name": "operation",
                                  "type": "byte"
                                }
                              ]
                            ]
                          }
                        ]
                      }
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "map_chunk": {
          "id": "0x21",
          "fields": [
            {
              "name": "x",
              "type": "int"
            },
            {
              "name": "z",
              "type": "int"
            },
            {
              "name": "groundUp",
              "type": "bool"
            },
            {
              "name": "bitMap",
              "type": "ushort"
            },
            {
              "name": "chunkData",
              "type": [
                "buffer",
                {
                  "countType": "varint"
                }
              ]
            }
          ]
        },
        "multi_block_change": {
          "id": "0x22",
          "fields": [
            {
              "name": "chunkX",
              "type": "int"
            },
            {
              "name": "chunkZ",
              "type": "int"
            },
            {
              "name": "records",
              "type": [
                "array",
                {
                  "countType": "varint",
                  "type": [
                    "container",
                    [
                      {
                        "name": "horizontalPos",
                        "type": "ubyte"
                      },
                      {
                        "name": "y",
                        "type": "ubyte"
                      },
                      {
                        "name": "blockId",
                        "type": "varint"
                      }
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "block_change": {
          "id": "0x23",
          "fields": [
            {
              "name": "location",
              "type": "position"
            },
            {
              "name": "type",
              "type": "varint"
            }
          ]
        },
        "block_action": {
          "id": "0x24",
          "fields": [
            {
              "name": "location",
              "type": "position"
            },
            {
              "name": "byte1",
              "type": "ubyte"
            },
            {
              "name": "byte2",
              "type": "ubyte"
            },
            {
              "name": "blockId",
              "type": "varint"
            }
          ]
        },
        "block_break_animation": {
          "id": "0x25",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "location",
              "type": "position"
            },
            {
              "name": "destroyStage",
              "type": "byte"
            }
          ]
        },
        "map_chunk_bulk": {
          "id": "0x26",
          "fields": [
            {
              "name": "skyLightSent",
              "type": "bool"
            },
            {
              "name": "meta",
              "type": [
                "array",
                {
                  "countType": "varint",
                  "type": [
                    "container",
                    [
                      {
                        "name": "x",
                        "type": "int"
                      },
                      {
                        "name": "z",
                        "type": "int"
                      },
                      {
                        "name": "bitMap",
                        "type": "ushort"
                      }
                    ]
                  ]
                }
              ]
            },
            {
              "name": "data",
              "type": "restBuffer"
            }
          ]
        },
        "explosion": {
          "id": "0x27",
          "fields": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            },
            {
              "name": "affectedBlockOffsets",
              "type": [
                "array",
                {
                  "countType": "int",
                  "type": [
                    "container",
                    [
                      {
                        "name": "x",
                        "type": "byte"
                      },
                      {
                        "name": "y",
                        "type": "byte"
                      },
                      {
                        "name": "z",
                        "type": "byte"
                      }
                    ]
                  ]
                }
              ]
            },
            {
              "name": "playerMotionX",
              "type": "float"
            },
            {
              "name": "playerMotionY",
              "type": "float"
            },
            {
              "name": "playerMotionZ",
              "type": "float"
            }
          ]
        },
        "world_event": {
          "id": "0x28",
          "fields": [
            {
              "name": "effectId",
              "type": "int"
            },
            {
              "name": "location",
              "type": "position"
            },
            {
              "name": "data",
              "type": "int"
            },
            {
              "name": "global",
              "type": "bool"
            }
          ]
        },
        "named_sound_effect": {
          "id": "0x29",
          "fields": [
            {
              "name": "soundName",
              "type": "string"
            },
            {
              "name": "x",
              "type": "int"
            },
            {
              "name": "y",
              "type": "int"
            },
            {
              "name": "z",
              "type": "int"
            },
            {
              "name": "volume",
              "type": "float"
            },
            {
              "name": "pitch",
              "type": "ubyte"
            }
          ]
        },
        "world_particles": {
          "id": "0x2a",
          "fields": [
            {
              "name": "particleId",
              "type": "int"
            },
            {
              "name": "longDistance",
              "type": "bool"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "offsetX",
              "type": "float"
            },
            {
              "name": "offsetY",
              "type": "float"
            },
            {
              "name": "offsetZ",
              "type": "float"
            },
            {
              "name": "particleData",
              "type": "float"
            },
            {
              "name": "particles",
              "type": "int"
            },
            {
              "name": "data",
              "type": [
                "array",
                {
                  "count": {
                    "field": "particleId",
                    "map": {
                      "36": 2,
                      "37": 1,
                      "38": 1
                    },
                    "default": 0
                  },
                  "type": "varint"
                }
              ]
            }
          ]
        },
        "game_state_change": {
          "id": "0x2b",
          "fields": [
            {
              "name": "reason",
              "type": "ubyte"
            },
            {
              "name": "gameMode",
              "type": "float"
            }
          ]
        },
        "spawn_entity_weather": {
          "id": "0x2c",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "type",
              "type": "byte"
            },
            {
              "name": "x",
              "type": "int"
            },
            {
              "name": "y",
              "type": "int"
            },
            {
              "name": "z",
              "type": "int"
            }
          ]
        },
        "open_window": {
          "id": "0x2d",
          "fields": [
            {
              "name": "windowId",
              "type": "ubyte"
            },
            {
              "name": "inventoryType",
              "type": "string"
            },
            {
              "name": "windowTitle",
              "type": "string"
            },
            {
              "name": "slotCount",
              "type": "ubyte"
            },
            {
              "name": "entityId",
              "type": [
                "switch",
                {
                  "compareTo": "inventoryType",
                  "fields": {
                    "EntityHorse": "int"
                  },
                  "default": "void"
                }
              ]
            }
          ]
        },
        "close_window": {
          "id": "0x2e",
          "fields": [
            {
              "name": "windowId",
              "type": "ubyte"
            }
          ]
        },
        "set_slot": {
          "id": "0x2f",
          "fields": [
            {
              "name": "windowId",
              "type": "byte"
            },
            {
              "name": "slot",
              "type": "short"
            },
            {
              "name": "item",
              "type": "slot"
            }
          ]
        },
        "window_items": {
          "id": "0x30",
          "fields": [
            {
              "name": "windowId",
              "type": "ubyte"
            },
            {
              "name": "items",
              "type": [
                "array",
                {
                  "countType": "short",
                  "type": "slot"
                }
              ]
            }
          ]
        },
        "craft_progress_bar": {
          "id": "0x31",
          "fields": [
            {
              "name": "windowId",
              "type": "ubyte"
            },
            {
              "name": "property",
              "type": "short"
            },
            {
              "name": "value",
              "type": "short"
            }
          ]
        },
        "transaction": {
          "id": "0x32",
          "fields": [
            {
              "name": "windowId",
              "type": "byte"
            },
            {
              "name": "action",
              "type": "short"
            },
            {
              "name": "accepted",
              "type": "bool"
            }
          ]
        },
        "update_sign": {
          "id": "0x33",
          "fields": [
            {
              "name": "location",
              "type": "position"
            },
            {
              "name": "text1",
              "type": "string"
            },
            {
              "name": "text2",
              "type": "string"
            },
            {
              "name": "text3",
              "type": "string"
            },
            {
              "name": "text4",
              "type": "string"
            }
          ]
        },
        "map": {
          "id": "0x34",
          "fields": [
            {
              "name": "itemDamage",
              "type": "varint"
            },
            {
              "name": "scale",
              "type": "byte"
            },
            {
              "name": "icons",
              "type": [
                "array",
                {
                  "countType": "varint",
                  "type": [
                    "container",
                    [
                      {
                        "name": "directionAndType",
                        "type": "byte"
                      },
                      {
                        "name": "x",
                        "type": "byte"
                      },
                      {
                        "name": "y",
                        "type": "byte"
                      }
                    ]
                  ]
                }
              ]
            },
            {
              "name": "columns",
              "type": "byte"
            },
            {
              "name": "rows",
              "type": [
                "switch",
                {
                  "compareTo": "columns",
                  "fields": {
                    "0": "void"
                  },
                  "default": "byte"
                }
              ]
            },
            {
              "name": "x",
              "type": [
                "switch",
                {
                  "compareTo": "columns",
                  "fields": {
                    "0": "void"
                  },
                  "default": "byte"
                }
              ]
            },
            {
              "name": "y",
              "type": [
                "switch",
                {
                  "compareTo": "columns",
                  "fields": {
                    "0": "void"
                  },
                  "default": "byte"
                }
              ]
            },
            {
              "name": "data",
              "type": [
                "switch",
                {
                  "compareTo": "columns",
                  "fields": {
                    "0": "void"
                  },
                  "default": [
                    "buffer",
                    {
                      "countType": "varint"
                    }
                  ]
                }
              ]
            }
          ]
        },
        "tile_entity_data": {
          "id": "0x35",
          "fields": [
            {
              "name": "location",
              "type": "position"
            },
            {
              "name": "action",
              "type": "ubyte"
            },
            {
              "name": "nbtData",
              "type": "optionalNbt"
            }
          ]
        },
        "open_sign_entity": {
          "id": "0x36",
          "fields": [
            {
              "name": "location",
              "type": "position"
            }
          ]
        },
        "statistics": {
          "id": "0x37",
          "fields": [
            {
              "name": "entries",
              "type": [
                "array",
                {
                  "countType": "varint",
                  "type": [
                    "container",
                    [
                      {
                        "name": "name",
                        "type": "string"
                      },
                      {
                        "name": "value",
                        "type": "varint"
                      }
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "player_info": {
          "id": "0x38",
          "fields": [
            {
              "name": "action",
              "type": "varint"
            },
            {
              "name": "data",
              "type": [
                "array",
                {
                  "countType": "varint",
                  "type": [
                    "container",
                    [
                      {
                        "name": "UUID",
                        "type": "UUID"
                      },
                      {
                        "name": "name",
                        "type": [
                          "switch",
                          {
                            "compareTo": "../action",
                            "fields": {
                              "0": "string"
                            },
                            "default": "void"
                          }
                        ]
                      },
                      {
                        "name": "properties",
                        "type": [
                          "switch",
                          {
                            "compareTo": "../action",
                            "fields": {
                              "0": [
                                "array",
                                {
                                  "countType": "varint",
                                  "type": [
                                    "container",
                                    [
                                      {
                                        "name": "name",
                                        "type": "string"
                                      },
                                      {
                                        "name": "value",
                                        "type": "string"
                                      },
                                      {
                                        "name": "signature",
                                        "type": [
                                          "option",
                                          "string"
                                        ]
                                      }
                                    ]
                                  ]
                                }
                              ]
                            },
                            "default": "void"
                          }
                        ]
                      },
                      {
                        "name": "gamemode",
                        "type": [
                          "switch",
                          {
                            "compareTo": "../action",
                            "fields": {
                              "0": "varint",
                              "1": "varint"
                            },
                            "default": "void"
                          }
                        ]
                      },
                      {
                        "name": "ping",
                        "type": [
                          "switch",
                          {
                            "compareTo": "../action",
                            "fields": {
                              "0": "varint",
                              "2": "varint"
                            },
                            "default": "void"
                          }
                        ]
                      },
                      {
                        "name": "displayName",
                        "type": [
                          "switch",
                          {
                            "compareTo": "../action",
                            "fields": {
                              "0": [
                                "option",
                                "string"
                              ],
                              "3": [
                                "option",
                                "string"
                              ]
                            },
                            "default": "void"
                          }
                        ]
                      }
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "abilities": {
          "id": "0x39",
          "fields": [
            {
              "name": "flags",
              "type": "byte"
            },
            {
              "name": "flyingSpeed",
              "type": "float"
            },
            {
              "name": "walkingSpeed",
              "type": "float"
            }
          ]
        },
        "tab_complete": {
          "id": "0x3a",
          "fields": [
            {
              "name": "matches",
              "type": [
                "array",
                {
                  "countType": "varint",
                  "type": "string"
                }
              ]
            }
          ]
        },
        "scoreboard_objective": {
          "id": "0x3b",
          "fields": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "action",
              "type": "byte"
            },
            {
              "name": "displayText",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "0": "string",
                    "2": "string"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "type",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "0": "string",
                    "2": "string"
                  },
                  "default": "void"
                }
              ]
            }
          ]
        },
        "scoreboard_score": {
          "id": "0x3c",
          "fields": [
            {
              "name": "itemName",
              "type": "string"
            },
            {
              "name": "action",
              "type": "byte"
            },
            {
              "name": "scoreName",
              "type": "string"
            },
            {
              "name": "value",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "1": "void"
                  },
                  "default": "varint"
                }
              ]
            }
          ]
        },
        "scoreboard_display_objective": {
          "id": "0x3d",
          "fields": [
            {
              "name": "position",
              "type": "byte"
            },
            {
              "name": "name",
              "type": "string"
            }
          ]
        },
        "scoreboard_team": {
          "id": "0x3e",
          "fields": [
            {
              "name": "team",
              "type": "string"
            },
            {
              "name": "mode",
              "type": "byte"
            },
            {
              "name": "name",
              "type": [
                "switch",
                {
                  "compareTo": "mode",
                  "fields": {
                    "0": "string",
                    "2": "string"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "prefix",
              "type": [
                "switch",
                {
                  "compareTo": "mode",
                  "fields": {
                    "0": "string",
                    "2": "string"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "suffix",
              "type": [
                "switch",
                {
                  "compareTo": "mode",
                  "fields": {
                    "0": "string",
                    "2": "string"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "friendlyFire",
              "type": [
                "switch",
                {
                  "compareTo": "mode",
                  "fields": {
                    "0": "byte",
                    "2": "byte"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "nameTagVisibility",
              "type": [
                "switch",
                {
                  "compareTo": "mode",
                  "fields": {
                    "0": "string",
                    "2": "string"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "color",
              "type": [
                "switch",
                {
                  "compareTo": "mode",
                  "fields": {
                    "0": "byte",
                    "2": "byte"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "players",
              "type": [
                "switch",
                {
                  "compareTo": "mode",
                  "fields": {
                    "0": [
                      "array",
                      {
                        "countType": "varint",
                        "type": "string"
                      }
                    ],
                    "3": [
                      "array",
                      {
                        "countType": "varint",
                        "type": "string"
                      }
                    ],
                    "4": [
                      "array",
                      {
                        "countType": "varint",
                        "type": "string"
                      }
                    ]
                  },
                  "default": "void"
                }
              ]
            }
          ]
        },
        "custom_payload": {
          "id": "0x3f",
          "fields": [
            {
              "name": "channel",
              "type": "string"
            },
            {
              "name": "data",
              "type": "restBuffer"
            }
          ]
        },
        "kick_disconnect": {
          "id": "0x40",
          "fields": [
            {
              "name": "reason",
              "type": "string"
            }
          ]
        },
        "difficulty": {
          "id": "0x41",
          "fields": [
            {
              "name": "difficulty",
              "type": "ubyte"
            }
          ]
        },
        "combat_event": {
          "id": "0x42",
          "fields": [
            {
              "name": "event",
              "type": "varint"
            },
            {
              "name": "duration",
              "type": [
                "switch",
                {
                  "compareTo": "event",
                  "fields": {
                    "1": "varint"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "playerId",
              "type": [
                "switch",
                {
                  "compareTo": "event",
                  "fields": {
                    "2": "varint"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "entityId",
              "type": [
                "switch",
                {
                  "compareTo": "event",
                  "fields": {
                    "1": "int",
                    "2": "int"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "message",
              "type": [
                "switch",
                {
                  "compareTo": "event",
                  "fields": {
                    "2": "string"
                  },
                  "default": "void"
                }
              ]
            }
          ]
        },
        "camera": {
          "id": "0x43",
          "fields": [
            {
              "name": "cameraId",
              "type": "varint"
            }
          ]
        },
        "world_border": {
          "id": "0x44",
          "fields": [
            {
              "name": "action",
              "type": "varint"
            },
            {
              "name": "radius",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "0": "double"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "x",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "2": "double",
                    "3": "double"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "z",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "2": "double",
                    "3": "double"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "old_radius",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "1": "double",
                    "3": "double"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "new_radius",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "1": "double",
                    "3": "double"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "speed",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "1": "varint",
                    "3": "varint"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "portalBoundary",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "3": "varint"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "warning_time",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "3": "varint",
                    "4": "varint"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "warning_blocks",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "3": "varint",
                    "5": "varint"
                  },
                  "default": "void"
                }
              ]
            }
          ]
        },
        "title": {
          "id": "0x45",
          "fields": [
            {
              "name": "action",
              "type": "varint"
            },
            {
              "name": "text",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "0": "string",
                    "1": "string"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "fadeIn",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "2": "int"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "stay",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "2": "int"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "fadeOut",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "2": "int"
                  },
                  "default": "void"
                }
              ]
            }
          ]
        },
        "set_compression": {
          "id": "0x46",
          "fields": [
            {
              "name": "threshold",
              "type": "varint"
            }
          ]
        },
        "playerlist_header": {
          "id": "0x47",
          "fields": [
            {
              "name": "header",
              "type": "string"
            },
            {
              "name": "footer",
              "type": "string"
            }
          ]
        },
        "resource_pack_send": {
          "id": "0x48",
          "fields": [
            {
              "name": "url",
              "type": "string"
            },
            {
              "name": "hash",
              "type": "string"
            }
          ]
        },
        "update_entity_nbt": {
          "id": "0x49",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "tag",
              "type": "nbt"
            }
          ]
        }
      },
      "toServer": {
        "keep_alive": {
          "id": "0x00",
          "fields": [
            {
              "name": "keepAliveId",
              "type": "varint"
            }
          ]
        },
        "chat": {
          "id": "0x01",
          "fields": [
            {
              "name": "message",
              "type": "string"
            }
          ]
        },
        "use_entity": {
          "id": "0x02",
          "fields": [
            {
              "name": "target",
              "type": "varint"
            },
            {
              "name": "mouse",
              "type": "varint"
            },
            {
              "name": "x",
              "type": [
                "switch",
                {
                  "compareTo": "mouse",
                  "fields": {
                    "2": "float"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "y",
              "type": [
                "switch",
                {
                  "compareTo": "mouse",
                  "fields": {
                    "2": "float"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "z",
              "type": [
                "switch",
                {
                  "compareTo": "mouse",
                  "fields": {
                    "2": "float"
                  },
                  "default": "void"
                }
              ]
            }
          ]
        },
        "flying": {
          "id": "0x03",
          "fields": [
            {
              "name": "onGround",
              "type": "bool"
            }
          ]
        },
        "position": {
          "id": "0x04",
          "fields": [
            {
              "name": "x",
              "type": "double"
            },
            {
              "name": "y",
              "type": "double"
            },
            {
              "name": "z",
              "type": "double"
            },
            {
              "name": "onGround",
              "type": "bool"
            }
          ]
        },
        "look": {
          "id": "0x05",
          "fields": [
            {
              "name": "yaw",
              "type": "float"
            },
            {
              "name": "pitch",
              "type": "float"
            },
            {
              "name": "onGround",
              "type": "bool"
            }
          ]
        },
        "position_look": {
          "id": "0x06",
          "fields": [
            {
              "name": "x",
              "type": "double"
            },
            {
              "name": "y",
              "type": "double"
            },
            {
              "name": "z",
              "type": "double"
            },
            {
              "name": "yaw",
              "type": "float"
            },
            {
              "name": "pitch",
              "type": "float"
            },
            {
              "name": "onGround",
              "type": "bool"
            }
          ]
        },
        "block_dig": {
          "id": "0x07",
          "fields": [
            {
              "name": "status",
              "type": "byte"
            },
            {
              "name": "location",
              "type": "position"
            },
            {
              "name": "face",
              "type": "byte"
            }
          ]
        },
        "block_place": {
          "id": "0x08",
          "fields": [
            {
              "name": "location",
              "type": "position"
            },
            {
              "name": "direction",
              "type": "byte"
            },
            {
              "name": "heldItem",
              "type": "slot"
            },
            {
              "name": "cursorX",
              "type": "byte"
            },
            {
              "name": "cursorY",
              "type": "byte"
            },
            {
              "name": "cursorZ",
              "type": "byte"
            }
          ]
        },
        "held_item_slot": {
          "id": "0x09",
          "fields": [
            {
              "name": "slotId",
              "type": "short"
            }
          ]
        },
        "arm_animation": {
          "id": "0x0a",
          "fields": []
        },
        "entity_action": {
          "id": "0x0b",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "actionId",
              "type": "varint"
            },
            {
              "name": "jumpBoost",
              "type": "varint"
            }
          ]
        },
        "steer_vehicle": {
          "id": "0x0c",
          "fields": [
            {
              "name": "sideways",
              "type": "float"
            },
            {
              "name": "forward",
              "type": "float"
            },
            {
              "name": "jump",
              "type": "ubyte"
            }
          ]
        },
        "close_window": {
          "id": "0x0d",
          "fields": [
            {
              "name": "windowId",
              "type": "ubyte"
            }
          ]
        },
        "window_click": {
          "id": "0x0e",
          "fields": [
            {
              "name": "windowId",
              "type": "ubyte"
            },
            {
              "name": "slot",
              "type": "short"
            },
            {
              "name": "mouseButton",
              "type": "byte"
            },
            {
              "name": "action",
              "type": "short"
            },
            {
              "name": "mode",
              "type": "byte"
            },
            {
              "name": "item",
              "type": "slot"
            }
          ]
        },
        "transaction": {
          "id": "0x0f",
          "fields": [
            {
              "name": "windowId",
              "type": "byte"
            },
            {
              "name": "action",
              "type": "short"
            },
            {
              "name": "accepted",
              "type": "bool"
            }
          ]
        },
        "set_creative_slot": {
          "id": "0x10",
          "fields": [
            {
              "name": "slot",
              "type": "short"
            },
            {
              "name": "item",
              "type": "slot"
            }
          ]
        },
        "enchant_item": {
          "id": "0x11",
          "fields": [
            {
              "name": "windowId",
              "type": "byte"
            },
            {
              "name": "enchantment",
              "type": "byte"
            }
          ]
        },
        "update_sign": {
          "id": "0x12",
          "fields": [
            {
              "name": "location",
              "type": "position"
            },
            {
              "name": "text1",
              "type": "string"
            },
            {
              "name": "text2",
              "type": "string"
            },
            {
              "name": "text3",
              "type": "string"
            },
            {
              "name": "text4",
              "type": "string"
            }
          ]
        },
        "abilities": {
          "id": "0x13",
          "fields": [
            {
              "name": "flags",
              "type": "byte"
            },
            {
              "name": "flyingSpeed",
              "type": "float"
            },
            {
              "name": "walkingSpeed",
              "type": "float"
            }
          ]
        },
        "tab_complete": {
          "id": "0x14",
          "fields": [
            {
              "name": "text",
              "type": "string"
            },
            {
              "name": "block",
              "type": [
                "option",
                "position"
              ]
            }
          ]
        },
        "settings": {
          "id": "0x15",
          "fields": [
            {
              "name": "locale",
              "type": "string"
            },
            {
              "name": "viewDistance",
              "type": "byte"
            },
            {
              "name": "chatFlags",
              "type": "byte"
            },
            {
              "name": "chatColors",
              "type": "bool"
            },
            {
              "name": "skinParts",
              "type": "ubyte"
            }
          ]
        },
        "client_command": {
          "id": "0x16",
          "fields": [
            {
              "name": "payload",
              "type": "varint"
            }
          ]
        },
        "custom_payload": {
          "id": "0x17",
          "fields": [
            {
              "name": "channel",
              "type": "string"
            },
            {
              "name": "data",
              "type": "restBuffer"
            }
          ]
        },
        "spectate": {
          "id": "0x18",
          "fields": [
            {
              "name": "target",
              "type": "UUID"
            }
          ]
        },
        "resource_pack_receive": {
          "id": "0x19",
          "fields": [
            {
              "name": "hash",
              "type": "string"
            },
            {
              "name": "result",
              "type": "varint"
            }
          ]
        }
      }
    }
  }
}

},{}],344:[function(require,module,exports){
module.exports={
  "1": [
    {
      "ingredients": [
        {
          "id": 1,
          "metadata": 3
        },
        4
      ],
      "result": {
        "count": 2,
        "id": 1,
        "metadata": 5
      }
    },
    {
      "inShape": [
        [
          {
            "id": 1,
            "metadata": 5
          },
          {
            "id": 1,
            "metadata": 5
          }
        ],
        [
          {
            "id": 1,
            "metadata": 5
          },
          {
            "id": 1,
            "metadata": 5
          }
        ]
      ],
      "result": {
        "count": 4,
        "id": 1,
        "metadata": 6
      }
    },
    {
      "inShape": [
        [
          4,
          406
        ],
        [
          406,
          4
        ]
      ],
      "result": {
        "count": 2,
        "id": 1,
        "metadata": 3
      }
    },
    {
      "inShape": [
        [
          {
            "id": 1,
            "metadata": 3
          },
          {
            "id": 1,
            "metadata": 3
          }
        ],
        [
          {
            "id": 1,
            "metadata": 3
          },
          {
            "id": 1,
            "metadata": 3
          }
        ]
      ],
      "result": {
        "count": 4,
        "id": 1,
        "metadata": 4
      }
    },
    {
      "ingredients": [
        {
          "id": 1,
          "metadata": 3
        },
        406
      ],
      "result": {
        "count": 1,
        "id": 1,
        "metadata": 1
      }
    },
    {
      "inShape": [
        [
          {
            "id": 1,
            "metadata": 1
          },
          {
            "id": 1,
            "metadata": 1
          }
        ],
        [
          {
            "id": 1,
            "metadata": 1
          },
          {
            "id": 1,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 4,
        "id": 1,
        "metadata": 2
      }
    }
  ],
  "3": [
    {
      "inShape": [
        [
          {
            "id": 3,
            "metadata": 0
          },
          13
        ],
        [
          13,
          {
            "id": 3,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 4,
        "id": 3,
        "metadata": 1
      }
    }
  ],
  "5": [
    {
      "inShape": [
        [
          {
            "id": 17,
            "metadata": 12
          }
        ]
      ],
      "result": {
        "count": 4,
        "id": 5,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 17,
            "metadata": 13
          }
        ]
      ],
      "result": {
        "count": 4,
        "id": 5,
        "metadata": 1
      }
    },
    {
      "inShape": [
        [
          {
            "id": 17,
            "metadata": 14
          }
        ]
      ],
      "result": {
        "count": 4,
        "id": 5,
        "metadata": 2
      }
    },
    {
      "inShape": [
        [
          {
            "id": 17,
            "metadata": 15
          }
        ]
      ],
      "result": {
        "count": 4,
        "id": 5,
        "metadata": 3
      }
    },
    {
      "inShape": [
        [
          {
            "id": 162,
            "metadata": 12
          }
        ]
      ],
      "result": {
        "count": 4,
        "id": 5,
        "metadata": 4
      }
    },
    {
      "inShape": [
        [
          {
            "id": 162,
            "metadata": 13
          }
        ]
      ],
      "result": {
        "count": 4,
        "id": 5,
        "metadata": 5
      }
    }
  ],
  "22": [
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 22,
        "metadata": 0
      }
    }
  ],
  "23": [
    {
      "inShape": [
        [
          4,
          4,
          4
        ],
        [
          4,
          261,
          4
        ],
        [
          4,
          331,
          4
        ]
      ],
      "result": {
        "count": 1,
        "id": 23,
        "metadata": 0
      }
    }
  ],
  "24": [
    {
      "inShape": [
        [
          {
            "id": 12,
            "metadata": 0
          },
          {
            "id": 12,
            "metadata": 0
          }
        ],
        [
          {
            "id": 12,
            "metadata": 0
          },
          {
            "id": 12,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 24,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 24,
            "metadata": 0
          },
          {
            "id": 24,
            "metadata": 0
          }
        ],
        [
          {
            "id": 24,
            "metadata": 0
          },
          {
            "id": 24,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 4,
        "id": 24,
        "metadata": 2
      }
    },
    {
      "inShape": [
        [
          {
            "id": 44,
            "metadata": 1
          }
        ],
        [
          {
            "id": 44,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 24,
        "metadata": 1
      }
    }
  ],
  "25": [
    {
      "inShape": [
        [
          5,
          5,
          5
        ],
        [
          5,
          331,
          5
        ],
        [
          5,
          5,
          5
        ]
      ],
      "result": {
        "count": 1,
        "id": 25,
        "metadata": 0
      }
    }
  ],
  "27": [
    {
      "inShape": [
        [
          266,
          null,
          266
        ],
        [
          266,
          280,
          266
        ],
        [
          266,
          331,
          266
        ]
      ],
      "result": {
        "count": 6,
        "id": 27,
        "metadata": 0
      }
    }
  ],
  "28": [
    {
      "inShape": [
        [
          265,
          null,
          265
        ],
        [
          265,
          70,
          265
        ],
        [
          265,
          331,
          265
        ]
      ],
      "result": {
        "count": 6,
        "id": 28,
        "metadata": 0
      }
    }
  ],
  "29": [
    {
      "inShape": [
        [
          341
        ],
        [
          33
        ]
      ],
      "result": {
        "count": 1,
        "id": 29,
        "metadata": 0
      }
    }
  ],
  "33": [
    {
      "inShape": [
        [
          5,
          5,
          5
        ],
        [
          4,
          265,
          4
        ],
        [
          4,
          331,
          4
        ]
      ],
      "result": {
        "count": 1,
        "id": 33,
        "metadata": 0
      }
    }
  ],
  "35": [
    {
      "inShape": [
        [
          287,
          287
        ],
        [
          287,
          287
        ]
      ],
      "result": {
        "count": 1,
        "id": 35,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        35,
        {
          "id": 351,
          "metadata": 14
        }
      ],
      "result": {
        "count": 1,
        "id": 35,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        35,
        {
          "id": 351,
          "metadata": 13
        }
      ],
      "result": {
        "count": 1,
        "id": 35,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        35,
        {
          "id": 351,
          "metadata": 12
        }
      ],
      "result": {
        "count": 1,
        "id": 35,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        35,
        {
          "id": 351,
          "metadata": 11
        }
      ],
      "result": {
        "count": 1,
        "id": 35,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        35,
        {
          "id": 351,
          "metadata": 10
        }
      ],
      "result": {
        "count": 1,
        "id": 35,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        35,
        {
          "id": 351,
          "metadata": 9
        }
      ],
      "result": {
        "count": 1,
        "id": 35,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        35,
        {
          "id": 351,
          "metadata": 8
        }
      ],
      "result": {
        "count": 1,
        "id": 35,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        35,
        {
          "id": 351,
          "metadata": 7
        }
      ],
      "result": {
        "count": 1,
        "id": 35,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        35,
        {
          "id": 351,
          "metadata": 6
        }
      ],
      "result": {
        "count": 1,
        "id": 35,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        35,
        {
          "id": 351,
          "metadata": 5
        }
      ],
      "result": {
        "count": 1,
        "id": 35,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        35,
        {
          "id": 351,
          "metadata": 4
        }
      ],
      "result": {
        "count": 1,
        "id": 35,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        35,
        {
          "id": 351,
          "metadata": 3
        }
      ],
      "result": {
        "count": 1,
        "id": 35,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        35,
        {
          "id": 351,
          "metadata": 2
        }
      ],
      "result": {
        "count": 1,
        "id": 35,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        35,
        {
          "id": 351,
          "metadata": 1
        }
      ],
      "result": {
        "count": 1,
        "id": 35,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        35,
        {
          "id": 351,
          "metadata": 0
        }
      ],
      "result": {
        "count": 1,
        "id": 35,
        "metadata": 0
      }
    }
  ],
  "41": [
    {
      "inShape": [
        [
          266,
          266,
          266
        ],
        [
          266,
          266,
          266
        ],
        [
          266,
          266,
          266
        ]
      ],
      "result": {
        "count": 1,
        "id": 41,
        "metadata": 0
      }
    }
  ],
  "42": [
    {
      "inShape": [
        [
          265,
          265,
          265
        ],
        [
          265,
          265,
          265
        ],
        [
          265,
          265,
          265
        ]
      ],
      "result": {
        "count": 1,
        "id": 42,
        "metadata": 0
      }
    }
  ],
  "44": [
    {
      "inShape": [
        [
          {
            "id": 1,
            "metadata": 0
          },
          {
            "id": 1,
            "metadata": 0
          },
          {
            "id": 1,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 6,
        "id": 44,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          24,
          24,
          24
        ]
      ],
      "result": {
        "count": 6,
        "id": 44,
        "metadata": 1
      }
    },
    {
      "inShape": [
        [
          4,
          4,
          4
        ]
      ],
      "result": {
        "count": 6,
        "id": 44,
        "metadata": 3
      }
    },
    {
      "inShape": [
        [
          45,
          45,
          45
        ]
      ],
      "result": {
        "count": 6,
        "id": 44,
        "metadata": 4
      }
    },
    {
      "inShape": [
        [
          98,
          98,
          98
        ]
      ],
      "result": {
        "count": 6,
        "id": 44,
        "metadata": 5
      }
    },
    {
      "inShape": [
        [
          405,
          405,
          405
        ]
      ],
      "result": {
        "count": 6,
        "id": 44,
        "metadata": 6
      }
    },
    {
      "inShape": [
        [
          155,
          155,
          155
        ]
      ],
      "result": {
        "count": 6,
        "id": 44,
        "metadata": 7
      }
    }
  ],
  "45": [
    {
      "inShape": [
        [
          336,
          336
        ],
        [
          336,
          336
        ]
      ],
      "result": {
        "count": 1,
        "id": 45,
        "metadata": 0
      }
    }
  ],
  "46": [
    {
      "inShape": [
        [
          289,
          12,
          289
        ],
        [
          12,
          289,
          12
        ],
        [
          289,
          12,
          289
        ]
      ],
      "result": {
        "count": 1,
        "id": 46,
        "metadata": 0
      }
    }
  ],
  "47": [
    {
      "inShape": [
        [
          5,
          5,
          5
        ],
        [
          340,
          340,
          340
        ],
        [
          5,
          5,
          5
        ]
      ],
      "result": {
        "count": 1,
        "id": 47,
        "metadata": 0
      }
    }
  ],
  "48": [
    {
      "ingredients": [
        4,
        106
      ],
      "result": {
        "count": 1,
        "id": 48,
        "metadata": 0
      }
    }
  ],
  "50": [
    {
      "inShape": [
        [
          263
        ],
        [
          280
        ]
      ],
      "result": {
        "count": 4,
        "id": 50,
        "metadata": 0
      }
    }
  ],
  "53": [
    {
      "inShape": [
        [
          null,
          null,
          {
            "id": 5,
            "metadata": 0
          }
        ],
        [
          null,
          {
            "id": 5,
            "metadata": 0
          },
          {
            "id": 5,
            "metadata": 0
          }
        ],
        [
          {
            "id": 5,
            "metadata": 0
          },
          {
            "id": 5,
            "metadata": 0
          },
          {
            "id": 5,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 4,
        "id": 53,
        "metadata": 0
      }
    }
  ],
  "54": [
    {
      "inShape": [
        [
          5,
          5,
          5
        ],
        [
          5,
          null,
          5
        ],
        [
          5,
          5,
          5
        ]
      ],
      "result": {
        "count": 1,
        "id": 54,
        "metadata": 0
      }
    }
  ],
  "57": [
    {
      "inShape": [
        [
          264,
          264,
          264
        ],
        [
          264,
          264,
          264
        ],
        [
          264,
          264,
          264
        ]
      ],
      "result": {
        "count": 1,
        "id": 57,
        "metadata": 0
      }
    }
  ],
  "58": [
    {
      "inShape": [
        [
          5,
          5
        ],
        [
          5,
          5
        ]
      ],
      "result": {
        "count": 1,
        "id": 58,
        "metadata": 0
      }
    }
  ],
  "61": [
    {
      "inShape": [
        [
          4,
          4,
          4
        ],
        [
          4,
          null,
          4
        ],
        [
          4,
          4,
          4
        ]
      ],
      "result": {
        "count": 1,
        "id": 61,
        "metadata": 0
      }
    }
  ],
  "65": [
    {
      "inShape": [
        [
          280,
          null,
          280
        ],
        [
          280,
          280,
          280
        ],
        [
          280,
          null,
          280
        ]
      ],
      "result": {
        "count": 3,
        "id": 65,
        "metadata": 0
      }
    }
  ],
  "66": [
    {
      "inShape": [
        [
          265,
          null,
          265
        ],
        [
          265,
          280,
          265
        ],
        [
          265,
          null,
          265
        ]
      ],
      "result": {
        "count": 16,
        "id": 66,
        "metadata": 0
      }
    }
  ],
  "67": [
    {
      "inShape": [
        [
          null,
          null,
          4
        ],
        [
          null,
          4,
          4
        ],
        [
          4,
          4,
          4
        ]
      ],
      "result": {
        "count": 4,
        "id": 67,
        "metadata": 0
      }
    }
  ],
  "69": [
    {
      "inShape": [
        [
          280
        ],
        [
          4
        ]
      ],
      "result": {
        "count": 1,
        "id": 69,
        "metadata": 0
      }
    }
  ],
  "70": [
    {
      "inShape": [
        [
          {
            "id": 1,
            "metadata": 0
          },
          {
            "id": 1,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 70,
        "metadata": 0
      }
    }
  ],
  "72": [
    {
      "inShape": [
        [
          5,
          5
        ]
      ],
      "result": {
        "count": 1,
        "id": 72,
        "metadata": 0
      }
    }
  ],
  "75": [
    {
      "inShape": [
        [
          331
        ],
        [
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 75,
        "metadata": 0
      }
    }
  ],
  "77": [
    {
      "inShape": [
        [
          {
            "id": 1,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 77,
        "metadata": 0
      }
    }
  ],
  "78": [
    {
      "inShape": [
        [
          80,
          80,
          80
        ]
      ],
      "result": {
        "count": 6,
        "id": 78,
        "metadata": 0
      }
    }
  ],
  "80": [
    {
      "inShape": [
        [
          332,
          332
        ],
        [
          332,
          332
        ]
      ],
      "result": {
        "count": 1,
        "id": 80,
        "metadata": 0
      }
    }
  ],
  "82": [
    {
      "inShape": [
        [
          337,
          337
        ],
        [
          337,
          337
        ]
      ],
      "result": {
        "count": 1,
        "id": 82,
        "metadata": 0
      }
    }
  ],
  "84": [
    {
      "inShape": [
        [
          5,
          5,
          5
        ],
        [
          5,
          264,
          5
        ],
        [
          5,
          5,
          5
        ]
      ],
      "result": {
        "count": 1,
        "id": 84,
        "metadata": 0
      }
    }
  ],
  "85": [
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 0
          },
          280,
          {
            "id": 5,
            "metadata": 0
          }
        ],
        [
          {
            "id": 5,
            "metadata": 0
          },
          280,
          {
            "id": 5,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 3,
        "id": 85,
        "metadata": 0
      }
    }
  ],
  "89": [
    {
      "inShape": [
        [
          348,
          348
        ],
        [
          348,
          348
        ]
      ],
      "result": {
        "count": 1,
        "id": 89,
        "metadata": 0
      }
    }
  ],
  "91": [
    {
      "inShape": [
        [
          86
        ],
        [
          50
        ]
      ],
      "result": {
        "count": 1,
        "id": 91,
        "metadata": 0
      }
    }
  ],
  "95": [
    {
      "inShape": [
        [
          20,
          20,
          20
        ],
        [
          20,
          {
            "id": 351,
            "metadata": 15
          },
          20
        ],
        [
          20,
          20,
          20
        ]
      ],
      "result": {
        "count": 8,
        "id": 95,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          20,
          20,
          20
        ],
        [
          20,
          {
            "id": 351,
            "metadata": 14
          },
          20
        ],
        [
          20,
          20,
          20
        ]
      ],
      "result": {
        "count": 8,
        "id": 95,
        "metadata": 1
      }
    },
    {
      "inShape": [
        [
          20,
          20,
          20
        ],
        [
          20,
          {
            "id": 351,
            "metadata": 13
          },
          20
        ],
        [
          20,
          20,
          20
        ]
      ],
      "result": {
        "count": 8,
        "id": 95,
        "metadata": 2
      }
    },
    {
      "inShape": [
        [
          20,
          20,
          20
        ],
        [
          20,
          {
            "id": 351,
            "metadata": 12
          },
          20
        ],
        [
          20,
          20,
          20
        ]
      ],
      "result": {
        "count": 8,
        "id": 95,
        "metadata": 3
      }
    },
    {
      "inShape": [
        [
          20,
          20,
          20
        ],
        [
          20,
          {
            "id": 351,
            "metadata": 11
          },
          20
        ],
        [
          20,
          20,
          20
        ]
      ],
      "result": {
        "count": 8,
        "id": 95,
        "metadata": 4
      }
    },
    {
      "inShape": [
        [
          20,
          20,
          20
        ],
        [
          20,
          {
            "id": 351,
            "metadata": 10
          },
          20
        ],
        [
          20,
          20,
          20
        ]
      ],
      "result": {
        "count": 8,
        "id": 95,
        "metadata": 5
      }
    },
    {
      "inShape": [
        [
          20,
          20,
          20
        ],
        [
          20,
          {
            "id": 351,
            "metadata": 9
          },
          20
        ],
        [
          20,
          20,
          20
        ]
      ],
      "result": {
        "count": 8,
        "id": 95,
        "metadata": 6
      }
    },
    {
      "inShape": [
        [
          20,
          20,
          20
        ],
        [
          20,
          {
            "id": 351,
            "metadata": 8
          },
          20
        ],
        [
          20,
          20,
          20
        ]
      ],
      "result": {
        "count": 8,
        "id": 95,
        "metadata": 7
      }
    },
    {
      "inShape": [
        [
          20,
          20,
          20
        ],
        [
          20,
          {
            "id": 351,
            "metadata": 7
          },
          20
        ],
        [
          20,
          20,
          20
        ]
      ],
      "result": {
        "count": 8,
        "id": 95,
        "metadata": 8
      }
    },
    {
      "inShape": [
        [
          20,
          20,
          20
        ],
        [
          20,
          {
            "id": 351,
            "metadata": 6
          },
          20
        ],
        [
          20,
          20,
          20
        ]
      ],
      "result": {
        "count": 8,
        "id": 95,
        "metadata": 9
      }
    },
    {
      "inShape": [
        [
          20,
          20,
          20
        ],
        [
          20,
          {
            "id": 351,
            "metadata": 5
          },
          20
        ],
        [
          20,
          20,
          20
        ]
      ],
      "result": {
        "count": 8,
        "id": 95,
        "metadata": 10
      }
    },
    {
      "inShape": [
        [
          20,
          20,
          20
        ],
        [
          20,
          {
            "id": 351,
            "metadata": 4
          },
          20
        ],
        [
          20,
          20,
          20
        ]
      ],
      "result": {
        "count": 8,
        "id": 95,
        "metadata": 11
      }
    },
    {
      "inShape": [
        [
          20,
          20,
          20
        ],
        [
          20,
          {
            "id": 351,
            "metadata": 3
          },
          20
        ],
        [
          20,
          20,
          20
        ]
      ],
      "result": {
        "count": 8,
        "id": 95,
        "metadata": 12
      }
    },
    {
      "inShape": [
        [
          20,
          20,
          20
        ],
        [
          20,
          {
            "id": 351,
            "metadata": 2
          },
          20
        ],
        [
          20,
          20,
          20
        ]
      ],
      "result": {
        "count": 8,
        "id": 95,
        "metadata": 13
      }
    },
    {
      "inShape": [
        [
          20,
          20,
          20
        ],
        [
          20,
          {
            "id": 351,
            "metadata": 1
          },
          20
        ],
        [
          20,
          20,
          20
        ]
      ],
      "result": {
        "count": 8,
        "id": 95,
        "metadata": 14
      }
    },
    {
      "inShape": [
        [
          20,
          20,
          20
        ],
        [
          20,
          {
            "id": 351,
            "metadata": 0
          },
          20
        ],
        [
          20,
          20,
          20
        ]
      ],
      "result": {
        "count": 8,
        "id": 95,
        "metadata": 15
      }
    }
  ],
  "96": [
    {
      "inShape": [
        [
          5,
          5,
          5
        ],
        [
          5,
          5,
          5
        ]
      ],
      "result": {
        "count": 2,
        "id": 96,
        "metadata": 0
      }
    }
  ],
  "98": [
    {
      "inShape": [
        [
          {
            "id": 1,
            "metadata": 0
          },
          {
            "id": 1,
            "metadata": 0
          }
        ],
        [
          {
            "id": 1,
            "metadata": 0
          },
          {
            "id": 1,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 4,
        "id": 98,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        98,
        106
      ],
      "result": {
        "count": 1,
        "id": 98,
        "metadata": 1
      }
    },
    {
      "inShape": [
        [
          {
            "id": 44,
            "metadata": 5
          }
        ],
        [
          {
            "id": 44,
            "metadata": 5
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 98,
        "metadata": 3
      }
    }
  ],
  "101": [
    {
      "inShape": [
        [
          265,
          265,
          265
        ],
        [
          265,
          265,
          265
        ]
      ],
      "result": {
        "count": 16,
        "id": 101,
        "metadata": 0
      }
    }
  ],
  "102": [
    {
      "inShape": [
        [
          20,
          20,
          20
        ],
        [
          20,
          20,
          20
        ]
      ],
      "result": {
        "count": 16,
        "id": 102,
        "metadata": 0
      }
    }
  ],
  "103": [
    {
      "inShape": [
        [
          360,
          360,
          360
        ],
        [
          360,
          360,
          360
        ],
        [
          360,
          360,
          360
        ]
      ],
      "result": {
        "count": 1,
        "id": 103,
        "metadata": 0
      }
    }
  ],
  "107": [
    {
      "inShape": [
        [
          280,
          {
            "id": 5,
            "metadata": 0
          },
          280
        ],
        [
          280,
          {
            "id": 5,
            "metadata": 0
          },
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 107,
        "metadata": 0
      }
    }
  ],
  "108": [
    {
      "inShape": [
        [
          null,
          null,
          45
        ],
        [
          null,
          45,
          45
        ],
        [
          45,
          45,
          45
        ]
      ],
      "result": {
        "count": 4,
        "id": 108,
        "metadata": 0
      }
    }
  ],
  "109": [
    {
      "inShape": [
        [
          null,
          null,
          98
        ],
        [
          null,
          98,
          98
        ],
        [
          98,
          98,
          98
        ]
      ],
      "result": {
        "count": 4,
        "id": 109,
        "metadata": 0
      }
    }
  ],
  "113": [
    {
      "inShape": [
        [
          405,
          405,
          405
        ],
        [
          405,
          405,
          405
        ]
      ],
      "result": {
        "count": 6,
        "id": 113,
        "metadata": 0
      }
    }
  ],
  "114": [
    {
      "inShape": [
        [
          null,
          null,
          405
        ],
        [
          null,
          405,
          405
        ],
        [
          405,
          405,
          405
        ]
      ],
      "result": {
        "count": 4,
        "id": 114,
        "metadata": 0
      }
    }
  ],
  "116": [
    {
      "inShape": [
        [
          null,
          340,
          null
        ],
        [
          264,
          49,
          264
        ],
        [
          49,
          49,
          49
        ]
      ],
      "result": {
        "count": 1,
        "id": 116,
        "metadata": 0
      }
    }
  ],
  "123": [
    {
      "inShape": [
        [
          null,
          331,
          null
        ],
        [
          331,
          89,
          331
        ],
        [
          null,
          331,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 123,
        "metadata": 0
      }
    }
  ],
  "126": [
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 0
          },
          {
            "id": 5,
            "metadata": 0
          },
          {
            "id": 5,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 6,
        "id": 126,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 1
          },
          {
            "id": 5,
            "metadata": 1
          },
          {
            "id": 5,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 6,
        "id": 126,
        "metadata": 1
      }
    },
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 2
          },
          {
            "id": 5,
            "metadata": 2
          },
          {
            "id": 5,
            "metadata": 2
          }
        ]
      ],
      "result": {
        "count": 6,
        "id": 126,
        "metadata": 2
      }
    },
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 3
          },
          {
            "id": 5,
            "metadata": 3
          },
          {
            "id": 5,
            "metadata": 3
          }
        ]
      ],
      "result": {
        "count": 6,
        "id": 126,
        "metadata": 3
      }
    },
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 4
          },
          {
            "id": 5,
            "metadata": 4
          },
          {
            "id": 5,
            "metadata": 4
          }
        ]
      ],
      "result": {
        "count": 6,
        "id": 126,
        "metadata": 4
      }
    },
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 5
          },
          {
            "id": 5,
            "metadata": 5
          },
          {
            "id": 5,
            "metadata": 5
          }
        ]
      ],
      "result": {
        "count": 6,
        "id": 126,
        "metadata": 5
      }
    }
  ],
  "128": [
    {
      "inShape": [
        [
          null,
          null,
          24
        ],
        [
          null,
          24,
          24
        ],
        [
          24,
          24,
          24
        ]
      ],
      "result": {
        "count": 4,
        "id": 128,
        "metadata": 0
      }
    }
  ],
  "130": [
    {
      "inShape": [
        [
          49,
          49,
          49
        ],
        [
          49,
          381,
          49
        ],
        [
          49,
          49,
          49
        ]
      ],
      "result": {
        "count": 1,
        "id": 130,
        "metadata": 0
      }
    }
  ],
  "131": [
    {
      "inShape": [
        [
          265
        ],
        [
          280
        ],
        [
          5
        ]
      ],
      "result": {
        "count": 2,
        "id": 131,
        "metadata": 0
      }
    }
  ],
  "133": [
    {
      "inShape": [
        [
          388,
          388,
          388
        ],
        [
          388,
          388,
          388
        ],
        [
          388,
          388,
          388
        ]
      ],
      "result": {
        "count": 1,
        "id": 133,
        "metadata": 0
      }
    }
  ],
  "134": [
    {
      "inShape": [
        [
          null,
          null,
          {
            "id": 5,
            "metadata": 1
          }
        ],
        [
          null,
          {
            "id": 5,
            "metadata": 1
          },
          {
            "id": 5,
            "metadata": 1
          }
        ],
        [
          {
            "id": 5,
            "metadata": 1
          },
          {
            "id": 5,
            "metadata": 1
          },
          {
            "id": 5,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 4,
        "id": 134,
        "metadata": 0
      }
    }
  ],
  "135": [
    {
      "inShape": [
        [
          null,
          null,
          {
            "id": 5,
            "metadata": 2
          }
        ],
        [
          null,
          {
            "id": 5,
            "metadata": 2
          },
          {
            "id": 5,
            "metadata": 2
          }
        ],
        [
          {
            "id": 5,
            "metadata": 2
          },
          {
            "id": 5,
            "metadata": 2
          },
          {
            "id": 5,
            "metadata": 2
          }
        ]
      ],
      "result": {
        "count": 4,
        "id": 135,
        "metadata": 0
      }
    }
  ],
  "136": [
    {
      "inShape": [
        [
          null,
          null,
          {
            "id": 5,
            "metadata": 3
          }
        ],
        [
          null,
          {
            "id": 5,
            "metadata": 3
          },
          {
            "id": 5,
            "metadata": 3
          }
        ],
        [
          {
            "id": 5,
            "metadata": 3
          },
          {
            "id": 5,
            "metadata": 3
          },
          {
            "id": 5,
            "metadata": 3
          }
        ]
      ],
      "result": {
        "count": 4,
        "id": 136,
        "metadata": 0
      }
    }
  ],
  "138": [
    {
      "inShape": [
        [
          20,
          20,
          20
        ],
        [
          20,
          399,
          20
        ],
        [
          49,
          49,
          49
        ]
      ],
      "result": {
        "count": 1,
        "id": 138,
        "metadata": 0
      }
    }
  ],
  "139": [
    {
      "inShape": [
        [
          4,
          4,
          4
        ],
        [
          4,
          4,
          4
        ]
      ],
      "result": {
        "count": 6,
        "id": 139,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          48,
          48,
          48
        ],
        [
          48,
          48,
          48
        ]
      ],
      "result": {
        "count": 6,
        "id": 139,
        "metadata": 1
      }
    }
  ],
  "143": [
    {
      "inShape": [
        [
          5
        ]
      ],
      "result": {
        "count": 1,
        "id": 143,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 1,
            "metadata": 0
          }
        ],
        [
          {
            "id": 1,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 143,
        "metadata": 0
      }
    }
  ],
  "145": [
    {
      "inShape": [
        [
          42,
          42,
          42
        ],
        [
          null,
          265,
          null
        ],
        [
          265,
          265,
          265
        ]
      ],
      "result": {
        "count": 1,
        "id": 145,
        "metadata": 0
      }
    }
  ],
  "146": [
    {
      "inShape": [
        [
          131,
          54
        ]
      ],
      "result": {
        "count": 1,
        "id": 146,
        "metadata": 0
      }
    }
  ],
  "147": [
    {
      "inShape": [
        [
          266,
          266
        ]
      ],
      "result": {
        "count": 1,
        "id": 147,
        "metadata": 0
      }
    }
  ],
  "148": [
    {
      "inShape": [
        [
          265,
          265
        ]
      ],
      "result": {
        "count": 1,
        "id": 148,
        "metadata": 0
      }
    }
  ],
  "151": [
    {
      "inShape": [
        [
          20,
          20,
          20
        ],
        [
          406,
          406,
          406
        ],
        [
          126,
          126,
          126
        ]
      ],
      "result": {
        "count": 1,
        "id": 151,
        "metadata": 0
      }
    }
  ],
  "152": [
    {
      "inShape": [
        [
          331,
          331,
          331
        ],
        [
          331,
          331,
          331
        ],
        [
          331,
          331,
          331
        ]
      ],
      "result": {
        "count": 1,
        "id": 152,
        "metadata": 0
      }
    }
  ],
  "154": [
    {
      "inShape": [
        [
          265,
          null,
          265
        ],
        [
          265,
          54,
          265
        ],
        [
          null,
          265,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 154,
        "metadata": 0
      }
    }
  ],
  "155": [
    {
      "inShape": [
        [
          406,
          406
        ],
        [
          406,
          406
        ]
      ],
      "result": {
        "count": 1,
        "id": 155,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 44,
            "metadata": 7
          }
        ],
        [
          {
            "id": 44,
            "metadata": 7
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 155,
        "metadata": 1
      }
    },
    {
      "inShape": [
        [
          {
            "id": 155,
            "metadata": 0
          }
        ],
        [
          {
            "id": 155,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 2,
        "id": 155,
        "metadata": 0
      }
    }
  ],
  "156": [
    {
      "inShape": [
        [
          null,
          null,
          155
        ],
        [
          null,
          155,
          155
        ],
        [
          155,
          155,
          155
        ]
      ],
      "result": {
        "count": 4,
        "id": 156,
        "metadata": 0
      }
    }
  ],
  "157": [
    {
      "inShape": [
        [
          265,
          280,
          265
        ],
        [
          265,
          75,
          265
        ],
        [
          265,
          280,
          265
        ]
      ],
      "result": {
        "count": 6,
        "id": 157,
        "metadata": 0
      }
    }
  ],
  "158": [
    {
      "inShape": [
        [
          4,
          4,
          4
        ],
        [
          4,
          null,
          4
        ],
        [
          4,
          331,
          4
        ]
      ],
      "result": {
        "count": 1,
        "id": 158,
        "metadata": 0
      }
    }
  ],
  "159": [
    {
      "inShape": [
        [
          172,
          172,
          172
        ],
        [
          172,
          {
            "id": 351,
            "metadata": 15
          },
          172
        ],
        [
          172,
          172,
          172
        ]
      ],
      "result": {
        "count": 8,
        "id": 159,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          172,
          172,
          172
        ],
        [
          172,
          {
            "id": 351,
            "metadata": 14
          },
          172
        ],
        [
          172,
          172,
          172
        ]
      ],
      "result": {
        "count": 8,
        "id": 159,
        "metadata": 1
      }
    },
    {
      "inShape": [
        [
          172,
          172,
          172
        ],
        [
          172,
          {
            "id": 351,
            "metadata": 13
          },
          172
        ],
        [
          172,
          172,
          172
        ]
      ],
      "result": {
        "count": 8,
        "id": 159,
        "metadata": 2
      }
    },
    {
      "inShape": [
        [
          172,
          172,
          172
        ],
        [
          172,
          {
            "id": 351,
            "metadata": 12
          },
          172
        ],
        [
          172,
          172,
          172
        ]
      ],
      "result": {
        "count": 8,
        "id": 159,
        "metadata": 3
      }
    },
    {
      "inShape": [
        [
          172,
          172,
          172
        ],
        [
          172,
          {
            "id": 351,
            "metadata": 11
          },
          172
        ],
        [
          172,
          172,
          172
        ]
      ],
      "result": {
        "count": 8,
        "id": 159,
        "metadata": 4
      }
    },
    {
      "inShape": [
        [
          172,
          172,
          172
        ],
        [
          172,
          {
            "id": 351,
            "metadata": 10
          },
          172
        ],
        [
          172,
          172,
          172
        ]
      ],
      "result": {
        "count": 8,
        "id": 159,
        "metadata": 5
      }
    },
    {
      "inShape": [
        [
          172,
          172,
          172
        ],
        [
          172,
          {
            "id": 351,
            "metadata": 9
          },
          172
        ],
        [
          172,
          172,
          172
        ]
      ],
      "result": {
        "count": 8,
        "id": 159,
        "metadata": 6
      }
    },
    {
      "inShape": [
        [
          172,
          172,
          172
        ],
        [
          172,
          {
            "id": 351,
            "metadata": 8
          },
          172
        ],
        [
          172,
          172,
          172
        ]
      ],
      "result": {
        "count": 8,
        "id": 159,
        "metadata": 7
      }
    },
    {
      "inShape": [
        [
          172,
          172,
          172
        ],
        [
          172,
          {
            "id": 351,
            "metadata": 7
          },
          172
        ],
        [
          172,
          172,
          172
        ]
      ],
      "result": {
        "count": 8,
        "id": 159,
        "metadata": 8
      }
    },
    {
      "inShape": [
        [
          172,
          172,
          172
        ],
        [
          172,
          {
            "id": 351,
            "metadata": 6
          },
          172
        ],
        [
          172,
          172,
          172
        ]
      ],
      "result": {
        "count": 8,
        "id": 159,
        "metadata": 9
      }
    },
    {
      "inShape": [
        [
          172,
          172,
          172
        ],
        [
          172,
          {
            "id": 351,
            "metadata": 5
          },
          172
        ],
        [
          172,
          172,
          172
        ]
      ],
      "result": {
        "count": 8,
        "id": 159,
        "metadata": 10
      }
    },
    {
      "inShape": [
        [
          172,
          172,
          172
        ],
        [
          172,
          {
            "id": 351,
            "metadata": 4
          },
          172
        ],
        [
          172,
          172,
          172
        ]
      ],
      "result": {
        "count": 8,
        "id": 159,
        "metadata": 11
      }
    },
    {
      "inShape": [
        [
          172,
          172,
          172
        ],
        [
          172,
          {
            "id": 351,
            "metadata": 3
          },
          172
        ],
        [
          172,
          172,
          172
        ]
      ],
      "result": {
        "count": 8,
        "id": 159,
        "metadata": 12
      }
    },
    {
      "inShape": [
        [
          172,
          172,
          172
        ],
        [
          172,
          {
            "id": 351,
            "metadata": 2
          },
          172
        ],
        [
          172,
          172,
          172
        ]
      ],
      "result": {
        "count": 8,
        "id": 159,
        "metadata": 13
      }
    },
    {
      "inShape": [
        [
          172,
          172,
          172
        ],
        [
          172,
          {
            "id": 351,
            "metadata": 1
          },
          172
        ],
        [
          172,
          172,
          172
        ]
      ],
      "result": {
        "count": 8,
        "id": 159,
        "metadata": 14
      }
    },
    {
      "inShape": [
        [
          172,
          172,
          172
        ],
        [
          172,
          {
            "id": 351,
            "metadata": 0
          },
          172
        ],
        [
          172,
          172,
          172
        ]
      ],
      "result": {
        "count": 8,
        "id": 159,
        "metadata": 15
      }
    }
  ],
  "160": [
    {
      "inShape": [
        [
          {
            "id": 95,
            "metadata": 0
          },
          {
            "id": 95,
            "metadata": 0
          },
          {
            "id": 95,
            "metadata": 0
          }
        ],
        [
          {
            "id": 95,
            "metadata": 0
          },
          {
            "id": 95,
            "metadata": 0
          },
          {
            "id": 95,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 16,
        "id": 160,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 95,
            "metadata": 1
          },
          {
            "id": 95,
            "metadata": 1
          },
          {
            "id": 95,
            "metadata": 1
          }
        ],
        [
          {
            "id": 95,
            "metadata": 1
          },
          {
            "id": 95,
            "metadata": 1
          },
          {
            "id": 95,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 16,
        "id": 160,
        "metadata": 1
      }
    },
    {
      "inShape": [
        [
          {
            "id": 95,
            "metadata": 2
          },
          {
            "id": 95,
            "metadata": 2
          },
          {
            "id": 95,
            "metadata": 2
          }
        ],
        [
          {
            "id": 95,
            "metadata": 2
          },
          {
            "id": 95,
            "metadata": 2
          },
          {
            "id": 95,
            "metadata": 2
          }
        ]
      ],
      "result": {
        "count": 16,
        "id": 160,
        "metadata": 2
      }
    },
    {
      "inShape": [
        [
          {
            "id": 95,
            "metadata": 3
          },
          {
            "id": 95,
            "metadata": 3
          },
          {
            "id": 95,
            "metadata": 3
          }
        ],
        [
          {
            "id": 95,
            "metadata": 3
          },
          {
            "id": 95,
            "metadata": 3
          },
          {
            "id": 95,
            "metadata": 3
          }
        ]
      ],
      "result": {
        "count": 16,
        "id": 160,
        "metadata": 3
      }
    },
    {
      "inShape": [
        [
          {
            "id": 95,
            "metadata": 4
          },
          {
            "id": 95,
            "metadata": 4
          },
          {
            "id": 95,
            "metadata": 4
          }
        ],
        [
          {
            "id": 95,
            "metadata": 4
          },
          {
            "id": 95,
            "metadata": 4
          },
          {
            "id": 95,
            "metadata": 4
          }
        ]
      ],
      "result": {
        "count": 16,
        "id": 160,
        "metadata": 4
      }
    },
    {
      "inShape": [
        [
          {
            "id": 95,
            "metadata": 5
          },
          {
            "id": 95,
            "metadata": 5
          },
          {
            "id": 95,
            "metadata": 5
          }
        ],
        [
          {
            "id": 95,
            "metadata": 5
          },
          {
            "id": 95,
            "metadata": 5
          },
          {
            "id": 95,
            "metadata": 5
          }
        ]
      ],
      "result": {
        "count": 16,
        "id": 160,
        "metadata": 5
      }
    },
    {
      "inShape": [
        [
          {
            "id": 95,
            "metadata": 6
          },
          {
            "id": 95,
            "metadata": 6
          },
          {
            "id": 95,
            "metadata": 6
          }
        ],
        [
          {
            "id": 95,
            "metadata": 6
          },
          {
            "id": 95,
            "metadata": 6
          },
          {
            "id": 95,
            "metadata": 6
          }
        ]
      ],
      "result": {
        "count": 16,
        "id": 160,
        "metadata": 6
      }
    },
    {
      "inShape": [
        [
          {
            "id": 95,
            "metadata": 7
          },
          {
            "id": 95,
            "metadata": 7
          },
          {
            "id": 95,
            "metadata": 7
          }
        ],
        [
          {
            "id": 95,
            "metadata": 7
          },
          {
            "id": 95,
            "metadata": 7
          },
          {
            "id": 95,
            "metadata": 7
          }
        ]
      ],
      "result": {
        "count": 16,
        "id": 160,
        "metadata": 7
      }
    },
    {
      "inShape": [
        [
          {
            "id": 95,
            "metadata": 8
          },
          {
            "id": 95,
            "metadata": 8
          },
          {
            "id": 95,
            "metadata": 8
          }
        ],
        [
          {
            "id": 95,
            "metadata": 8
          },
          {
            "id": 95,
            "metadata": 8
          },
          {
            "id": 95,
            "metadata": 8
          }
        ]
      ],
      "result": {
        "count": 16,
        "id": 160,
        "metadata": 8
      }
    },
    {
      "inShape": [
        [
          {
            "id": 95,
            "metadata": 9
          },
          {
            "id": 95,
            "metadata": 9
          },
          {
            "id": 95,
            "metadata": 9
          }
        ],
        [
          {
            "id": 95,
            "metadata": 9
          },
          {
            "id": 95,
            "metadata": 9
          },
          {
            "id": 95,
            "metadata": 9
          }
        ]
      ],
      "result": {
        "count": 16,
        "id": 160,
        "metadata": 9
      }
    },
    {
      "inShape": [
        [
          {
            "id": 95,
            "metadata": 10
          },
          {
            "id": 95,
            "metadata": 10
          },
          {
            "id": 95,
            "metadata": 10
          }
        ],
        [
          {
            "id": 95,
            "metadata": 10
          },
          {
            "id": 95,
            "metadata": 10
          },
          {
            "id": 95,
            "metadata": 10
          }
        ]
      ],
      "result": {
        "count": 16,
        "id": 160,
        "metadata": 10
      }
    },
    {
      "inShape": [
        [
          {
            "id": 95,
            "metadata": 11
          },
          {
            "id": 95,
            "metadata": 11
          },
          {
            "id": 95,
            "metadata": 11
          }
        ],
        [
          {
            "id": 95,
            "metadata": 11
          },
          {
            "id": 95,
            "metadata": 11
          },
          {
            "id": 95,
            "metadata": 11
          }
        ]
      ],
      "result": {
        "count": 16,
        "id": 160,
        "metadata": 11
      }
    },
    {
      "inShape": [
        [
          {
            "id": 95,
            "metadata": 12
          },
          {
            "id": 95,
            "metadata": 12
          },
          {
            "id": 95,
            "metadata": 12
          }
        ],
        [
          {
            "id": 95,
            "metadata": 12
          },
          {
            "id": 95,
            "metadata": 12
          },
          {
            "id": 95,
            "metadata": 12
          }
        ]
      ],
      "result": {
        "count": 16,
        "id": 160,
        "metadata": 12
      }
    },
    {
      "inShape": [
        [
          {
            "id": 95,
            "metadata": 13
          },
          {
            "id": 95,
            "metadata": 13
          },
          {
            "id": 95,
            "metadata": 13
          }
        ],
        [
          {
            "id": 95,
            "metadata": 13
          },
          {
            "id": 95,
            "metadata": 13
          },
          {
            "id": 95,
            "metadata": 13
          }
        ]
      ],
      "result": {
        "count": 16,
        "id": 160,
        "metadata": 13
      }
    },
    {
      "inShape": [
        [
          {
            "id": 95,
            "metadata": 14
          },
          {
            "id": 95,
            "metadata": 14
          },
          {
            "id": 95,
            "metadata": 14
          }
        ],
        [
          {
            "id": 95,
            "metadata": 14
          },
          {
            "id": 95,
            "metadata": 14
          },
          {
            "id": 95,
            "metadata": 14
          }
        ]
      ],
      "result": {
        "count": 16,
        "id": 160,
        "metadata": 14
      }
    },
    {
      "inShape": [
        [
          {
            "id": 95,
            "metadata": 15
          },
          {
            "id": 95,
            "metadata": 15
          },
          {
            "id": 95,
            "metadata": 15
          }
        ],
        [
          {
            "id": 95,
            "metadata": 15
          },
          {
            "id": 95,
            "metadata": 15
          },
          {
            "id": 95,
            "metadata": 15
          }
        ]
      ],
      "result": {
        "count": 16,
        "id": 160,
        "metadata": 15
      }
    }
  ],
  "163": [
    {
      "inShape": [
        [
          null,
          null,
          {
            "id": 5,
            "metadata": 4
          }
        ],
        [
          null,
          {
            "id": 5,
            "metadata": 4
          },
          {
            "id": 5,
            "metadata": 4
          }
        ],
        [
          {
            "id": 5,
            "metadata": 4
          },
          {
            "id": 5,
            "metadata": 4
          },
          {
            "id": 5,
            "metadata": 4
          }
        ]
      ],
      "result": {
        "count": 4,
        "id": 163,
        "metadata": 0
      }
    }
  ],
  "164": [
    {
      "inShape": [
        [
          null,
          null,
          {
            "id": 5,
            "metadata": 5
          }
        ],
        [
          null,
          {
            "id": 5,
            "metadata": 5
          },
          {
            "id": 5,
            "metadata": 5
          }
        ],
        [
          {
            "id": 5,
            "metadata": 5
          },
          {
            "id": 5,
            "metadata": 5
          },
          {
            "id": 5,
            "metadata": 5
          }
        ]
      ],
      "result": {
        "count": 4,
        "id": 164,
        "metadata": 0
      }
    }
  ],
  "165": [
    {
      "inShape": [
        [
          341,
          341,
          341
        ],
        [
          341,
          341,
          341
        ],
        [
          341,
          341,
          341
        ]
      ],
      "result": {
        "count": 1,
        "id": 165,
        "metadata": 0
      }
    }
  ],
  "167": [
    {
      "inShape": [
        [
          265,
          265
        ],
        [
          265,
          265
        ]
      ],
      "result": {
        "count": 1,
        "id": 167,
        "metadata": 0
      }
    }
  ],
  "168": [
    {
      "inShape": [
        [
          409,
          409
        ],
        [
          409,
          409
        ]
      ],
      "result": {
        "count": 1,
        "id": 168,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          409,
          409,
          409
        ],
        [
          409,
          409,
          409
        ],
        [
          409,
          409,
          409
        ]
      ],
      "result": {
        "count": 1,
        "id": 168,
        "metadata": 1
      }
    },
    {
      "inShape": [
        [
          409,
          409,
          409
        ],
        [
          409,
          {
            "id": 351,
            "metadata": 0
          },
          409
        ],
        [
          409,
          409,
          409
        ]
      ],
      "result": {
        "count": 1,
        "id": 168,
        "metadata": 2
      }
    }
  ],
  "169": [
    {
      "inShape": [
        [
          409,
          410,
          409
        ],
        [
          410,
          410,
          410
        ],
        [
          409,
          410,
          409
        ]
      ],
      "result": {
        "count": 1,
        "id": 169,
        "metadata": 0
      }
    }
  ],
  "170": [
    {
      "inShape": [
        [
          296,
          296,
          296
        ],
        [
          296,
          296,
          296
        ],
        [
          296,
          296,
          296
        ]
      ],
      "result": {
        "count": 1,
        "id": 170,
        "metadata": 0
      }
    }
  ],
  "171": [
    {
      "inShape": [
        [
          35,
          35
        ]
      ],
      "result": {
        "count": 3,
        "id": 171,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          35,
          35
        ]
      ],
      "result": {
        "count": 3,
        "id": 171,
        "metadata": 1
      }
    },
    {
      "inShape": [
        [
          35,
          35
        ]
      ],
      "result": {
        "count": 3,
        "id": 171,
        "metadata": 2
      }
    },
    {
      "inShape": [
        [
          35,
          35
        ]
      ],
      "result": {
        "count": 3,
        "id": 171,
        "metadata": 3
      }
    },
    {
      "inShape": [
        [
          35,
          35
        ]
      ],
      "result": {
        "count": 3,
        "id": 171,
        "metadata": 4
      }
    },
    {
      "inShape": [
        [
          35,
          35
        ]
      ],
      "result": {
        "count": 3,
        "id": 171,
        "metadata": 5
      }
    },
    {
      "inShape": [
        [
          35,
          35
        ]
      ],
      "result": {
        "count": 3,
        "id": 171,
        "metadata": 6
      }
    },
    {
      "inShape": [
        [
          35,
          35
        ]
      ],
      "result": {
        "count": 3,
        "id": 171,
        "metadata": 7
      }
    },
    {
      "inShape": [
        [
          35,
          35
        ]
      ],
      "result": {
        "count": 3,
        "id": 171,
        "metadata": 8
      }
    },
    {
      "inShape": [
        [
          35,
          35
        ]
      ],
      "result": {
        "count": 3,
        "id": 171,
        "metadata": 9
      }
    },
    {
      "inShape": [
        [
          35,
          35
        ]
      ],
      "result": {
        "count": 3,
        "id": 171,
        "metadata": 10
      }
    },
    {
      "inShape": [
        [
          35,
          35
        ]
      ],
      "result": {
        "count": 3,
        "id": 171,
        "metadata": 11
      }
    },
    {
      "inShape": [
        [
          35,
          35
        ]
      ],
      "result": {
        "count": 3,
        "id": 171,
        "metadata": 12
      }
    },
    {
      "inShape": [
        [
          35,
          35
        ]
      ],
      "result": {
        "count": 3,
        "id": 171,
        "metadata": 13
      }
    },
    {
      "inShape": [
        [
          35,
          35
        ]
      ],
      "result": {
        "count": 3,
        "id": 171,
        "metadata": 14
      }
    },
    {
      "inShape": [
        [
          35,
          35
        ]
      ],
      "result": {
        "count": 3,
        "id": 171,
        "metadata": 15
      }
    }
  ],
  "173": [
    {
      "inShape": [
        [
          {
            "id": 263,
            "metadata": 0
          },
          {
            "id": 263,
            "metadata": 0
          },
          {
            "id": 263,
            "metadata": 0
          }
        ],
        [
          {
            "id": 263,
            "metadata": 0
          },
          {
            "id": 263,
            "metadata": 0
          },
          {
            "id": 263,
            "metadata": 0
          }
        ],
        [
          {
            "id": 263,
            "metadata": 0
          },
          {
            "id": 263,
            "metadata": 0
          },
          {
            "id": 263,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 173,
        "metadata": 0
      }
    }
  ],
  "179": [
    {
      "inShape": [
        [
          {
            "id": 12,
            "metadata": 1
          },
          {
            "id": 12,
            "metadata": 1
          }
        ],
        [
          {
            "id": 12,
            "metadata": 1
          },
          {
            "id": 12,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 179,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 179,
            "metadata": 0
          },
          {
            "id": 179,
            "metadata": 0
          }
        ],
        [
          {
            "id": 179,
            "metadata": 0
          },
          {
            "id": 179,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 4,
        "id": 179,
        "metadata": 2
      }
    },
    {
      "inShape": [
        [
          {
            "id": 182,
            "metadata": 0
          }
        ],
        [
          {
            "id": 182,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 179,
        "metadata": 1
      }
    }
  ],
  "180": [
    {
      "inShape": [
        [
          null,
          null,
          179
        ],
        [
          null,
          179,
          179
        ],
        [
          179,
          179,
          179
        ]
      ],
      "result": {
        "count": 4,
        "id": 180,
        "metadata": 0
      }
    }
  ],
  "182": [
    {
      "inShape": [
        [
          179,
          179,
          179
        ]
      ],
      "result": {
        "count": 6,
        "id": 182,
        "metadata": 0
      }
    }
  ],
  "183": [
    {
      "inShape": [
        [
          280,
          {
            "id": 5,
            "metadata": 1
          },
          280
        ],
        [
          280,
          {
            "id": 5,
            "metadata": 1
          },
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 183,
        "metadata": 0
      }
    }
  ],
  "184": [
    {
      "inShape": [
        [
          280,
          {
            "id": 5,
            "metadata": 2
          },
          280
        ],
        [
          280,
          {
            "id": 5,
            "metadata": 2
          },
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 184,
        "metadata": 0
      }
    }
  ],
  "185": [
    {
      "inShape": [
        [
          280,
          {
            "id": 5,
            "metadata": 3
          },
          280
        ],
        [
          280,
          {
            "id": 5,
            "metadata": 3
          },
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 185,
        "metadata": 0
      }
    }
  ],
  "186": [
    {
      "inShape": [
        [
          280,
          {
            "id": 5,
            "metadata": 5
          },
          280
        ],
        [
          280,
          {
            "id": 5,
            "metadata": 5
          },
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 186,
        "metadata": 0
      }
    }
  ],
  "187": [
    {
      "inShape": [
        [
          280,
          {
            "id": 5,
            "metadata": 4
          },
          280
        ],
        [
          280,
          {
            "id": 5,
            "metadata": 4
          },
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 187,
        "metadata": 0
      }
    }
  ],
  "188": [
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 1
          },
          280,
          {
            "id": 5,
            "metadata": 1
          }
        ],
        [
          {
            "id": 5,
            "metadata": 1
          },
          280,
          {
            "id": 5,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 3,
        "id": 188,
        "metadata": 0
      }
    }
  ],
  "189": [
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 2
          },
          280,
          {
            "id": 5,
            "metadata": 2
          }
        ],
        [
          {
            "id": 5,
            "metadata": 2
          },
          280,
          {
            "id": 5,
            "metadata": 2
          }
        ]
      ],
      "result": {
        "count": 3,
        "id": 189,
        "metadata": 0
      }
    }
  ],
  "190": [
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 3
          },
          280,
          {
            "id": 5,
            "metadata": 3
          }
        ],
        [
          {
            "id": 5,
            "metadata": 3
          },
          280,
          {
            "id": 5,
            "metadata": 3
          }
        ]
      ],
      "result": {
        "count": 3,
        "id": 190,
        "metadata": 0
      }
    }
  ],
  "191": [
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 5
          },
          280,
          {
            "id": 5,
            "metadata": 5
          }
        ],
        [
          {
            "id": 5,
            "metadata": 5
          },
          280,
          {
            "id": 5,
            "metadata": 5
          }
        ]
      ],
      "result": {
        "count": 3,
        "id": 191,
        "metadata": 0
      }
    }
  ],
  "192": [
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 4
          },
          280,
          {
            "id": 5,
            "metadata": 4
          }
        ],
        [
          {
            "id": 5,
            "metadata": 4
          },
          280,
          {
            "id": 5,
            "metadata": 4
          }
        ]
      ],
      "result": {
        "count": 3,
        "id": 192,
        "metadata": 0
      }
    }
  ],
  "256": [
    {
      "inShape": [
        [
          265
        ],
        [
          280
        ],
        [
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 256,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        256,
        256
      ],
      "result": {
        "count": 1,
        "id": 256,
        "metadata": 0
      }
    }
  ],
  "257": [
    {
      "inShape": [
        [
          265,
          265,
          265
        ],
        [
          null,
          280,
          null
        ],
        [
          null,
          280,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 257,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        257,
        257
      ],
      "result": {
        "count": 1,
        "id": 257,
        "metadata": 0
      }
    }
  ],
  "258": [
    {
      "inShape": [
        [
          265,
          265
        ],
        [
          265,
          280
        ],
        [
          null,
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 258,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        258,
        258
      ],
      "result": {
        "count": 1,
        "id": 258,
        "metadata": 0
      }
    }
  ],
  "259": [
    {
      "ingredients": [
        265,
        318
      ],
      "result": {
        "count": 1,
        "id": 259,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        259,
        259
      ],
      "result": {
        "count": 1,
        "id": 259,
        "metadata": 0
      }
    }
  ],
  "261": [
    {
      "inShape": [
        [
          null,
          280,
          287
        ],
        [
          280,
          null,
          287
        ],
        [
          null,
          280,
          287
        ]
      ],
      "result": {
        "count": 1,
        "id": 261,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        261,
        261
      ],
      "result": {
        "count": 1,
        "id": 261,
        "metadata": 0
      }
    }
  ],
  "262": [
    {
      "inShape": [
        [
          318
        ],
        [
          280
        ],
        [
          288
        ]
      ],
      "result": {
        "count": 4,
        "id": 262,
        "metadata": 0
      }
    }
  ],
  "263": [
    {
      "inShape": [
        [
          173
        ]
      ],
      "result": {
        "count": 9,
        "id": 263,
        "metadata": 0
      }
    }
  ],
  "264": [
    {
      "inShape": [
        [
          57
        ]
      ],
      "result": {
        "count": 9,
        "id": 264,
        "metadata": 0
      }
    }
  ],
  "265": [
    {
      "inShape": [
        [
          42
        ]
      ],
      "result": {
        "count": 9,
        "id": 265,
        "metadata": 0
      }
    }
  ],
  "266": [
    {
      "inShape": [
        [
          41
        ]
      ],
      "result": {
        "count": 9,
        "id": 266,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          371,
          371,
          371
        ],
        [
          371,
          371,
          371
        ],
        [
          371,
          371,
          371
        ]
      ],
      "result": {
        "count": 1,
        "id": 266,
        "metadata": 0
      }
    }
  ],
  "267": [
    {
      "inShape": [
        [
          265
        ],
        [
          265
        ],
        [
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 267,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        267,
        267
      ],
      "result": {
        "count": 1,
        "id": 267,
        "metadata": 0
      }
    }
  ],
  "268": [
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 0
          }
        ],
        [
          {
            "id": 5,
            "metadata": 0
          }
        ],
        [
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 268,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        268,
        268
      ],
      "result": {
        "count": 1,
        "id": 268,
        "metadata": 0
      }
    }
  ],
  "269": [
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 0
          }
        ],
        [
          280
        ],
        [
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 269,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        269,
        269
      ],
      "result": {
        "count": 1,
        "id": 269,
        "metadata": 0
      }
    }
  ],
  "270": [
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 0
          },
          {
            "id": 5,
            "metadata": 0
          },
          {
            "id": 5,
            "metadata": 0
          }
        ],
        [
          null,
          280,
          null
        ],
        [
          null,
          280,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 270,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        270,
        270
      ],
      "result": {
        "count": 1,
        "id": 270,
        "metadata": 0
      }
    }
  ],
  "271": [
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 0
          },
          {
            "id": 5,
            "metadata": 0
          }
        ],
        [
          {
            "id": 5,
            "metadata": 0
          },
          280
        ],
        [
          null,
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 271,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        271,
        271
      ],
      "result": {
        "count": 1,
        "id": 271,
        "metadata": 0
      }
    }
  ],
  "272": [
    {
      "inShape": [
        [
          4
        ],
        [
          4
        ],
        [
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 272,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        272,
        272
      ],
      "result": {
        "count": 1,
        "id": 272,
        "metadata": 0
      }
    }
  ],
  "273": [
    {
      "inShape": [
        [
          4
        ],
        [
          280
        ],
        [
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 273,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        273,
        273
      ],
      "result": {
        "count": 1,
        "id": 273,
        "metadata": 0
      }
    }
  ],
  "274": [
    {
      "inShape": [
        [
          4,
          4,
          4
        ],
        [
          null,
          280,
          null
        ],
        [
          null,
          280,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 274,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        274,
        274
      ],
      "result": {
        "count": 1,
        "id": 274,
        "metadata": 0
      }
    }
  ],
  "275": [
    {
      "inShape": [
        [
          4,
          4
        ],
        [
          4,
          280
        ],
        [
          null,
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 275,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        275,
        275
      ],
      "result": {
        "count": 1,
        "id": 275,
        "metadata": 0
      }
    }
  ],
  "276": [
    {
      "inShape": [
        [
          264
        ],
        [
          264
        ],
        [
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 276,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        276,
        276
      ],
      "result": {
        "count": 1,
        "id": 276,
        "metadata": 0
      }
    }
  ],
  "277": [
    {
      "inShape": [
        [
          264
        ],
        [
          280
        ],
        [
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 277,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        277,
        277
      ],
      "result": {
        "count": 1,
        "id": 277,
        "metadata": 0
      }
    }
  ],
  "278": [
    {
      "inShape": [
        [
          264,
          264,
          264
        ],
        [
          null,
          280,
          null
        ],
        [
          null,
          280,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 278,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        278,
        278
      ],
      "result": {
        "count": 1,
        "id": 278,
        "metadata": 0
      }
    }
  ],
  "279": [
    {
      "inShape": [
        [
          264,
          264
        ],
        [
          264,
          280
        ],
        [
          null,
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 279,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        279,
        279
      ],
      "result": {
        "count": 1,
        "id": 279,
        "metadata": 0
      }
    }
  ],
  "280": [
    {
      "inShape": [
        [
          5
        ],
        [
          5
        ]
      ],
      "result": {
        "count": 4,
        "id": 280,
        "metadata": 0
      }
    }
  ],
  "281": [
    {
      "inShape": [
        [
          5,
          null,
          5
        ],
        [
          null,
          5,
          null
        ]
      ],
      "result": {
        "count": 4,
        "id": 281,
        "metadata": 0
      }
    }
  ],
  "282": [
    {
      "ingredients": [
        40,
        39,
        281
      ],
      "result": {
        "count": 1,
        "id": 282,
        "metadata": 0
      }
    }
  ],
  "283": [
    {
      "inShape": [
        [
          266
        ],
        [
          266
        ],
        [
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 283,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        283,
        283
      ],
      "result": {
        "count": 1,
        "id": 283,
        "metadata": 0
      }
    }
  ],
  "284": [
    {
      "inShape": [
        [
          266
        ],
        [
          280
        ],
        [
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 284,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        284,
        284
      ],
      "result": {
        "count": 1,
        "id": 284,
        "metadata": 0
      }
    }
  ],
  "285": [
    {
      "inShape": [
        [
          266,
          266,
          266
        ],
        [
          null,
          280,
          null
        ],
        [
          null,
          280,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 285,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        285,
        285
      ],
      "result": {
        "count": 1,
        "id": 285,
        "metadata": 0
      }
    }
  ],
  "286": [
    {
      "inShape": [
        [
          266,
          266
        ],
        [
          266,
          280
        ],
        [
          null,
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 286,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        286,
        286
      ],
      "result": {
        "count": 1,
        "id": 286,
        "metadata": 0
      }
    }
  ],
  "290": [
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 0
          },
          {
            "id": 5,
            "metadata": 0
          }
        ],
        [
          null,
          280
        ],
        [
          null,
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 290,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        290,
        290
      ],
      "result": {
        "count": 1,
        "id": 290,
        "metadata": 0
      }
    }
  ],
  "291": [
    {
      "inShape": [
        [
          4,
          4
        ],
        [
          null,
          280
        ],
        [
          null,
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 291,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        291,
        291
      ],
      "result": {
        "count": 1,
        "id": 291,
        "metadata": 0
      }
    }
  ],
  "292": [
    {
      "inShape": [
        [
          265,
          265
        ],
        [
          null,
          280
        ],
        [
          null,
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 292,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        292,
        292
      ],
      "result": {
        "count": 1,
        "id": 292,
        "metadata": 0
      }
    }
  ],
  "293": [
    {
      "inShape": [
        [
          264,
          264
        ],
        [
          null,
          280
        ],
        [
          null,
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 293,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        293,
        293
      ],
      "result": {
        "count": 1,
        "id": 293,
        "metadata": 0
      }
    }
  ],
  "294": [
    {
      "inShape": [
        [
          266,
          266
        ],
        [
          null,
          280
        ],
        [
          null,
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 294,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        294,
        294
      ],
      "result": {
        "count": 1,
        "id": 294,
        "metadata": 0
      }
    }
  ],
  "296": [
    {
      "inShape": [
        [
          170
        ]
      ],
      "result": {
        "count": 9,
        "id": 296,
        "metadata": 0
      }
    }
  ],
  "297": [
    {
      "inShape": [
        [
          296,
          296,
          296
        ]
      ],
      "result": {
        "count": 1,
        "id": 297,
        "metadata": 0
      }
    }
  ],
  "298": [
    {
      "inShape": [
        [
          334,
          334,
          334
        ],
        [
          334,
          null,
          334
        ]
      ],
      "result": {
        "count": 1,
        "id": 298,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        298,
        298
      ],
      "result": {
        "count": 1,
        "id": 298,
        "metadata": 0
      }
    }
  ],
  "299": [
    {
      "inShape": [
        [
          334,
          null,
          334
        ],
        [
          334,
          334,
          334
        ],
        [
          334,
          334,
          334
        ]
      ],
      "result": {
        "count": 1,
        "id": 299,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        299,
        299
      ],
      "result": {
        "count": 1,
        "id": 299,
        "metadata": 0
      }
    }
  ],
  "300": [
    {
      "inShape": [
        [
          334,
          334,
          334
        ],
        [
          334,
          null,
          334
        ],
        [
          334,
          null,
          334
        ]
      ],
      "result": {
        "count": 1,
        "id": 300,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        300,
        300
      ],
      "result": {
        "count": 1,
        "id": 300,
        "metadata": 0
      }
    }
  ],
  "301": [
    {
      "inShape": [
        [
          334,
          null,
          334
        ],
        [
          334,
          null,
          334
        ]
      ],
      "result": {
        "count": 1,
        "id": 301,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        301,
        301
      ],
      "result": {
        "count": 1,
        "id": 301,
        "metadata": 0
      }
    }
  ],
  "302": [
    {
      "ingredients": [
        302,
        302
      ],
      "result": {
        "count": 1,
        "id": 302,
        "metadata": 0
      }
    }
  ],
  "303": [
    {
      "ingredients": [
        303,
        303
      ],
      "result": {
        "count": 1,
        "id": 303,
        "metadata": 0
      }
    }
  ],
  "304": [
    {
      "ingredients": [
        304,
        304
      ],
      "result": {
        "count": 1,
        "id": 304,
        "metadata": 0
      }
    }
  ],
  "305": [
    {
      "ingredients": [
        305,
        305
      ],
      "result": {
        "count": 1,
        "id": 305,
        "metadata": 0
      }
    }
  ],
  "306": [
    {
      "inShape": [
        [
          265,
          265,
          265
        ],
        [
          265,
          null,
          265
        ]
      ],
      "result": {
        "count": 1,
        "id": 306,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        306,
        306
      ],
      "result": {
        "count": 1,
        "id": 306,
        "metadata": 0
      }
    }
  ],
  "307": [
    {
      "inShape": [
        [
          265,
          null,
          265
        ],
        [
          265,
          265,
          265
        ],
        [
          265,
          265,
          265
        ]
      ],
      "result": {
        "count": 1,
        "id": 307,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        307,
        307
      ],
      "result": {
        "count": 1,
        "id": 307,
        "metadata": 0
      }
    }
  ],
  "308": [
    {
      "inShape": [
        [
          265,
          265,
          265
        ],
        [
          265,
          null,
          265
        ],
        [
          265,
          null,
          265
        ]
      ],
      "result": {
        "count": 1,
        "id": 308,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        308,
        308
      ],
      "result": {
        "count": 1,
        "id": 308,
        "metadata": 0
      }
    }
  ],
  "309": [
    {
      "inShape": [
        [
          265,
          null,
          265
        ],
        [
          265,
          null,
          265
        ]
      ],
      "result": {
        "count": 1,
        "id": 309,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        309,
        309
      ],
      "result": {
        "count": 1,
        "id": 309,
        "metadata": 0
      }
    }
  ],
  "310": [
    {
      "inShape": [
        [
          264,
          264,
          264
        ],
        [
          264,
          null,
          264
        ]
      ],
      "result": {
        "count": 1,
        "id": 310,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        310,
        310
      ],
      "result": {
        "count": 1,
        "id": 310,
        "metadata": 0
      }
    }
  ],
  "311": [
    {
      "inShape": [
        [
          264,
          null,
          264
        ],
        [
          264,
          264,
          264
        ],
        [
          264,
          264,
          264
        ]
      ],
      "result": {
        "count": 1,
        "id": 311,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        311,
        311
      ],
      "result": {
        "count": 1,
        "id": 311,
        "metadata": 0
      }
    }
  ],
  "312": [
    {
      "inShape": [
        [
          264,
          264,
          264
        ],
        [
          264,
          null,
          264
        ],
        [
          264,
          null,
          264
        ]
      ],
      "result": {
        "count": 1,
        "id": 312,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        312,
        312
      ],
      "result": {
        "count": 1,
        "id": 312,
        "metadata": 0
      }
    }
  ],
  "313": [
    {
      "inShape": [
        [
          264,
          null,
          264
        ],
        [
          264,
          null,
          264
        ]
      ],
      "result": {
        "count": 1,
        "id": 313,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        313,
        313
      ],
      "result": {
        "count": 1,
        "id": 313,
        "metadata": 0
      }
    }
  ],
  "314": [
    {
      "inShape": [
        [
          266,
          266,
          266
        ],
        [
          266,
          null,
          266
        ]
      ],
      "result": {
        "count": 1,
        "id": 314,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        314,
        314
      ],
      "result": {
        "count": 1,
        "id": 314,
        "metadata": 0
      }
    }
  ],
  "315": [
    {
      "inShape": [
        [
          266,
          null,
          266
        ],
        [
          266,
          266,
          266
        ],
        [
          266,
          266,
          266
        ]
      ],
      "result": {
        "count": 1,
        "id": 315,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        315,
        315
      ],
      "result": {
        "count": 1,
        "id": 315,
        "metadata": 0
      }
    }
  ],
  "316": [
    {
      "inShape": [
        [
          266,
          266,
          266
        ],
        [
          266,
          null,
          266
        ],
        [
          266,
          null,
          266
        ]
      ],
      "result": {
        "count": 1,
        "id": 316,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        316,
        316
      ],
      "result": {
        "count": 1,
        "id": 316,
        "metadata": 0
      }
    }
  ],
  "317": [
    {
      "inShape": [
        [
          266,
          null,
          266
        ],
        [
          266,
          null,
          266
        ]
      ],
      "result": {
        "count": 1,
        "id": 317,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        317,
        317
      ],
      "result": {
        "count": 1,
        "id": 317,
        "metadata": 0
      }
    }
  ],
  "321": [
    {
      "inShape": [
        [
          280,
          280,
          280
        ],
        [
          280,
          35,
          280
        ],
        [
          280,
          280,
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 321,
        "metadata": 0
      }
    }
  ],
  "322": [
    {
      "inShape": [
        [
          266,
          266,
          266
        ],
        [
          266,
          260,
          266
        ],
        [
          266,
          266,
          266
        ]
      ],
      "result": {
        "count": 1,
        "id": 322,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          41,
          41,
          41
        ],
        [
          41,
          260,
          41
        ],
        [
          41,
          41,
          41
        ]
      ],
      "result": {
        "count": 1,
        "id": 322,
        "metadata": 1
      }
    }
  ],
  "323": [
    {
      "inShape": [
        [
          5,
          5,
          5
        ],
        [
          5,
          5,
          5
        ],
        [
          null,
          280,
          null
        ]
      ],
      "result": {
        "count": 3,
        "id": 323,
        "metadata": 0
      }
    }
  ],
  "324": [
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 0
          },
          {
            "id": 5,
            "metadata": 0
          }
        ],
        [
          {
            "id": 5,
            "metadata": 0
          },
          {
            "id": 5,
            "metadata": 0
          }
        ],
        [
          {
            "id": 5,
            "metadata": 0
          },
          {
            "id": 5,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 3,
        "id": 324,
        "metadata": 0
      }
    }
  ],
  "325": [
    {
      "inShape": [
        [
          265,
          null,
          265
        ],
        [
          null,
          265,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 325,
        "metadata": 0
      }
    }
  ],
  "328": [
    {
      "inShape": [
        [
          265,
          null,
          265
        ],
        [
          265,
          265,
          265
        ]
      ],
      "result": {
        "count": 1,
        "id": 328,
        "metadata": 0
      }
    }
  ],
  "330": [
    {
      "inShape": [
        [
          265,
          265
        ],
        [
          265,
          265
        ],
        [
          265,
          265
        ]
      ],
      "result": {
        "count": 3,
        "id": 330,
        "metadata": 0
      }
    }
  ],
  "331": [
    {
      "inShape": [
        [
          152
        ]
      ],
      "result": {
        "count": 9,
        "id": 331,
        "metadata": 0
      }
    }
  ],
  "333": [
    {
      "inShape": [
        [
          5,
          null,
          5
        ],
        [
          5,
          5,
          5
        ]
      ],
      "result": {
        "count": 1,
        "id": 333,
        "metadata": 0
      }
    }
  ],
  "334": [
    {
      "inShape": [
        [
          415,
          415
        ],
        [
          415,
          415
        ]
      ],
      "result": {
        "count": 1,
        "id": 334,
        "metadata": 0
      }
    }
  ],
  "339": [
    {
      "inShape": [
        [
          338,
          338,
          338
        ]
      ],
      "result": {
        "count": 3,
        "id": 339,
        "metadata": 0
      }
    }
  ],
  "340": [
    {
      "ingredients": [
        339,
        339,
        339,
        334
      ],
      "result": {
        "count": 1,
        "id": 340,
        "metadata": 0
      }
    }
  ],
  "341": [
    {
      "inShape": [
        [
          165
        ]
      ],
      "result": {
        "count": 9,
        "id": 341,
        "metadata": 0
      }
    }
  ],
  "342": [
    {
      "inShape": [
        [
          54
        ],
        [
          328
        ]
      ],
      "result": {
        "count": 1,
        "id": 342,
        "metadata": 0
      }
    }
  ],
  "343": [
    {
      "inShape": [
        [
          61
        ],
        [
          328
        ]
      ],
      "result": {
        "count": 1,
        "id": 343,
        "metadata": 0
      }
    }
  ],
  "345": [
    {
      "inShape": [
        [
          null,
          265,
          null
        ],
        [
          265,
          331,
          265
        ],
        [
          null,
          265,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 345,
        "metadata": 0
      }
    }
  ],
  "346": [
    {
      "inShape": [
        [
          null,
          null,
          280
        ],
        [
          null,
          280,
          287
        ],
        [
          280,
          null,
          287
        ]
      ],
      "result": {
        "count": 1,
        "id": 346,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        346,
        346
      ],
      "result": {
        "count": 1,
        "id": 346,
        "metadata": 0
      }
    }
  ],
  "347": [
    {
      "inShape": [
        [
          null,
          266,
          null
        ],
        [
          266,
          331,
          266
        ],
        [
          null,
          266,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 347,
        "metadata": 0
      }
    }
  ],
  "351": [
    {
      "ingredients": [
        {
          "id": 351,
          "metadata": 0
        },
        {
          "id": 351,
          "metadata": 15
        }
      ],
      "result": {
        "count": 2,
        "id": 351,
        "metadata": 8
      }
    },
    {
      "inShape": [
        [
          37
        ]
      ],
      "result": {
        "count": 1,
        "id": 351,
        "metadata": 11
      }
    },
    {
      "inShape": [
        [
          {
            "id": 175,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 2,
        "id": 351,
        "metadata": 11
      }
    },
    {
      "ingredients": [
        {
          "id": 351,
          "metadata": 4
        },
        {
          "id": 351,
          "metadata": 2
        }
      ],
      "result": {
        "count": 2,
        "id": 351,
        "metadata": 6
      }
    },
    {
      "ingredients": [
        {
          "id": 351,
          "metadata": 2
        },
        {
          "id": 351,
          "metadata": 15
        }
      ],
      "result": {
        "count": 2,
        "id": 351,
        "metadata": 10
      }
    },
    {
      "ingredients": [
        {
          "id": 351,
          "metadata": 4
        },
        {
          "id": 351,
          "metadata": 1
        }
      ],
      "result": {
        "count": 2,
        "id": 351,
        "metadata": 5
      }
    },
    {
      "inShape": [
        [
          {
            "id": 38,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 351,
        "metadata": 12
      }
    },
    {
      "ingredients": [
        {
          "id": 351,
          "metadata": 4
        },
        {
          "id": 351,
          "metadata": 15
        }
      ],
      "result": {
        "count": 2,
        "id": 351,
        "metadata": 12
      }
    },
    {
      "inShape": [
        [
          {
            "id": 38,
            "metadata": 7
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 351,
        "metadata": 9
      }
    },
    {
      "inShape": [
        [
          {
            "id": 175,
            "metadata": 5
          }
        ]
      ],
      "result": {
        "count": 2,
        "id": 351,
        "metadata": 9
      }
    },
    {
      "ingredients": [
        {
          "id": 351,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 15
        }
      ],
      "result": {
        "count": 2,
        "id": 351,
        "metadata": 9
      }
    },
    {
      "inShape": [
        [
          {
            "id": 38,
            "metadata": 5
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 351,
        "metadata": 14
      }
    },
    {
      "ingredients": [
        {
          "id": 351,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 11
        }
      ],
      "result": {
        "count": 2,
        "id": 351,
        "metadata": 14
      }
    },
    {
      "inShape": [
        [
          {
            "id": 38,
            "metadata": 2
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 351,
        "metadata": 13
      }
    },
    {
      "inShape": [
        [
          {
            "id": 175,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 2,
        "id": 351,
        "metadata": 13
      }
    },
    {
      "ingredients": [
        {
          "id": 351,
          "metadata": 5
        },
        {
          "id": 351,
          "metadata": 9
        }
      ],
      "result": {
        "count": 2,
        "id": 351,
        "metadata": 13
      }
    },
    {
      "ingredients": [
        {
          "id": 351,
          "metadata": 4
        },
        {
          "id": 351,
          "metadata": 15
        },
        {
          "id": 351,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 1
        }
      ],
      "result": {
        "count": 4,
        "id": 351,
        "metadata": 13
      }
    },
    {
      "ingredients": [
        {
          "id": 351,
          "metadata": 9
        },
        {
          "id": 351,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 4
        }
      ],
      "result": {
        "count": 3,
        "id": 351,
        "metadata": 13
      }
    },
    {
      "inShape": [
        [
          {
            "id": 38,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 351,
        "metadata": 1
      }
    },
    {
      "inShape": [
        [
          {
            "id": 38,
            "metadata": 4
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 351,
        "metadata": 1
      }
    },
    {
      "inShape": [
        [
          {
            "id": 175,
            "metadata": 4
          }
        ]
      ],
      "result": {
        "count": 2,
        "id": 351,
        "metadata": 1
      }
    },
    {
      "inShape": [
        [
          38
        ]
      ],
      "result": {
        "count": 1,
        "id": 351,
        "metadata": 7
      }
    },
    {
      "ingredients": [
        {
          "id": 351,
          "metadata": 0
        },
        {
          "id": 351,
          "metadata": 15
        },
        {
          "id": 351,
          "metadata": 15
        }
      ],
      "result": {
        "count": 3,
        "id": 351,
        "metadata": 7
      }
    },
    {
      "ingredients": [
        {
          "id": 351,
          "metadata": 8
        },
        {
          "id": 351,
          "metadata": 15
        }
      ],
      "result": {
        "count": 2,
        "id": 351,
        "metadata": 7
      }
    },
    {
      "inShape": [
        [
          22
        ]
      ],
      "result": {
        "count": 9,
        "id": 351,
        "metadata": 4
      }
    },
    {
      "inShape": [
        [
          352
        ]
      ],
      "result": {
        "count": 3,
        "id": 351,
        "metadata": 15
      }
    }
  ],
  "353": [
    {
      "inShape": [
        [
          338
        ]
      ],
      "result": {
        "count": 1,
        "id": 353,
        "metadata": 0
      }
    }
  ],
  "354": [
    {
      "inShape": [
        [
          335,
          335,
          335
        ],
        [
          353,
          344,
          353
        ],
        [
          296,
          296,
          296
        ]
      ],
      "outShape": [
        [
          325,
          325,
          325
        ],
        [
          null,
          null,
          null
        ],
        [
          null,
          null,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 354,
        "metadata": 0
      }
    }
  ],
  "355": [
    {
      "inShape": [
        [
          35,
          35,
          35
        ],
        [
          5,
          5,
          5
        ]
      ],
      "result": {
        "count": 1,
        "id": 355,
        "metadata": 0
      }
    }
  ],
  "356": [
    {
      "inShape": [
        [
          75,
          331,
          75
        ],
        [
          {
            "id": 1,
            "metadata": 0
          },
          {
            "id": 1,
            "metadata": 0
          },
          {
            "id": 1,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 356,
        "metadata": 0
      }
    }
  ],
  "357": [
    {
      "inShape": [
        [
          296,
          {
            "id": 351,
            "metadata": 3
          },
          296
        ]
      ],
      "result": {
        "count": 8,
        "id": 357,
        "metadata": 0
      }
    }
  ],
  "358": [
    {
      "inShape": [
        [
          339,
          339,
          339
        ],
        [
          339,
          358,
          339
        ],
        [
          339,
          339,
          339
        ]
      ],
      "result": {
        "count": 1,
        "id": 358,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        358,
        395
      ],
      "result": {
        "count": 2,
        "id": 358,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        358,
        395,
        395
      ],
      "result": {
        "count": 3,
        "id": 358,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        358,
        395,
        395,
        395
      ],
      "result": {
        "count": 4,
        "id": 358,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        395,
        358,
        395,
        395,
        395
      ],
      "result": {
        "count": 5,
        "id": 358,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        395,
        395,
        358,
        395,
        395,
        395
      ],
      "result": {
        "count": 6,
        "id": 358,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        395,
        395,
        395,
        358,
        395,
        395,
        395
      ],
      "result": {
        "count": 7,
        "id": 358,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        395,
        395,
        395,
        358,
        395,
        395,
        395,
        395
      ],
      "result": {
        "count": 8,
        "id": 358,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        395,
        395,
        395,
        358,
        395,
        395,
        395,
        395,
        395
      ],
      "result": {
        "count": 9,
        "id": 358,
        "metadata": 0
      }
    }
  ],
  "359": [
    {
      "inShape": [
        [
          null,
          265
        ],
        [
          265,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 359,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        359,
        359
      ],
      "result": {
        "count": 1,
        "id": 359,
        "metadata": 0
      }
    }
  ],
  "361": [
    {
      "inShape": [
        [
          86
        ]
      ],
      "result": {
        "count": 4,
        "id": 361,
        "metadata": 0
      }
    }
  ],
  "362": [
    {
      "inShape": [
        [
          360
        ]
      ],
      "result": {
        "count": 1,
        "id": 362,
        "metadata": 0
      }
    }
  ],
  "371": [
    {
      "inShape": [
        [
          266
        ]
      ],
      "result": {
        "count": 9,
        "id": 371,
        "metadata": 0
      }
    }
  ],
  "374": [
    {
      "inShape": [
        [
          20,
          null,
          20
        ],
        [
          null,
          20,
          null
        ]
      ],
      "result": {
        "count": 3,
        "id": 374,
        "metadata": 0
      }
    }
  ],
  "376": [
    {
      "ingredients": [
        39,
        353,
        375
      ],
      "result": {
        "count": 1,
        "id": 376,
        "metadata": 0
      }
    }
  ],
  "377": [
    {
      "inShape": [
        [
          369
        ]
      ],
      "result": {
        "count": 2,
        "id": 377,
        "metadata": 0
      }
    }
  ],
  "378": [
    {
      "ingredients": [
        377,
        341
      ],
      "result": {
        "count": 1,
        "id": 378,
        "metadata": 0
      }
    }
  ],
  "379": [
    {
      "inShape": [
        [
          null,
          369,
          null
        ],
        [
          4,
          4,
          4
        ]
      ],
      "result": {
        "count": 1,
        "id": 379,
        "metadata": 0
      }
    }
  ],
  "380": [
    {
      "inShape": [
        [
          265,
          null,
          265
        ],
        [
          265,
          null,
          265
        ],
        [
          265,
          265,
          265
        ]
      ],
      "result": {
        "count": 1,
        "id": 380,
        "metadata": 0
      }
    }
  ],
  "381": [
    {
      "ingredients": [
        377,
        368
      ],
      "result": {
        "count": 1,
        "id": 381,
        "metadata": 0
      }
    }
  ],
  "382": [
    {
      "inShape": [
        [
          371,
          371,
          371
        ],
        [
          371,
          360,
          371
        ],
        [
          371,
          371,
          371
        ]
      ],
      "result": {
        "count": 1,
        "id": 382,
        "metadata": 0
      }
    }
  ],
  "385": [
    {
      "ingredients": [
        377,
        263,
        289
      ],
      "result": {
        "count": 3,
        "id": 385,
        "metadata": 0
      }
    }
  ],
  "386": [
    {
      "ingredients": [
        340,
        {
          "id": 351,
          "metadata": 0
        },
        288
      ],
      "result": {
        "count": 1,
        "id": 386,
        "metadata": 0
      }
    }
  ],
  "387": [
    {
      "ingredients": [
        386,
        387
      ],
      "result": {
        "count": 1,
        "id": 387,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        386,
        387,
        386
      ],
      "result": {
        "count": 2,
        "id": 387,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        386,
        387,
        386,
        386
      ],
      "result": {
        "count": 3,
        "id": 387,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        386,
        386,
        387,
        386,
        386
      ],
      "result": {
        "count": 4,
        "id": 387,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        386,
        386,
        386,
        387,
        386,
        386
      ],
      "result": {
        "count": 5,
        "id": 387,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        386,
        386,
        386,
        386,
        387,
        386,
        386
      ],
      "result": {
        "count": 6,
        "id": 387,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        386,
        386,
        386,
        386,
        387,
        386,
        386,
        386
      ],
      "result": {
        "count": 7,
        "id": 387,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        386,
        386,
        386,
        386,
        387,
        386,
        386,
        386,
        386
      ],
      "result": {
        "count": 8,
        "id": 387,
        "metadata": 0
      }
    }
  ],
  "388": [
    {
      "inShape": [
        [
          133
        ]
      ],
      "result": {
        "count": 9,
        "id": 388,
        "metadata": 0
      }
    }
  ],
  "389": [
    {
      "inShape": [
        [
          280,
          280,
          280
        ],
        [
          280,
          334,
          280
        ],
        [
          280,
          280,
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 389,
        "metadata": 0
      }
    }
  ],
  "390": [
    {
      "inShape": [
        [
          336,
          null,
          336
        ],
        [
          null,
          336,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 390,
        "metadata": 0
      }
    }
  ],
  "395": [
    {
      "inShape": [
        [
          339,
          339,
          339
        ],
        [
          339,
          345,
          339
        ],
        [
          339,
          339,
          339
        ]
      ],
      "result": {
        "count": 1,
        "id": 395,
        "metadata": 0
      }
    }
  ],
  "396": [
    {
      "inShape": [
        [
          371,
          371,
          371
        ],
        [
          371,
          391,
          371
        ],
        [
          371,
          371,
          371
        ]
      ],
      "result": {
        "count": 1,
        "id": 396,
        "metadata": 0
      }
    }
  ],
  "398": [
    {
      "inShape": [
        [
          346,
          null
        ],
        [
          null,
          391
        ]
      ],
      "result": {
        "count": 1,
        "id": 398,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        398,
        398
      ],
      "result": {
        "count": 1,
        "id": 398,
        "metadata": 0
      }
    }
  ],
  "400": [
    {
      "ingredients": [
        86,
        353,
        344
      ],
      "result": {
        "count": 1,
        "id": 400,
        "metadata": 0
      }
    }
  ],
  "401": [
    {
      "ingredients": [
        339,
        289
      ],
      "result": {
        "count": 1,
        "id": 401,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        402,
        339,
        289
      ],
      "result": {
        "count": 1,
        "id": 401,
        "metadata": 0
      }
    }
  ],
  "402": [
    {
      "ingredients": [
        289,
        351,
        264
      ],
      "result": {
        "count": 1,
        "id": 402,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        402,
        351
      ],
      "result": {
        "count": 1,
        "id": 402,
        "metadata": 0
      }
    }
  ],
  "404": [
    {
      "inShape": [
        [
          null,
          75,
          null
        ],
        [
          75,
          406,
          75
        ],
        [
          {
            "id": 1,
            "metadata": 0
          },
          {
            "id": 1,
            "metadata": 0
          },
          {
            "id": 1,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 404,
        "metadata": 0
      }
    }
  ],
  "405": [
    {
      "inShape": [
        [
          405,
          405
        ],
        [
          405,
          405
        ]
      ],
      "result": {
        "count": 1,
        "id": 405,
        "metadata": 0
      }
    }
  ],
  "407": [
    {
      "inShape": [
        [
          46
        ],
        [
          328
        ]
      ],
      "result": {
        "count": 1,
        "id": 407,
        "metadata": 0
      }
    }
  ],
  "408": [
    {
      "inShape": [
        [
          154
        ],
        [
          328
        ]
      ],
      "result": {
        "count": 1,
        "id": 408,
        "metadata": 0
      }
    }
  ],
  "413": [
    {
      "inShape": [
        [
          null,
          412,
          null
        ],
        [
          391,
          393,
          39
        ],
        [
          null,
          281,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 413,
        "metadata": 0
      }
    }
  ],
  "416": [
    {
      "inShape": [
        [
          280,
          280,
          280
        ],
        [
          null,
          280,
          null
        ],
        [
          280,
          {
            "id": 44,
            "metadata": 0
          },
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 416,
        "metadata": 0
      }
    }
  ],
  "420": [
    {
      "inShape": [
        [
          287,
          287,
          null
        ],
        [
          287,
          341,
          null
        ],
        [
          null,
          null,
          287
        ]
      ],
      "result": {
        "count": 2,
        "id": 420,
        "metadata": 0
      }
    }
  ],
  "425": [
    {
      "inShape": [
        [
          35,
          35,
          35
        ],
        [
          35,
          35,
          35
        ],
        [
          null,
          280,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        425,
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          null,
          null,
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          null,
          null,
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          null,
          null,
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          null,
          null,
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          null,
          null,
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          null,
          null,
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          null,
          null,
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          null,
          null,
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          null,
          null,
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          null,
          null,
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          null,
          null,
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          null,
          null,
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          null,
          null,
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          null,
          null,
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          null,
          null,
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          null,
          null,
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 15
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 14
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 13
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 12
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 11
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 10
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 9
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 8
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 7
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 6
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 5
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 4
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 3
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 2
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 1
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 0
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 15
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 14
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 13
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 12
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 11
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 10
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 9
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 8
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 7
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 6
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 5
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 4
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 3
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 2
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 15
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 14
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 13
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 12
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 11
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 10
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 9
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 8
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 7
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 6
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 5
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 4
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 3
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 2
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 1
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 0
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 15
          },
          null,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 15
          },
          null
        ],
        [
          null,
          425,
          {
            "id": 351,
            "metadata": 15
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 14
          },
          null,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 14
          },
          null
        ],
        [
          null,
          425,
          {
            "id": 351,
            "metadata": 14
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 13
          },
          null,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 13
          },
          null
        ],
        [
          null,
          425,
          {
            "id": 351,
            "metadata": 13
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 12
          },
          null,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 12
          },
          null
        ],
        [
          null,
          425,
          {
            "id": 351,
            "metadata": 12
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 11
          },
          null,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 11
          },
          null
        ],
        [
          null,
          425,
          {
            "id": 351,
            "metadata": 11
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 10
          },
          null,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 10
          },
          null
        ],
        [
          null,
          425,
          {
            "id": 351,
            "metadata": 10
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 9
          },
          null,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 9
          },
          null
        ],
        [
          null,
          425,
          {
            "id": 351,
            "metadata": 9
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 8
          },
          null,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 8
          },
          null
        ],
        [
          null,
          425,
          {
            "id": 351,
            "metadata": 8
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 7
          },
          null,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 7
          },
          null
        ],
        [
          null,
          425,
          {
            "id": 351,
            "metadata": 7
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 6
          },
          null,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 6
          },
          null
        ],
        [
          null,
          425,
          {
            "id": 351,
            "metadata": 6
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 5
          },
          null,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 5
          },
          null
        ],
        [
          null,
          425,
          {
            "id": 351,
            "metadata": 5
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 4
          },
          null,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 4
          },
          null
        ],
        [
          null,
          425,
          {
            "id": 351,
            "metadata": 4
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 3
          },
          null,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 3
          },
          null
        ],
        [
          null,
          425,
          {
            "id": 351,
            "metadata": 3
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 2
          },
          null,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 2
          },
          null
        ],
        [
          null,
          425,
          {
            "id": 351,
            "metadata": 2
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 1
          },
          null,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 1
          },
          null
        ],
        [
          null,
          425,
          {
            "id": 351,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 0
          },
          null,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 0
          },
          null
        ],
        [
          null,
          425,
          {
            "id": 351,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          null,
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 15
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          null,
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 14
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          null,
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 13
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          null,
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 12
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          null,
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 11
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          null,
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 10
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          null,
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 9
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          null,
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 8
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          null,
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 7
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          null,
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 6
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          null,
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 5
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          null,
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 4
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          null,
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 3
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          null,
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 2
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          null,
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 1
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          null,
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 0
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 15
          },
          null,
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          null,
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 14
          },
          null,
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          null,
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 13
          },
          null,
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          null,
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 12
          },
          null,
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          null,
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 11
          },
          null,
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          null,
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 10
          },
          null,
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          null,
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 9
          },
          null,
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          null,
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 8
          },
          null,
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          null,
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 7
          },
          null,
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          null,
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 6
          },
          null,
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          null,
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 5
          },
          null,
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          null,
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 4
          },
          null,
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          null,
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 3
          },
          null,
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          null,
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 2
          },
          null,
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          null,
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 1
          },
          null,
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          null,
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 0
          },
          null,
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          null,
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 15
          },
          null,
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 15
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          425,
          {
            "id": 351,
            "metadata": 15
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 14
          },
          null,
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 14
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          425,
          {
            "id": 351,
            "metadata": 14
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 13
          },
          null,
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 13
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          425,
          {
            "id": 351,
            "metadata": 13
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 12
          },
          null,
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 12
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          425,
          {
            "id": 351,
            "metadata": 12
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 11
          },
          null,
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 11
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          425,
          {
            "id": 351,
            "metadata": 11
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 10
          },
          null,
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 10
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          425,
          {
            "id": 351,
            "metadata": 10
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 9
          },
          null,
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 9
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          425,
          {
            "id": 351,
            "metadata": 9
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 8
          },
          null,
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 8
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          425,
          {
            "id": 351,
            "metadata": 8
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 7
          },
          null,
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 7
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          425,
          {
            "id": 351,
            "metadata": 7
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 6
          },
          null,
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 6
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          425,
          {
            "id": 351,
            "metadata": 6
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 5
          },
          null,
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 5
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          425,
          {
            "id": 351,
            "metadata": 5
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 4
          },
          null,
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 4
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          425,
          {
            "id": 351,
            "metadata": 4
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 3
          },
          null,
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 3
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          425,
          {
            "id": 351,
            "metadata": 3
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 2
          },
          null,
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 2
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          425,
          {
            "id": 351,
            "metadata": 2
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 1
          },
          null,
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 1
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          425,
          {
            "id": 351,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 0
          },
          null,
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 0
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          425,
          {
            "id": 351,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 15
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 15
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 14
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 14
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 13
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 13
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 12
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 12
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 11
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 11
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 10
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 10
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 9
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 9
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 8
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 8
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 7
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 7
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 6
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 6
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 5
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 5
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 4
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 4
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 3
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 3
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 2
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 2
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 1
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 1
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 0
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 0
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 15
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 14
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 13
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 12
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 11
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 10
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 9
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 8
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 7
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 6
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 5
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 4
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 3
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 2
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 1
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 0
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          {
            "id": 351,
            "metadata": 15
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          {
            "id": 351,
            "metadata": 14
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          {
            "id": 351,
            "metadata": 13
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          {
            "id": 351,
            "metadata": 12
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          {
            "id": 351,
            "metadata": 11
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          {
            "id": 351,
            "metadata": 10
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          {
            "id": 351,
            "metadata": 9
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          {
            "id": 351,
            "metadata": 8
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          {
            "id": 351,
            "metadata": 7
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          {
            "id": 351,
            "metadata": 6
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          {
            "id": 351,
            "metadata": 5
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          {
            "id": 351,
            "metadata": 4
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          {
            "id": 351,
            "metadata": 3
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          {
            "id": 351,
            "metadata": 2
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          {
            "id": 351,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          {
            "id": 351,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 15
          },
          null
        ],
        [
          null,
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 14
          },
          null
        ],
        [
          null,
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 13
          },
          null
        ],
        [
          null,
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 12
          },
          null
        ],
        [
          null,
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 11
          },
          null
        ],
        [
          null,
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 10
          },
          null
        ],
        [
          null,
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 9
          },
          null
        ],
        [
          null,
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 8
          },
          null
        ],
        [
          null,
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 7
          },
          null
        ],
        [
          null,
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 6
          },
          null
        ],
        [
          null,
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 5
          },
          null
        ],
        [
          null,
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 4
          },
          null
        ],
        [
          null,
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 3
          },
          null
        ],
        [
          null,
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 2
          },
          null
        ],
        [
          null,
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 1
          },
          null
        ],
        [
          null,
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 0
          },
          null
        ],
        [
          null,
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          null,
          null
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          null,
          null
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          null,
          null
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          null,
          null
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          null,
          null
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          null,
          null
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          null,
          null
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          null,
          null
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          null,
          null
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          null,
          null
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          null,
          null
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          null,
          null
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          null,
          null
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          null,
          null
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          null,
          null
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          null,
          null
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 15
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          425,
          {
            "id": 351,
            "metadata": 15
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 14
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          425,
          {
            "id": 351,
            "metadata": 14
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 13
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          425,
          {
            "id": 351,
            "metadata": 13
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 12
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          425,
          {
            "id": 351,
            "metadata": 12
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 11
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          425,
          {
            "id": 351,
            "metadata": 11
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 10
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          425,
          {
            "id": 351,
            "metadata": 10
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 9
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          425,
          {
            "id": 351,
            "metadata": 9
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 8
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          425,
          {
            "id": 351,
            "metadata": 8
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 7
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          425,
          {
            "id": 351,
            "metadata": 7
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 6
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          425,
          {
            "id": 351,
            "metadata": 6
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 5
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          425,
          {
            "id": 351,
            "metadata": 5
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 4
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          425,
          {
            "id": 351,
            "metadata": 4
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 3
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          425,
          {
            "id": 351,
            "metadata": 3
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 2
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          425,
          {
            "id": 351,
            "metadata": 2
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 1
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          425,
          {
            "id": 351,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 0
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          425,
          {
            "id": 351,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 15
          },
          null,
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 15
          },
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 14
          },
          null,
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 14
          },
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 13
          },
          null,
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 13
          },
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 12
          },
          null,
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 12
          },
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 11
          },
          null,
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 11
          },
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 10
          },
          null,
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 10
          },
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 9
          },
          null,
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 9
          },
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 8
          },
          null,
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 8
          },
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 7
          },
          null,
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 7
          },
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 6
          },
          null,
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 6
          },
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 5
          },
          null,
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 5
          },
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 4
          },
          null,
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 4
          },
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 3
          },
          null,
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 3
          },
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 2
          },
          null,
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 2
          },
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 1
          },
          null,
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 1
          },
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 0
          },
          null,
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 0
          },
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 15
          },
          425,
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 15
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 14
          },
          425,
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 14
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 13
          },
          425,
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 13
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 12
          },
          425,
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 12
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 11
          },
          425,
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 11
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 10
          },
          425,
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 10
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 9
          },
          425,
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 9
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 8
          },
          425,
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 8
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 7
          },
          425,
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 7
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 6
          },
          425,
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 6
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 5
          },
          425,
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 5
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 4
          },
          425,
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 4
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 3
          },
          425,
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 3
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 2
          },
          425,
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 2
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 1
          },
          425,
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 1
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 0
          },
          425,
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 0
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 15
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          null,
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 14
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          null,
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 13
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          null,
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 12
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          null,
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 11
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          null,
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 10
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          null,
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 9
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          null,
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 8
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          null,
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 7
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          null,
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 6
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          null,
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 5
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          null,
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 4
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          null,
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 3
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          null,
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 2
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          null,
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 1
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          null,
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 0
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          null,
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 15
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          425,
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 15
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 14
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          425,
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 14
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 13
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          425,
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 13
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 12
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          425,
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 12
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 11
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          425,
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 11
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 10
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          425,
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 10
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 9
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          425,
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 9
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 8
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          425,
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 8
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 7
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          425,
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 7
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 6
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          425,
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 6
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 5
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          425,
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 5
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 4
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          425,
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 4
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 3
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          425,
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 3
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 2
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          425,
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 2
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 1
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          425,
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 1
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 0
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          425,
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 0
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          425,
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          425,
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          425,
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          425,
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          425,
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          425,
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          425,
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          425,
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          425,
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          425,
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          425,
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          425,
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          425,
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          425,
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          425,
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          425,
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        106,
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        106,
        {
          "id": 351,
          "metadata": 15
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        106,
        {
          "id": 351,
          "metadata": 14
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        106,
        {
          "id": 351,
          "metadata": 13
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        106,
        {
          "id": 351,
          "metadata": 12
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        106,
        {
          "id": 351,
          "metadata": 11
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        106,
        {
          "id": 351,
          "metadata": 10
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        106,
        {
          "id": 351,
          "metadata": 9
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        106,
        {
          "id": 351,
          "metadata": 8
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        106,
        {
          "id": 351,
          "metadata": 7
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        106,
        {
          "id": 351,
          "metadata": 6
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        106,
        {
          "id": 351,
          "metadata": 5
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        106,
        {
          "id": 351,
          "metadata": 4
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        106,
        {
          "id": 351,
          "metadata": 3
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        106,
        {
          "id": 351,
          "metadata": 2
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        106,
        {
          "id": 351,
          "metadata": 1
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        106,
        {
          "id": 351,
          "metadata": 0
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        45,
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        45,
        {
          "id": 351,
          "metadata": 15
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        45,
        {
          "id": 351,
          "metadata": 14
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        45,
        {
          "id": 351,
          "metadata": 13
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        45,
        {
          "id": 351,
          "metadata": 12
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        45,
        {
          "id": 351,
          "metadata": 11
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        45,
        {
          "id": 351,
          "metadata": 10
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        45,
        {
          "id": 351,
          "metadata": 9
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        45,
        {
          "id": 351,
          "metadata": 8
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        45,
        {
          "id": 351,
          "metadata": 7
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        45,
        {
          "id": 351,
          "metadata": 6
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        45,
        {
          "id": 351,
          "metadata": 5
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        45,
        {
          "id": 351,
          "metadata": 4
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        45,
        {
          "id": 351,
          "metadata": 3
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        45,
        {
          "id": 351,
          "metadata": 2
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        45,
        {
          "id": 351,
          "metadata": 1
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        45,
        {
          "id": 351,
          "metadata": 0
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 15
          },
          425,
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 15
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 15
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 14
          },
          425,
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 14
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 14
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 13
          },
          425,
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 13
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 13
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 12
          },
          425,
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 12
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 12
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 11
          },
          425,
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 11
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 11
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 10
          },
          425,
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 10
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 10
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 9
          },
          425,
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 9
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 9
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 8
          },
          425,
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 8
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 8
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 7
          },
          425,
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 7
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 7
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 6
          },
          425,
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 6
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 6
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 5
          },
          425,
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 5
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 5
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 4
          },
          425,
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 4
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 4
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 3
          },
          425,
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 3
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 3
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 2
          },
          425,
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 2
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 2
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 1
          },
          425,
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 1
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 1
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 0
          },
          425,
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 0
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 0
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 15
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 15
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          425,
          {
            "id": 351,
            "metadata": 15
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 14
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 14
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          425,
          {
            "id": 351,
            "metadata": 14
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 13
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 13
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          425,
          {
            "id": 351,
            "metadata": 13
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 12
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 12
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          425,
          {
            "id": 351,
            "metadata": 12
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 11
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 11
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          425,
          {
            "id": 351,
            "metadata": 11
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 10
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 10
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          425,
          {
            "id": 351,
            "metadata": 10
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 9
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 9
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          425,
          {
            "id": 351,
            "metadata": 9
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 8
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 8
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          425,
          {
            "id": 351,
            "metadata": 8
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 7
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 7
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          425,
          {
            "id": 351,
            "metadata": 7
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 6
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 6
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          425,
          {
            "id": 351,
            "metadata": 6
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 5
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 5
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          425,
          {
            "id": 351,
            "metadata": 5
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 4
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 4
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          425,
          {
            "id": 351,
            "metadata": 4
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 3
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 3
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          425,
          {
            "id": 351,
            "metadata": 3
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 2
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 2
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          425,
          {
            "id": 351,
            "metadata": 2
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 1
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 1
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          425,
          {
            "id": 351,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 0
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 0
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          425,
          {
            "id": 351,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 4
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 4
        },
        {
          "id": 351,
          "metadata": 15
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 4
        },
        {
          "id": 351,
          "metadata": 14
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 4
        },
        {
          "id": 351,
          "metadata": 13
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 4
        },
        {
          "id": 351,
          "metadata": 12
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 4
        },
        {
          "id": 351,
          "metadata": 11
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 4
        },
        {
          "id": 351,
          "metadata": 10
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 4
        },
        {
          "id": 351,
          "metadata": 9
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 4
        },
        {
          "id": 351,
          "metadata": 8
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 4
        },
        {
          "id": 351,
          "metadata": 7
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 4
        },
        {
          "id": 351,
          "metadata": 6
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 4
        },
        {
          "id": 351,
          "metadata": 5
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 4
        },
        {
          "id": 351,
          "metadata": 4
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 4
        },
        {
          "id": 351,
          "metadata": 3
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 4
        },
        {
          "id": 351,
          "metadata": 2
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 4
        },
        {
          "id": 351,
          "metadata": 1
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 4
        },
        {
          "id": 351,
          "metadata": 0
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 1
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 15
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 14
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 13
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 12
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 11
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 10
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 9
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 8
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 7
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 6
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 5
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 4
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 3
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 2
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 1
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 0
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 38,
          "metadata": 8
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 38,
          "metadata": 8
        },
        {
          "id": 351,
          "metadata": 15
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 38,
          "metadata": 8
        },
        {
          "id": 351,
          "metadata": 14
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 38,
          "metadata": 8
        },
        {
          "id": 351,
          "metadata": 13
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 38,
          "metadata": 8
        },
        {
          "id": 351,
          "metadata": 12
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 38,
          "metadata": 8
        },
        {
          "id": 351,
          "metadata": 11
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 38,
          "metadata": 8
        },
        {
          "id": 351,
          "metadata": 10
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 38,
          "metadata": 8
        },
        {
          "id": 351,
          "metadata": 9
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 38,
          "metadata": 8
        },
        {
          "id": 351,
          "metadata": 8
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 38,
          "metadata": 8
        },
        {
          "id": 351,
          "metadata": 7
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 38,
          "metadata": 8
        },
        {
          "id": 351,
          "metadata": 6
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 38,
          "metadata": 8
        },
        {
          "id": 351,
          "metadata": 5
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 38,
          "metadata": 8
        },
        {
          "id": 351,
          "metadata": 4
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 38,
          "metadata": 8
        },
        {
          "id": 351,
          "metadata": 3
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 38,
          "metadata": 8
        },
        {
          "id": 351,
          "metadata": 2
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 38,
          "metadata": 8
        },
        {
          "id": 351,
          "metadata": 1
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 38,
          "metadata": 8
        },
        {
          "id": 351,
          "metadata": 0
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 322,
          "metadata": 1
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 322,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 15
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 322,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 14
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 322,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 13
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 322,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 12
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 322,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 11
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 322,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 10
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 322,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 9
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 322,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 8
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 322,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 7
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 322,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 6
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 322,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 5
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 322,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 4
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 322,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 3
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 322,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 2
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 322,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 1
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 322,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 0
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    }
  ],
  "426": [
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 1
          },
          {
            "id": 5,
            "metadata": 1
          }
        ],
        [
          {
            "id": 5,
            "metadata": 1
          },
          {
            "id": 5,
            "metadata": 1
          }
        ],
        [
          {
            "id": 5,
            "metadata": 1
          },
          {
            "id": 5,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 3,
        "id": 426,
        "metadata": 0
      }
    }
  ],
  "427": [
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 2
          },
          {
            "id": 5,
            "metadata": 2
          }
        ],
        [
          {
            "id": 5,
            "metadata": 2
          },
          {
            "id": 5,
            "metadata": 2
          }
        ],
        [
          {
            "id": 5,
            "metadata": 2
          },
          {
            "id": 5,
            "metadata": 2
          }
        ]
      ],
      "result": {
        "count": 3,
        "id": 427,
        "metadata": 0
      }
    }
  ],
  "428": [
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 3
          },
          {
            "id": 5,
            "metadata": 3
          }
        ],
        [
          {
            "id": 5,
            "metadata": 3
          },
          {
            "id": 5,
            "metadata": 3
          }
        ],
        [
          {
            "id": 5,
            "metadata": 3
          },
          {
            "id": 5,
            "metadata": 3
          }
        ]
      ],
      "result": {
        "count": 3,
        "id": 428,
        "metadata": 0
      }
    }
  ],
  "429": [
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 4
          },
          {
            "id": 5,
            "metadata": 4
          }
        ],
        [
          {
            "id": 5,
            "metadata": 4
          },
          {
            "id": 5,
            "metadata": 4
          }
        ],
        [
          {
            "id": 5,
            "metadata": 4
          },
          {
            "id": 5,
            "metadata": 4
          }
        ]
      ],
      "result": {
        "count": 3,
        "id": 429,
        "metadata": 0
      }
    }
  ],
  "430": [
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 5
          },
          {
            "id": 5,
            "metadata": 5
          }
        ],
        [
          {
            "id": 5,
            "metadata": 5
          },
          {
            "id": 5,
            "metadata": 5
          }
        ],
        [
          {
            "id": 5,
            "metadata": 5
          },
          {
            "id": 5,
            "metadata": 5
          }
        ]
      ],
      "result": {
        "count": 3,
        "id": 430,
        "metadata": 0
      }
    }
  ]
}
},{}],345:[function(require,module,exports){
module.exports={
  "version":47,
  "minecraftVersion":"1.8.8",
  "majorVersion":"1.8"
}
},{}],346:[function(require,module,exports){
module.exports=[
  {
    "id": "",
    "name": "Player",
    "slots": [
      {
        "name": "craft result",
        "index": 0
      },
      {
        "name": "craft grid",
        "index": 1,
        "size": 4
      },
      {
        "name": "armor",
        "index": 5,
        "size": 4
      },
      {
        "name": "helmet",
        "index": 5
      },
      {
        "name": "chestplate",
        "index": 6
      },
      {
        "name": "leggings",
        "index": 7
      },
      {
        "name": "boots",
        "index": 8
      }
    ]
  },
  {
    "id": "EntityHorse",
    "name": "Horse",
    "slots": [
      {
        "name": "saddle",
        "index": 0
      },
      {
        "name": "armor",
        "index": 1
      },
      {
        "name": "storage",
        "index": 2,
        "size": 15
      }
    ],
    "openedWith": [
      {
        "type": "entity",
        "id": 100
      }
    ]
  },
  {
    "id": "minecraft:anvil",
    "name": "Anvil",
    "slots": [
      {
        "name": "tool",
        "index": 0
      },
      {
        "name": "combined",
        "index": 1
      },
      {
        "name": "result",
        "index": 2
      }
    ],
    "properties": [
      "repair cost"
    ]
  },
  {
    "id": "minecraft:beacon",
    "name": "Beacon",
    "slots": [
      {
        "name": "input",
        "index": 0
      }
    ],
    "properties": [
      "level",
      "effect 1",
      "effect 2"
    ],
    "openedWith": [
      {
        "type": "block",
        "id": 138
      }
    ]
  },
  {
    "id": "minecraft:brewing_stand",
    "name": "Brewing Stand",
    "slots": [
      {
        "name": "ingredient",
        "index": 3
      },
      {
        "name": "result",
        "index": 0,
        "size": 3
      }
    ],
    "properties": [
      "brew time"
    ],
    "openedWith": [
      {
        "type": "block",
        "id": 117
      }
    ]
  },
  {
    "id": "minecraft:chest",
    "name": "Chest"
  },
  {
    "id": "minecraft:container",
    "name": "Container"
  },
  {
    "id": "minecraft:crafting_table",
    "name": "Workbench",
    "slots": [
      {
        "name": "craft result",
        "index": 0
      },
      {
        "name": "craft grid",
        "index": 1,
        "size": 9
      }
    ]
  },
  {
    "id": "minecraft:dispenser",
    "name": "Dispenser"
  },
  {
    "id": "minecraft:dropper",
    "name": "Dropper"
  },
  {
    "id": "minecraft:enchanting_table",
    "name": "Enchantment Table",
    "slots": [
      {
        "name": "enchanted",
        "index": 0
      },
      {
        "name": "lapis",
        "index": 1
      }
    ],
    "properties": [
      "xp 1",
      "xp 2",
      "xp 3",
      "seed",
      "tooltip 1",
      "tooltip 2",
      "tooltip 3"
    ]
  },
  {
    "id": "minecraft:furnace",
    "name": "Furnace",
    "slots": [
      {
        "name": "smelted",
        "index": 0
      },
      {
        "name": "fuel",
        "index": 1
      },
      {
        "name": "result",
        "index": 2
      }
    ],
    "properties": [
      "fuel",
      "fuel max",
      "progress",
      "progress max"
    ]
  },
  {
    "id": "minecraft:hopper",
    "name": "Hopper"
  },
  {
    "id": "minecraft:villager",
    "name": "NPC Trade",
    "slots": [
      {
        "name": "give 1",
        "index": 0
      },
      {
        "name": "give 2",
        "index": 1
      },
      {
        "name": "take",
        "index": 2
      }
    ]
  }
]

},{}],347:[function(require,module,exports){
arguments[4][336][0].apply(exports,arguments)
},{"dup":336}],348:[function(require,module,exports){
module.exports=[
  {
    "id": 0,
    "displayName": "Air",
    "name": "air",
    "hardness": 0,
    "stackSize": 0,
    "diggable": false,
    "boundingBox": "empty",
    "drops": []
  },
  {
    "id": 1,
    "displayName": "Stone",
    "name": "stone",
    "hardness": 1.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "variations": [
      {
        "metadata": 0,
        "displayName": "Stone"
      },
      {
        "metadata": 1,
        "displayName": "Granite"
      },
      {
        "metadata": 2,
        "displayName": "Polished Granite"
      },
      {
        "metadata": 3,
        "displayName": "Diorite"
      },
      {
        "metadata": 4,
        "displayName": "Polished Diorite"
      },
      {
        "metadata": 5,
        "displayName": "Andesite"
      },
      {
        "metadata": 6,
        "displayName": "Polished Andesite"
      }
    ],
    "drops": [
      {
        "drop": 4
      }
    ]
  },
  {
    "id": 2,
    "displayName": "Grass Block",
    "name": "grass",
    "hardness": 0.6,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "dirt",
    "drops": [
      {
        "drop": {
          "id": 3,
          "metadata": 0
        }
      }
    ]
  },
  {
    "id": 3,
    "displayName": "Dirt",
    "name": "dirt",
    "hardness": 0.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "dirt",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Dirt"
      },
      {
        "metadata": 1,
        "displayName": "Coarse Dirt"
      },
      {
        "metadata": 2,
        "displayName": "Podzol"
      }
    ],
    "drops": [
      {
        "drop": 3
      }
    ]
  },
  {
    "id": 4,
    "displayName": "Cobblestone",
    "name": "cobblestone",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 4
      }
    ]
  },
  {
    "id": 5,
    "displayName": "Wood Planks",
    "name": "planks",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Oak Wood Planks"
      },
      {
        "metadata": 1,
        "displayName": "Spruce Wood Planks"
      },
      {
        "metadata": 2,
        "displayName": "Birch Wood Planks"
      },
      {
        "metadata": 3,
        "displayName": "Jungle Wood Planks"
      },
      {
        "metadata": 4,
        "displayName": "Acacia Wood Planks"
      },
      {
        "metadata": 5,
        "displayName": "Dark Oak Wood Planks"
      }
    ],
    "drops": [
      {
        "drop": 5
      }
    ]
  },
  {
    "id": 6,
    "displayName": "Sapling",
    "name": "sapling",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "plant",
    "drops": [
      {
        "drop": 6
      }
    ]
  },
  {
    "id": 7,
    "displayName": "Bedrock",
    "name": "bedrock",
    "hardness": null,
    "stackSize": 64,
    "diggable": false,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 7
      }
    ]
  },
  {
    "id": 8,
    "displayName": "Water",
    "name": "flowing_water",
    "hardness": 100,
    "stackSize": 64,
    "diggable": false,
    "boundingBox": "empty",
    "drops": []
  },
  {
    "id": 9,
    "displayName": "Stationary Water",
    "name": "water",
    "hardness": 100,
    "stackSize": 64,
    "diggable": false,
    "boundingBox": "empty",
    "drops": []
  },
  {
    "id": 10,
    "displayName": "Lava",
    "name": "flowing_lava",
    "hardness": 100,
    "stackSize": 64,
    "diggable": false,
    "boundingBox": "empty",
    "drops": []
  },
  {
    "id": 11,
    "displayName": "Stationary Lava",
    "name": "lava",
    "hardness": 100,
    "stackSize": 64,
    "diggable": false,
    "boundingBox": "empty",
    "drops": []
  },
  {
    "id": 12,
    "displayName": "Sand",
    "name": "sand",
    "hardness": 0.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "dirt",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Sand"
      },
      {
        "metadata": 1,
        "displayName": "Red sand"
      }
    ],
    "drops": [
      {
        "drop": 12
      }
    ]
  },
  {
    "id": 13,
    "displayName": "Gravel",
    "name": "gravel",
    "hardness": 0.6,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "dirt",
    "drops": [
      {
        "drop": 13,
        "minCount": 0.9
      },
      {
        "drop": 318,
        "minCount": 0.1
      }
    ]
  },
  {
    "id": 14,
    "displayName": "Gold Ore",
    "name": "gold_ore",
    "hardness": 3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "278": true
    },
    "drops": [
      {
        "drop": 14
      }
    ]
  },
  {
    "id": 15,
    "displayName": "Iron Ore",
    "name": "iron_ore",
    "hardness": 3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "274": true,
      "278": true
    },
    "drops": [
      {
        "drop": 15
      }
    ]
  },
  {
    "id": 16,
    "displayName": "Coal Ore",
    "name": "coal_ore",
    "hardness": 3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": {
          "id": 263,
          "metadata": 0
        }
      }
    ]
  },
  {
    "id": 17,
    "displayName": "Wood",
    "name": "log",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 17
      }
    ]
  },
  {
    "id": 18,
    "displayName": "Leaves",
    "name": "leaves",
    "hardness": 0.2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "leaves",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Oak Leaves"
      },
      {
        "metadata": 1,
        "displayName": "Spruce Leaves"
      },
      {
        "metadata": 2,
        "displayName": "Birch Leaves"
      },
      {
        "metadata": 3,
        "displayName": "Jungle Leaves"
      },
      {
        "metadata": 4,
        "displayName": "Oak Leaves (no decay)"
      },
      {
        "metadata": 5,
        "displayName": "Spruce Leaves (no decay)"
      },
      {
        "metadata": 6,
        "displayName": "Birch Leaves (no decay)"
      },
      {
        "metadata": 7,
        "displayName": "Jungle Leaves (no decay)"
      },
      {
        "metadata": 8,
        "displayName": "Oak Leaves (check decay)"
      },
      {
        "metadata": 9,
        "displayName": "Spruce Leaves (check decay)"
      },
      {
        "metadata": 10,
        "displayName": "Birch Leaves (check decay)"
      },
      {
        "metadata": 11,
        "displayName": "Jungle Leaves (check decay)"
      },
      {
        "metadata": 12,
        "displayName": "Oak Leaves (no decay and check decay)"
      },
      {
        "metadata": 13,
        "displayName": "Spruce Leaves (no decay and check decay)"
      },
      {
        "metadata": 14,
        "displayName": "Birch Leaves (no decay and check decay)"
      },
      {
        "metadata": 15,
        "displayName": "Jungle Leaves (no decay and check decay)"
      }
    ],
    "drops": [
      {
        "drop": 6,
        "minCount": 0,
        "maxCount": 1
      },
      {
        "drop": 260,
        "minCount": 0,
        "maxCount": 1
      }
    ]
  },
  {
    "id": 19,
    "displayName": "Sponge",
    "name": "sponge",
    "hardness": 0.6,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Sponge"
      },
      {
        "metadata": 1,
        "displayName": "Wet Sponge"
      }
    ],
    "drops": [
      {
        "drop": 19
      }
    ]
  },
  {
    "id": 20,
    "displayName": "Glass",
    "name": "glass",
    "hardness": 0.3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "drops": []
  },
  {
    "id": 21,
    "displayName": "Lapis Lazuli Ore",
    "name": "lapis_ore",
    "hardness": 3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "274": true,
      "278": true
    },
    "drops": [
      {
        "drop": {
          "id": 351,
          "metadata": 4
        },
        "minCount": 4,
        "maxCount": 8
      }
    ]
  },
  {
    "id": 22,
    "displayName": "Lapis Lazuli Block",
    "name": "lapis_block",
    "hardness": 3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "274": true,
      "278": true
    },
    "drops": [
      {
        "drop": 22
      }
    ]
  },
  {
    "id": 23,
    "displayName": "Dispenser",
    "name": "dispenser",
    "hardness": 3.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 23
      }
    ]
  },
  {
    "id": 24,
    "displayName": "Sandstone",
    "name": "sandstone",
    "hardness": 0.8,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "variations": [
      {
        "metadata": 0,
        "displayName": "Sandstone"
      },
      {
        "metadata": 1,
        "displayName": "Chiseled sandstone"
      },
      {
        "metadata": 2,
        "displayName": "Smooth sandstone"
      }
    ],
    "drops": [
      {
        "drop": 24
      }
    ]
  },
  {
    "id": 25,
    "displayName": "Note Block",
    "name": "noteblock",
    "hardness": 0.8,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 25
      }
    ]
  },
  {
    "id": 26,
    "displayName": "Bed",
    "name": "bed",
    "hardness": 0.2,
    "stackSize": 1,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 26
      }
    ]
  },
  {
    "id": 27,
    "displayName": "Powered Rail",
    "name": "golden_rail",
    "hardness": 0.7,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "rock",
    "drops": [
      {
        "drop": 27
      }
    ]
  },
  {
    "id": 28,
    "displayName": "Detector Rail",
    "name": "detector_rail",
    "hardness": 0.7,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "rock",
    "drops": [
      {
        "drop": 28
      }
    ]
  },
  {
    "id": 29,
    "displayName": "Sticky Piston",
    "name": "sticky_piston",
    "hardness": 0.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 29
      }
    ]
  },
  {
    "id": 30,
    "displayName": "Cobweb",
    "name": "web",
    "hardness": 4,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "web",
    "harvestTools": {
      "267": true,
      "268": true,
      "272": true,
      "276": true,
      "283": true,
      "359": true
    },
    "drops": [
      {
        "drop": 287
      }
    ]
  },
  {
    "id": 31,
    "displayName": "Grass",
    "name": "tallgrass",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "dirt",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Shrub"
      },
      {
        "metadata": 1,
        "displayName": "Tall Grass"
      },
      {
        "metadata": 2,
        "displayName": "Fern"
      }
    ],
    "drops": [
      {
        "drop": 295,
        "minCount": 0,
        "maxCount": 1
      }
    ]
  },
  {
    "id": 32,
    "displayName": "Dead Bush",
    "name": "deadbush",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "plant",
    "drops": [
      {
        "drop": 280,
        "minCount": 0
      }
    ]
  },
  {
    "id": 33,
    "displayName": "Piston",
    "name": "piston",
    "hardness": 0.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 33
      }
    ]
  },
  {
    "id": 34,
    "displayName": "Piston Head",
    "name": "piston_head",
    "hardness": 0.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 34
      }
    ]
  },
  {
    "id": 35,
    "displayName": "Wool",
    "name": "wool",
    "hardness": 0.8,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wool",
    "drops": [
      {
        "drop": 35
      }
    ]
  },
  {
    "id": 36,
    "displayName": "Block moved by Piston",
    "name": "piston_extension",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 36
      }
    ]
  },
  {
    "id": 37,
    "displayName": "Dandelion",
    "name": "yellow_flower",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "plant",
    "drops": [
      {
        "drop": 37
      }
    ]
  },
  {
    "id": 38,
    "displayName": "Poppy",
    "name": "red_flower",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "plant",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Poppy"
      },
      {
        "metadata": 1,
        "displayName": "Blue Orchid"
      },
      {
        "metadata": 2,
        "displayName": "Allium"
      },
      {
        "metadata": 3,
        "displayName": "Azure Bluet"
      },
      {
        "metadata": 4,
        "displayName": "Red Tulip"
      },
      {
        "metadata": 5,
        "displayName": "Orange Tulip"
      },
      {
        "metadata": 6,
        "displayName": "White Tulip"
      },
      {
        "metadata": 7,
        "displayName": "Pink Tulip"
      },
      {
        "metadata": 8,
        "displayName": "Oxeye Daisy"
      }
    ],
    "drops": [
      {
        "drop": 38
      }
    ]
  },
  {
    "id": 39,
    "displayName": "Brown Mushroom",
    "name": "brown_mushroom",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "plant",
    "drops": [
      {
        "drop": 39
      }
    ]
  },
  {
    "id": 40,
    "displayName": "Red Mushroom",
    "name": "red_mushroom",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "plant",
    "drops": [
      {
        "drop": 40
      }
    ]
  },
  {
    "id": 41,
    "displayName": "Block of Gold",
    "name": "gold_block",
    "hardness": 3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "278": true
    },
    "drops": [
      {
        "drop": 41
      }
    ]
  },
  {
    "id": 42,
    "displayName": "Block of Iron",
    "name": "iron_block",
    "hardness": 5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "274": true,
      "278": true
    },
    "drops": [
      {
        "drop": 42
      }
    ]
  },
  {
    "id": 43,
    "displayName": "Double Stone Slab",
    "name": "double_stone_slab",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "variations": [
      {
        "metadata": 0,
        "displayName": "Double Stone Slab"
      },
      {
        "metadata": 1,
        "displayName": "Double Sandstone Slab"
      },
      {
        "metadata": 2,
        "displayName": "Double (Stone) Wooden Slab"
      },
      {
        "metadata": 3,
        "displayName": "Double Cobblestone Slab"
      },
      {
        "metadata": 4,
        "displayName": "Double Bricks Slab"
      },
      {
        "metadata": 5,
        "displayName": "Double Stone Brick Slab"
      },
      {
        "metadata": 6,
        "displayName": "Double Nether Brick Slab"
      },
      {
        "metadata": 7,
        "displayName": "Double Quartz Slab"
      },
      {
        "metadata": 8,
        "displayName": "Smooth Double Stone Slab"
      },
      {
        "metadata": 9,
        "displayName": "Smooth Double Sandstone Slab"
      },
      {
        "metadata": 15,
        "displayName": "Tile Double Quartz Slab (note the underside)"
      }
    ],
    "drops": [
      {
        "drop": {
          "id": 44,
          "metadata": 0
        }
      }
    ]
  },
  {
    "id": 44,
    "displayName": "Stone Slab",
    "name": "stone_slab",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "variations": [
      {
        "metadata": 0,
        "displayName": "Stone Slab"
      },
      {
        "metadata": 1,
        "displayName": "Sandstone Slab"
      },
      {
        "metadata": 2,
        "displayName": "(Stone) Wooden Slab"
      },
      {
        "metadata": 3,
        "displayName": "Cobblestone Slab"
      },
      {
        "metadata": 4,
        "displayName": "Bricks Slab"
      },
      {
        "metadata": 5,
        "displayName": "Stone Brick Slab"
      },
      {
        "metadata": 6,
        "displayName": "Nether Brick Slab"
      },
      {
        "metadata": 7,
        "displayName": "Quartz Slab"
      },
      {
        "metadata": 8,
        "displayName": "Upper Stone Slab"
      },
      {
        "metadata": 9,
        "displayName": "Upper Sandstone Slab"
      },
      {
        "metadata": 10,
        "displayName": "Upper (Stone) Wooden Slab"
      },
      {
        "metadata": 11,
        "displayName": "Upper Cobblestone Slab"
      },
      {
        "metadata": 12,
        "displayName": "Upper Bricks Slab"
      },
      {
        "metadata": 13,
        "displayName": "Upper Stone Brick Slab"
      },
      {
        "metadata": 14,
        "displayName": "Upper Nether Brick Slab"
      },
      {
        "metadata": 15,
        "displayName": "Upper Quartz Slab"
      }
    ],
    "drops": [
      {
        "drop": {
          "id": 44,
          "metadata": 0
        }
      }
    ]
  },
  {
    "id": 45,
    "displayName": "Bricks",
    "name": "brick_block",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 45
      }
    ]
  },
  {
    "id": 46,
    "displayName": "TNT",
    "name": "tnt",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Drops a TNT item when broken"
      },
      {
        "metadata": 1,
        "displayName": "Activates when broken"
      }
    ],
    "drops": [
      {
        "drop": 46
      }
    ]
  },
  {
    "id": 47,
    "displayName": "Bookshelf",
    "name": "bookshelf",
    "hardness": 1.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 340,
        "minCount": 3
      }
    ]
  },
  {
    "id": 48,
    "displayName": "Moss Stone",
    "name": "mossy_cobblestone",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 48
      }
    ]
  },
  {
    "id": 49,
    "displayName": "Obsidian",
    "name": "obsidian",
    "hardness": 50,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "278": true
    },
    "drops": [
      {
        "drop": 49
      }
    ]
  },
  {
    "id": 50,
    "displayName": "Torch",
    "name": "torch",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Facing east (attached to a block to its west)"
      },
      {
        "metadata": 1,
        "displayName": "Facing west (attached to a block to its east)"
      },
      {
        "metadata": 2,
        "displayName": "Facing south (attached to a block to its north)"
      },
      {
        "metadata": 3,
        "displayName": "Facing north (attached to a block to its south)"
      },
      {
        "metadata": 4,
        "displayName": "Facing up (attached to a block beneath it)"
      }
    ],
    "drops": [
      {
        "drop": 50
      }
    ]
  },
  {
    "id": 51,
    "displayName": "Fire",
    "name": "fire",
    "hardness": 0,
    "stackSize": 0,
    "diggable": true,
    "boundingBox": "empty",
    "drops": []
  },
  {
    "id": 52,
    "displayName": "Monster Spawner",
    "name": "mob_spawner",
    "hardness": 5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": []
  },
  {
    "id": 53,
    "displayName": "Oak Wood Stairs",
    "name": "oak_stairs",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 53
      }
    ]
  },
  {
    "id": 54,
    "displayName": "Chest",
    "name": "chest",
    "hardness": 2.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 54
      }
    ]
  },
  {
    "id": 55,
    "displayName": "Redstone Wire",
    "name": "redstone_wire",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 55
      }
    ]
  },
  {
    "id": 56,
    "displayName": "Diamond Ore",
    "name": "diamond_ore",
    "hardness": 3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "278": true
    },
    "drops": [
      {
        "drop": 264
      }
    ]
  },
  {
    "id": 57,
    "displayName": "Block of Diamond",
    "name": "diamond_block",
    "hardness": 5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "278": true
    },
    "drops": [
      {
        "drop": 57
      }
    ]
  },
  {
    "id": 58,
    "displayName": "Crafting Table",
    "name": "crafting_table",
    "hardness": 2.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 58
      }
    ]
  },
  {
    "id": 59,
    "displayName": "Wheat",
    "name": "wheat",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "plant",
    "drops": [
      {
        "drop": 295
      },
      {
        "drop": 295,
        "minCount": 0,
        "maxCount": 3
      },
      {
        "drop": 296
      }
    ]
  },
  {
    "id": 60,
    "displayName": "Farmland",
    "name": "farmland",
    "hardness": 0.6,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "dirt",
    "drops": [
      {
        "drop": {
          "id": 3,
          "metadata": 0
        }
      }
    ]
  },
  {
    "id": 61,
    "displayName": "Furnace",
    "name": "furnace",
    "hardness": 3.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 61
      }
    ]
  },
  {
    "id": 62,
    "displayName": "Burning Furnace",
    "name": "lit_furnace",
    "hardness": 3.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 61
      }
    ]
  },
  {
    "id": 63,
    "displayName": "Standing Sign",
    "name": "standing_sign",
    "hardness": 1,
    "stackSize": 16,
    "diggable": true,
    "boundingBox": "empty",
    "material": "wood",
    "drops": [
      {
        "drop": 63
      }
    ]
  },
  {
    "id": 64,
    "displayName": "Oak Door",
    "name": "wooden_door",
    "hardness": 3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 64
      }
    ]
  },
  {
    "id": 65,
    "displayName": "Ladder",
    "name": "ladder",
    "hardness": 0.4,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 65
      }
    ]
  },
  {
    "id": 66,
    "displayName": "Rail",
    "name": "rail",
    "hardness": 0.7,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "rock",
    "drops": [
      {
        "drop": 66
      }
    ]
  },
  {
    "id": 67,
    "displayName": "Cobblestone Stairs",
    "name": "stone_stairs",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 67
      }
    ]
  },
  {
    "id": 68,
    "displayName": "Wall Sign",
    "name": "wall_sign",
    "hardness": 1,
    "stackSize": 16,
    "diggable": true,
    "boundingBox": "empty",
    "material": "wood",
    "drops": [
      {
        "drop": 68
      }
    ]
  },
  {
    "id": 69,
    "displayName": "Lever",
    "name": "lever",
    "hardness": 0.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "drops": [
      {
        "drop": 69
      }
    ]
  },
  {
    "id": 70,
    "displayName": "Stone Pressure Plate",
    "name": "stone_pressure_plate",
    "hardness": 0.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 70
      }
    ]
  },
  {
    "id": 71,
    "displayName": "Iron Door",
    "name": "iron_door",
    "hardness": 5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 71
      }
    ]
  },
  {
    "id": 72,
    "displayName": "Wooden Pressure Plate",
    "name": "wooden_pressure_plate",
    "hardness": 0.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "wood",
    "drops": [
      {
        "drop": 72
      }
    ]
  },
  {
    "id": 73,
    "displayName": "Redstone Ore",
    "name": "redstone_ore",
    "hardness": 3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "278": true
    },
    "drops": [
      {
        "drop": 331,
        "minCount": 4,
        "maxCount": 5
      }
    ]
  },
  {
    "id": 74,
    "displayName": "Glowing Redstone Ore",
    "name": "lit_redstone_ore",
    "hardness": 3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "278": true
    },
    "drops": [
      {
        "drop": 331,
        "minCount": 4,
        "maxCount": 5
      }
    ]
  },
  {
    "id": 75,
    "displayName": "Redstone Torch (inactive)",
    "name": "unlit_redstone_torch",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Facing east (attached to a block to its west)"
      },
      {
        "metadata": 1,
        "displayName": "Facing west (attached to a block to its east)"
      },
      {
        "metadata": 2,
        "displayName": "Facing south (attached to a block to its north)"
      },
      {
        "metadata": 3,
        "displayName": "Facing north (attached to a block to its south)"
      },
      {
        "metadata": 4,
        "displayName": "Facing up (attached to a block beneath it)"
      }
    ],
    "drops": [
      {
        "drop": 75
      }
    ]
  },
  {
    "id": 76,
    "displayName": "Redstone Torch (active)",
    "name": "redstone_torch",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Facing east (attached to a block to its west)"
      },
      {
        "metadata": 1,
        "displayName": "Facing west (attached to a block to its east)"
      },
      {
        "metadata": 2,
        "displayName": "Facing south (attached to a block to its north)"
      },
      {
        "metadata": 3,
        "displayName": "Facing north (attached to a block to its south)"
      },
      {
        "metadata": 4,
        "displayName": "Facing up (attached to a block beneath it)"
      }
    ],
    "drops": [
      {
        "drop": 76
      }
    ]
  },
  {
    "id": 77,
    "displayName": "Stone Button",
    "name": "stone_button",
    "hardness": 0.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "drops": [
      {
        "drop": 77
      }
    ]
  },
  {
    "id": 78,
    "displayName": "Snow (layer)",
    "name": "snow_layer",
    "hardness": 0.2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "dirt",
    "harvestTools": {
      "256": true,
      "269": true,
      "273": true,
      "277": true,
      "284": true
    },
    "variations": [
      {
        "metadata": 0,
        "displayName": "One layer, 2 pixels thick"
      },
      {
        "metadata": 1,
        "displayName": "Two layers, 4 pixels thick"
      },
      {
        "metadata": 2,
        "displayName": "Three layers, 6 pixels thick"
      },
      {
        "metadata": 3,
        "displayName": "Four layers, 8 pixels thick"
      },
      {
        "metadata": 4,
        "displayName": "Five layers, 10 pixels thick"
      },
      {
        "metadata": 5,
        "displayName": "Six layers, 12 pixels thick"
      },
      {
        "metadata": 6,
        "displayName": "Seven layers, 14 pixels thick"
      },
      {
        "metadata": 7,
        "displayName": "Eight layers, 16 pixels thick"
      }
    ],
    "drops": [
      {
        "drop": 332,
        "minCount": 2,
        "maxCount": 9
      }
    ]
  },
  {
    "id": 79,
    "displayName": "Ice",
    "name": "ice",
    "hardness": 0.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "drops": []
  },
  {
    "id": 80,
    "displayName": "Snow",
    "name": "snow",
    "hardness": 0.2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "dirt",
    "harvestTools": {
      "256": true,
      "269": true,
      "273": true,
      "277": true,
      "284": true
    },
    "drops": [
      {
        "drop": 332,
        "minCount": 4
      }
    ]
  },
  {
    "id": 81,
    "displayName": "Cactus",
    "name": "cactus",
    "hardness": 0.4,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "plant",
    "drops": [
      {
        "drop": 81
      }
    ]
  },
  {
    "id": 82,
    "displayName": "Clay",
    "name": "clay",
    "hardness": 0.6,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "dirt",
    "drops": [
      {
        "drop": 337,
        "minCount": 4
      }
    ]
  },
  {
    "id": 83,
    "displayName": "Sugar Cane",
    "name": "reeds",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "plant",
    "drops": [
      {
        "drop": 83
      }
    ]
  },
  {
    "id": 84,
    "displayName": "Jukebox",
    "name": "jukebox",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "variations": [
      {
        "metadata": 0,
        "displayName": "No disc inserted"
      },
      {
        "metadata": 1,
        "displayName": "Contains a disc"
      }
    ],
    "drops": [
      {
        "drop": 84
      }
    ]
  },
  {
    "id": 85,
    "displayName": "Fence",
    "name": "fence",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 85
      }
    ]
  },
  {
    "id": 86,
    "displayName": "Pumpkin",
    "name": "pumpkin",
    "hardness": 1,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "plant",
    "drops": [
      {
        "drop": 86
      }
    ]
  },
  {
    "id": 87,
    "displayName": "Netherrack",
    "name": "netherrack",
    "hardness": 0.4,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 87
      }
    ]
  },
  {
    "id": 88,
    "displayName": "Soul Sand",
    "name": "soul_sand",
    "hardness": 0.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "dirt",
    "drops": [
      {
        "drop": 88
      }
    ]
  },
  {
    "id": 89,
    "displayName": "Glowstone",
    "name": "glowstone",
    "hardness": 0.3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 348,
        "minCount": 2,
        "maxCount": 4
      }
    ]
  },
  {
    "id": 90,
    "displayName": "Nether Portal",
    "name": "portal",
    "hardness": null,
    "stackSize": 0,
    "diggable": false,
    "boundingBox": "empty",
    "drops": []
  },
  {
    "id": 91,
    "displayName": "Jack o'Lantern",
    "name": "lit_pumpkin",
    "hardness": 1,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "plant",
    "drops": [
      {
        "drop": 91
      }
    ]
  },
  {
    "id": 92,
    "displayName": "Cake",
    "name": "cake",
    "hardness": 0.5,
    "stackSize": 1,
    "diggable": true,
    "boundingBox": "empty",
    "drops": []
  },
  {
    "id": 93,
    "displayName": "Redstone Repeater (inactive)",
    "name": "unpowered_repeater",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 93
      }
    ]
  },
  {
    "id": 94,
    "displayName": "Redstone Repeater (active)",
    "name": "powered_repeater",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 94
      }
    ]
  },
  {
    "id": 95,
    "displayName": "Stained Glass",
    "name": "stained_glass",
    "hardness": 0.3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "variations": [
      {
        "metadata": 0,
        "displayName": "White Stained Glass"
      },
      {
        "metadata": 1,
        "displayName": "Orange Stained Glass"
      },
      {
        "metadata": 2,
        "displayName": "Magenta Stained Glass"
      },
      {
        "metadata": 3,
        "displayName": "Light Blue Stained Glass"
      },
      {
        "metadata": 4,
        "displayName": "Yellow Stained Glass"
      },
      {
        "metadata": 5,
        "displayName": "Lime Stained Glass"
      },
      {
        "metadata": 6,
        "displayName": "Pink Stained Glass"
      },
      {
        "metadata": 7,
        "displayName": "Gray Stained Glass"
      },
      {
        "metadata": 8,
        "displayName": "Light Gray Stained Glass"
      },
      {
        "metadata": 9,
        "displayName": "Cyan Stained Glass"
      },
      {
        "metadata": 10,
        "displayName": "Purple Stained Glass"
      },
      {
        "metadata": 11,
        "displayName": "Blue Stained Glass"
      },
      {
        "metadata": 12,
        "displayName": "Brown Stained Glass"
      },
      {
        "metadata": 13,
        "displayName": "Green Stained Glass"
      },
      {
        "metadata": 14,
        "displayName": "Red Stained Glass"
      },
      {
        "metadata": 15,
        "displayName": "Black Stained Glass"
      }
    ],
    "drops": []
  },
  {
    "id": 96,
    "displayName": "Trapdoor",
    "name": "trapdoor",
    "hardness": 3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 96
      }
    ]
  },
  {
    "id": 97,
    "displayName": "Monster Egg",
    "name": "monster_egg",
    "hardness": 0.75,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Stone Monster Egg"
      },
      {
        "metadata": 1,
        "displayName": "Cobblestone Monster Egg"
      },
      {
        "metadata": 2,
        "displayName": "Stone Brick Monster Egg"
      },
      {
        "metadata": 3,
        "displayName": "Mossy Stone Brick Monster Egg"
      },
      {
        "metadata": 4,
        "displayName": "Cracked Stone Brick Monster Egg"
      },
      {
        "metadata": 5,
        "displayName": "Chiseled Stone Brick Monster Egg"
      }
    ],
    "drops": []
  },
  {
    "id": 98,
    "displayName": "Stone Bricks",
    "name": "stonebrick",
    "hardness": 1.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "variations": [
      {
        "metadata": 0,
        "displayName": "Stone brick"
      },
      {
        "metadata": 1,
        "displayName": "Mossy stone brick"
      },
      {
        "metadata": 2,
        "displayName": "Cracked stone brick"
      },
      {
        "metadata": 3,
        "displayName": "Chiseled stone brick"
      }
    ],
    "drops": [
      {
        "drop": 98
      }
    ]
  },
  {
    "id": 99,
    "displayName": "Brown Mushroom (block)",
    "name": "brown_mushroom_block",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Pores on all sides"
      },
      {
        "metadata": 1,
        "displayName": "Cap texture on top, west and north"
      },
      {
        "metadata": 2,
        "displayName": "Cap texture on top and north"
      },
      {
        "metadata": 3,
        "displayName": "Cap texture on top, north and east"
      },
      {
        "metadata": 4,
        "displayName": "Cap texture on top and west"
      },
      {
        "metadata": 5,
        "displayName": "Cap texture on top"
      },
      {
        "metadata": 6,
        "displayName": "Cap texture on top and east"
      },
      {
        "metadata": 7,
        "displayName": "Cap texture on top, south and west"
      },
      {
        "metadata": 8,
        "displayName": "Cap texture on top and south"
      },
      {
        "metadata": 9,
        "displayName": "Cap texture on top, east and south"
      },
      {
        "metadata": 10,
        "displayName": "Stem texture on all four sides, pores on top and bottom"
      },
      {
        "metadata": 14,
        "displayName": "Cap texture on all six sides"
      },
      {
        "metadata": 15,
        "displayName": "Stem texture on all six sides"
      }
    ],
    "drops": [
      {
        "drop": 40,
        "minCount": 0,
        "maxCount": 2
      }
    ]
  },
  {
    "id": 100,
    "displayName": "Red Mushroom (block)",
    "name": "red_mushroom_block",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Pores on all sides"
      },
      {
        "metadata": 1,
        "displayName": "Cap texture on top, west and north"
      },
      {
        "metadata": 2,
        "displayName": "Cap texture on top and north"
      },
      {
        "metadata": 3,
        "displayName": "Cap texture on top, north and east"
      },
      {
        "metadata": 4,
        "displayName": "Cap texture on top and west"
      },
      {
        "metadata": 5,
        "displayName": "Cap texture on top"
      },
      {
        "metadata": 6,
        "displayName": "Cap texture on top and east"
      },
      {
        "metadata": 7,
        "displayName": "Cap texture on top, south and west"
      },
      {
        "metadata": 8,
        "displayName": "Cap texture on top and south"
      },
      {
        "metadata": 9,
        "displayName": "Cap texture on top, east and south"
      },
      {
        "metadata": 10,
        "displayName": "Stem texture on all four sides, pores on top and bottom"
      },
      {
        "metadata": 14,
        "displayName": "Cap texture on all six sides"
      },
      {
        "metadata": 15,
        "displayName": "Stem texture on all six sides"
      }
    ],
    "drops": [
      {
        "drop": 40,
        "minCount": 0,
        "maxCount": 2
      }
    ]
  },
  {
    "id": 101,
    "displayName": "Iron Bars",
    "name": "iron_bars",
    "hardness": 5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 101
      }
    ]
  },
  {
    "id": 102,
    "displayName": "Glass Pane",
    "name": "glass_pane",
    "hardness": 0.3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "drops": []
  },
  {
    "id": 103,
    "displayName": "Melon",
    "name": "melon_block",
    "hardness": 1,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "plant",
    "drops": [
      {
        "drop": 360,
        "minCount": 3,
        "maxCount": 7
      }
    ]
  },
  {
    "id": 104,
    "displayName": "Pumpkin Stem",
    "name": "pumpkin_stem",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "plant",
    "drops": [
      {
        "drop": 361,
        "minCount": 0,
        "maxCount": 3
      }
    ]
  },
  {
    "id": 105,
    "displayName": "Melon Stem",
    "name": "melon_stem",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "plant",
    "drops": [
      {
        "drop": 362,
        "minCount": 0,
        "maxCount": 3
      }
    ]
  },
  {
    "id": 106,
    "displayName": "Vines",
    "name": "vine",
    "hardness": 0.2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "plant",
    "drops": [
      {
        "drop": 106
      }
    ]
  },
  {
    "id": 107,
    "displayName": "Fence Gate",
    "name": "fence_gate",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 107
      }
    ]
  },
  {
    "id": 108,
    "displayName": "Brick Stairs",
    "name": "brick_stairs",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 108
      }
    ]
  },
  {
    "id": 109,
    "displayName": "Stone Brick Stairs",
    "name": "stone_brick_stairs",
    "hardness": 1.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 109
      }
    ]
  },
  {
    "id": 110,
    "displayName": "Mycelium",
    "name": "mycelium",
    "hardness": 0.6,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "dirt",
    "drops": [
      {
        "drop": {
          "id": 3,
          "metadata": 0
        }
      }
    ]
  },
  {
    "id": 111,
    "displayName": "Lily Pad",
    "name": "waterlily",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "plant",
    "drops": [
      {
        "drop": 111
      }
    ]
  },
  {
    "id": 112,
    "displayName": "Nether Brick",
    "name": "nether_brick",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 112
      }
    ]
  },
  {
    "id": 113,
    "displayName": "Nether Brick Fence",
    "name": "nether_brick_fence",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 113
      }
    ]
  },
  {
    "id": 114,
    "displayName": "Nether Brick Stairs",
    "name": "nether_brick_stairs",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 114
      }
    ]
  },
  {
    "id": 115,
    "displayName": "Nether Wart",
    "name": "nether_wart",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "plant",
    "drops": [
      {
        "drop": 372
      },
      {
        "drop": 372,
        "minCount": 2,
        "maxCount": 4
      }
    ]
  },
  {
    "id": 116,
    "displayName": "Enchantment Table",
    "name": "enchanting_table",
    "hardness": 5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 116
      }
    ]
  },
  {
    "id": 117,
    "displayName": "Brewing Stand",
    "name": "brewing_stand",
    "hardness": 0.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 117
      }
    ]
  },
  {
    "id": 118,
    "displayName": "Cauldron",
    "name": "cauldron",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 118
      }
    ]
  },
  {
    "id": 119,
    "displayName": "End Portal",
    "name": "end_portal",
    "hardness": null,
    "stackSize": 0,
    "diggable": false,
    "boundingBox": "empty",
    "drops": []
  },
  {
    "id": 120,
    "displayName": "End Portal Frame",
    "name": "end_portal_frame",
    "hardness": null,
    "stackSize": 64,
    "diggable": false,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 120
      }
    ]
  },
  {
    "id": 121,
    "displayName": "End Stone",
    "name": "end_stone",
    "hardness": 3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 121
      }
    ]
  },
  {
    "id": 122,
    "displayName": "Dragon Egg",
    "name": "dragon_egg",
    "hardness": 3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 122
      }
    ]
  },
  {
    "id": 123,
    "displayName": "Redstone Lamp (inactive)",
    "name": "redstone_lamp",
    "hardness": 0.3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 123
      }
    ]
  },
  {
    "id": 124,
    "displayName": "Redstone Lamp (active)",
    "name": "lit_redstone_lamp",
    "hardness": 0.3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 124
      }
    ]
  },
  {
    "id": 125,
    "displayName": "Double Wooden Slab",
    "name": "double_wooden_slab",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Double Oak Wood Slab"
      },
      {
        "metadata": 1,
        "displayName": "Double Spruce Wood Slab"
      },
      {
        "metadata": 2,
        "displayName": "Double Birch Wood Slab"
      },
      {
        "metadata": 3,
        "displayName": "Double Jungle Wood Slab"
      },
      {
        "metadata": 4,
        "displayName": "Double Acacia Wood Slab"
      },
      {
        "metadata": 5,
        "displayName": "Double Dark Oak Wood Slab"
      }
    ],
    "drops": [
      {
        "drop": {
          "id": 44,
          "metadata": 0
        }
      }
    ]
  },
  {
    "id": 126,
    "displayName": "Wooden Slab",
    "name": "wooden_slab",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Oak Wood Slab"
      },
      {
        "metadata": 1,
        "displayName": "Spruce Wood Slab"
      },
      {
        "metadata": 2,
        "displayName": "Birch Wood Slab"
      },
      {
        "metadata": 3,
        "displayName": "Jungle Wood Slab"
      },
      {
        "metadata": 4,
        "displayName": "Acacia Wood Slab"
      },
      {
        "metadata": 5,
        "displayName": "Dark Oak Wood Slab"
      },
      {
        "metadata": 8,
        "displayName": "Upper Oak Wood Slab"
      },
      {
        "metadata": 9,
        "displayName": "Upper Spruce Wood Slab"
      },
      {
        "metadata": 10,
        "displayName": "Upper Birch Wood Slab"
      },
      {
        "metadata": 11,
        "displayName": "Upper Jungle Wood Slab"
      },
      {
        "metadata": 12,
        "displayName": "Upper Acacia Wood Slab"
      },
      {
        "metadata": 13,
        "displayName": "Upper Dark Oak Wood Slab"
      }
    ],
    "drops": [
      {
        "drop": {
          "id": 44,
          "metadata": 0
        }
      }
    ]
  },
  {
    "id": 127,
    "displayName": "Cocoa",
    "name": "cocoa",
    "hardness": 0.2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "plant",
    "drops": [
      {
        "drop": {
          "id": 351,
          "metadata": 3
        }
      },
      {
        "drop": {
          "id": 351,
          "metadata": 3
        },
        "minCount": 3
      }
    ]
  },
  {
    "id": 128,
    "displayName": "Sandstone Stairs",
    "name": "sandstone_stairs",
    "hardness": 0.8,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 128
      }
    ]
  },
  {
    "id": 129,
    "displayName": "Emerald Ore",
    "name": "emerald_ore",
    "hardness": 3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "278": true
    },
    "drops": [
      {
        "drop": 388
      }
    ]
  },
  {
    "id": 130,
    "displayName": "Ender Chest",
    "name": "ender_chest",
    "hardness": 22.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 49,
        "minCount": 8
      }
    ]
  },
  {
    "id": 131,
    "displayName": "Tripwire Hook",
    "name": "tripwire_hook",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "drops": [
      {
        "drop": 131
      }
    ]
  },
  {
    "id": 132,
    "displayName": "Tripwire",
    "name": "tripwire",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "drops": [
      {
        "drop": 132
      }
    ]
  },
  {
    "id": 133,
    "displayName": "Block of Emerald",
    "name": "emerald_block",
    "hardness": 5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "278": true
    },
    "drops": [
      {
        "drop": 133
      }
    ]
  },
  {
    "id": 134,
    "displayName": "Spruce Wood Stairs",
    "name": "spruce_stairs",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 134
      }
    ]
  },
  {
    "id": 135,
    "displayName": "Birch Wood Stairs",
    "name": "birch_stairs",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 135
      }
    ]
  },
  {
    "id": 136,
    "displayName": "Jungle Wood Stairs",
    "name": "jungle_stairs",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 136
      }
    ]
  },
  {
    "id": 137,
    "displayName": "Command Block",
    "name": "command_block",
    "hardness": null,
    "stackSize": 64,
    "diggable": false,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 137
      }
    ]
  },
  {
    "id": 138,
    "displayName": "Beacon",
    "name": "beacon",
    "hardness": 3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 138
      }
    ]
  },
  {
    "id": 139,
    "displayName": "Cobblestone Wall",
    "name": "cobblestone_wall",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "variations": [
      {
        "metadata": 0,
        "displayName": "Cobblestone Wall"
      },
      {
        "metadata": 1,
        "displayName": "Mossy Cobblestone Wall"
      }
    ],
    "drops": [
      {
        "drop": 139
      }
    ]
  },
  {
    "id": 140,
    "displayName": "Flower Pot",
    "name": "flower_pot",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Empty Flower Pot"
      },
      {
        "metadata": 1,
        "displayName": "Poppy Flower Pot"
      },
      {
        "metadata": 2,
        "displayName": "Dandelion Flower Pot"
      },
      {
        "metadata": 3,
        "displayName": "Oak sapling Flower Pot"
      },
      {
        "metadata": 4,
        "displayName": "Spruce sapling Flower Pot"
      },
      {
        "metadata": 5,
        "displayName": "Birch sapling Flower Pot"
      },
      {
        "metadata": 6,
        "displayName": "Jungle sapling Flower Pot"
      },
      {
        "metadata": 7,
        "displayName": "Red mushroom Flower Pot"
      },
      {
        "metadata": 8,
        "displayName": "Brown mushroom Flower Pot"
      },
      {
        "metadata": 9,
        "displayName": "Cactus Flower Pot"
      },
      {
        "metadata": 10,
        "displayName": "Dead bush Flower Pot"
      },
      {
        "metadata": 11,
        "displayName": "Fern Flower Pot"
      },
      {
        "metadata": 12,
        "displayName": "Acacia sapling Flower Pot"
      },
      {
        "metadata": 13,
        "displayName": "Dark oak sapling Flower Pot"
      }
    ],
    "drops": [
      {
        "drop": 140
      }
    ]
  },
  {
    "id": 141,
    "displayName": "Carrot",
    "name": "carrots",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "plant",
    "drops": [
      {
        "drop": 141
      }
    ]
  },
  {
    "id": 142,
    "displayName": "Potato",
    "name": "potatoes",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "plant",
    "drops": [
      {
        "drop": 142
      }
    ]
  },
  {
    "id": 143,
    "displayName": "Wooden Button",
    "name": "wooden_button",
    "hardness": 0.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "drops": [
      {
        "drop": 143
      }
    ]
  },
  {
    "id": 144,
    "displayName": "Mob head",
    "name": "skull",
    "hardness": 1,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Skeleton Skull"
      },
      {
        "metadata": 1,
        "displayName": "Wither Skeleton Skull"
      },
      {
        "metadata": 2,
        "displayName": "Zombie Head"
      },
      {
        "metadata": 3,
        "displayName": "Head"
      },
      {
        "metadata": 4,
        "displayName": "Creeper Head"
      }
    ],
    "drops": [
      {
        "drop": 144
      }
    ]
  },
  {
    "id": 145,
    "displayName": "Anvil",
    "name": "anvil",
    "hardness": 5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "variations": [
      {
        "metadata": 0,
        "displayName": "Anvil"
      },
      {
        "metadata": 1,
        "displayName": "Slightly Damaged Anvil"
      },
      {
        "metadata": 2,
        "displayName": "Very Damaged Anvil"
      },
      {
        "metadata": 3,
        "displayName": "Anvil (North/South)"
      },
      {
        "metadata": 4,
        "displayName": "Anvil (East/West)"
      },
      {
        "metadata": 5,
        "displayName": "Anvil (South/North)"
      },
      {
        "metadata": 6,
        "displayName": "Anvil (West/East)"
      },
      {
        "metadata": 7,
        "displayName": "Slightly Damaged Anvil (North/South)"
      },
      {
        "metadata": 8,
        "displayName": "Slightly Damaged Anvil (East/West)"
      },
      {
        "metadata": 9,
        "displayName": "Slightly Damaged Anvil (West/East)"
      },
      {
        "metadata": 10,
        "displayName": "Slightly Damaged Anvil (South/North)"
      },
      {
        "metadata": 11,
        "displayName": "Very Damaged Anvil (North/South)"
      },
      {
        "metadata": 12,
        "displayName": "Very Damaged Anvil (East/West)"
      },
      {
        "metadata": 13,
        "displayName": "Very Damaged Anvil (West/East)"
      },
      {
        "metadata": 14,
        "displayName": "Very Damaged Anvil (South/North)"
      }
    ],
    "drops": [
      {
        "drop": 145
      }
    ]
  },
  {
    "id": 146,
    "displayName": "Trapped Chest",
    "name": "trapped_chest",
    "hardness": 2.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 146
      }
    ]
  },
  {
    "id": 147,
    "displayName": "Weighted Pressure Plate (Light)",
    "name": "light_weighted_pressure_plate",
    "hardness": 0.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 147
      }
    ]
  },
  {
    "id": 148,
    "displayName": "Weighted Pressure Plate (Heavy)",
    "name": "heavy_weighted_pressure_plate",
    "hardness": 0.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 148
      }
    ]
  },
  {
    "id": 149,
    "displayName": "Redstone Comparator",
    "name": "unpowered_comparator",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 149
      }
    ]
  },
  {
    "id": 150,
    "displayName": "Redstone Comparator (deprecated)",
    "name": "powered_comparator",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 150
      }
    ]
  },
  {
    "id": 151,
    "displayName": "Daylight Sensor",
    "name": "daylight_detector",
    "hardness": 0.2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 151
      }
    ]
  },
  {
    "id": 152,
    "displayName": "Block of Redstone",
    "name": "redstone_block",
    "hardness": 5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 152
      }
    ]
  },
  {
    "id": 153,
    "displayName": "Nether Quartz Ore",
    "name": "quartz_ore",
    "hardness": 3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 406
      }
    ]
  },
  {
    "id": 154,
    "displayName": "Hopper",
    "name": "hopper",
    "hardness": 3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 154
      }
    ]
  },
  {
    "id": 155,
    "displayName": "Block of Quartz",
    "name": "quartz_block",
    "hardness": 0.8,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "variations": [
      {
        "metadata": 0,
        "displayName": "Block of Quartz"
      },
      {
        "metadata": 1,
        "displayName": "Chiseled Quartz Block"
      },
      {
        "metadata": 2,
        "displayName": "Pillar Quartz Block (vertical)"
      },
      {
        "metadata": 3,
        "displayName": "Pillar Quartz Block (north-south)"
      },
      {
        "metadata": 4,
        "displayName": "Pillar Quartz Block (east-west)"
      }
    ],
    "drops": [
      {
        "drop": 155
      }
    ]
  },
  {
    "id": 156,
    "displayName": "Quartz Stairs",
    "name": "quartz_stairs",
    "hardness": 0.8,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 156
      }
    ]
  },
  {
    "id": 157,
    "displayName": "Activator Rail",
    "name": "activator_rail",
    "hardness": 0.7,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "rock",
    "drops": [
      {
        "drop": 157
      }
    ]
  },
  {
    "id": 158,
    "displayName": "Dropper",
    "name": "dropper",
    "hardness": 3.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 158
      }
    ]
  },
  {
    "id": 159,
    "displayName": "Stained Clay",
    "name": "stained_hardened_clay",
    "hardness": 1.25,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "variations": [
      {
        "metadata": 0,
        "displayName": "White stained clay"
      },
      {
        "metadata": 1,
        "displayName": "Orange stained clay"
      },
      {
        "metadata": 2,
        "displayName": "Magenta stained clay"
      },
      {
        "metadata": 3,
        "displayName": "Light blue stained clay"
      },
      {
        "metadata": 4,
        "displayName": "Yellow stained clay"
      },
      {
        "metadata": 5,
        "displayName": "Lime stained clay"
      },
      {
        "metadata": 6,
        "displayName": "Pink stained clay"
      },
      {
        "metadata": 7,
        "displayName": "Gray stained clay"
      },
      {
        "metadata": 8,
        "displayName": "Light gray stained clay"
      },
      {
        "metadata": 9,
        "displayName": "Cyan stained clay"
      },
      {
        "metadata": 10,
        "displayName": "Purple stained clay"
      },
      {
        "metadata": 11,
        "displayName": "Blue stained clay"
      },
      {
        "metadata": 12,
        "displayName": "Brown stained clay"
      },
      {
        "metadata": 13,
        "displayName": "Green stained clay"
      },
      {
        "metadata": 14,
        "displayName": "Red stained clay"
      },
      {
        "metadata": 15,
        "displayName": "Black stained clay"
      }
    ],
    "drops": [
      {
        "drop": 159
      }
    ]
  },
  {
    "id": 160,
    "displayName": "Stained Glass Pane",
    "name": "stained_glass_pane",
    "hardness": 0.3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "variations": [
      {
        "metadata": 0,
        "displayName": "White Stained Glass Pane"
      },
      {
        "metadata": 1,
        "displayName": "Orange Stained Glass Pane"
      },
      {
        "metadata": 2,
        "displayName": "Magenta Stained Glass Pane"
      },
      {
        "metadata": 3,
        "displayName": "Light Blue Stained Glass Pane"
      },
      {
        "metadata": 4,
        "displayName": "Yellow Stained Glass Pane"
      },
      {
        "metadata": 5,
        "displayName": "Lime Stained Glass Pane"
      },
      {
        "metadata": 6,
        "displayName": "Pink Stained Glass Pane"
      },
      {
        "metadata": 7,
        "displayName": "Gray Stained Glass Pane"
      },
      {
        "metadata": 8,
        "displayName": "Light Gray Stained Glass Pane"
      },
      {
        "metadata": 9,
        "displayName": "Cyan Stained Glass Pane"
      },
      {
        "metadata": 10,
        "displayName": "Purple Stained Glass Pane"
      },
      {
        "metadata": 11,
        "displayName": "Blue Stained Glass Pane"
      },
      {
        "metadata": 12,
        "displayName": "Brown Stained Glass Pane"
      },
      {
        "metadata": 13,
        "displayName": "Green Stained Glass Pane"
      },
      {
        "metadata": 14,
        "displayName": "Red Stained Glass Pane"
      },
      {
        "metadata": 15,
        "displayName": "Black Stained Glass Pane"
      }
    ],
    "drops": []
  },
  {
    "id": 161,
    "displayName": "Leaves (Acacia/Dark Oak)",
    "name": "leaves2",
    "hardness": 0.2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "leaves",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Acacia Leaves"
      },
      {
        "metadata": 1,
        "displayName": "Dark Oak Leaves"
      },
      {
        "metadata": 4,
        "displayName": "Acacia Leaves (no decay)"
      },
      {
        "metadata": 5,
        "displayName": "Dark Oak Leaves (no decay)"
      },
      {
        "metadata": 8,
        "displayName": "Acacia Leaves (check decay)"
      },
      {
        "metadata": 9,
        "displayName": "Dark Oak Leaves (check decay)"
      },
      {
        "metadata": 12,
        "displayName": "Acacia Leaves (no decay and check decay)"
      },
      {
        "metadata": 13,
        "displayName": "Dark Oak Leaves (no decay and check decay)"
      }
    ],
    "drops": [
      {
        "drop": 6,
        "minCount": 0,
        "maxCount": 1
      },
      {
        "drop": 260,
        "minCount": 0,
        "maxCount": 1
      }
    ]
  },
  {
    "id": 162,
    "displayName": "Wood (Acacia/Dark Oak)",
    "name": "log2",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 162
      }
    ]
  },
  {
    "id": 163,
    "displayName": "Acacia Wood Stairs",
    "name": "acacia_stairs",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 163
      }
    ]
  },
  {
    "id": 164,
    "displayName": "Dark Oak Wood Stairs",
    "name": "dark_oak_stairs",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 164
      }
    ]
  },
  {
    "id": 165,
    "displayName": "Slime Block",
    "name": "slime",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 165
      }
    ]
  },
  {
    "id": 166,
    "displayName": "Barrier",
    "name": "barrier",
    "hardness": null,
    "stackSize": 64,
    "diggable": false,
    "boundingBox": "block",
    "drops": []
  },
  {
    "id": 167,
    "displayName": "Iron Trapdoor",
    "name": "iron_trapdoor",
    "hardness": 5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 167
      }
    ]
  },
  {
    "id": 168,
    "displayName": "Prismarine",
    "name": "prismarine",
    "hardness": 1.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "variations": [
      {
        "metadata": 0,
        "displayName": "Prismarine"
      },
      {
        "metadata": 1,
        "displayName": "Prismarine Bricks"
      },
      {
        "metadata": 2,
        "displayName": "Dark Prismarine"
      }
    ],
    "drops": [
      {
        "drop": 168
      }
    ]
  },
  {
    "id": 169,
    "displayName": "Sea Lantern",
    "name": "sea_lantern",
    "hardness": 0.3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 410,
        "minCount": 2,
        "maxCount": 3
      }
    ]
  },
  {
    "id": 170,
    "displayName": "Hay Bale",
    "name": "hay_block",
    "hardness": 0.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 170
      }
    ]
  },
  {
    "id": 171,
    "displayName": "Carpet",
    "name": "carpet",
    "hardness": 0.1,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "variations": [
      {
        "metadata": 0,
        "displayName": "White Carpet"
      },
      {
        "metadata": 1,
        "displayName": "Orange Carpet"
      },
      {
        "metadata": 2,
        "displayName": "Magenta Carpet"
      },
      {
        "metadata": 3,
        "displayName": "Light Blue Carpet"
      },
      {
        "metadata": 4,
        "displayName": "Yellow Carpet"
      },
      {
        "metadata": 5,
        "displayName": "Lime Carpet"
      },
      {
        "metadata": 6,
        "displayName": "Pink Carpet"
      },
      {
        "metadata": 7,
        "displayName": "Gray Carpet"
      },
      {
        "metadata": 8,
        "displayName": "Light Gray Carpet"
      },
      {
        "metadata": 9,
        "displayName": "Cyan Carpet"
      },
      {
        "metadata": 10,
        "displayName": "Purple Carpet"
      },
      {
        "metadata": 11,
        "displayName": "Blue Carpet"
      },
      {
        "metadata": 12,
        "displayName": "Brown Carpet"
      },
      {
        "metadata": 13,
        "displayName": "Green Carpet"
      },
      {
        "metadata": 14,
        "displayName": "Red Carpet"
      },
      {
        "metadata": 15,
        "displayName": "Black Carpet"
      }
    ],
    "drops": [
      {
        "drop": 171
      }
    ]
  },
  {
    "id": 172,
    "displayName": "Hardened Clay",
    "name": "hardened_clay",
    "hardness": 1.25,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "variations": [
      {
        "metadata": 0,
        "displayName": "White stained clay"
      },
      {
        "metadata": 1,
        "displayName": "Orange stained clay"
      },
      {
        "metadata": 2,
        "displayName": "Magenta stained clay"
      },
      {
        "metadata": 3,
        "displayName": "Light blue stained clay"
      },
      {
        "metadata": 4,
        "displayName": "Yellow stained clay"
      },
      {
        "metadata": 5,
        "displayName": "Lime stained clay"
      },
      {
        "metadata": 6,
        "displayName": "Pink stained clay"
      },
      {
        "metadata": 7,
        "displayName": "Gray stained clay"
      },
      {
        "metadata": 8,
        "displayName": "Light gray stained clay"
      },
      {
        "metadata": 9,
        "displayName": "Cyan stained clay"
      },
      {
        "metadata": 10,
        "displayName": "Purple stained clay"
      },
      {
        "metadata": 11,
        "displayName": "Blue stained clay"
      },
      {
        "metadata": 12,
        "displayName": "Brown stained clay"
      },
      {
        "metadata": 13,
        "displayName": "Green stained clay"
      },
      {
        "metadata": 14,
        "displayName": "Red stained clay"
      },
      {
        "metadata": 15,
        "displayName": "Black stained clay"
      }
    ],
    "drops": [
      {
        "drop": 172
      }
    ]
  },
  {
    "id": 173,
    "displayName": "Block of Coal",
    "name": "coal_block",
    "hardness": 5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 173
      }
    ]
  },
  {
    "id": 174,
    "displayName": "Packed Ice",
    "name": "packed_ice",
    "hardness": 0.5,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "drops": []
  },
  {
    "id": 175,
    "displayName": "Large Flowers",
    "name": "double_plant",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "empty",
    "material": "plant",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Sunflower"
      },
      {
        "metadata": 1,
        "displayName": "Lilac"
      },
      {
        "metadata": 2,
        "displayName": "Double Tallgrass"
      },
      {
        "metadata": 3,
        "displayName": "Large Fern"
      },
      {
        "metadata": 4,
        "displayName": "Rose Bush"
      },
      {
        "metadata": 5,
        "displayName": "Peony"
      },
      {
        "metadata": 8,
        "displayName": "Top Half of any Large Plant; low three bits 0x7 are derived from the block below."
      }
    ],
    "drops": [
      {
        "drop": 175
      }
    ]
  },
  {
    "id": 176,
    "displayName": "Standing Banner",
    "name": "standing_banner",
    "hardness": 1,
    "stackSize": 16,
    "diggable": true,
    "boundingBox": "empty",
    "material": "wood",
    "drops": [
      {
        "drop": 176
      }
    ]
  },
  {
    "id": 177,
    "displayName": "Wall Banner",
    "name": "wall_banner",
    "hardness": 1,
    "stackSize": 16,
    "diggable": true,
    "boundingBox": "empty",
    "material": "wood",
    "drops": [
      {
        "drop": 177
      }
    ]
  },
  {
    "id": 178,
    "displayName": "Inverted Daylight Sensor",
    "name": "daylight_detector_inverted",
    "hardness": 0.2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 178
      }
    ]
  },
  {
    "id": 179,
    "displayName": "Red Sandstone",
    "name": "red_sandstone",
    "hardness": 0.8,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "variations": [
      {
        "metadata": 0,
        "displayName": "Red Sandstone"
      },
      {
        "metadata": 1,
        "displayName": "Chiseled Red Sandstone"
      },
      {
        "metadata": 2,
        "displayName": "Smooth Red Sandstone"
      }
    ],
    "drops": [
      {
        "drop": 179
      }
    ]
  },
  {
    "id": 180,
    "displayName": "Red Sandstone Stairs",
    "name": "red_sandstone_stairs",
    "hardness": 0.8,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 180
      }
    ]
  },
  {
    "id": 181,
    "displayName": "Double Red Sandstone Slab",
    "name": "double_stone_slab2",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "variations": [
      {
        "metadata": 0,
        "displayName": "Double Red Sandstone Slab"
      },
      {
        "metadata": 8,
        "displayName": "Smooth Double Red Sandstone Slab"
      }
    ],
    "drops": [
      {
        "drop": {
          "id": 44,
          "metadata": 0
        }
      }
    ]
  },
  {
    "id": 182,
    "displayName": "Red Sandstone Slab",
    "name": "stone_slab2",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "variations": [
      {
        "metadata": 0,
        "displayName": "Red Sandstone Slab"
      },
      {
        "metadata": 8,
        "displayName": "Upper Red Sandstone Slab"
      }
    ],
    "drops": [
      {
        "drop": {
          "id": 44,
          "metadata": 0
        }
      }
    ]
  },
  {
    "id": 183,
    "displayName": "Spruce Fence Gate",
    "name": "spruce_fence_gate",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 183
      }
    ]
  },
  {
    "id": 184,
    "displayName": "Birch Fence Gate",
    "name": "birch_fence_gate",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 184
      }
    ]
  },
  {
    "id": 185,
    "displayName": "Jungle Fence Gate",
    "name": "jungle_fence_gate",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 185
      }
    ]
  },
  {
    "id": 186,
    "displayName": "Dark Oak Fence Gate",
    "name": "dark_oak_fence_gate",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 186
      }
    ]
  },
  {
    "id": 187,
    "displayName": "Acacia Fence Gate",
    "name": "acacia_fence_gate",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 187
      }
    ]
  },
  {
    "id": 188,
    "displayName": "Spruce Fence",
    "name": "spruce_fence",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 188
      }
    ]
  },
  {
    "id": 189,
    "displayName": "Birch Fence",
    "name": "birch_fence",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 189
      }
    ]
  },
  {
    "id": 190,
    "displayName": "Jungle Fence",
    "name": "jungle_fence",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 190
      }
    ]
  },
  {
    "id": 191,
    "displayName": "Dark Oak Fence",
    "name": "dark_oak_fence",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 191
      }
    ]
  },
  {
    "id": 192,
    "displayName": "Acacia Fence",
    "name": "acacia_fence",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 192
      }
    ]
  },
  {
    "id": 193,
    "displayName": "Spruce Door",
    "name": "spruce_door",
    "hardness": 3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 193
      }
    ]
  },
  {
    "id": 194,
    "displayName": "Birch Door",
    "name": "birch_door",
    "hardness": 3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 194
      }
    ]
  },
  {
    "id": 195,
    "displayName": "Jungle Door",
    "name": "jungle_door",
    "hardness": 3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 195
      }
    ]
  },
  {
    "id": 196,
    "displayName": "Acacia Door",
    "name": "acacia_door",
    "hardness": 3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 196
      }
    ]
  },
  {
    "id": 197,
    "displayName": "Dark Oak Door",
    "name": "dark_oak_door",
    "hardness": 3,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "wood",
    "drops": [
      {
        "drop": 197
      }
    ]
  },
  {
    "id": 198,
    "displayName": "End Rod",
    "name": "end_rod",
    "hardness": 0,
    "stackSize": 0,
    "diggable": true,
    "boundingBox": "block",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Facing down"
      },
      {
        "metadata": 1,
        "displayName": "Facing up"
      },
      {
        "metadata": 2,
        "displayName": "Facing north"
      },
      {
        "metadata": 3,
        "displayName": "Facing south"
      },
      {
        "metadata": 4,
        "displayName": "Facing west"
      },
      {
        "metadata": 5,
        "displayName": "Facing east"
      }
    ],
    "drops": [
      {
        "drop": 198
      }
    ]
  },
  {
    "id": 199,
    "displayName": "Chorus Plant",
    "name": "chorus_plant",
    "hardness": 0.4,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 432,
        "minCount": 0,
        "maxCount": 1
      }
    ]
  },
  {
    "id": 200,
    "displayName": "Chorus Flower",
    "name": "chorus_flower",
    "hardness": 0.4,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 200
      }
    ]
  },
  {
    "id": 201,
    "displayName": "Purpur Block",
    "name": "purpur_block",
    "hardness": 1.5,
    "stackSize": 0,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 201
      }
    ]
  },
  {
    "id": 202,
    "displayName": "Purpur Pillar",
    "name": "purpur_pillar",
    "hardness": 1.5,
    "stackSize": 0,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 202
      }
    ]
  },
  {
    "id": 203,
    "displayName": "Purpur Stairs",
    "name": "purpur_stairs",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": 203
      }
    ]
  },
  {
    "id": 204,
    "displayName": "Purpur Double Slab",
    "name": "purpur_double_slab",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": {
          "id": 44,
          "metadata": 0
        }
      }
    ]
  },
  {
    "id": 205,
    "displayName": "Purpur Slab",
    "name": "purpur_slab",
    "hardness": 2,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "material": "rock",
    "harvestTools": {
      "257": true,
      "270": true,
      "274": true,
      "278": true,
      "285": true
    },
    "drops": [
      {
        "drop": {
          "id": 44,
          "metadata": 0
        }
      }
    ]
  },
  {
    "id": 206,
    "displayName": "End Stone Bricks",
    "name": "end_bricks",
    "hardness": 0.8,
    "stackSize": 0,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 206
      }
    ]
  },
  {
    "id": 207,
    "displayName": "Beetroot Seeds",
    "name": "beetroots",
    "hardness": 0,
    "stackSize": 0,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 207
      }
    ]
  },
  {
    "id": 208,
    "displayName": "Grass Path",
    "name": "grass_path",
    "hardness": 0.6,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "drops": []
  },
  {
    "id": 209,
    "displayName": "End Gateway",
    "name": "end_gateway",
    "hardness": 0,
    "stackSize": 0,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 209
      }
    ]
  },
  {
    "id": 210,
    "displayName": "Repeating Command Block",
    "name": "repeating_command_block",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 210
      }
    ]
  },
  {
    "id": 211,
    "displayName": "Chain Command Block",
    "name": "chain_command_block",
    "hardness": 0,
    "stackSize": 64,
    "diggable": true,
    "boundingBox": "block",
    "drops": [
      {
        "drop": 211
      }
    ]
  },
  {
    "id": 212,
    "displayName": "Frosted Ice",
    "name": "frosted_ice",
    "hardness": 0.5,
    "stackSize": 0,
    "diggable": true,
    "boundingBox": "block",
    "drops": []
  },
  {
    "id": 255,
    "displayName": "Structure Block",
    "name": "structure_block",
    "hardness": 0,
    "stackSize": 0,
    "diggable": true,
    "boundingBox": "block",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Save"
      },
      {
        "metadata": 1,
        "displayName": "Load"
      },
      {
        "metadata": 2,
        "displayName": "Corner"
      },
      {
        "metadata": 3,
        "displayName": "Data"
      }
    ],
    "drops": [
      {
        "drop": 255
      }
    ]
  }
]
},{}],349:[function(require,module,exports){
module.exports=[
  {
    "id": 1,
    "name": "Speed",
    "displayName": "Speed",
    "type": "good"
  },
  {
    "id": 2,
    "name": "Slowness",
    "displayName": "Slowness",
    "type": "bad"
  },
  {
    "id": 3,
    "name": "Haste",
    "displayName": "Haste",
    "type": "good"
  },
  {
    "id": 4,
    "name": "MiningFatigue",
    "displayName": "Mining Fatigue",
    "type": "bad"
  },
  {
    "id": 5,
    "name": "Strength",
    "displayName": "Strength",
    "type": "good"
  },
  {
    "id": 6,
    "name": "InstantHealth",
    "displayName": "Instant Health",
    "type": "good"
  },
  {
    "id": 7,
    "name": "InstantDamage",
    "displayName": "Instant Damage",
    "type": "bad"
  },
  {
    "id": 8,
    "name": "JumpBoost",
    "displayName": "Jump Boost",
    "type": "good"
  },
  {
    "id": 9,
    "name": "Nausea",
    "displayName": "Nausea",
    "type": "bad"
  },
  {
    "id": 10,
    "name": "Regeneration",
    "displayName": "Regeneration",
    "type": "good"
  },
  {
    "id": 11,
    "name": "Resistance",
    "displayName": "Resistance",
    "type": "good"
  },
  {
    "id": 12,
    "name": "FireResistance",
    "displayName": "Fire Resistance",
    "type": "good"
  },
  {
    "id": 13,
    "name": "WaterBreathing",
    "displayName": "Water Breathing",
    "type": "good"
  },
  {
    "id": 14,
    "name": "Invisibility",
    "displayName": "Invisibility",
    "type": "good"
  },
  {
    "id": 15,
    "name": "Blindness",
    "displayName": "Blindness",
    "type": "bad"
  },
  {
    "id": 16,
    "name": "NightVision",
    "displayName": "Night Vision",
    "type": "good"
  },
  {
    "id": 17,
    "name": "Hunger",
    "displayName": "Hunger",
    "type": "bad"
  },
  {
    "id": 18,
    "name": "Weakness",
    "displayName": "Weakness",
    "type": "bad"
  },
  {
    "id": 19,
    "name": "Poison",
    "displayName": "Poison",
    "type": "bad"
  },
  {
    "id": 20,
    "name": "Wither",
    "displayName": "Wither",
    "type": "bad"
  },
  {
    "id": 21,
    "name": "HealthBoost",
    "displayName": "Health Boost",
    "type": "good"
  },
  {
    "id": 22,
    "name": "Absorption",
    "displayName": "Absorption",
    "type": "good"
  },
  {
    "id": 23,
    "name": "Saturation",
    "displayName": "Saturation",
    "type": "good"
  },
  {
    "id": 24,
    "name": "Glowing",
    "displayName": "Glowing",
    "type": "bad"
  },
  {
    "id": 25,
    "name": "Levitation",
    "displayName": "Levitation",
    "type": "bad"
  },
  {
    "id": 26,
    "name": "Luck",
    "displayName": "Luck",
    "type": "good"
  },
  {
    "id": 27,
    "name": "BadLuck",
    "displayName": "Bad Luck",
    "type": "bad"
  }
]

},{}],350:[function(require,module,exports){
module.exports=[
  {
    "id": 48,
    "internalId": 48,
    "name": "Mob",
    "displayName": "Mob",
    "type": "mob",
    "width": null,
    "height": null,
    "category": "Generic"
  },
  {
    "id": 49,
    "internalId": 49,
    "name": "Monster",
    "displayName": "Monster",
    "type": "mob",
    "width": null,
    "height": null,
    "category": "Generic"
  },
  {
    "id": 50,
    "internalId": 50,
    "name": "Creeper",
    "displayName": "Creeper",
    "type": "mob",
    "width": 0.6,
    "height": 1.8,
    "category": "Hostile mobs"
  },
  {
    "id": 51,
    "internalId": 51,
    "name": "Skeleton",
    "displayName": "Skeleton",
    "type": "mob",
    "width": 0.6,
    "height": 1.95,
    "category": "Hostile mobs"
  },
  {
    "id": 52,
    "internalId": 52,
    "name": "Spider",
    "displayName": "Spider",
    "type": "mob",
    "width": 1.4,
    "height": 0.9,
    "category": "Hostile mobs"
  },
  {
    "id": 53,
    "internalId": 53,
    "name": "Giant",
    "displayName": "Giant",
    "type": "mob",
    "width": 3.5999999999999996,
    "height": 10.8,
    "category": "Hostile mobs"
  },
  {
    "id": 54,
    "internalId": 54,
    "name": "Zombie",
    "displayName": "Zombie",
    "type": "mob",
    "width": 0.6,
    "height": 1.8,
    "category": "Hostile mobs"
  },
  {
    "id": 55,
    "internalId": 55,
    "name": "Slime",
    "displayName": "Slime",
    "type": "mob",
    "width": 0.51000005,
    "height": 0.51000005,
    "category": "Hostile mobs"
  },
  {
    "id": 56,
    "internalId": 56,
    "name": "Ghast",
    "displayName": "Ghast",
    "type": "mob",
    "width": 4,
    "height": 4,
    "category": "Hostile mobs"
  },
  {
    "id": 57,
    "internalId": 57,
    "name": "PigZombie",
    "displayName": "Zombie Pigman",
    "type": "mob",
    "width": 0.6,
    "height": 1.8,
    "category": "Hostile mobs"
  },
  {
    "id": 58,
    "internalId": 58,
    "name": "Enderman",
    "displayName": "Enderman",
    "type": "mob",
    "width": 0.6,
    "height": 2.9,
    "category": "Hostile mobs"
  },
  {
    "id": 59,
    "internalId": 59,
    "name": "CaveSpider",
    "displayName": "Cave Spider",
    "type": "mob",
    "width": 0.7,
    "height": 0.5,
    "category": "Hostile mobs"
  },
  {
    "id": 60,
    "internalId": 60,
    "name": "Silverfish",
    "displayName": "Silverfish",
    "type": "mob",
    "width": 0.4,
    "height": 0.3,
    "category": "Hostile mobs"
  },
  {
    "id": 61,
    "internalId": 61,
    "name": "Blaze",
    "displayName": "Blaze",
    "type": "mob",
    "width": 0.6,
    "height": 1.8,
    "category": "Hostile mobs"
  },
  {
    "id": 62,
    "internalId": 62,
    "name": "LavaSlime",
    "displayName": "Magma Cube",
    "type": "mob",
    "width": 0.51000005,
    "height": 0.51000005,
    "category": "Hostile mobs"
  },
  {
    "id": 63,
    "internalId": 63,
    "name": "EnderDragon",
    "displayName": "Ender Dragon",
    "type": "mob",
    "width": 16,
    "height": 8,
    "category": "Hostile mobs"
  },
  {
    "id": 64,
    "internalId": 64,
    "name": "WitherBoss",
    "displayName": "Wither",
    "type": "mob",
    "width": 0.9,
    "height": 3.5,
    "category": "Hostile mobs"
  },
  {
    "id": 65,
    "internalId": 65,
    "name": "Bat",
    "displayName": "Bat",
    "type": "mob",
    "width": 0.5,
    "height": 0.9,
    "category": "Passive mobs"
  },
  {
    "id": 66,
    "internalId": 66,
    "name": "Witch",
    "displayName": "Witch",
    "type": "mob",
    "width": 0.6,
    "height": 1.8,
    "category": "Hostile mobs"
  },
  {
    "id": 67,
    "internalId": 67,
    "name": "Endermite",
    "displayName": "Endermite",
    "type": "mob",
    "width": 0.4,
    "height": 0.3,
    "category": "Hostile mobs"
  },
  {
    "id": 68,
    "internalId": 68,
    "name": "Guardian",
    "displayName": "Guardian",
    "type": "mob",
    "width": 0.85,
    "height": 0.85,
    "category": "Hostile mobs"
  },
  {
    "id": 69,
    "internalId": 69,
    "name": "Shulker",
    "displayName": "Shulker",
    "type": "mob",
    "width": 1,
    "height": 1,
    "category": "Hostile mobs"
  },
  {
    "id": 90,
    "internalId": 90,
    "name": "Pig",
    "displayName": "Pig",
    "type": "mob",
    "width": 0.9,
    "height": 0.9,
    "category": "Passive mobs"
  },
  {
    "id": 91,
    "internalId": 91,
    "name": "Sheep",
    "displayName": "Sheep",
    "type": "mob",
    "width": 0.9,
    "height": 1.3,
    "category": "Passive mobs"
  },
  {
    "id": 92,
    "internalId": 92,
    "name": "Cow",
    "displayName": "Cow",
    "type": "mob",
    "width": 0.9,
    "height": 1.3,
    "category": "Passive mobs"
  },
  {
    "id": 93,
    "internalId": 93,
    "name": "Chicken",
    "displayName": "Chicken",
    "type": "mob",
    "width": 0.4,
    "height": 0.7,
    "category": "Passive mobs"
  },
  {
    "id": 94,
    "internalId": 94,
    "name": "Squid",
    "displayName": "Squid",
    "type": "mob",
    "width": 0.95,
    "height": 0.95,
    "category": "Passive mobs"
  },
  {
    "id": 95,
    "internalId": 95,
    "name": "Wolf",
    "displayName": "Wolf",
    "type": "mob",
    "width": 0.6,
    "height": 0.8,
    "category": "Passive mobs"
  },
  {
    "id": 96,
    "internalId": 96,
    "name": "MushroomCow",
    "displayName": "Mooshroom",
    "type": "mob",
    "width": 0.9,
    "height": 1.3,
    "category": "Passive mobs"
  },
  {
    "id": 97,
    "internalId": 97,
    "name": "SnowMan",
    "displayName": "Snow Golem",
    "type": "mob",
    "width": 0.7,
    "height": 1.9,
    "category": "Passive mobs"
  },
  {
    "id": 98,
    "internalId": 98,
    "name": "Ozelot",
    "displayName": "Ocelot",
    "type": "mob",
    "width": 0.6,
    "height": 0.8,
    "category": "Passive mobs"
  },
  {
    "id": 99,
    "internalId": 99,
    "name": "VillagerGolem",
    "displayName": "Iron Golem",
    "type": "mob",
    "width": 1.4,
    "height": 2.9,
    "category": "Passive mobs"
  },
  {
    "id": 100,
    "internalId": 100,
    "name": "EntityHorse",
    "displayName": "Horse",
    "type": "mob",
    "width": 1.4,
    "height": 1.6,
    "category": "Passive mobs"
  },
  {
    "id": 101,
    "internalId": 101,
    "name": "Rabbit",
    "displayName": "Rabbit",
    "type": "mob",
    "width": 0.6,
    "height": 0.7,
    "category": "Passive mobs"
  },
  {
    "id": 120,
    "internalId": 120,
    "name": "Villager",
    "displayName": "Villager",
    "type": "mob",
    "width": 0.6,
    "height": 1.8,
    "category": "NPCs"
  },
  {
    "id": 1,
    "internalId": 41,
    "name": "Boat",
    "displayName": "Boat",
    "type": "object",
    "width": 1.5,
    "height": 0.6,
    "category": "Vehicles"
  },
  {
    "id": 2,
    "internalId": 1,
    "name": "Item",
    "displayName": "Dropped item",
    "type": "object",
    "width": 0.25,
    "height": 0.25,
    "category": "Drops"
  },
  {
    "id": 3,
    "internalId": 2,
    "name": "XPOrb",
    "displayName": "Experience Orb",
    "type": "object",
    "width": null,
    "height": null,
    "category": "Drops"
  },
  {
    "id": 10,
    "internalId": 42,
    "name": "MinecartRideable",
    "displayName": "Minecart",
    "type": "object",
    "width": 0.98,
    "height": 0.7,
    "category": "Vehicles"
  },
  {
    "id": 11,
    "internalId": 42,
    "name": "MinecartRideable",
    "displayName": "Minecart",
    "type": "object",
    "width": 0.98,
    "height": 0.7,
    "category": "Vehicles"
  },
  {
    "id": 12,
    "internalId": 42,
    "name": "MinecartRideable",
    "displayName": "Minecart",
    "type": "object",
    "width": 0.98,
    "height": 0.7,
    "category": "Vehicles"
  },
  {
    "id": 50,
    "internalId": 20,
    "name": "PrimedTnt",
    "displayName": "Primed TNT",
    "type": "object",
    "width": 0.98,
    "height": 0.98,
    "category": "Blocks"
  },
  {
    "id": 51,
    "internalId": 200,
    "name": "EnderCrystal",
    "displayName": "Ender Crystal",
    "type": "object",
    "width": 2,
    "height": 2,
    "category": "Immobile"
  },
  {
    "id": 60,
    "internalId": 10,
    "name": "Arrow",
    "displayName": "Shot arrow",
    "type": "object",
    "width": 0.5,
    "height": 0.5,
    "category": "Projectiles"
  },
  {
    "id": 61,
    "internalId": 11,
    "name": "Snowball",
    "displayName": "Thrown snowball",
    "type": "object",
    "width": 0.25,
    "height": 0.25,
    "category": "Projectiles"
  },
  {
    "id": 62,
    "internalId": 7,
    "name": "ThrownEgg",
    "displayName": "Thrown egg",
    "type": "object",
    "width": 0.25,
    "height": 0.25,
    "category": "Projectiles"
  },
  {
    "id": 63,
    "internalId": 12,
    "name": "Fireball",
    "displayName": "Ghast fireball",
    "type": "object",
    "width": 1,
    "height": 1,
    "category": "Projectiles"
  },
  {
    "id": 64,
    "internalId": 13,
    "name": "SmallFireball",
    "displayName": "Blaze fireball",
    "type": "object",
    "width": 0.3125,
    "height": 0.3125,
    "category": "Projectiles"
  },
  {
    "id": 65,
    "internalId": 14,
    "name": "ThrownEnderpearl",
    "displayName": "Thrown Ender Pearl",
    "type": "object",
    "width": 0.25,
    "height": 0.25,
    "category": "Projectiles"
  },
  {
    "id": 66,
    "internalId": 19,
    "name": "WitherSkull",
    "displayName": "Wither Skull",
    "type": "object",
    "width": 0.3125,
    "height": 0.3125,
    "category": "Projectiles"
  },
  {
    "id": 67,
    "internalId": 69,
    "name": "Shulker",
    "displayName": "Shulker",
    "type": "object",
    "width": 0.3125,
    "height": 0.3125,
    "category": "Hostile mobs"
  },
  {
    "id": 70,
    "internalId": 21,
    "name": "FallingSand",
    "displayName": "Falling block",
    "type": "object",
    "width": 0.98,
    "height": 0.98,
    "category": "Blocks"
  },
  {
    "id": 71,
    "internalId": 18,
    "name": "ItemFrame",
    "displayName": "Item Frame",
    "type": "object",
    "width": null,
    "height": null,
    "category": "Immobile"
  },
  {
    "id": 72,
    "internalId": 15,
    "name": "EyeOfEnderSignal",
    "displayName": "Thrown Eye of Ender",
    "type": "object",
    "width": 0.25,
    "height": 0.25,
    "category": "Projectiles"
  },
  {
    "id": 73,
    "internalId": 16,
    "name": "ThrownPotion",
    "displayName": "Thrown splash potion",
    "type": "object",
    "width": 0.25,
    "height": 0.25,
    "category": "Projectiles"
  },
  {
    "id": 74,
    "internalId": 21,
    "name": "FallingSand",
    "displayName": "Falling block",
    "type": "object",
    "width": 0.98,
    "height": 0.98,
    "category": "Blocks"
  },
  {
    "id": 75,
    "internalId": 17,
    "name": "ThrownExpBottle",
    "displayName": "Thrown Bottle o' Enchanting",
    "type": "object",
    "width": 0.25,
    "height": 0.25,
    "category": "Projectiles"
  },
  {
    "id": 76,
    "internalId": 22,
    "name": "FireworksRocketEntity",
    "displayName": "Firework Rocket",
    "type": "object",
    "width": 0.25,
    "height": 0.25,
    "category": "Projectiles"
  },
  {
    "id": 77,
    "internalId": 8,
    "name": "LeashKnot",
    "displayName": "Lead knot",
    "type": "object",
    "width": 0.5,
    "height": 0.5,
    "category": "Immobile"
  },
  {
    "id": 78,
    "internalId": 30,
    "name": "ArmorStand",
    "displayName": "Armor Stand",
    "type": "object",
    "width": 0.5,
    "height": 2,
    "category": "Immobile"
  },
  {
    "id": 90,
    "name": "Fishing Float",
    "displayName": "Fishing Float",
    "type": "object",
    "width": 0.25,
    "height": 0.25
  },
  {
    "id": 91,
    "internalId": 10,
    "name": "Arrow",
    "displayName": "Shot arrow",
    "type": "object",
    "width": 0.5,
    "height": 0.5,
    "category": "Projectiles"
  },
  {
    "id": 92,
    "internalId": 10,
    "name": "Arrow",
    "displayName": "Shot arrow",
    "type": "object",
    "width": 0.5,
    "height": 0.5,
    "category": "Projectiles"
  },
  {
    "id": 93,
    "name": "Dragon Fireball",
    "displayName": "Dragon Fireball",
    "type": "object",
    "width": 0.3125,
    "height": 0.3125
  }
]
},{}],351:[function(require,module,exports){
arguments[4][340][0].apply(exports,arguments)
},{"dup":340}],352:[function(require,module,exports){
module.exports=[
  {
    "id": 256,
    "displayName": "Iron Shovel",
    "stackSize": 1,
    "name": "iron_shovel"
  },
  {
    "id": 257,
    "displayName": "Iron Pickaxe",
    "stackSize": 1,
    "name": "iron_pickaxe"
  },
  {
    "id": 258,
    "displayName": "Iron Axe",
    "stackSize": 1,
    "name": "iron_axe"
  },
  {
    "id": 259,
    "displayName": "Flint and Steel",
    "stackSize": 1,
    "name": "flint_and_steel"
  },
  {
    "id": 260,
    "displayName": "Apple",
    "stackSize": 64,
    "name": "apple"
  },
  {
    "id": 261,
    "displayName": "Bow",
    "stackSize": 1,
    "name": "bow"
  },
  {
    "id": 262,
    "displayName": "Arrow",
    "stackSize": 64,
    "name": "arrow"
  },
  {
    "id": 263,
    "displayName": "Coal",
    "stackSize": 64,
    "name": "coal",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Coal"
      },
      {
        "metadata": 1,
        "displayName": "Charcoal"
      }
    ]
  },
  {
    "id": 264,
    "displayName": "Diamond",
    "stackSize": 64,
    "name": "diamond"
  },
  {
    "id": 265,
    "displayName": "Iron Ingot",
    "stackSize": 64,
    "name": "iron_ingot"
  },
  {
    "id": 266,
    "displayName": "Gold Ingot",
    "stackSize": 64,
    "name": "gold_ingot"
  },
  {
    "id": 267,
    "displayName": "Iron Sword",
    "stackSize": 1,
    "name": "iron_sword"
  },
  {
    "id": 268,
    "displayName": "Wooden Sword",
    "stackSize": 1,
    "name": "wooden_sword"
  },
  {
    "id": 269,
    "displayName": "Wooden Shovel",
    "stackSize": 1,
    "name": "wooden_shovel"
  },
  {
    "id": 270,
    "displayName": "Wooden Pickaxe",
    "stackSize": 1,
    "name": "wooden_pickaxe"
  },
  {
    "id": 271,
    "displayName": "Wooden Axe",
    "stackSize": 1,
    "name": "wooden_axe"
  },
  {
    "id": 272,
    "displayName": "Stone Sword",
    "stackSize": 1,
    "name": "stone_sword"
  },
  {
    "id": 273,
    "displayName": "Stone Shovel",
    "stackSize": 1,
    "name": "stone_shovel"
  },
  {
    "id": 274,
    "displayName": "Stone Pickaxe",
    "stackSize": 1,
    "name": "stone_pickaxe"
  },
  {
    "id": 275,
    "displayName": "Stone Axe",
    "stackSize": 1,
    "name": "stone_axe"
  },
  {
    "id": 276,
    "displayName": "Diamond Sword",
    "stackSize": 1,
    "name": "diamond_sword"
  },
  {
    "id": 277,
    "displayName": "Diamond Shovel",
    "stackSize": 1,
    "name": "diamond_shovel"
  },
  {
    "id": 278,
    "displayName": "Diamond Pickaxe",
    "stackSize": 1,
    "name": "diamond_pickaxe"
  },
  {
    "id": 279,
    "displayName": "Diamond Axe",
    "stackSize": 1,
    "name": "diamond_axe"
  },
  {
    "id": 280,
    "displayName": "Stick",
    "stackSize": 64,
    "name": "stick"
  },
  {
    "id": 281,
    "displayName": "Bowl",
    "stackSize": 64,
    "name": "bowl"
  },
  {
    "id": 282,
    "displayName": "Mushroom Stew",
    "stackSize": 1,
    "name": "mushroom_stew"
  },
  {
    "id": 283,
    "displayName": "Golden Sword",
    "stackSize": 1,
    "name": "golden_sword"
  },
  {
    "id": 284,
    "displayName": "Golden Shovel",
    "stackSize": 1,
    "name": "golden_shovel"
  },
  {
    "id": 285,
    "displayName": "Golden Pickaxe",
    "stackSize": 1,
    "name": "golden_pickaxe"
  },
  {
    "id": 286,
    "displayName": "Golden Axe",
    "stackSize": 1,
    "name": "golden_axe"
  },
  {
    "id": 287,
    "displayName": "String",
    "stackSize": 64,
    "name": "string"
  },
  {
    "id": 288,
    "displayName": "Feather",
    "stackSize": 64,
    "name": "feather"
  },
  {
    "id": 289,
    "displayName": "Gunpowder",
    "stackSize": 64,
    "name": "gunpowder"
  },
  {
    "id": 290,
    "displayName": "Wooden Hoe",
    "stackSize": 1,
    "name": "wooden_hoe"
  },
  {
    "id": 291,
    "displayName": "Stone Hoe",
    "stackSize": 1,
    "name": "stone_hoe"
  },
  {
    "id": 292,
    "displayName": "Iron Hoe",
    "stackSize": 1,
    "name": "iron_hoe"
  },
  {
    "id": 293,
    "displayName": "Diamond Hoe",
    "stackSize": 1,
    "name": "diamond_hoe"
  },
  {
    "id": 294,
    "displayName": "Golden Hoe",
    "stackSize": 1,
    "name": "golden_hoe"
  },
  {
    "id": 295,
    "displayName": "Seeds",
    "stackSize": 64,
    "name": "wheat_seeds"
  },
  {
    "id": 296,
    "displayName": "Wheat",
    "stackSize": 64,
    "name": "wheat"
  },
  {
    "id": 297,
    "displayName": "Bread",
    "stackSize": 64,
    "name": "bread"
  },
  {
    "id": 298,
    "displayName": "Leather Cap",
    "stackSize": 1,
    "name": "leather_helmet"
  },
  {
    "id": 299,
    "displayName": "Leather Tunic",
    "stackSize": 1,
    "name": "leather_chestplate"
  },
  {
    "id": 300,
    "displayName": "Leather Pants",
    "stackSize": 1,
    "name": "leather_leggings"
  },
  {
    "id": 301,
    "displayName": "Leather Boots",
    "stackSize": 1,
    "name": "leather_boots"
  },
  {
    "id": 302,
    "displayName": "Chain Helmet",
    "stackSize": 1,
    "name": "chainmail_helmet"
  },
  {
    "id": 303,
    "displayName": "Chain Chestplate",
    "stackSize": 1,
    "name": "chainmail_chestplate"
  },
  {
    "id": 304,
    "displayName": "Chain Leggings",
    "stackSize": 1,
    "name": "chainmail_leggings"
  },
  {
    "id": 305,
    "displayName": "Chain Boots",
    "stackSize": 1,
    "name": "chainmail_boots"
  },
  {
    "id": 306,
    "displayName": "Iron Helmet",
    "stackSize": 1,
    "name": "iron_helmet"
  },
  {
    "id": 307,
    "displayName": "Iron Chestplate",
    "stackSize": 1,
    "name": "iron_chestplate"
  },
  {
    "id": 308,
    "displayName": "Iron Leggings",
    "stackSize": 1,
    "name": "iron_leggings"
  },
  {
    "id": 309,
    "displayName": "Iron Boots",
    "stackSize": 1,
    "name": "iron_boots"
  },
  {
    "id": 310,
    "displayName": "Diamond Helmet",
    "stackSize": 1,
    "name": "diamond_helmet"
  },
  {
    "id": 311,
    "displayName": "Diamond Chestplate",
    "stackSize": 1,
    "name": "diamond_chestplate"
  },
  {
    "id": 312,
    "displayName": "Diamond Leggings",
    "stackSize": 1,
    "name": "diamond_leggings"
  },
  {
    "id": 313,
    "displayName": "Diamond Boots",
    "stackSize": 1,
    "name": "diamond_boots"
  },
  {
    "id": 314,
    "displayName": "Golden Helmet",
    "stackSize": 1,
    "name": "golden_helmet"
  },
  {
    "id": 315,
    "displayName": "Golden Chestplate",
    "stackSize": 1,
    "name": "golden_chestplate"
  },
  {
    "id": 316,
    "displayName": "Golden Leggings",
    "stackSize": 1,
    "name": "golden_leggings"
  },
  {
    "id": 317,
    "displayName": "Golden Boots",
    "stackSize": 1,
    "name": "golden_boots"
  },
  {
    "id": 318,
    "displayName": "Flint",
    "stackSize": 64,
    "name": "flint"
  },
  {
    "id": 319,
    "displayName": "Raw Porkchop",
    "stackSize": 64,
    "name": "porkchop"
  },
  {
    "id": 320,
    "displayName": "Cooked Porkchop",
    "stackSize": 64,
    "name": "cooked_porkchop"
  },
  {
    "id": 321,
    "displayName": "Painting",
    "stackSize": 64,
    "name": "painting"
  },
  {
    "id": 322,
    "displayName": "Golden Apple",
    "stackSize": 64,
    "name": "golden_apple",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Golden Apple"
      },
      {
        "metadata": 1,
        "displayName": "Enchanted Golden Apple"
      }
    ]
  },
  {
    "id": 323,
    "displayName": "Sign",
    "stackSize": 16,
    "name": "sign"
  },
  {
    "id": 324,
    "displayName": "Oak Door",
    "stackSize": 64,
    "name": "wooden_door"
  },
  {
    "id": 325,
    "displayName": "Bucket",
    "stackSize": 16,
    "name": "bucket"
  },
  {
    "id": 326,
    "displayName": "Water Bucket",
    "stackSize": 64,
    "name": "water_bucket"
  },
  {
    "id": 327,
    "displayName": "Lava Bucket",
    "stackSize": 64,
    "name": "lava_bucket"
  },
  {
    "id": 328,
    "displayName": "Minecart",
    "stackSize": 1,
    "name": "minecart"
  },
  {
    "id": 329,
    "displayName": "Saddle",
    "stackSize": 1,
    "name": "saddle"
  },
  {
    "id": 330,
    "displayName": "Iron Door",
    "stackSize": 64,
    "name": "iron_door"
  },
  {
    "id": 331,
    "displayName": "Redstone",
    "stackSize": 64,
    "name": "redstone"
  },
  {
    "id": 332,
    "displayName": "Snowball",
    "stackSize": 16,
    "name": "snowball"
  },
  {
    "id": 333,
    "displayName": "Boat",
    "stackSize": 1,
    "name": "boat"
  },
  {
    "id": 334,
    "displayName": "Leather",
    "stackSize": 64,
    "name": "leather"
  },
  {
    "id": 335,
    "displayName": "Milk",
    "stackSize": 1,
    "name": "milk_bucket"
  },
  {
    "id": 336,
    "displayName": "Brick",
    "stackSize": 64,
    "name": "brick"
  },
  {
    "id": 337,
    "displayName": "Clay",
    "stackSize": 64,
    "name": "clay_ball"
  },
  {
    "id": 338,
    "displayName": "Sugar Cane",
    "stackSize": 64,
    "name": "reeds"
  },
  {
    "id": 339,
    "displayName": "Paper",
    "stackSize": 64,
    "name": "paper"
  },
  {
    "id": 340,
    "displayName": "Book",
    "stackSize": 64,
    "name": "book"
  },
  {
    "id": 341,
    "displayName": "Slimeball",
    "stackSize": 64,
    "name": "slime_ball"
  },
  {
    "id": 342,
    "displayName": "Minecart with Chest",
    "stackSize": 1,
    "name": "chest_minecart"
  },
  {
    "id": 343,
    "displayName": "Minecart with Furnace",
    "stackSize": 1,
    "name": "furnace_minecart"
  },
  {
    "id": 344,
    "displayName": "Egg",
    "stackSize": 16,
    "name": "egg"
  },
  {
    "id": 345,
    "displayName": "Compass",
    "stackSize": 64,
    "name": "compass"
  },
  {
    "id": 346,
    "displayName": "Fishing Rod",
    "stackSize": 1,
    "name": "fishing_rod"
  },
  {
    "id": 347,
    "displayName": "Clock",
    "stackSize": 64,
    "name": "clock"
  },
  {
    "id": 348,
    "displayName": "Glowstone Dust",
    "stackSize": 64,
    "name": "glowstone_dust"
  },
  {
    "id": 349,
    "displayName": "Raw Fish",
    "stackSize": 64,
    "name": "fish",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Raw Fish"
      },
      {
        "metadata": 1,
        "displayName": "Raw Salmon"
      },
      {
        "metadata": 2,
        "displayName": "Clownfish"
      },
      {
        "metadata": 3,
        "displayName": "Pufferfish"
      }
    ]
  },
  {
    "id": 350,
    "displayName": "Cooked Fish",
    "stackSize": 64,
    "name": "cooked_fish"
  },
  {
    "id": 351,
    "displayName": "Dye",
    "stackSize": 64,
    "name": "dye",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Ink Sac"
      },
      {
        "metadata": 1,
        "displayName": "Rose Red"
      },
      {
        "metadata": 2,
        "displayName": "Cactus Green"
      },
      {
        "metadata": 3,
        "displayName": "Cocoa Beans"
      },
      {
        "metadata": 4,
        "displayName": "Lapis Lazuli"
      },
      {
        "metadata": 5,
        "displayName": "Purple Dye"
      },
      {
        "metadata": 6,
        "displayName": "Cyan Dye"
      },
      {
        "metadata": 7,
        "displayName": "Light Gray Dye"
      },
      {
        "metadata": 8,
        "displayName": "Gray Dye"
      },
      {
        "metadata": 9,
        "displayName": "Pink Dye"
      },
      {
        "metadata": 10,
        "displayName": "Lime Dye"
      },
      {
        "metadata": 11,
        "displayName": "Dandelion Yellow"
      },
      {
        "metadata": 12,
        "displayName": "Light Blue Dye"
      },
      {
        "metadata": 13,
        "displayName": "Magenta Dye"
      },
      {
        "metadata": 14,
        "displayName": "Orange Dye"
      },
      {
        "metadata": 15,
        "displayName": "Bone Meal"
      }
    ]
  },
  {
    "id": 352,
    "displayName": "Bone",
    "stackSize": 64,
    "name": "bone"
  },
  {
    "id": 353,
    "displayName": "Sugar",
    "stackSize": 64,
    "name": "sugar"
  },
  {
    "id": 354,
    "displayName": "Cake",
    "stackSize": 1,
    "name": "cake"
  },
  {
    "id": 355,
    "displayName": "Bed",
    "stackSize": 1,
    "name": "bed"
  },
  {
    "id": 356,
    "displayName": "Redstone Repeater",
    "stackSize": 64,
    "name": "repeater"
  },
  {
    "id": 357,
    "displayName": "Cookie",
    "stackSize": 64,
    "name": "cookie"
  },
  {
    "id": 358,
    "displayName": "Map",
    "stackSize": 64,
    "name": "filled_map"
  },
  {
    "id": 359,
    "displayName": "Shears",
    "stackSize": 1,
    "name": "shears"
  },
  {
    "id": 360,
    "displayName": "Melon",
    "stackSize": 64,
    "name": "melon"
  },
  {
    "id": 361,
    "displayName": "Pumpkin Seeds",
    "stackSize": 64,
    "name": "pumpkin_seeds"
  },
  {
    "id": 362,
    "displayName": "Melon Seeds",
    "stackSize": 64,
    "name": "melon_seeds"
  },
  {
    "id": 363,
    "displayName": "Raw Beef",
    "stackSize": 64,
    "name": "beef"
  },
  {
    "id": 364,
    "displayName": "Steak",
    "stackSize": 64,
    "name": "cooked_beef"
  },
  {
    "id": 365,
    "displayName": "Raw Chicken",
    "stackSize": 64,
    "name": "chicken"
  },
  {
    "id": 366,
    "displayName": "Cooked Chicken",
    "stackSize": 64,
    "name": "cooked_chicken"
  },
  {
    "id": 367,
    "displayName": "Rotten Flesh",
    "stackSize": 64,
    "name": "rotten_flesh"
  },
  {
    "id": 368,
    "displayName": "Ender Pearl",
    "stackSize": 16,
    "name": "ender_pearl"
  },
  {
    "id": 369,
    "displayName": "Blaze Rod",
    "stackSize": 64,
    "name": "blaze_rod"
  },
  {
    "id": 370,
    "displayName": "Ghast Tear",
    "stackSize": 64,
    "name": "ghast_tear"
  },
  {
    "id": 371,
    "displayName": "Gold Nugget",
    "stackSize": 64,
    "name": "gold_nugget"
  },
  {
    "id": 372,
    "displayName": "Nether Wart",
    "stackSize": 64,
    "name": "nether_wart"
  },
  {
    "id": 373,
    "displayName": "Potion",
    "stackSize": 1,
    "name": "potion"
  },
  {
    "id": 374,
    "displayName": "Glass Bottle",
    "stackSize": 64,
    "name": "glass_bottle"
  },
  {
    "id": 375,
    "displayName": "Spider Eye",
    "stackSize": 64,
    "name": "spider_eye"
  },
  {
    "id": 376,
    "displayName": "Fermented Spider Eye",
    "stackSize": 64,
    "name": "fermented_spider_eye"
  },
  {
    "id": 377,
    "displayName": "Blaze Powder",
    "stackSize": 64,
    "name": "blaze_powder"
  },
  {
    "id": 378,
    "displayName": "Magma Cream",
    "stackSize": 64,
    "name": "magma_cream"
  },
  {
    "id": 379,
    "displayName": "Brewing Stand",
    "stackSize": 64,
    "name": "brewing_stand"
  },
  {
    "id": 380,
    "displayName": "Cauldron",
    "stackSize": 64,
    "name": "cauldron"
  },
  {
    "id": 381,
    "displayName": "Eye of Ender",
    "stackSize": 64,
    "name": "ender_eye"
  },
  {
    "id": 382,
    "displayName": "Glistering Melon",
    "stackSize": 64,
    "name": "speckled_melon"
  },
  {
    "id": 383,
    "displayName": "Spawn Egg",
    "stackSize": 64,
    "name": "spawn_egg"
  },
  {
    "id": 384,
    "displayName": "Bottle o' Enchanting",
    "stackSize": 64,
    "name": "experience_bottle"
  },
  {
    "id": 385,
    "displayName": "Fire Charge",
    "stackSize": 64,
    "name": "fire_charge"
  },
  {
    "id": 386,
    "displayName": "Book and Quill",
    "stackSize": 1,
    "name": "writable_book"
  },
  {
    "id": 387,
    "displayName": "Written Book",
    "stackSize": 16,
    "name": "written_book"
  },
  {
    "id": 388,
    "displayName": "Emerald",
    "stackSize": 64,
    "name": "emerald"
  },
  {
    "id": 389,
    "displayName": "Item Frame",
    "stackSize": 64,
    "name": "item_frame"
  },
  {
    "id": 390,
    "displayName": "Flower Pot",
    "stackSize": 64,
    "name": "flower_pot",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Empty Flower Pot"
      },
      {
        "metadata": 1,
        "displayName": "Poppy Flower Pot"
      },
      {
        "metadata": 2,
        "displayName": "Dandelion Flower Pot"
      },
      {
        "metadata": 3,
        "displayName": "Oak sapling Flower Pot"
      },
      {
        "metadata": 4,
        "displayName": "Spruce sapling Flower Pot"
      },
      {
        "metadata": 5,
        "displayName": "Birch sapling Flower Pot"
      },
      {
        "metadata": 6,
        "displayName": "Jungle sapling Flower Pot"
      },
      {
        "metadata": 7,
        "displayName": "Red mushroom Flower Pot"
      },
      {
        "metadata": 8,
        "displayName": "Brown mushroom Flower Pot"
      },
      {
        "metadata": 9,
        "displayName": "Cactus Flower Pot"
      },
      {
        "metadata": 10,
        "displayName": "Dead bush Flower Pot"
      },
      {
        "metadata": 11,
        "displayName": "Fern Flower Pot"
      },
      {
        "metadata": 12,
        "displayName": "Acacia sapling Flower Pot"
      },
      {
        "metadata": 13,
        "displayName": "Dark oak sapling Flower Pot"
      }
    ]
  },
  {
    "id": 391,
    "displayName": "Carrot",
    "stackSize": 64,
    "name": "carrot"
  },
  {
    "id": 392,
    "displayName": "Potato",
    "stackSize": 64,
    "name": "potato"
  },
  {
    "id": 393,
    "displayName": "Baked Potato",
    "stackSize": 64,
    "name": "baked_potato"
  },
  {
    "id": 394,
    "displayName": "Poisonous Potato",
    "stackSize": 64,
    "name": "poisonous_potato"
  },
  {
    "id": 395,
    "displayName": "Empty Map",
    "stackSize": 64,
    "name": "map"
  },
  {
    "id": 396,
    "displayName": "Golden Carrot",
    "stackSize": 64,
    "name": "golden_carrot"
  },
  {
    "id": 397,
    "displayName": "Mob head",
    "stackSize": 64,
    "name": "skull",
    "variations": [
      {
        "metadata": 0,
        "displayName": "Skeleton Skull"
      },
      {
        "metadata": 1,
        "displayName": "Wither Skeleton Skull"
      },
      {
        "metadata": 2,
        "displayName": "Zombie Head"
      },
      {
        "metadata": 3,
        "displayName": "Head"
      },
      {
        "metadata": 4,
        "displayName": "Creeper Head"
      }
    ]
  },
  {
    "id": 398,
    "displayName": "Carrot on a Stick",
    "stackSize": 1,
    "name": "carrot_on_a_stick"
  },
  {
    "id": 399,
    "displayName": "Nether Star",
    "stackSize": 64,
    "name": "nether_star"
  },
  {
    "id": 400,
    "displayName": "Pumpkin Pie",
    "stackSize": 64,
    "name": "pumpkin_pie"
  },
  {
    "id": 401,
    "displayName": "Firework Rocket",
    "stackSize": 64,
    "name": "fireworks"
  },
  {
    "id": 402,
    "displayName": "Firework Star",
    "stackSize": 64,
    "name": "firework_charge"
  },
  {
    "id": 403,
    "displayName": "Enchanted Book",
    "stackSize": 1,
    "name": "enchanted_book"
  },
  {
    "id": 404,
    "displayName": "Redstone Comparator",
    "stackSize": 64,
    "name": "comparator"
  },
  {
    "id": 405,
    "displayName": "Nether Brick",
    "stackSize": 64,
    "name": "netherbrick"
  },
  {
    "id": 406,
    "displayName": "Nether Quartz",
    "stackSize": 64,
    "name": "quartz"
  },
  {
    "id": 407,
    "displayName": "Minecart with TNT",
    "stackSize": 1,
    "name": "tnt_minecart"
  },
  {
    "id": 408,
    "displayName": "Minecart with Hopper",
    "stackSize": 1,
    "name": "hopper_minecart"
  },
  {
    "id": 409,
    "displayName": "Prismarine Shard",
    "stackSize": 64,
    "name": "prismarine_shard"
  },
  {
    "id": 410,
    "displayName": "Prismarine Crystals",
    "stackSize": 64,
    "name": "prismarine_crystals"
  },
  {
    "id": 411,
    "displayName": "Raw Rabbit",
    "stackSize": 64,
    "name": "rabbit"
  },
  {
    "id": 412,
    "displayName": "Cooked Rabbit",
    "stackSize": 64,
    "name": "cooked_rabbit"
  },
  {
    "id": 413,
    "displayName": "Rabbit Stew",
    "stackSize": 1,
    "name": "rabbit_stew"
  },
  {
    "id": 414,
    "displayName": "Rabbit's Foot",
    "stackSize": 64,
    "name": "rabbit_foot"
  },
  {
    "id": 415,
    "displayName": "Rabbit Hide",
    "stackSize": 64,
    "name": "rabbit_hide"
  },
  {
    "id": 416,
    "displayName": "Armor Stand",
    "stackSize": 16,
    "name": "armor_stand"
  },
  {
    "id": 417,
    "displayName": "Iron Horse Armor",
    "stackSize": 1,
    "name": "iron_horse_armor"
  },
  {
    "id": 418,
    "displayName": "Golden Horse Armor",
    "stackSize": 1,
    "name": "golden_horse_armor"
  },
  {
    "id": 419,
    "displayName": "Diamond Horse Armor",
    "stackSize": 1,
    "name": "diamond_horse_armor"
  },
  {
    "id": 420,
    "displayName": "Lead",
    "stackSize": 64,
    "name": "lead"
  },
  {
    "id": 421,
    "displayName": "Name Tag",
    "stackSize": 64,
    "name": "name_tag"
  },
  {
    "id": 422,
    "displayName": "Minecart with Command Block",
    "stackSize": 1,
    "name": "command_block_minecart"
  },
  {
    "id": 423,
    "displayName": "Raw Mutton",
    "stackSize": 64,
    "name": "mutton"
  },
  {
    "id": 424,
    "displayName": "Cooked Mutton",
    "stackSize": 64,
    "name": "cooked_mutton"
  },
  {
    "id": 425,
    "displayName": "Banner",
    "stackSize": 16,
    "name": "banner"
  },
  {
    "id": 427,
    "displayName": "Spruce Door",
    "stackSize": 64,
    "name": "spruce_door"
  },
  {
    "id": 428,
    "displayName": "Birch Door",
    "stackSize": 64,
    "name": "birch_door"
  },
  {
    "id": 429,
    "displayName": "Jungle Door",
    "stackSize": 64,
    "name": "jungle_door"
  },
  {
    "id": 430,
    "displayName": "Acacia Door",
    "stackSize": 64,
    "name": "acacia_door"
  },
  {
    "id": 431,
    "displayName": "Dark Oak Door",
    "stackSize": 64,
    "name": "dark_oak_door"
  },
  {
    "id": 432,
    "displayName": "Chorus Fruit",
    "stackSize": 64,
    "name": "chorus_fruit"
  },
  {
    "id": 433,
    "displayName": "Popped Chorus Fruit",
    "stackSize": 64,
    "name": "popped_chorus_fruit"
  },
  {
    "id": 434,
    "displayName": "Beetroot",
    "stackSize": 64,
    "name": "beetroot"
  },
  {
    "id": 435,
    "displayName": "Beetroot Seeds",
    "stackSize": 64,
    "name": "beetroot_seeds"
  },
  {
    "id": 436,
    "displayName": "Beetroot Soup",
    "stackSize": 1,
    "name": "beetroot_soup"
  },
  {
    "id": 437,
    "displayName": "Dragon's Breath",
    "stackSize": 64,
    "name": "dragon's_breath"
  },
  {
    "id": 438,
    "displayName": "Splash Potion",
    "stackSize": 1,
    "name": "splash_potion"
  },
  {
    "id": 439,
    "displayName": "Spectral Arrow",
    "stackSize": 64,
    "name": "spectral_arrow"
  },
  {
    "id": 440,
    "displayName": "Tipped Arrow",
    "stackSize": 64,
    "name": "tipped_arrow"
  },
  {
    "id": 441,
    "displayName": "Lingering Potion",
    "stackSize": 1,
    "name": "lingering_potion"
  },
  {
    "id": 442,
    "displayName": "Shield",
    "stackSize": 1,
    "name": "shield"
  },
  {
    "id": 443,
    "displayName": "Elytra",
    "stackSize": 1,
    "name": "elytra"
  },
  {
    "id": 444,
    "displayName": "Spruce Boat",
    "stackSize": 1,
    "name": "spruce_boat"
  },
  {
    "id": 445,
    "displayName": "Birch Boat",
    "stackSize": 1,
    "name": "birch_boat"
  },
  {
    "id": 446,
    "displayName": "Jungle Boat",
    "stackSize": 1,
    "name": "jungle_boat"
  },
  {
    "id": 447,
    "displayName": "Acacia Boat",
    "stackSize": 1,
    "name": "acacia_boat"
  },
  {
    "id": 448,
    "displayName": "Dark Oak Boat",
    "stackSize": 1,
    "name": "dark_oak_boat"
  },
  {
    "id": 2256,
    "displayName": "13 Disc",
    "stackSize": 1,
    "name": "record_13"
  },
  {
    "id": 2257,
    "displayName": "Cat Disc",
    "stackSize": 1,
    "name": "record_cat"
  },
  {
    "id": 2258,
    "displayName": "Blocks Disc",
    "stackSize": 1,
    "name": "record_blocks"
  },
  {
    "id": 2259,
    "displayName": "Chirp Disc",
    "stackSize": 1,
    "name": "record_chirp"
  },
  {
    "id": 2260,
    "displayName": "Far Disc",
    "stackSize": 1,
    "name": "record_far"
  },
  {
    "id": 2261,
    "displayName": "Mall Disc",
    "stackSize": 1,
    "name": "record_mall"
  },
  {
    "id": 2262,
    "displayName": "Mellohi Disc",
    "stackSize": 1,
    "name": "record_mellohi"
  },
  {
    "id": 2263,
    "displayName": "Stal Disc",
    "stackSize": 1,
    "name": "record_stal"
  },
  {
    "id": 2264,
    "displayName": "Strad Disc",
    "stackSize": 1,
    "name": "record_strad"
  },
  {
    "id": 2265,
    "displayName": "Ward Disc",
    "stackSize": 1,
    "name": "record_ward"
  },
  {
    "id": 2266,
    "displayName": "11 Disc",
    "stackSize": 1,
    "name": "record_11"
  },
  {
    "id": 2267,
    "displayName": "Wait Disc",
    "stackSize": 1,
    "name": "record_wait"
  }
]
},{}],353:[function(require,module,exports){
arguments[4][342][0].apply(exports,arguments)
},{"dup":342}],354:[function(require,module,exports){
module.exports={
  "types": {
    "varint": "native",
    "string": "native",
    "ushort": "native",
    "ubyte": "native",
    "long": "native",
    "buffer": "native",
    "int": "native",
    "byte": "native",
    "bool": "native",
    "short": "native",
    "float": "native",
    "double": "native",
    "UUID": "native",
    "option": "native",
    "entityMetadataLoop": "native",
    "bitfield": "native",
    "container": "native",
    "switch": "native",
    "void": "native",
    "array": "native",
    "restBuffer": "native",
    "nbt":"native",
    "optionalNbt":"native",
    "slot": ["container",[
      {
        "name":"blockId",
        "type":"short"
      },
      {
        "anon":true,
        "type":["switch",
          {
            "compareTo":"blockId",
            "fields": {
              "-1": "void"
            },
            "default":[
              "container",[
                {
                  "name":"itemCount",
                  "type":"byte"
                },
                {
                  "name":"itemDamage",
                  "type":"short"
                },
                {
                  "name":"nbtData",
                  "type":"optionalNbt"
                }
              ]
            ]
          }
        ]
      }
    ]],
    "position": ["bitfield", [
      { "name": "x", "size": 26, "signed": true },
      { "name": "y", "size": 12, "signed": true },
      { "name": "z", "size": 26, "signed": true }
    ]],
    "entityMetadataItem": [
      "switch",
      {
        "compareTo": "$compareTo",
        "fields": {
          "0": "byte",
          "1": "varint",
          "2": "float",
          "3": "string",
          "4": "string",
          "5": "slot",
          "6": "bool",
          "7": [
            "container",
            [
              {
                "name": "pitch",
                "type": "float"
              },
              {
                "name": "yaw",
                "type": "float"
              },
              {
                "name": "roll",
                "type": "float"
              }
            ]
          ],
          "8": "position",
          "9": [
            "option",
            "position"
          ],
          "10": "varint",
          "11": [
            "option",
            "UUID"
          ],
          "12": "varint"
        }
      }
    ],
    "entityMetadata": ["entityMetadataLoop", {
      "endVal": 255,
      "type": ["container", [
        { "anon": true, "type": ["container", [
          { "name": "key", "type": "ubyte" },
          { "name": "type", "type": "byte" }
        ]]},
        { "name": "value", "type": ["entityMetadataItem", { "compareTo": "type" }]}
      ]]
    }]
  },
  "states": {
    "handshaking": {
      "toClient": {},
      "toServer": {
        "set_protocol": {
          "id": "0x00",
          "fields": [
            {
              "name": "protocolVersion",
              "type": "varint"
            },
            {
              "name": "serverHost",
              "type": "string"
            },
            {
              "name": "serverPort",
              "type": "ushort"
            },
            {
              "name": "nextState",
              "type": "varint"
            }
          ]
        },
        "legacy_server_list_ping": {
          "id": "0xfe",
          "fields": [
            {
              "name": "payload",
              "type": "ubyte"
            }
          ]
        }
      }
    },
    "status": {
      "toClient": {
        "server_info": {
          "id": "0x00",
          "fields": [
            {
              "name": "response",
              "type": "string"
            }
          ]
        },
        "ping": {
          "id": "0x01",
          "fields": [
            {
              "name": "time",
              "type": "long"
            }
          ]
        }
      },
      "toServer": {
        "ping_start": {
          "id": "0x00",
          "fields": []
        },
        "ping": {
          "id": "0x01",
          "fields": [
            {
              "name": "time",
              "type": "long"
            }
          ]
        }
      }
    },
    "login": {
      "toClient": {
        "disconnect": {
          "id": "0x00",
          "fields": [
            {
              "name": "reason",
              "type": "string"
            }
          ]
        },
        "encryption_begin": {
          "id": "0x01",
          "fields": [
            {
              "name": "serverId",
              "type": "string"
            },
            {
              "name": "publicKey",
              "type": [
                "buffer",
                {
                  "countType": "varint"
                }
              ]
            },
            {
              "name": "verifyToken",
              "type": [
                "buffer",
                {
                  "countType": "varint"
                }
              ]
            }
          ]
        },
        "success": {
          "id": "0x02",
          "fields": [
            {
              "name": "uuid",
              "type": "string"
            },
            {
              "name": "username",
              "type": "string"
            }
          ]
        },
        "compress": {
          "id": "0x03",
          "fields": [
            {
              "name": "threshold",
              "type": "varint"
            }
          ]
        }
      },
      "toServer": {
        "login_start": {
          "id": "0x00",
          "fields": [
            {
              "name": "username",
              "type": "string"
            }
          ]
        },
        "encryption_begin": {
          "id": "0x01",
          "fields": [
            {
              "name": "sharedSecret",
              "type": [
                "buffer",
                {
                  "countType": "varint"
                }
              ]
            },
            {
              "name": "verifyToken",
              "type": [
                "buffer",
                {
                  "countType": "varint"
                }
              ]
            }
          ]
        }
      }
    },
    "play": {
      "toClient": {
        "keep_alive": {
          "id": "0x1f",
          "fields": [
            {
              "name": "keepAliveId",
              "type": "varint"
            }
          ]
        },
        "login": {
          "id": "0x24",
          "fields": [
            {
              "name": "entityId",
              "type": "int"
            },
            {
              "name": "gameMode",
              "type": "ubyte"
            },
            {
              "name": "dimension",
              "type": "byte"
            },
            {
              "name": "difficulty",
              "type": "ubyte"
            },
            {
              "name": "maxPlayers",
              "type": "ubyte"
            },
            {
              "name": "levelType",
              "type": "string"
            },
            {
              "name": "reducedDebugInfo",
              "type": "bool"
            }
          ]
        },
        "chat": {
          "id": "0x0f",
          "fields": [
            {
              "name": "message",
              "type": "string"
            },
            {
              "name": "position",
              "type": "byte"
            }
          ]
        },
        "update_time": {
          "id": "0x43",
          "fields": [
            {
              "name": "age",
              "type": "long"
            },
            {
              "name": "time",
              "type": "long"
            }
          ]
        },
        "entity_equipment": {
          "id": "0x3c",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "slot",
              "type": "varint"
            },
            {
              "name": "item",
              "type": "slot"
            }
          ]
        },
        "spawn_position": {
          "id": "0x42",
          "fields": [
            {
              "name": "location",
              "type": "position"
            }
          ]
        },
        "update_health": {
          "id": "0x3e",
          "fields": [
            {
              "name": "health",
              "type": "float"
            },
            {
              "name": "food",
              "type": "varint"
            },
            {
              "name": "foodSaturation",
              "type": "float"
            }
          ]
        },
        "respawn": {
          "id": "0x33",
          "fields": [
            {
              "name": "dimension",
              "type": "int"
            },
            {
              "name": "difficulty",
              "type": "ubyte"
            },
            {
              "name": "gamemode",
              "type": "ubyte"
            },
            {
              "name": "levelType",
              "type": "string"
            }
          ]
        },
        "position": {
          "id": "0x2e",
          "fields": [
            {
              "name": "x",
              "type": "double"
            },
            {
              "name": "y",
              "type": "double"
            },
            {
              "name": "z",
              "type": "double"
            },
            {
              "name": "yaw",
              "type": "float"
            },
            {
              "name": "pitch",
              "type": "float"
            },
            {
              "name": "flags",
              "type": "byte"
            }
          ]
        },
        "held_item_slot": {
          "id": "0x37",
          "fields": [
            {
              "name": "slot",
              "type": "byte"
            }
          ]
        },
        "bed": {
          "id": "0x2f",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "location",
              "type": "position"
            }
          ]
        },
        "animation": {
          "id": "0x06",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "animation",
              "type": "ubyte"
            }
          ]
        },
        "named_entity_spawn": {
          "id": "0x05",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "playerUUID",
              "type": "UUID"
            },
            {
              "name": "x",
              "type": "int"
            },
            {
              "name": "y",
              "type": "int"
            },
            {
              "name": "z",
              "type": "int"
            },
            {
              "name": "yaw",
              "type": "byte"
            },
            {
              "name": "pitch",
              "type": "byte"
            },
            {
              "name": "metadata",
              "type": "entityMetadata"
            }
          ]
        },
        "collect": {
          "id": "0x47",
          "fields": [
            {
              "name": "collectedEntityId",
              "type": "varint"
            },
            {
              "name": "collectorEntityId",
              "type": "varint"
            }
          ]
        },
        "spawn_entity": {
          "id": "0x00",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "entityUUID",
              "type": "UUID"
            },
            {
              "name": "type",
              "type": "byte"
            },
            {
              "name": "x",
              "type": "int"
            },
            {
              "name": "y",
              "type": "int"
            },
            {
              "name": "z",
              "type": "int"
            },
            {
              "name": "pitch",
              "type": "byte"
            },
            {
              "name": "yaw",
              "type": "byte"
            },
            {
              "name": "intField",
              "type": "int"
            },
            {
              "name": "velocityX",
              "type": "short"
            },
            {
              "name": "velocityY",
              "type": "short"
            },
            {
              "name": "velocityZ",
              "type": "short"
            }
          ]
        },
        "spawn_entity_living": {
          "id": "0x03",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "entityUUID",
              "type": "UUID"
            },
            {
              "name": "type",
              "type": "ubyte"
            },
            {
              "name": "x",
              "type": "int"
            },
            {
              "name": "y",
              "type": "int"
            },
            {
              "name": "z",
              "type": "int"
            },
            {
              "name": "yaw",
              "type": "byte"
            },
            {
              "name": "pitch",
              "type": "byte"
            },
            {
              "name": "headPitch",
              "type": "byte"
            },
            {
              "name": "velocityX",
              "type": "short"
            },
            {
              "name": "velocityY",
              "type": "short"
            },
            {
              "name": "velocityZ",
              "type": "short"
            },
            {
              "name": "metadata",
              "type": "entityMetadata"
            }
          ]
        },
        "spawn_entity_painting": {
          "id": "0x04",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "title",
              "type": "string"
            },
            {
              "name": "location",
              "type": "position"
            },
            {
              "name": "direction",
              "type": "ubyte"
            }
          ]
        },
        "spawn_entity_experience_orb": {
          "id": "0x01",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "x",
              "type": "int"
            },
            {
              "name": "y",
              "type": "int"
            },
            {
              "name": "z",
              "type": "int"
            },
            {
              "name": "count",
              "type": "short"
            }
          ]
        },
        "entity_velocity": {
          "id": "0x3b",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "velocityX",
              "type": "short"
            },
            {
              "name": "velocityY",
              "type": "short"
            },
            {
              "name": "velocityZ",
              "type": "short"
            }
          ]
        },
        "entity_destroy": {
          "id": "0x30",
          "fields": [
            {
              "name": "entityIds",
              "type": [
                "array",
                {
                  "countType": "varint",
                  "type": "varint"
                }
              ]
            }
          ]
        },
        "entity": {
          "id": "0x29",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            }
          ]
        },
        "rel_entity_move": {
          "id": "0x26",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "dX",
              "type": "byte"
            },
            {
              "name": "dY",
              "type": "byte"
            },
            {
              "name": "dZ",
              "type": "byte"
            },
            {
              "name": "onGround",
              "type": "bool"
            }
          ]
        },
        "entity_look": {
          "id": "0x28",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "yaw",
              "type": "byte"
            },
            {
              "name": "pitch",
              "type": "byte"
            },
            {
              "name": "onGround",
              "type": "bool"
            }
          ]
        },
        "entity_move_look": {
          "id": "0x27",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "dX",
              "type": "byte"
            },
            {
              "name": "dY",
              "type": "byte"
            },
            {
              "name": "dZ",
              "type": "byte"
            },
            {
              "name": "yaw",
              "type": "byte"
            },
            {
              "name": "pitch",
              "type": "byte"
            },
            {
              "name": "onGround",
              "type": "bool"
            }
          ]
        },
        "entity_teleport": {
          "id": "0x48",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "x",
              "type": "int"
            },
            {
              "name": "y",
              "type": "int"
            },
            {
              "name": "z",
              "type": "int"
            },
            {
              "name": "yaw",
              "type": "byte"
            },
            {
              "name": "pitch",
              "type": "byte"
            },
            {
              "name": "onGround",
              "type": "bool"
            }
          ]
        },
        "entity_head_rotation": {
          "id": "0x34",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "headYaw",
              "type": "byte"
            }
          ]
        },
        "entity_status": {
          "id": "0x1a",
          "fields": [
            {
              "name": "entityId",
              "type": "int"
            },
            {
              "name": "entityStatus",
              "type": "byte"
            }
          ]
        },
        "attach_entity": {
          "id": "0x3a",
          "fields": [
            {
              "name": "entityId",
              "type": "int"
            },
            {
              "name": "vehicleId",
              "type": "int"
            },
            {
              "name": "leash",
              "type": "bool"
            }
          ]
        },
        "entity_metadata": {
          "id": "0x39",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "metadata",
              "type": "entityMetadata"
            }
          ]
        },
        "entity_effect": {
          "id": "0x4a",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "effectId",
              "type": "byte"
            },
            {
              "name": "amplifier",
              "type": "byte"
            },
            {
              "name": "duration",
              "type": "varint"
            },
            {
              "name": "hideParticles",
              "type": "bool"
            }
          ]
        },
        "remove_entity_effect": {
          "id": "0x31",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "effectId",
              "type": "byte"
            }
          ]
        },
        "experience": {
          "id": "0x3d",
          "fields": [
            {
              "name": "experienceBar",
              "type": "float"
            },
            {
              "name": "level",
              "type": "varint"
            },
            {
              "name": "totalExperience",
              "type": "varint"
            }
          ]
        },
        "update_attributes": {
          "id": "0x49",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "properties",
              "type": [
                "array",
                {
                  "countType": "int",
                  "type": [
                    "container",
                    [
                      {
                        "name": "key",
                        "type": "string"
                      },
                      {
                        "name": "value",
                        "type": "double"
                      },
                      {
                        "name": "modifiers",
                        "type": [
                          "array",
                          {
                            "countType": "varint",
                            "type": [
                              "container",
                              [
                                {
                                  "name": "UUID",
                                  "type": "UUID"
                                },
                                {
                                  "name": "amount",
                                  "type": "double"
                                },
                                {
                                  "name": "operation",
                                  "type": "byte"
                                }
                              ]
                            ]
                          }
                        ]
                      }
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "map_chunk": {
          "id": "0x20",
          "fields": [
            {
              "name": "x",
              "type": "int"
            },
            {
              "name": "z",
              "type": "int"
            },
            {
              "name": "groundUp",
              "type": "bool"
            },
            {
              "name": "bitMap",
              "type": "varint"
            },
            {
              "name": "chunkData",
              "type": [
                "buffer",
                {
                  "countType": "varint"
                }
              ]
            }
          ]
        },
        "multi_block_change": {
          "id": "0x10",
          "fields": [
            {
              "name": "chunkX",
              "type": "int"
            },
            {
              "name": "chunkZ",
              "type": "int"
            },
            {
              "name": "records",
              "type": [
                "array",
                {
                  "countType": "varint",
                  "type": [
                    "container",
                    [
                      {
                        "name": "horizontalPos",
                        "type": "ubyte"
                      },
                      {
                        "name": "y",
                        "type": "ubyte"
                      },
                      {
                        "name": "blockId",
                        "type": "varint"
                      }
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "block_change": {
          "id": "0x0b",
          "fields": [
            {
              "name": "location",
              "type": "position"
            },
            {
              "name": "type",
              "type": "varint"
            }
          ]
        },
        "block_action": {
          "id": "0x0a",
          "fields": [
            {
              "name": "location",
              "type": "position"
            },
            {
              "name": "byte1",
              "type": "ubyte"
            },
            {
              "name": "byte2",
              "type": "ubyte"
            },
            {
              "name": "blockId",
              "type": "varint"
            }
          ]
        },
        "block_break_animation": {
          "id": "0x08",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "location",
              "type": "position"
            },
            {
              "name": "destroyStage",
              "type": "byte"
            }
          ]
        },
        "explosion": {
          "id": "0x1b",
          "fields": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            },
            {
              "name": "affectedBlockOffsets",
              "type": [
                "array",
                {
                  "countType": "int",
                  "type": [
                    "container",
                    [
                      {
                        "name": "x",
                        "type": "byte"
                      },
                      {
                        "name": "y",
                        "type": "byte"
                      },
                      {
                        "name": "z",
                        "type": "byte"
                      }
                    ]
                  ]
                }
              ]
            },
            {
              "name": "playerMotionX",
              "type": "float"
            },
            {
              "name": "playerMotionY",
              "type": "float"
            },
            {
              "name": "playerMotionZ",
              "type": "float"
            }
          ]
        },
        "world_event": {
          "id": "0x21",
          "fields": [
            {
              "name": "effectId",
              "type": "int"
            },
            {
              "name": "location",
              "type": "position"
            },
            {
              "name": "data",
              "type": "int"
            },
            {
              "name": "global",
              "type": "bool"
            }
          ]
        },
        "named_sound_effect": {
          "id": "0x23",
          "fields": [
            {
              "name": "soundName",
              "type": "string"
            },
            {
              "name": "x",
              "type": "int"
            },
            {
              "name": "y",
              "type": "int"
            },
            {
              "name": "z",
              "type": "int"
            },
            {
              "name": "volume",
              "type": "float"
            },
            {
              "name": "pitch",
              "type": "ubyte"
            }
          ]
        },
        "world_particles": {
          "id": "0x22",
          "fields": [
            {
              "name": "particleId",
              "type": "int"
            },
            {
              "name": "longDistance",
              "type": "bool"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "offsetX",
              "type": "float"
            },
            {
              "name": "offsetY",
              "type": "float"
            },
            {
              "name": "offsetZ",
              "type": "float"
            },
            {
              "name": "particleData",
              "type": "float"
            },
            {
              "name": "particles",
              "type": "int"
            },
            {
              "name": "data",
              "type": [
                "array",
                {
                  "count": {
                    "field": "particleId",
                    "map": {
                      "36": 2,
                      "37": 1,
                      "38": 1
                    },
                    "default": 0
                  },
                  "type": "varint"
                }
              ]
            }
          ]
        },
        "game_state_change": {
          "id": "0x1e",
          "fields": [
            {
              "name": "reason",
              "type": "ubyte"
            },
            {
              "name": "gameMode",
              "type": "float"
            }
          ]
        },
        "spawn_entity_weather": {
          "id": "0x02",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "type",
              "type": "byte"
            },
            {
              "name": "x",
              "type": "int"
            },
            {
              "name": "y",
              "type": "int"
            },
            {
              "name": "z",
              "type": "int"
            }
          ]
        },
        "open_window": {
          "id": "0x13",
          "fields": [
            {
              "name": "windowId",
              "type": "ubyte"
            },
            {
              "name": "inventoryType",
              "type": "string"
            },
            {
              "name": "windowTitle",
              "type": "string"
            },
            {
              "name": "slotCount",
              "type": "ubyte"
            },
            {
              "name": "entityId",
              "type": [
                "switch",
                {
                  "compareTo": "inventoryType",
                  "fields": {
                    "EntityHorse": "int"
                  },
                  "default": "void"
                }
              ]
            }
          ]
        },
        "close_window": {
          "id": "0x12",
          "fields": [
            {
              "name": "windowId",
              "type": "ubyte"
            }
          ]
        },
        "set_slot": {
          "id": "0x16",
          "fields": [
            {
              "name": "windowId",
              "type": "byte"
            },
            {
              "name": "slot",
              "type": "short"
            },
            {
              "name": "item",
              "type": "slot"
            }
          ]
        },
        "window_items": {
          "id": "0x14",
          "fields": [
            {
              "name": "windowId",
              "type": "ubyte"
            },
            {
              "name": "items",
              "type": [
                "array",
                {
                  "countType": "short",
                  "type": "slot"
                }
              ]
            }
          ]
        },
        "craft_progress_bar": {
          "id": "0x15",
          "fields": [
            {
              "name": "windowId",
              "type": "ubyte"
            },
            {
              "name": "property",
              "type": "short"
            },
            {
              "name": "value",
              "type": "short"
            }
          ]
        },
        "transaction": {
          "id": "0x11",
          "fields": [
            {
              "name": "windowId",
              "type": "byte"
            },
            {
              "name": "action",
              "type": "short"
            },
            {
              "name": "accepted",
              "type": "bool"
            }
          ]
        },
        "update_sign": {
          "id": "0x45",
          "fields": [
            {
              "name": "location",
              "type": "position"
            },
            {
              "name": "text1",
              "type": "string"
            },
            {
              "name": "text2",
              "type": "string"
            },
            {
              "name": "text3",
              "type": "string"
            },
            {
              "name": "text4",
              "type": "string"
            }
          ]
        },
        "map": {
          "id": "0x25",
          "fields": [
            {
              "name": "itemDamage",
              "type": "varint"
            },
            {
              "name": "scale",
              "type": "byte"
            },
            {
              "name": "trackingPosition",
              "type": "bool"
            },
            {
              "name": "icons",
              "type": [
                "array",
                {
                  "countType": "varint",
                  "type": [
                    "container",
                    [
                      {
                        "name": "directionAndType",
                        "type": "byte"
                      },
                      {
                        "name": "x",
                        "type": "byte"
                      },
                      {
                        "name": "y",
                        "type": "byte"
                      }
                    ]
                  ]
                }
              ]
            },
            {
              "name": "columns",
              "type": "byte"
            },
            {
              "name": "rows",
              "type": [
                "switch",
                {
                  "compareTo": "columns",
                  "fields": {
                    "0": "void"
                  },
                  "default": "byte"
                }
              ]
            },
            {
              "name": "x",
              "type": [
                "switch",
                {
                  "compareTo": "columns",
                  "fields": {
                    "0": "void"
                  },
                  "default": "byte"
                }
              ]
            },
            {
              "name": "y",
              "type": [
                "switch",
                {
                  "compareTo": "columns",
                  "fields": {
                    "0": "void"
                  },
                  "default": "byte"
                }
              ]
            },
            {
              "name": "data",
              "type": [
                "switch",
                {
                  "compareTo": "columns",
                  "fields": {
                    "0": "void"
                  },
                  "default": [
                    "buffer",
                    {
                      "countType": "varint"
                    }
                  ]
                }
              ]
            }
          ]
        },
        "tile_entity_data": {
          "id": "0x09",
          "fields": [
            {
              "name": "location",
              "type": "position"
            },
            {
              "name": "action",
              "type": "ubyte"
            },
            {
              "name": "nbtData",
              "type": "optionalNbt"
            }
          ]
        },
        "open_sign_entity": {
          "id": "0x2a",
          "fields": [
            {
              "name": "location",
              "type": "position"
            }
          ]
        },
        "statistics": {
          "id": "0x07",
          "fields": [
            {
              "name": "entries",
              "type": [
                "array",
                {
                  "countType": "varint",
                  "type": [
                    "container",
                    [
                      {
                        "name": "name",
                        "type": "string"
                      },
                      {
                        "name": "value",
                        "type": "varint"
                      }
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "player_info": {
          "id": "0x2d",
          "fields": [
            {
              "name": "action",
              "type": "varint"
            },
            {
              "name": "data",
              "type": [
                "array",
                {
                  "countType": "varint",
                  "type": [
                    "container",
                    [
                      {
                        "name": "UUID",
                        "type": "UUID"
                      },
                      {
                        "name": "name",
                        "type": [
                          "switch",
                          {
                            "compareTo": "../action",
                            "fields": {
                              "0": "string"
                            },
                            "default": "void"
                          }
                        ]
                      },
                      {
                        "name": "properties",
                        "type": [
                          "switch",
                          {
                            "compareTo": "../action",
                            "fields": {
                              "0": [
                                "array",
                                {
                                  "countType": "varint",
                                  "type": [
                                    "container",
                                    [
                                      {
                                        "name": "name",
                                        "type": "string"
                                      },
                                      {
                                        "name": "value",
                                        "type": "string"
                                      },
                                      {
                                        "name": "signature",
                                        "type": [
                                          "option",
                                          "string"
                                        ]
                                      }
                                    ]
                                  ]
                                }
                              ]
                            },
                            "default": "void"
                          }
                        ]
                      },
                      {
                        "name": "gamemode",
                        "type": [
                          "switch",
                          {
                            "compareTo": "../action",
                            "fields": {
                              "0": "varint",
                              "1": "varint"
                            },
                            "default": "void"
                          }
                        ]
                      },
                      {
                        "name": "ping",
                        "type": [
                          "switch",
                          {
                            "compareTo": "../action",
                            "fields": {
                              "0": "varint",
                              "2": "varint"
                            },
                            "default": "void"
                          }
                        ]
                      },
                      {
                        "name": "displayName",
                        "type": [
                          "switch",
                          {
                            "compareTo": "../action",
                            "fields": {
                              "0": [
                                "option",
                                "string"
                              ],
                              "3": [
                                "option",
                                "string"
                              ]
                            },
                            "default": "void"
                          }
                        ]
                      }
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "abilities": {
          "id": "0x2b",
          "fields": [
            {
              "name": "flags",
              "type": "byte"
            },
            {
              "name": "flyingSpeed",
              "type": "float"
            },
            {
              "name": "walkingSpeed",
              "type": "float"
            }
          ]
        },
        "tab_complete": {
          "id": "0x0e",
          "fields": [
            {
              "name": "matches",
              "type": [
                "array",
                {
                  "countType": "varint",
                  "type": "string"
                }
              ]
            }
          ]
        },
        "scoreboard_objective": {
          "id": "0x3f",
          "fields": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "action",
              "type": "byte"
            },
            {
              "name": "displayText",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "0": "string",
                    "2": "string"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "type",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "0": "string",
                    "2": "string"
                  },
                  "default": "void"
                }
              ]
            }
          ]
        },
        "scoreboard_score": {
          "id": "0x41",
          "fields": [
            {
              "name": "itemName",
              "type": "string"
            },
            {
              "name": "action",
              "type": "byte"
            },
            {
              "name": "scoreName",
              "type": "string"
            },
            {
              "name": "value",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "1": "void"
                  },
                  "default": "varint"
                }
              ]
            }
          ]
        },
        "scoreboard_display_objective": {
          "id": "0x38",
          "fields": [
            {
              "name": "position",
              "type": "byte"
            },
            {
              "name": "name",
              "type": "string"
            }
          ]
        },
        "scoreboard_team": {
          "id": "0x40",
          "fields": [
            {
              "name": "team",
              "type": "string"
            },
            {
              "name": "mode",
              "type": "byte"
            },
            {
              "name": "name",
              "type": [
                "switch",
                {
                  "compareTo": "mode",
                  "fields": {
                    "0": "string",
                    "2": "string"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "prefix",
              "type": [
                "switch",
                {
                  "compareTo": "mode",
                  "fields": {
                    "0": "string",
                    "2": "string"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "suffix",
              "type": [
                "switch",
                {
                  "compareTo": "mode",
                  "fields": {
                    "0": "string",
                    "2": "string"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "friendlyFire",
              "type": [
                "switch",
                {
                  "compareTo": "mode",
                  "fields": {
                    "0": "byte",
                    "2": "byte"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "nameTagVisibility",
              "type": [
                "switch",
                {
                  "compareTo": "mode",
                  "fields": {
                    "0": "string",
                    "2": "string"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "collisionRule",
              "type": [
                "switch",
                {
                  "compareTo": "mode",
                  "fields": {
                    "0": "string",
                    "2": "string"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "color",
              "type": [
                "switch",
                {
                  "compareTo": "mode",
                  "fields": {
                    "0": "byte",
                    "2": "byte"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "players",
              "type": [
                "switch",
                {
                  "compareTo": "mode",
                  "fields": {
                    "0": [
                      "array",
                      {
                        "countType": "varint",
                        "type": "string"
                      }
                    ],
                    "3": [
                      "array",
                      {
                        "countType": "varint",
                        "type": "string"
                      }
                    ],
                    "4": [
                      "array",
                      {
                        "countType": "varint",
                        "type": "string"
                      }
                    ]
                  },
                  "default": "void"
                }
              ]
            }
          ]
        },
        "custom_payload": {
          "id": "0x18",
          "fields": [
            {
              "name": "channel",
              "type": "string"
            },
            {
              "name": "data",
              "type": "restBuffer"
            }
          ]
        },
        "kick_disconnect": {
          "id": "0x19",
          "fields": [
            {
              "name": "reason",
              "type": "string"
            }
          ]
        },
        "difficulty": {
          "id": "0x0d",
          "fields": [
            {
              "name": "difficulty",
              "type": "ubyte"
            }
          ]
        },
        "combat_event": {
          "id": "0x2c",
          "fields": [
            {
              "name": "event",
              "type": "varint"
            },
            {
              "name": "duration",
              "type": [
                "switch",
                {
                  "compareTo": "event",
                  "fields": {
                    "1": "varint"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "playerId",
              "type": [
                "switch",
                {
                  "compareTo": "event",
                  "fields": {
                    "2": "varint"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "entityId",
              "type": [
                "switch",
                {
                  "compareTo": "event",
                  "fields": {
                    "1": "int",
                    "2": "int"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "message",
              "type": [
                "switch",
                {
                  "compareTo": "event",
                  "fields": {
                    "2": "string"
                  },
                  "default": "void"
                }
              ]
            }
          ]
        },
        "camera": {
          "id": "0x36",
          "fields": [
            {
              "name": "cameraId",
              "type": "varint"
            }
          ]
        },
        "world_border": {
          "id": "0x35",
          "fields": [
            {
              "name": "action",
              "type": "varint"
            },
            {
              "name": "radius",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "0": "double"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "x",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "2": "double",
                    "3": "double"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "z",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "2": "double",
                    "3": "double"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "old_radius",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "1": "double",
                    "3": "double"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "new_radius",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "1": "double",
                    "3": "double"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "speed",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "1": "varint",
                    "3": "varint"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "portalBoundary",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "3": "varint"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "warning_time",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "3": "varint",
                    "4": "varint"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "warning_blocks",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "3": "varint",
                    "5": "varint"
                  },
                  "default": "void"
                }
              ]
            }
          ]
        },
        "title": {
          "id": "0x44",
          "fields": [
            {
              "name": "action",
              "type": "varint"
            },
            {
              "name": "text",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "0": "string",
                    "1": "string"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "fadeIn",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "2": "int"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "stay",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "2": "int"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "fadeOut",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "2": "int"
                  },
                  "default": "void"
                }
              ]
            }
          ]
        },
        "set_compression": {
          "id": "0x1d",
          "fields": [
            {
              "name": "threshold",
              "type": "varint"
            }
          ]
        },
        "playerlist_header": {
          "id": "0x46",
          "fields": [
            {
              "name": "header",
              "type": "string"
            },
            {
              "name": "footer",
              "type": "string"
            }
          ]
        },
        "resource_pack_send": {
          "id": "0x32",
          "fields": [
            {
              "name": "url",
              "type": "string"
            },
            {
              "name": "hash",
              "type": "string"
            }
          ]
        },
        "boss_bar": {
          "id": "0x0c",
          "fields": [
            {
              "name": "entityUUID",
              "type": "UUID"
            },
            {
              "name": "action",
              "type": "varint"
            },
            {
              "name": "title",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "0": "string",
                    "3": "string"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "health",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "0": "float",
                    "2": "float"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "color",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "0": "varint",
                    "4": "varint"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "dividers",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "0": "varint",
                    "4": "varint"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "flags",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "0": "ubyte",
                    "5": "ubyte"
                  },
                  "default": "void"
                }
              ]
            }
          ]
        },
        "set_cooldown": {
          "id": "0x17",
          "fields": [
            {
              "name": "itemID",
              "type": "varint"
            },
            {
              "name": "cooldownTicks",
              "type": "varint"
            }
          ]
        },
        "unload_chunk": {
          "id": "0x1c",
          "fields": [
            {
              "name": "chunkX",
              "type": "int"
            },
            { 
              "name": "chunkZ",
              "type": "int"
            }
          ]
        }
      },
      "toServer": {
        "keep_alive": {
          "id": "0x0a",
          "fields": [
            {
              "name": "keepAliveId",
              "type": "varint"
            }
          ]
        },
        "chat": {
          "id": "0x01",
          "fields": [
            {
              "name": "message",
              "type": "string"
            }
          ]
        },
        "use_entity": {
          "id": "0x09",
          "fields": [
            {
              "name": "target",
              "type": "varint"
            },
            {
              "name": "mouse",
              "type": "varint"
            },
            {
              "name": "x",
              "type": [
                "switch",
                {
                  "compareTo": "mouse",
                  "fields": {
                    "2": "float"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "y",
              "type": [
                "switch",
                {
                  "compareTo": "mouse",
                  "fields": {
                    "2": "float"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "z",
              "type": [
                "switch",
                {
                  "compareTo": "mouse",
                  "fields": {
                    "2": "float"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "hand",
              "type": [
                "switch",
                {
                  "compareTo": "mouse",
                  "fields": {
                    "0": "varint",
                    "2": "varint"
                  },
                  "default": "void"
                }
              ]
            }
          ]
        },
        "flying": {
          "id": "0x0e",
          "fields": [
            {
              "name": "onGround",
              "type": "bool"
            }
          ]
        },
        "position": {
          "id": "0x0b",
          "fields": [
            {
              "name": "x",
              "type": "double"
            },
            {
              "name": "y",
              "type": "double"
            },
            {
              "name": "z",
              "type": "double"
            },
            {
              "name": "onGround",
              "type": "bool"
            }
          ]
        },
        "look": {
          "id": "0x0d",
          "fields": [
            {
              "name": "yaw",
              "type": "float"
            },
            {
              "name": "pitch",
              "type": "float"
            },
            {
              "name": "onGround",
              "type": "bool"
            }
          ]
        },
        "position_look": {
          "id": "0x0c",
          "fields": [
            {
              "name": "x",
              "type": "double"
            },
            {
              "name": "y",
              "type": "double"
            },
            {
              "name": "z",
              "type": "double"
            },
            {
              "name": "yaw",
              "type": "float"
            },
            {
              "name": "pitch",
              "type": "float"
            },
            {
              "name": "onGround",
              "type": "bool"
            }
          ]
        },
        "block_dig": {
          "id": "0x10",
          "fields": [
            {
              "name": "status",
              "type": "byte"
            },
            {
              "name": "location",
              "type": "position"
            },
            {
              "name": "face",
              "type": "byte"
            }
          ]
        },
        "block_place": {
          "id": "0x19",
          "fields": [
            {
              "name": "location",
              "type": "position"
            },
            {
              "name": "direction",
              "type": "varint"
            },
            {
              "name": "hand",
              "type": "varint"
            },
            {
              "name": "cursorX",
              "type": "byte"
            },
            {
              "name": "cursorY",
              "type": "byte"
            },
            {
              "name": "cursorZ",
              "type": "byte"
            }
          ]
        },
        "held_item_slot": {
          "id": "0x14",
          "fields": [
            {
              "name": "slotId",
              "type": "short"
            }
          ]
        },
        "arm_animation": {
          "id": "0x17",
          "fields": [
            {
              "name": "hand",
              "type": "varint"
            }
          ]
        },
        "entity_action": {
          "id": "0x11",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "actionId",
              "type": "varint"
            },
            {
              "name": "jumpBoost",
              "type": "varint"
            }
          ]
        },
        "steer_vehicle": {
          "id": "0x12",
          "fields": [
            {
              "name": "sideways",
              "type": "float"
            },
            {
              "name": "forward",
              "type": "float"
            },
            {
              "name": "jump",
              "type": "ubyte"
            }
          ]
        },
        "close_window": {
          "id": "0x07",
          "fields": [
            {
              "name": "windowId",
              "type": "ubyte"
            }
          ]
        },
        "window_click": {
          "id": "0x06",
          "fields": [
            {
              "name": "windowId",
              "type": "ubyte"
            },
            {
              "name": "slot",
              "type": "short"
            },
            {
              "name": "mouseButton",
              "type": "byte"
            },
            {
              "name": "action",
              "type": "short"
            },
            {
              "name": "mode",
              "type": "byte"
            },
            {
              "name": "item",
              "type": "slot"
            }
          ]
        },
        "transaction": {
          "id": "0x04",
          "fields": [
            {
              "name": "windowId",
              "type": "byte"
            },
            {
              "name": "action",
              "type": "short"
            },
            {
              "name": "accepted",
              "type": "bool"
            }
          ]
        },
        "set_creative_slot": {
          "id": "0x15",
          "fields": [
            {
              "name": "slot",
              "type": "short"
            },
            {
              "name": "item",
              "type": "slot"
            }
          ]
        },
        "enchant_item": {
          "id": "0x05",
          "fields": [
            {
              "name": "windowId",
              "type": "byte"
            },
            {
              "name": "enchantment",
              "type": "byte"
            }
          ]
        },
        "update_sign": {
          "id": "0x16",
          "fields": [
            {
              "name": "location",
              "type": "position"
            },
            {
              "name": "text1",
              "type": "string"
            },
            {
              "name": "text2",
              "type": "string"
            },
            {
              "name": "text3",
              "type": "string"
            },
            {
              "name": "text4",
              "type": "string"
            }
          ]
        },
        "abilities": {
          "id": "0x0f",
          "fields": [
            {
              "name": "flags",
              "type": "byte"
            },
            {
              "name": "flyingSpeed",
              "type": "float"
            },
            {
              "name": "walkingSpeed",
              "type": "float"
            }
          ]
        },
        "tab_complete": {
          "id": "0x00",
          "fields": [
            {
              "name": "text",
              "type": "string"
            },
            {
              "name": "block",
              "type": [
                "option",
                "position"
              ]
            }
          ]
        },
        "settings": {
          "id": "0x03",
          "fields": [
            {
              "name": "locale",
              "type": "string"
            },
            {
              "name": "viewDistance",
              "type": "byte"
            },
            {
              "name": "chatFlags",
              "type": "varint"
            },
            {
              "name": "chatColors",
              "type": "bool"
            },
            {
              "name": "skinParts",
              "type": "ubyte"
            },
            {
              "name": "mainHand",
              "type": "varint"
            }
          ]
        },
        "client_command": {
          "id": "0x02",
          "fields": [
            {
              "name": "payload",
              "type": "varint"
            }
          ]
        },
        "custom_payload": {
          "id": "0x08",
          "fields": [
            {
              "name": "channel",
              "type": "string"
            },
            {
              "name": "data",
              "type": "restBuffer"
            }
          ]
        },
        "spectate": {
          "id": "0x18",
          "fields": [
            {
              "name": "target",
              "type": "UUID"
            }
          ]
        },
        "resource_pack_receive": {
          "id": "0x13",
          "fields": [
            {
              "name": "hash",
              "type": "string"
            },
            {
              "name": "result",
              "type": "varint"
            }
          ]
        },
        "use_item": {
          "id": "0x1a",
          "fields": [
            {
              "name": "hand",
              "type": "varint"
            }
          ]
        }
      }
    }
  }
}

},{}],355:[function(require,module,exports){
module.exports={
  "1": [
    {
      "ingredients": [
        {
          "id": 1,
          "metadata": 3
        },
        4
      ],
      "result": {
        "count": 2,
        "id": 1,
        "metadata": 5
      }
    },
    {
      "inShape": [
        [
          {
            "id": 1,
            "metadata": 5
          },
          {
            "id": 1,
            "metadata": 5
          }
        ],
        [
          {
            "id": 1,
            "metadata": 5
          },
          {
            "id": 1,
            "metadata": 5
          }
        ]
      ],
      "result": {
        "count": 4,
        "id": 1,
        "metadata": 6
      }
    },
    {
      "ingredients": [
        {
          "id": 1,
          "metadata": 3
        },
        406
      ],
      "result": {
        "count": 1,
        "id": 1,
        "metadata": 1
      }
    },
    {
      "inShape": [
        [
          {
            "id": 1,
            "metadata": 1
          },
          {
            "id": 1,
            "metadata": 1
          }
        ],
        [
          {
            "id": 1,
            "metadata": 1
          },
          {
            "id": 1,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 4,
        "id": 1,
        "metadata": 2
      }
    },
    {
      "inShape": [
        [
          4,
          406
        ],
        [
          406,
          4
        ]
      ],
      "result": {
        "count": 2,
        "id": 1,
        "metadata": 3
      }
    },
    {
      "inShape": [
        [
          {
            "id": 1,
            "metadata": 3
          },
          {
            "id": 1,
            "metadata": 3
          }
        ],
        [
          {
            "id": 1,
            "metadata": 3
          },
          {
            "id": 1,
            "metadata": 3
          }
        ]
      ],
      "result": {
        "count": 4,
        "id": 1,
        "metadata": 4
      }
    }
  ],
  "3": [
    {
      "inShape": [
        [
          {
            "id": 3,
            "metadata": 0
          },
          13
        ],
        [
          13,
          {
            "id": 3,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 4,
        "id": 3,
        "metadata": 1
      }
    }
  ],
  "5": [
    {
      "inShape": [
        [
          17
        ]
      ],
      "result": {
        "count": 4,
        "id": 5,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          17
        ]
      ],
      "result": {
        "count": 4,
        "id": 5,
        "metadata": 1
      }
    },
    {
      "inShape": [
        [
          17
        ]
      ],
      "result": {
        "count": 4,
        "id": 5,
        "metadata": 2
      }
    },
    {
      "inShape": [
        [
          17
        ]
      ],
      "result": {
        "count": 4,
        "id": 5,
        "metadata": 3
      }
    },
    {
      "inShape": [
        [
          17
        ]
      ],
      "result": {
        "count": 4,
        "id": 5,
        "metadata": 4
      }
    },
    {
      "inShape": [
        [
          17
        ]
      ],
      "result": {
        "count": 4,
        "id": 5,
        "metadata": 5
      }
    }
  ],
  "22": [
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 22,
        "metadata": 0
      }
    }
  ],
  "23": [
    {
      "inShape": [
        [
          4,
          4,
          4
        ],
        [
          4,
          261,
          4
        ],
        [
          4,
          331,
          4
        ]
      ],
      "result": {
        "count": 1,
        "id": 23,
        "metadata": 0
      }
    }
  ],
  "24": [
    {
      "inShape": [
        [
          {
            "id": 12,
            "metadata": 0
          },
          {
            "id": 12,
            "metadata": 0
          }
        ],
        [
          {
            "id": 12,
            "metadata": 0
          },
          {
            "id": 12,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 24,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 24,
            "metadata": 0
          },
          {
            "id": 24,
            "metadata": 0
          }
        ],
        [
          {
            "id": 24,
            "metadata": 0
          },
          {
            "id": 24,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 4,
        "id": 24,
        "metadata": 2
      }
    },
    {
      "inShape": [
        [
          {
            "id": 44,
            "metadata": 1
          }
        ],
        [
          {
            "id": 44,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 24,
        "metadata": 1
      }
    }
  ],
  "25": [
    {
      "inShape": [
        [
          5,
          5,
          5
        ],
        [
          5,
          331,
          5
        ],
        [
          5,
          5,
          5
        ]
      ],
      "result": {
        "count": 1,
        "id": 25,
        "metadata": 0
      }
    }
  ],
  "27": [
    {
      "inShape": [
        [
          266,
          null,
          266
        ],
        [
          266,
          280,
          266
        ],
        [
          266,
          331,
          266
        ]
      ],
      "result": {
        "count": 6,
        "id": 27,
        "metadata": 0
      }
    }
  ],
  "28": [
    {
      "inShape": [
        [
          265,
          null,
          265
        ],
        [
          265,
          70,
          265
        ],
        [
          265,
          331,
          265
        ]
      ],
      "result": {
        "count": 6,
        "id": 28,
        "metadata": 0
      }
    }
  ],
  "29": [
    {
      "inShape": [
        [
          341
        ],
        [
          33
        ]
      ],
      "result": {
        "count": 1,
        "id": 29,
        "metadata": 0
      }
    }
  ],
  "33": [
    {
      "inShape": [
        [
          5,
          5,
          5
        ],
        [
          4,
          265,
          4
        ],
        [
          4,
          331,
          4
        ]
      ],
      "result": {
        "count": 1,
        "id": 33,
        "metadata": 0
      }
    }
  ],
  "35": [
    {
      "inShape": [
        [
          287,
          287
        ],
        [
          287,
          287
        ]
      ],
      "result": {
        "count": 1,
        "id": 35,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        35,
        {
          "id": 351,
          "metadata": 14
        }
      ],
      "result": {
        "count": 1,
        "id": 35,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        35,
        {
          "id": 351,
          "metadata": 13
        }
      ],
      "result": {
        "count": 1,
        "id": 35,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        35,
        {
          "id": 351,
          "metadata": 12
        }
      ],
      "result": {
        "count": 1,
        "id": 35,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        35,
        {
          "id": 351,
          "metadata": 11
        }
      ],
      "result": {
        "count": 1,
        "id": 35,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        35,
        {
          "id": 351,
          "metadata": 10
        }
      ],
      "result": {
        "count": 1,
        "id": 35,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        35,
        {
          "id": 351,
          "metadata": 9
        }
      ],
      "result": {
        "count": 1,
        "id": 35,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        35,
        {
          "id": 351,
          "metadata": 8
        }
      ],
      "result": {
        "count": 1,
        "id": 35,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        35,
        {
          "id": 351,
          "metadata": 7
        }
      ],
      "result": {
        "count": 1,
        "id": 35,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        35,
        {
          "id": 351,
          "metadata": 6
        }
      ],
      "result": {
        "count": 1,
        "id": 35,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        35,
        {
          "id": 351,
          "metadata": 5
        }
      ],
      "result": {
        "count": 1,
        "id": 35,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        35,
        {
          "id": 351,
          "metadata": 4
        }
      ],
      "result": {
        "count": 1,
        "id": 35,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        35,
        {
          "id": 351,
          "metadata": 3
        }
      ],
      "result": {
        "count": 1,
        "id": 35,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        35,
        {
          "id": 351,
          "metadata": 2
        }
      ],
      "result": {
        "count": 1,
        "id": 35,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        35,
        {
          "id": 351,
          "metadata": 1
        }
      ],
      "result": {
        "count": 1,
        "id": 35,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        35,
        {
          "id": 351,
          "metadata": 0
        }
      ],
      "result": {
        "count": 1,
        "id": 35,
        "metadata": 0
      }
    }
  ],
  "41": [
    {
      "inShape": [
        [
          266,
          266,
          266
        ],
        [
          266,
          266,
          266
        ],
        [
          266,
          266,
          266
        ]
      ],
      "result": {
        "count": 1,
        "id": 41,
        "metadata": 0
      }
    }
  ],
  "42": [
    {
      "inShape": [
        [
          265,
          265,
          265
        ],
        [
          265,
          265,
          265
        ],
        [
          265,
          265,
          265
        ]
      ],
      "result": {
        "count": 1,
        "id": 42,
        "metadata": 0
      }
    }
  ],
  "44": [
    {
      "inShape": [
        [
          {
            "id": 1,
            "metadata": 0
          },
          {
            "id": 1,
            "metadata": 0
          },
          {
            "id": 1,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 6,
        "id": 44,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          24,
          24,
          24
        ]
      ],
      "result": {
        "count": 6,
        "id": 44,
        "metadata": 1
      }
    },
    {
      "inShape": [
        [
          4,
          4,
          4
        ]
      ],
      "result": {
        "count": 6,
        "id": 44,
        "metadata": 3
      }
    },
    {
      "inShape": [
        [
          45,
          45,
          45
        ]
      ],
      "result": {
        "count": 6,
        "id": 44,
        "metadata": 4
      }
    },
    {
      "inShape": [
        [
          98,
          98,
          98
        ]
      ],
      "result": {
        "count": 6,
        "id": 44,
        "metadata": 5
      }
    },
    {
      "inShape": [
        [
          405,
          405,
          405
        ]
      ],
      "result": {
        "count": 6,
        "id": 44,
        "metadata": 6
      }
    },
    {
      "inShape": [
        [
          155,
          155,
          155
        ]
      ],
      "result": {
        "count": 6,
        "id": 44,
        "metadata": 7
      }
    }
  ],
  "45": [
    {
      "inShape": [
        [
          336,
          336
        ],
        [
          336,
          336
        ]
      ],
      "result": {
        "count": 1,
        "id": 45,
        "metadata": 0
      }
    }
  ],
  "46": [
    {
      "inShape": [
        [
          289,
          12,
          289
        ],
        [
          12,
          289,
          12
        ],
        [
          289,
          12,
          289
        ]
      ],
      "result": {
        "count": 1,
        "id": 46,
        "metadata": 0
      }
    }
  ],
  "47": [
    {
      "inShape": [
        [
          5,
          5,
          5
        ],
        [
          340,
          340,
          340
        ],
        [
          5,
          5,
          5
        ]
      ],
      "result": {
        "count": 1,
        "id": 47,
        "metadata": 0
      }
    }
  ],
  "48": [
    {
      "ingredients": [
        4,
        106
      ],
      "result": {
        "count": 1,
        "id": 48,
        "metadata": 0
      }
    }
  ],
  "50": [
    {
      "inShape": [
        [
          263
        ],
        [
          280
        ]
      ],
      "result": {
        "count": 4,
        "id": 50,
        "metadata": 0
      }
    }
  ],
  "53": [
    {
      "inShape": [
        [
          null,
          null,
          {
            "id": 5,
            "metadata": 0
          }
        ],
        [
          null,
          {
            "id": 5,
            "metadata": 0
          },
          {
            "id": 5,
            "metadata": 0
          }
        ],
        [
          {
            "id": 5,
            "metadata": 0
          },
          {
            "id": 5,
            "metadata": 0
          },
          {
            "id": 5,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 4,
        "id": 53,
        "metadata": 0
      }
    }
  ],
  "54": [
    {
      "inShape": [
        [
          5,
          5,
          5
        ],
        [
          5,
          null,
          5
        ],
        [
          5,
          5,
          5
        ]
      ],
      "result": {
        "count": 1,
        "id": 54,
        "metadata": 0
      }
    }
  ],
  "57": [
    {
      "inShape": [
        [
          264,
          264,
          264
        ],
        [
          264,
          264,
          264
        ],
        [
          264,
          264,
          264
        ]
      ],
      "result": {
        "count": 1,
        "id": 57,
        "metadata": 0
      }
    }
  ],
  "58": [
    {
      "inShape": [
        [
          5,
          5
        ],
        [
          5,
          5
        ]
      ],
      "result": {
        "count": 1,
        "id": 58,
        "metadata": 0
      }
    }
  ],
  "61": [
    {
      "inShape": [
        [
          4,
          4,
          4
        ],
        [
          4,
          null,
          4
        ],
        [
          4,
          4,
          4
        ]
      ],
      "result": {
        "count": 1,
        "id": 61,
        "metadata": 0
      }
    }
  ],
  "65": [
    {
      "inShape": [
        [
          280,
          null,
          280
        ],
        [
          280,
          280,
          280
        ],
        [
          280,
          null,
          280
        ]
      ],
      "result": {
        "count": 3,
        "id": 65,
        "metadata": 0
      }
    }
  ],
  "66": [
    {
      "inShape": [
        [
          265,
          null,
          265
        ],
        [
          265,
          280,
          265
        ],
        [
          265,
          null,
          265
        ]
      ],
      "result": {
        "count": 16,
        "id": 66,
        "metadata": 0
      }
    }
  ],
  "67": [
    {
      "inShape": [
        [
          null,
          null,
          4
        ],
        [
          null,
          4,
          4
        ],
        [
          4,
          4,
          4
        ]
      ],
      "result": {
        "count": 4,
        "id": 67,
        "metadata": 0
      }
    }
  ],
  "69": [
    {
      "inShape": [
        [
          280
        ],
        [
          4
        ]
      ],
      "result": {
        "count": 1,
        "id": 69,
        "metadata": 0
      }
    }
  ],
  "70": [
    {
      "inShape": [
        [
          {
            "id": 1,
            "metadata": 0
          },
          {
            "id": 1,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 70,
        "metadata": 0
      }
    }
  ],
  "72": [
    {
      "inShape": [
        [
          5,
          5
        ]
      ],
      "result": {
        "count": 1,
        "id": 72,
        "metadata": 0
      }
    }
  ],
  "75": [
    {
      "inShape": [
        [
          331
        ],
        [
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 75,
        "metadata": 0
      }
    }
  ],
  "77": [
    {
      "inShape": [
        [
          {
            "id": 1,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 77,
        "metadata": 0
      }
    }
  ],
  "78": [
    {
      "inShape": [
        [
          80,
          80,
          80
        ]
      ],
      "result": {
        "count": 6,
        "id": 78,
        "metadata": 0
      }
    }
  ],
  "80": [
    {
      "inShape": [
        [
          332,
          332
        ],
        [
          332,
          332
        ]
      ],
      "result": {
        "count": 1,
        "id": 80,
        "metadata": 0
      }
    }
  ],
  "82": [
    {
      "inShape": [
        [
          337,
          337
        ],
        [
          337,
          337
        ]
      ],
      "result": {
        "count": 1,
        "id": 82,
        "metadata": 0
      }
    }
  ],
  "84": [
    {
      "inShape": [
        [
          5,
          5,
          5
        ],
        [
          5,
          264,
          5
        ],
        [
          5,
          5,
          5
        ]
      ],
      "result": {
        "count": 1,
        "id": 84,
        "metadata": 0
      }
    }
  ],
  "85": [
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 0
          },
          280,
          {
            "id": 5,
            "metadata": 0
          }
        ],
        [
          {
            "id": 5,
            "metadata": 0
          },
          280,
          {
            "id": 5,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 3,
        "id": 85,
        "metadata": 0
      }
    }
  ],
  "89": [
    {
      "inShape": [
        [
          348,
          348
        ],
        [
          348,
          348
        ]
      ],
      "result": {
        "count": 1,
        "id": 89,
        "metadata": 0
      }
    }
  ],
  "91": [
    {
      "inShape": [
        [
          86
        ],
        [
          50
        ]
      ],
      "result": {
        "count": 1,
        "id": 91,
        "metadata": 0
      }
    }
  ],
  "95": [
    {
      "inShape": [
        [
          20,
          20,
          20
        ],
        [
          20,
          {
            "id": 351,
            "metadata": 15
          },
          20
        ],
        [
          20,
          20,
          20
        ]
      ],
      "result": {
        "count": 8,
        "id": 95,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          20,
          20,
          20
        ],
        [
          20,
          {
            "id": 351,
            "metadata": 14
          },
          20
        ],
        [
          20,
          20,
          20
        ]
      ],
      "result": {
        "count": 8,
        "id": 95,
        "metadata": 1
      }
    },
    {
      "inShape": [
        [
          20,
          20,
          20
        ],
        [
          20,
          {
            "id": 351,
            "metadata": 13
          },
          20
        ],
        [
          20,
          20,
          20
        ]
      ],
      "result": {
        "count": 8,
        "id": 95,
        "metadata": 2
      }
    },
    {
      "inShape": [
        [
          20,
          20,
          20
        ],
        [
          20,
          {
            "id": 351,
            "metadata": 12
          },
          20
        ],
        [
          20,
          20,
          20
        ]
      ],
      "result": {
        "count": 8,
        "id": 95,
        "metadata": 3
      }
    },
    {
      "inShape": [
        [
          20,
          20,
          20
        ],
        [
          20,
          {
            "id": 351,
            "metadata": 11
          },
          20
        ],
        [
          20,
          20,
          20
        ]
      ],
      "result": {
        "count": 8,
        "id": 95,
        "metadata": 4
      }
    },
    {
      "inShape": [
        [
          20,
          20,
          20
        ],
        [
          20,
          {
            "id": 351,
            "metadata": 10
          },
          20
        ],
        [
          20,
          20,
          20
        ]
      ],
      "result": {
        "count": 8,
        "id": 95,
        "metadata": 5
      }
    },
    {
      "inShape": [
        [
          20,
          20,
          20
        ],
        [
          20,
          {
            "id": 351,
            "metadata": 9
          },
          20
        ],
        [
          20,
          20,
          20
        ]
      ],
      "result": {
        "count": 8,
        "id": 95,
        "metadata": 6
      }
    },
    {
      "inShape": [
        [
          20,
          20,
          20
        ],
        [
          20,
          {
            "id": 351,
            "metadata": 8
          },
          20
        ],
        [
          20,
          20,
          20
        ]
      ],
      "result": {
        "count": 8,
        "id": 95,
        "metadata": 7
      }
    },
    {
      "inShape": [
        [
          20,
          20,
          20
        ],
        [
          20,
          {
            "id": 351,
            "metadata": 7
          },
          20
        ],
        [
          20,
          20,
          20
        ]
      ],
      "result": {
        "count": 8,
        "id": 95,
        "metadata": 8
      }
    },
    {
      "inShape": [
        [
          20,
          20,
          20
        ],
        [
          20,
          {
            "id": 351,
            "metadata": 6
          },
          20
        ],
        [
          20,
          20,
          20
        ]
      ],
      "result": {
        "count": 8,
        "id": 95,
        "metadata": 9
      }
    },
    {
      "inShape": [
        [
          20,
          20,
          20
        ],
        [
          20,
          {
            "id": 351,
            "metadata": 5
          },
          20
        ],
        [
          20,
          20,
          20
        ]
      ],
      "result": {
        "count": 8,
        "id": 95,
        "metadata": 10
      }
    },
    {
      "inShape": [
        [
          20,
          20,
          20
        ],
        [
          20,
          {
            "id": 351,
            "metadata": 4
          },
          20
        ],
        [
          20,
          20,
          20
        ]
      ],
      "result": {
        "count": 8,
        "id": 95,
        "metadata": 11
      }
    },
    {
      "inShape": [
        [
          20,
          20,
          20
        ],
        [
          20,
          {
            "id": 351,
            "metadata": 3
          },
          20
        ],
        [
          20,
          20,
          20
        ]
      ],
      "result": {
        "count": 8,
        "id": 95,
        "metadata": 12
      }
    },
    {
      "inShape": [
        [
          20,
          20,
          20
        ],
        [
          20,
          {
            "id": 351,
            "metadata": 2
          },
          20
        ],
        [
          20,
          20,
          20
        ]
      ],
      "result": {
        "count": 8,
        "id": 95,
        "metadata": 13
      }
    },
    {
      "inShape": [
        [
          20,
          20,
          20
        ],
        [
          20,
          {
            "id": 351,
            "metadata": 1
          },
          20
        ],
        [
          20,
          20,
          20
        ]
      ],
      "result": {
        "count": 8,
        "id": 95,
        "metadata": 14
      }
    },
    {
      "inShape": [
        [
          20,
          20,
          20
        ],
        [
          20,
          {
            "id": 351,
            "metadata": 0
          },
          20
        ],
        [
          20,
          20,
          20
        ]
      ],
      "result": {
        "count": 8,
        "id": 95,
        "metadata": 15
      }
    }
  ],
  "96": [
    {
      "inShape": [
        [
          5,
          5,
          5
        ],
        [
          5,
          5,
          5
        ]
      ],
      "result": {
        "count": 2,
        "id": 96,
        "metadata": 0
      }
    }
  ],
  "98": [
    {
      "inShape": [
        [
          {
            "id": 1,
            "metadata": 0
          },
          {
            "id": 1,
            "metadata": 0
          }
        ],
        [
          {
            "id": 1,
            "metadata": 0
          },
          {
            "id": 1,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 4,
        "id": 98,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        98,
        106
      ],
      "result": {
        "count": 1,
        "id": 98,
        "metadata": 1
      }
    },
    {
      "inShape": [
        [
          {
            "id": 44,
            "metadata": 5
          }
        ],
        [
          {
            "id": 44,
            "metadata": 5
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 98,
        "metadata": 3
      }
    }
  ],
  "101": [
    {
      "inShape": [
        [
          265,
          265,
          265
        ],
        [
          265,
          265,
          265
        ]
      ],
      "result": {
        "count": 16,
        "id": 101,
        "metadata": 0
      }
    }
  ],
  "102": [
    {
      "inShape": [
        [
          20,
          20,
          20
        ],
        [
          20,
          20,
          20
        ]
      ],
      "result": {
        "count": 16,
        "id": 102,
        "metadata": 0
      }
    }
  ],
  "103": [
    {
      "inShape": [
        [
          360,
          360,
          360
        ],
        [
          360,
          360,
          360
        ],
        [
          360,
          360,
          360
        ]
      ],
      "result": {
        "count": 1,
        "id": 103,
        "metadata": 0
      }
    }
  ],
  "107": [
    {
      "inShape": [
        [
          280,
          {
            "id": 5,
            "metadata": 0
          },
          280
        ],
        [
          280,
          {
            "id": 5,
            "metadata": 0
          },
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 107,
        "metadata": 0
      }
    }
  ],
  "108": [
    {
      "inShape": [
        [
          null,
          null,
          45
        ],
        [
          null,
          45,
          45
        ],
        [
          45,
          45,
          45
        ]
      ],
      "result": {
        "count": 4,
        "id": 108,
        "metadata": 0
      }
    }
  ],
  "109": [
    {
      "inShape": [
        [
          null,
          null,
          98
        ],
        [
          null,
          98,
          98
        ],
        [
          98,
          98,
          98
        ]
      ],
      "result": {
        "count": 4,
        "id": 109,
        "metadata": 0
      }
    }
  ],
  "113": [
    {
      "inShape": [
        [
          405,
          405,
          405
        ],
        [
          405,
          405,
          405
        ]
      ],
      "result": {
        "count": 6,
        "id": 113,
        "metadata": 0
      }
    }
  ],
  "114": [
    {
      "inShape": [
        [
          null,
          null,
          405
        ],
        [
          null,
          405,
          405
        ],
        [
          405,
          405,
          405
        ]
      ],
      "result": {
        "count": 4,
        "id": 114,
        "metadata": 0
      }
    }
  ],
  "116": [
    {
      "inShape": [
        [
          null,
          340,
          null
        ],
        [
          264,
          49,
          264
        ],
        [
          49,
          49,
          49
        ]
      ],
      "result": {
        "count": 1,
        "id": 116,
        "metadata": 0
      }
    }
  ],
  "123": [
    {
      "inShape": [
        [
          null,
          331,
          null
        ],
        [
          331,
          89,
          331
        ],
        [
          null,
          331,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 123,
        "metadata": 0
      }
    }
  ],
  "126": [
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 0
          },
          {
            "id": 5,
            "metadata": 0
          },
          {
            "id": 5,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 6,
        "id": 126,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 1
          },
          {
            "id": 5,
            "metadata": 1
          },
          {
            "id": 5,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 6,
        "id": 126,
        "metadata": 1
      }
    },
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 2
          },
          {
            "id": 5,
            "metadata": 2
          },
          {
            "id": 5,
            "metadata": 2
          }
        ]
      ],
      "result": {
        "count": 6,
        "id": 126,
        "metadata": 2
      }
    },
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 3
          },
          {
            "id": 5,
            "metadata": 3
          },
          {
            "id": 5,
            "metadata": 3
          }
        ]
      ],
      "result": {
        "count": 6,
        "id": 126,
        "metadata": 3
      }
    },
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 4
          },
          {
            "id": 5,
            "metadata": 4
          },
          {
            "id": 5,
            "metadata": 4
          }
        ]
      ],
      "result": {
        "count": 6,
        "id": 126,
        "metadata": 4
      }
    },
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 5
          },
          {
            "id": 5,
            "metadata": 5
          },
          {
            "id": 5,
            "metadata": 5
          }
        ]
      ],
      "result": {
        "count": 6,
        "id": 126,
        "metadata": 5
      }
    }
  ],
  "128": [
    {
      "inShape": [
        [
          null,
          null,
          24
        ],
        [
          null,
          24,
          24
        ],
        [
          24,
          24,
          24
        ]
      ],
      "result": {
        "count": 4,
        "id": 128,
        "metadata": 0
      }
    }
  ],
  "130": [
    {
      "inShape": [
        [
          49,
          49,
          49
        ],
        [
          49,
          381,
          49
        ],
        [
          49,
          49,
          49
        ]
      ],
      "result": {
        "count": 1,
        "id": 130,
        "metadata": 0
      }
    }
  ],
  "131": [
    {
      "inShape": [
        [
          265
        ],
        [
          280
        ],
        [
          5
        ]
      ],
      "result": {
        "count": 2,
        "id": 131,
        "metadata": 0
      }
    }
  ],
  "133": [
    {
      "inShape": [
        [
          388,
          388,
          388
        ],
        [
          388,
          388,
          388
        ],
        [
          388,
          388,
          388
        ]
      ],
      "result": {
        "count": 1,
        "id": 133,
        "metadata": 0
      }
    }
  ],
  "134": [
    {
      "inShape": [
        [
          null,
          null,
          {
            "id": 5,
            "metadata": 1
          }
        ],
        [
          null,
          {
            "id": 5,
            "metadata": 1
          },
          {
            "id": 5,
            "metadata": 1
          }
        ],
        [
          {
            "id": 5,
            "metadata": 1
          },
          {
            "id": 5,
            "metadata": 1
          },
          {
            "id": 5,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 4,
        "id": 134,
        "metadata": 0
      }
    }
  ],
  "135": [
    {
      "inShape": [
        [
          null,
          null,
          {
            "id": 5,
            "metadata": 2
          }
        ],
        [
          null,
          {
            "id": 5,
            "metadata": 2
          },
          {
            "id": 5,
            "metadata": 2
          }
        ],
        [
          {
            "id": 5,
            "metadata": 2
          },
          {
            "id": 5,
            "metadata": 2
          },
          {
            "id": 5,
            "metadata": 2
          }
        ]
      ],
      "result": {
        "count": 4,
        "id": 135,
        "metadata": 0
      }
    }
  ],
  "136": [
    {
      "inShape": [
        [
          null,
          null,
          {
            "id": 5,
            "metadata": 3
          }
        ],
        [
          null,
          {
            "id": 5,
            "metadata": 3
          },
          {
            "id": 5,
            "metadata": 3
          }
        ],
        [
          {
            "id": 5,
            "metadata": 3
          },
          {
            "id": 5,
            "metadata": 3
          },
          {
            "id": 5,
            "metadata": 3
          }
        ]
      ],
      "result": {
        "count": 4,
        "id": 136,
        "metadata": 0
      }
    }
  ],
  "138": [
    {
      "inShape": [
        [
          20,
          20,
          20
        ],
        [
          20,
          399,
          20
        ],
        [
          49,
          49,
          49
        ]
      ],
      "result": {
        "count": 1,
        "id": 138,
        "metadata": 0
      }
    }
  ],
  "139": [
    {
      "inShape": [
        [
          4,
          4,
          4
        ],
        [
          4,
          4,
          4
        ]
      ],
      "result": {
        "count": 6,
        "id": 139,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          48,
          48,
          48
        ],
        [
          48,
          48,
          48
        ]
      ],
      "result": {
        "count": 6,
        "id": 139,
        "metadata": 1
      }
    }
  ],
  "143": [
    {
      "inShape": [
        [
          5
        ]
      ],
      "result": {
        "count": 1,
        "id": 143,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 1,
            "metadata": 0
          }
        ],
        [
          {
            "id": 1,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 143,
        "metadata": 0
      }
    }
  ],
  "145": [
    {
      "inShape": [
        [
          42,
          42,
          42
        ],
        [
          null,
          265,
          null
        ],
        [
          265,
          265,
          265
        ]
      ],
      "result": {
        "count": 1,
        "id": 145,
        "metadata": 0
      }
    }
  ],
  "146": [
    {
      "inShape": [
        [
          131,
          54
        ]
      ],
      "result": {
        "count": 1,
        "id": 146,
        "metadata": 0
      }
    }
  ],
  "147": [
    {
      "inShape": [
        [
          266,
          266
        ]
      ],
      "result": {
        "count": 1,
        "id": 147,
        "metadata": 0
      }
    }
  ],
  "148": [
    {
      "inShape": [
        [
          265,
          265
        ]
      ],
      "result": {
        "count": 1,
        "id": 148,
        "metadata": 0
      }
    }
  ],
  "151": [
    {
      "inShape": [
        [
          20,
          20,
          20
        ],
        [
          406,
          406,
          406
        ],
        [
          126,
          126,
          126
        ]
      ],
      "result": {
        "count": 1,
        "id": 151,
        "metadata": 0
      }
    }
  ],
  "152": [
    {
      "inShape": [
        [
          331,
          331,
          331
        ],
        [
          331,
          331,
          331
        ],
        [
          331,
          331,
          331
        ]
      ],
      "result": {
        "count": 1,
        "id": 152,
        "metadata": 0
      }
    }
  ],
  "154": [
    {
      "inShape": [
        [
          265,
          null,
          265
        ],
        [
          265,
          54,
          265
        ],
        [
          null,
          265,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 154,
        "metadata": 0
      }
    }
  ],
  "155": [
    {
      "inShape": [
        [
          406,
          406
        ],
        [
          406,
          406
        ]
      ],
      "result": {
        "count": 1,
        "id": 155,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 44,
            "metadata": 7
          }
        ],
        [
          {
            "id": 44,
            "metadata": 7
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 155,
        "metadata": 1
      }
    },
    {
      "inShape": [
        [
          {
            "id": 155,
            "metadata": 0
          }
        ],
        [
          {
            "id": 155,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 2,
        "id": 155,
        "metadata": 0
      }
    }
  ],
  "156": [
    {
      "inShape": [
        [
          null,
          null,
          155
        ],
        [
          null,
          155,
          155
        ],
        [
          155,
          155,
          155
        ]
      ],
      "result": {
        "count": 4,
        "id": 156,
        "metadata": 0
      }
    }
  ],
  "157": [
    {
      "inShape": [
        [
          265,
          280,
          265
        ],
        [
          265,
          75,
          265
        ],
        [
          265,
          280,
          265
        ]
      ],
      "result": {
        "count": 6,
        "id": 157,
        "metadata": 0
      }
    }
  ],
  "158": [
    {
      "inShape": [
        [
          4,
          4,
          4
        ],
        [
          4,
          null,
          4
        ],
        [
          4,
          331,
          4
        ]
      ],
      "result": {
        "count": 1,
        "id": 158,
        "metadata": 0
      }
    }
  ],
  "160": [
    {
      "inShape": [
        [
          {
            "id": 95,
            "metadata": 0
          },
          {
            "id": 95,
            "metadata": 0
          },
          {
            "id": 95,
            "metadata": 0
          }
        ],
        [
          {
            "id": 95,
            "metadata": 0
          },
          {
            "id": 95,
            "metadata": 0
          },
          {
            "id": 95,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 16,
        "id": 160,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 95,
            "metadata": 1
          },
          {
            "id": 95,
            "metadata": 1
          },
          {
            "id": 95,
            "metadata": 1
          }
        ],
        [
          {
            "id": 95,
            "metadata": 1
          },
          {
            "id": 95,
            "metadata": 1
          },
          {
            "id": 95,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 16,
        "id": 160,
        "metadata": 1
      }
    },
    {
      "inShape": [
        [
          {
            "id": 95,
            "metadata": 2
          },
          {
            "id": 95,
            "metadata": 2
          },
          {
            "id": 95,
            "metadata": 2
          }
        ],
        [
          {
            "id": 95,
            "metadata": 2
          },
          {
            "id": 95,
            "metadata": 2
          },
          {
            "id": 95,
            "metadata": 2
          }
        ]
      ],
      "result": {
        "count": 16,
        "id": 160,
        "metadata": 2
      }
    },
    {
      "inShape": [
        [
          {
            "id": 95,
            "metadata": 3
          },
          {
            "id": 95,
            "metadata": 3
          },
          {
            "id": 95,
            "metadata": 3
          }
        ],
        [
          {
            "id": 95,
            "metadata": 3
          },
          {
            "id": 95,
            "metadata": 3
          },
          {
            "id": 95,
            "metadata": 3
          }
        ]
      ],
      "result": {
        "count": 16,
        "id": 160,
        "metadata": 3
      }
    },
    {
      "inShape": [
        [
          {
            "id": 95,
            "metadata": 4
          },
          {
            "id": 95,
            "metadata": 4
          },
          {
            "id": 95,
            "metadata": 4
          }
        ],
        [
          {
            "id": 95,
            "metadata": 4
          },
          {
            "id": 95,
            "metadata": 4
          },
          {
            "id": 95,
            "metadata": 4
          }
        ]
      ],
      "result": {
        "count": 16,
        "id": 160,
        "metadata": 4
      }
    },
    {
      "inShape": [
        [
          {
            "id": 95,
            "metadata": 5
          },
          {
            "id": 95,
            "metadata": 5
          },
          {
            "id": 95,
            "metadata": 5
          }
        ],
        [
          {
            "id": 95,
            "metadata": 5
          },
          {
            "id": 95,
            "metadata": 5
          },
          {
            "id": 95,
            "metadata": 5
          }
        ]
      ],
      "result": {
        "count": 16,
        "id": 160,
        "metadata": 5
      }
    },
    {
      "inShape": [
        [
          {
            "id": 95,
            "metadata": 6
          },
          {
            "id": 95,
            "metadata": 6
          },
          {
            "id": 95,
            "metadata": 6
          }
        ],
        [
          {
            "id": 95,
            "metadata": 6
          },
          {
            "id": 95,
            "metadata": 6
          },
          {
            "id": 95,
            "metadata": 6
          }
        ]
      ],
      "result": {
        "count": 16,
        "id": 160,
        "metadata": 6
      }
    },
    {
      "inShape": [
        [
          {
            "id": 95,
            "metadata": 7
          },
          {
            "id": 95,
            "metadata": 7
          },
          {
            "id": 95,
            "metadata": 7
          }
        ],
        [
          {
            "id": 95,
            "metadata": 7
          },
          {
            "id": 95,
            "metadata": 7
          },
          {
            "id": 95,
            "metadata": 7
          }
        ]
      ],
      "result": {
        "count": 16,
        "id": 160,
        "metadata": 7
      }
    },
    {
      "inShape": [
        [
          {
            "id": 95,
            "metadata": 8
          },
          {
            "id": 95,
            "metadata": 8
          },
          {
            "id": 95,
            "metadata": 8
          }
        ],
        [
          {
            "id": 95,
            "metadata": 8
          },
          {
            "id": 95,
            "metadata": 8
          },
          {
            "id": 95,
            "metadata": 8
          }
        ]
      ],
      "result": {
        "count": 16,
        "id": 160,
        "metadata": 8
      }
    },
    {
      "inShape": [
        [
          {
            "id": 95,
            "metadata": 9
          },
          {
            "id": 95,
            "metadata": 9
          },
          {
            "id": 95,
            "metadata": 9
          }
        ],
        [
          {
            "id": 95,
            "metadata": 9
          },
          {
            "id": 95,
            "metadata": 9
          },
          {
            "id": 95,
            "metadata": 9
          }
        ]
      ],
      "result": {
        "count": 16,
        "id": 160,
        "metadata": 9
      }
    },
    {
      "inShape": [
        [
          {
            "id": 95,
            "metadata": 10
          },
          {
            "id": 95,
            "metadata": 10
          },
          {
            "id": 95,
            "metadata": 10
          }
        ],
        [
          {
            "id": 95,
            "metadata": 10
          },
          {
            "id": 95,
            "metadata": 10
          },
          {
            "id": 95,
            "metadata": 10
          }
        ]
      ],
      "result": {
        "count": 16,
        "id": 160,
        "metadata": 10
      }
    },
    {
      "inShape": [
        [
          {
            "id": 95,
            "metadata": 11
          },
          {
            "id": 95,
            "metadata": 11
          },
          {
            "id": 95,
            "metadata": 11
          }
        ],
        [
          {
            "id": 95,
            "metadata": 11
          },
          {
            "id": 95,
            "metadata": 11
          },
          {
            "id": 95,
            "metadata": 11
          }
        ]
      ],
      "result": {
        "count": 16,
        "id": 160,
        "metadata": 11
      }
    },
    {
      "inShape": [
        [
          {
            "id": 95,
            "metadata": 12
          },
          {
            "id": 95,
            "metadata": 12
          },
          {
            "id": 95,
            "metadata": 12
          }
        ],
        [
          {
            "id": 95,
            "metadata": 12
          },
          {
            "id": 95,
            "metadata": 12
          },
          {
            "id": 95,
            "metadata": 12
          }
        ]
      ],
      "result": {
        "count": 16,
        "id": 160,
        "metadata": 12
      }
    },
    {
      "inShape": [
        [
          {
            "id": 95,
            "metadata": 13
          },
          {
            "id": 95,
            "metadata": 13
          },
          {
            "id": 95,
            "metadata": 13
          }
        ],
        [
          {
            "id": 95,
            "metadata": 13
          },
          {
            "id": 95,
            "metadata": 13
          },
          {
            "id": 95,
            "metadata": 13
          }
        ]
      ],
      "result": {
        "count": 16,
        "id": 160,
        "metadata": 13
      }
    },
    {
      "inShape": [
        [
          {
            "id": 95,
            "metadata": 14
          },
          {
            "id": 95,
            "metadata": 14
          },
          {
            "id": 95,
            "metadata": 14
          }
        ],
        [
          {
            "id": 95,
            "metadata": 14
          },
          {
            "id": 95,
            "metadata": 14
          },
          {
            "id": 95,
            "metadata": 14
          }
        ]
      ],
      "result": {
        "count": 16,
        "id": 160,
        "metadata": 14
      }
    },
    {
      "inShape": [
        [
          {
            "id": 95,
            "metadata": 15
          },
          {
            "id": 95,
            "metadata": 15
          },
          {
            "id": 95,
            "metadata": 15
          }
        ],
        [
          {
            "id": 95,
            "metadata": 15
          },
          {
            "id": 95,
            "metadata": 15
          },
          {
            "id": 95,
            "metadata": 15
          }
        ]
      ],
      "result": {
        "count": 16,
        "id": 160,
        "metadata": 15
      }
    }
  ],
  "163": [
    {
      "inShape": [
        [
          null,
          null,
          {
            "id": 5,
            "metadata": 4
          }
        ],
        [
          null,
          {
            "id": 5,
            "metadata": 4
          },
          {
            "id": 5,
            "metadata": 4
          }
        ],
        [
          {
            "id": 5,
            "metadata": 4
          },
          {
            "id": 5,
            "metadata": 4
          },
          {
            "id": 5,
            "metadata": 4
          }
        ]
      ],
      "result": {
        "count": 4,
        "id": 163,
        "metadata": 0
      }
    }
  ],
  "164": [
    {
      "inShape": [
        [
          null,
          null,
          {
            "id": 5,
            "metadata": 5
          }
        ],
        [
          null,
          {
            "id": 5,
            "metadata": 5
          },
          {
            "id": 5,
            "metadata": 5
          }
        ],
        [
          {
            "id": 5,
            "metadata": 5
          },
          {
            "id": 5,
            "metadata": 5
          },
          {
            "id": 5,
            "metadata": 5
          }
        ]
      ],
      "result": {
        "count": 4,
        "id": 164,
        "metadata": 0
      }
    }
  ],
  "165": [
    {
      "inShape": [
        [
          341,
          341,
          341
        ],
        [
          341,
          341,
          341
        ],
        [
          341,
          341,
          341
        ]
      ],
      "result": {
        "count": 1,
        "id": 165,
        "metadata": 0
      }
    }
  ],
  "167": [
    {
      "inShape": [
        [
          265,
          265
        ],
        [
          265,
          265
        ]
      ],
      "result": {
        "count": 1,
        "id": 167,
        "metadata": 0
      }
    }
  ],
  "168": [
    {
      "inShape": [
        [
          409,
          409
        ],
        [
          409,
          409
        ]
      ],
      "result": {
        "count": 1,
        "id": 168,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          409,
          409,
          409
        ],
        [
          409,
          409,
          409
        ],
        [
          409,
          409,
          409
        ]
      ],
      "result": {
        "count": 1,
        "id": 168,
        "metadata": 1
      }
    },
    {
      "inShape": [
        [
          409,
          409,
          409
        ],
        [
          409,
          {
            "id": 351,
            "metadata": 0
          },
          409
        ],
        [
          409,
          409,
          409
        ]
      ],
      "result": {
        "count": 1,
        "id": 168,
        "metadata": 2
      }
    }
  ],
  "169": [
    {
      "inShape": [
        [
          409,
          410,
          409
        ],
        [
          410,
          410,
          410
        ],
        [
          409,
          410,
          409
        ]
      ],
      "result": {
        "count": 1,
        "id": 169,
        "metadata": 0
      }
    }
  ],
  "170": [
    {
      "inShape": [
        [
          296,
          296,
          296
        ],
        [
          296,
          296,
          296
        ],
        [
          296,
          296,
          296
        ]
      ],
      "result": {
        "count": 1,
        "id": 170,
        "metadata": 0
      }
    }
  ],
  "171": [
    {
      "inShape": [
        [
          35,
          35
        ]
      ],
      "result": {
        "count": 3,
        "id": 171,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          35,
          35
        ]
      ],
      "result": {
        "count": 3,
        "id": 171,
        "metadata": 1
      }
    },
    {
      "inShape": [
        [
          35,
          35
        ]
      ],
      "result": {
        "count": 3,
        "id": 171,
        "metadata": 2
      }
    },
    {
      "inShape": [
        [
          35,
          35
        ]
      ],
      "result": {
        "count": 3,
        "id": 171,
        "metadata": 3
      }
    },
    {
      "inShape": [
        [
          35,
          35
        ]
      ],
      "result": {
        "count": 3,
        "id": 171,
        "metadata": 4
      }
    },
    {
      "inShape": [
        [
          35,
          35
        ]
      ],
      "result": {
        "count": 3,
        "id": 171,
        "metadata": 5
      }
    },
    {
      "inShape": [
        [
          35,
          35
        ]
      ],
      "result": {
        "count": 3,
        "id": 171,
        "metadata": 6
      }
    },
    {
      "inShape": [
        [
          35,
          35
        ]
      ],
      "result": {
        "count": 3,
        "id": 171,
        "metadata": 7
      }
    },
    {
      "inShape": [
        [
          35,
          35
        ]
      ],
      "result": {
        "count": 3,
        "id": 171,
        "metadata": 8
      }
    },
    {
      "inShape": [
        [
          35,
          35
        ]
      ],
      "result": {
        "count": 3,
        "id": 171,
        "metadata": 9
      }
    },
    {
      "inShape": [
        [
          35,
          35
        ]
      ],
      "result": {
        "count": 3,
        "id": 171,
        "metadata": 10
      }
    },
    {
      "inShape": [
        [
          35,
          35
        ]
      ],
      "result": {
        "count": 3,
        "id": 171,
        "metadata": 11
      }
    },
    {
      "inShape": [
        [
          35,
          35
        ]
      ],
      "result": {
        "count": 3,
        "id": 171,
        "metadata": 12
      }
    },
    {
      "inShape": [
        [
          35,
          35
        ]
      ],
      "result": {
        "count": 3,
        "id": 171,
        "metadata": 13
      }
    },
    {
      "inShape": [
        [
          35,
          35
        ]
      ],
      "result": {
        "count": 3,
        "id": 171,
        "metadata": 14
      }
    },
    {
      "inShape": [
        [
          35,
          35
        ]
      ],
      "result": {
        "count": 3,
        "id": 171,
        "metadata": 15
      }
    }
  ],
  "172": [
    {
      "inShape": [
        [
          172,
          172,
          172
        ],
        [
          172,
          {
            "id": 351,
            "metadata": 15
          },
          172
        ],
        [
          172,
          172,
          172
        ]
      ],
      "result": {
        "count": 8,
        "id": 172,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          172,
          172,
          172
        ],
        [
          172,
          {
            "id": 351,
            "metadata": 14
          },
          172
        ],
        [
          172,
          172,
          172
        ]
      ],
      "result": {
        "count": 8,
        "id": 172,
        "metadata": 1
      }
    },
    {
      "inShape": [
        [
          172,
          172,
          172
        ],
        [
          172,
          {
            "id": 351,
            "metadata": 13
          },
          172
        ],
        [
          172,
          172,
          172
        ]
      ],
      "result": {
        "count": 8,
        "id": 172,
        "metadata": 2
      }
    },
    {
      "inShape": [
        [
          172,
          172,
          172
        ],
        [
          172,
          {
            "id": 351,
            "metadata": 12
          },
          172
        ],
        [
          172,
          172,
          172
        ]
      ],
      "result": {
        "count": 8,
        "id": 172,
        "metadata": 3
      }
    },
    {
      "inShape": [
        [
          172,
          172,
          172
        ],
        [
          172,
          {
            "id": 351,
            "metadata": 11
          },
          172
        ],
        [
          172,
          172,
          172
        ]
      ],
      "result": {
        "count": 8,
        "id": 172,
        "metadata": 4
      }
    },
    {
      "inShape": [
        [
          172,
          172,
          172
        ],
        [
          172,
          {
            "id": 351,
            "metadata": 10
          },
          172
        ],
        [
          172,
          172,
          172
        ]
      ],
      "result": {
        "count": 8,
        "id": 172,
        "metadata": 5
      }
    },
    {
      "inShape": [
        [
          172,
          172,
          172
        ],
        [
          172,
          {
            "id": 351,
            "metadata": 9
          },
          172
        ],
        [
          172,
          172,
          172
        ]
      ],
      "result": {
        "count": 8,
        "id": 172,
        "metadata": 6
      }
    },
    {
      "inShape": [
        [
          172,
          172,
          172
        ],
        [
          172,
          {
            "id": 351,
            "metadata": 8
          },
          172
        ],
        [
          172,
          172,
          172
        ]
      ],
      "result": {
        "count": 8,
        "id": 172,
        "metadata": 7
      }
    },
    {
      "inShape": [
        [
          172,
          172,
          172
        ],
        [
          172,
          {
            "id": 351,
            "metadata": 7
          },
          172
        ],
        [
          172,
          172,
          172
        ]
      ],
      "result": {
        "count": 8,
        "id": 172,
        "metadata": 8
      }
    },
    {
      "inShape": [
        [
          172,
          172,
          172
        ],
        [
          172,
          {
            "id": 351,
            "metadata": 6
          },
          172
        ],
        [
          172,
          172,
          172
        ]
      ],
      "result": {
        "count": 8,
        "id": 172,
        "metadata": 9
      }
    },
    {
      "inShape": [
        [
          172,
          172,
          172
        ],
        [
          172,
          {
            "id": 351,
            "metadata": 5
          },
          172
        ],
        [
          172,
          172,
          172
        ]
      ],
      "result": {
        "count": 8,
        "id": 172,
        "metadata": 10
      }
    },
    {
      "inShape": [
        [
          172,
          172,
          172
        ],
        [
          172,
          {
            "id": 351,
            "metadata": 4
          },
          172
        ],
        [
          172,
          172,
          172
        ]
      ],
      "result": {
        "count": 8,
        "id": 172,
        "metadata": 11
      }
    },
    {
      "inShape": [
        [
          172,
          172,
          172
        ],
        [
          172,
          {
            "id": 351,
            "metadata": 3
          },
          172
        ],
        [
          172,
          172,
          172
        ]
      ],
      "result": {
        "count": 8,
        "id": 172,
        "metadata": 12
      }
    },
    {
      "inShape": [
        [
          172,
          172,
          172
        ],
        [
          172,
          {
            "id": 351,
            "metadata": 2
          },
          172
        ],
        [
          172,
          172,
          172
        ]
      ],
      "result": {
        "count": 8,
        "id": 172,
        "metadata": 13
      }
    },
    {
      "inShape": [
        [
          172,
          172,
          172
        ],
        [
          172,
          {
            "id": 351,
            "metadata": 1
          },
          172
        ],
        [
          172,
          172,
          172
        ]
      ],
      "result": {
        "count": 8,
        "id": 172,
        "metadata": 14
      }
    },
    {
      "inShape": [
        [
          172,
          172,
          172
        ],
        [
          172,
          {
            "id": 351,
            "metadata": 0
          },
          172
        ],
        [
          172,
          172,
          172
        ]
      ],
      "result": {
        "count": 8,
        "id": 172,
        "metadata": 15
      }
    }
  ],
  "173": [
    {
      "inShape": [
        [
          {
            "id": 263,
            "metadata": 0
          },
          {
            "id": 263,
            "metadata": 0
          },
          {
            "id": 263,
            "metadata": 0
          }
        ],
        [
          {
            "id": 263,
            "metadata": 0
          },
          {
            "id": 263,
            "metadata": 0
          },
          {
            "id": 263,
            "metadata": 0
          }
        ],
        [
          {
            "id": 263,
            "metadata": 0
          },
          {
            "id": 263,
            "metadata": 0
          },
          {
            "id": 263,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 173,
        "metadata": 0
      }
    }
  ],
  "179": [
    {
      "inShape": [
        [
          {
            "id": 12,
            "metadata": 1
          },
          {
            "id": 12,
            "metadata": 1
          }
        ],
        [
          {
            "id": 12,
            "metadata": 1
          },
          {
            "id": 12,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 179,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 179,
            "metadata": 0
          },
          {
            "id": 179,
            "metadata": 0
          }
        ],
        [
          {
            "id": 179,
            "metadata": 0
          },
          {
            "id": 179,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 4,
        "id": 179,
        "metadata": 2
      }
    },
    {
      "inShape": [
        [
          {
            "id": 182,
            "metadata": 0
          }
        ],
        [
          {
            "id": 182,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 179,
        "metadata": 1
      }
    }
  ],
  "180": [
    {
      "inShape": [
        [
          null,
          null,
          179
        ],
        [
          null,
          179,
          179
        ],
        [
          179,
          179,
          179
        ]
      ],
      "result": {
        "count": 4,
        "id": 180,
        "metadata": 0
      }
    }
  ],
  "182": [
    {
      "inShape": [
        [
          179,
          179,
          179
        ]
      ],
      "result": {
        "count": 6,
        "id": 182,
        "metadata": 0
      }
    }
  ],
  "183": [
    {
      "inShape": [
        [
          280,
          {
            "id": 5,
            "metadata": 1
          },
          280
        ],
        [
          280,
          {
            "id": 5,
            "metadata": 1
          },
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 183,
        "metadata": 0
      }
    }
  ],
  "184": [
    {
      "inShape": [
        [
          280,
          {
            "id": 5,
            "metadata": 2
          },
          280
        ],
        [
          280,
          {
            "id": 5,
            "metadata": 2
          },
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 184,
        "metadata": 0
      }
    }
  ],
  "185": [
    {
      "inShape": [
        [
          280,
          {
            "id": 5,
            "metadata": 3
          },
          280
        ],
        [
          280,
          {
            "id": 5,
            "metadata": 3
          },
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 185,
        "metadata": 0
      }
    }
  ],
  "186": [
    {
      "inShape": [
        [
          280,
          {
            "id": 5,
            "metadata": 5
          },
          280
        ],
        [
          280,
          {
            "id": 5,
            "metadata": 5
          },
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 186,
        "metadata": 0
      }
    }
  ],
  "187": [
    {
      "inShape": [
        [
          280,
          {
            "id": 5,
            "metadata": 4
          },
          280
        ],
        [
          280,
          {
            "id": 5,
            "metadata": 4
          },
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 187,
        "metadata": 0
      }
    }
  ],
  "188": [
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 1
          },
          280,
          {
            "id": 5,
            "metadata": 1
          }
        ],
        [
          {
            "id": 5,
            "metadata": 1
          },
          280,
          {
            "id": 5,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 3,
        "id": 188,
        "metadata": 0
      }
    }
  ],
  "189": [
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 2
          },
          280,
          {
            "id": 5,
            "metadata": 2
          }
        ],
        [
          {
            "id": 5,
            "metadata": 2
          },
          280,
          {
            "id": 5,
            "metadata": 2
          }
        ]
      ],
      "result": {
        "count": 3,
        "id": 189,
        "metadata": 0
      }
    }
  ],
  "190": [
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 3
          },
          280,
          {
            "id": 5,
            "metadata": 3
          }
        ],
        [
          {
            "id": 5,
            "metadata": 3
          },
          280,
          {
            "id": 5,
            "metadata": 3
          }
        ]
      ],
      "result": {
        "count": 3,
        "id": 190,
        "metadata": 0
      }
    }
  ],
  "191": [
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 5
          },
          280,
          {
            "id": 5,
            "metadata": 5
          }
        ],
        [
          {
            "id": 5,
            "metadata": 5
          },
          280,
          {
            "id": 5,
            "metadata": 5
          }
        ]
      ],
      "result": {
        "count": 3,
        "id": 191,
        "metadata": 0
      }
    }
  ],
  "192": [
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 4
          },
          280,
          {
            "id": 5,
            "metadata": 4
          }
        ],
        [
          {
            "id": 5,
            "metadata": 4
          },
          280,
          {
            "id": 5,
            "metadata": 4
          }
        ]
      ],
      "result": {
        "count": 3,
        "id": 192,
        "metadata": 0
      }
    }
  ],
  "201": [
    {
      "inShape": [
        [
          433,
          433
        ],
        [
          433,
          433
        ]
      ],
      "result": {
        "count": 4,
        "id": 201,
        "metadata": 0
      }
    }
  ],
  "202": [
    {
      "inShape": [
        [
          205
        ],
        [
          205
        ]
      ],
      "result": {
        "count": 1,
        "id": 202,
        "metadata": 0
      }
    }
  ],
  "203": [
    {
      "inShape": [
        [
          null,
          null,
          201
        ],
        [
          null,
          201,
          201
        ],
        [
          201,
          201,
          201
        ]
      ],
      "result": {
        "count": 4,
        "id": 203,
        "metadata": 0
      }
    }
  ],
  "205": [
    {
      "inShape": [
        [
          201,
          201,
          201
        ]
      ],
      "result": {
        "count": 6,
        "id": 205,
        "metadata": 0
      }
    }
  ],
  "206": [
    {
      "inShape": [
        [
          121,
          121
        ],
        [
          121,
          121
        ]
      ],
      "result": {
        "count": 4,
        "id": 206,
        "metadata": 0
      }
    }
  ],
  "256": [
    {
      "inShape": [
        [
          265
        ],
        [
          280
        ],
        [
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 256,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        256,
        256
      ],
      "result": {
        "count": 1,
        "id": 256,
        "metadata": 0
      }
    }
  ],
  "257": [
    {
      "inShape": [
        [
          265,
          265,
          265
        ],
        [
          null,
          280,
          null
        ],
        [
          null,
          280,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 257,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        257,
        257
      ],
      "result": {
        "count": 1,
        "id": 257,
        "metadata": 0
      }
    }
  ],
  "258": [
    {
      "inShape": [
        [
          265,
          265
        ],
        [
          265,
          280
        ],
        [
          null,
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 258,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        258,
        258
      ],
      "result": {
        "count": 1,
        "id": 258,
        "metadata": 0
      }
    }
  ],
  "259": [
    {
      "ingredients": [
        265,
        318
      ],
      "result": {
        "count": 1,
        "id": 259,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        259,
        259
      ],
      "result": {
        "count": 1,
        "id": 259,
        "metadata": 0
      }
    }
  ],
  "261": [
    {
      "inShape": [
        [
          null,
          280,
          287
        ],
        [
          280,
          null,
          287
        ],
        [
          null,
          280,
          287
        ]
      ],
      "result": {
        "count": 1,
        "id": 261,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        261,
        261
      ],
      "result": {
        "count": 1,
        "id": 261,
        "metadata": 0
      }
    }
  ],
  "262": [
    {
      "inShape": [
        [
          318
        ],
        [
          280
        ],
        [
          288
        ]
      ],
      "result": {
        "count": 4,
        "id": 262,
        "metadata": 0
      }
    }
  ],
  "263": [
    {
      "inShape": [
        [
          173
        ]
      ],
      "result": {
        "count": 9,
        "id": 263,
        "metadata": 0
      }
    }
  ],
  "264": [
    {
      "inShape": [
        [
          57
        ]
      ],
      "result": {
        "count": 9,
        "id": 264,
        "metadata": 0
      }
    }
  ],
  "265": [
    {
      "inShape": [
        [
          42
        ]
      ],
      "result": {
        "count": 9,
        "id": 265,
        "metadata": 0
      }
    }
  ],
  "266": [
    {
      "inShape": [
        [
          41
        ]
      ],
      "result": {
        "count": 9,
        "id": 266,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          371,
          371,
          371
        ],
        [
          371,
          371,
          371
        ],
        [
          371,
          371,
          371
        ]
      ],
      "result": {
        "count": 1,
        "id": 266,
        "metadata": 0
      }
    }
  ],
  "267": [
    {
      "inShape": [
        [
          265
        ],
        [
          265
        ],
        [
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 267,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        267,
        267
      ],
      "result": {
        "count": 1,
        "id": 267,
        "metadata": 0
      }
    }
  ],
  "268": [
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 0
          }
        ],
        [
          {
            "id": 5,
            "metadata": 0
          }
        ],
        [
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 268,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        268,
        268
      ],
      "result": {
        "count": 1,
        "id": 268,
        "metadata": 0
      }
    }
  ],
  "269": [
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 0
          }
        ],
        [
          280
        ],
        [
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 269,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        269,
        269
      ],
      "result": {
        "count": 1,
        "id": 269,
        "metadata": 0
      }
    }
  ],
  "270": [
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 0
          },
          {
            "id": 5,
            "metadata": 0
          },
          {
            "id": 5,
            "metadata": 0
          }
        ],
        [
          null,
          280,
          null
        ],
        [
          null,
          280,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 270,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        270,
        270
      ],
      "result": {
        "count": 1,
        "id": 270,
        "metadata": 0
      }
    }
  ],
  "271": [
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 0
          },
          {
            "id": 5,
            "metadata": 0
          }
        ],
        [
          {
            "id": 5,
            "metadata": 0
          },
          280
        ],
        [
          null,
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 271,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        271,
        271
      ],
      "result": {
        "count": 1,
        "id": 271,
        "metadata": 0
      }
    }
  ],
  "272": [
    {
      "inShape": [
        [
          4
        ],
        [
          4
        ],
        [
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 272,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        272,
        272
      ],
      "result": {
        "count": 1,
        "id": 272,
        "metadata": 0
      }
    }
  ],
  "273": [
    {
      "inShape": [
        [
          4
        ],
        [
          280
        ],
        [
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 273,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        273,
        273
      ],
      "result": {
        "count": 1,
        "id": 273,
        "metadata": 0
      }
    }
  ],
  "274": [
    {
      "inShape": [
        [
          4,
          4,
          4
        ],
        [
          null,
          280,
          null
        ],
        [
          null,
          280,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 274,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        274,
        274
      ],
      "result": {
        "count": 1,
        "id": 274,
        "metadata": 0
      }
    }
  ],
  "275": [
    {
      "inShape": [
        [
          4,
          4
        ],
        [
          4,
          280
        ],
        [
          null,
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 275,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        275,
        275
      ],
      "result": {
        "count": 1,
        "id": 275,
        "metadata": 0
      }
    }
  ],
  "276": [
    {
      "inShape": [
        [
          264
        ],
        [
          264
        ],
        [
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 276,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        276,
        276
      ],
      "result": {
        "count": 1,
        "id": 276,
        "metadata": 0
      }
    }
  ],
  "277": [
    {
      "inShape": [
        [
          264
        ],
        [
          280
        ],
        [
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 277,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        277,
        277
      ],
      "result": {
        "count": 1,
        "id": 277,
        "metadata": 0
      }
    }
  ],
  "278": [
    {
      "inShape": [
        [
          264,
          264,
          264
        ],
        [
          null,
          280,
          null
        ],
        [
          null,
          280,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 278,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        278,
        278
      ],
      "result": {
        "count": 1,
        "id": 278,
        "metadata": 0
      }
    }
  ],
  "279": [
    {
      "inShape": [
        [
          264,
          264
        ],
        [
          264,
          280
        ],
        [
          null,
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 279,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        279,
        279
      ],
      "result": {
        "count": 1,
        "id": 279,
        "metadata": 0
      }
    }
  ],
  "280": [
    {
      "inShape": [
        [
          5
        ],
        [
          5
        ]
      ],
      "result": {
        "count": 4,
        "id": 280,
        "metadata": 0
      }
    }
  ],
  "281": [
    {
      "inShape": [
        [
          5,
          null,
          5
        ],
        [
          null,
          5,
          null
        ]
      ],
      "result": {
        "count": 4,
        "id": 281,
        "metadata": 0
      }
    }
  ],
  "282": [
    {
      "ingredients": [
        40,
        39,
        281
      ],
      "result": {
        "count": 1,
        "id": 282,
        "metadata": 0
      }
    }
  ],
  "283": [
    {
      "inShape": [
        [
          266
        ],
        [
          266
        ],
        [
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 283,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        283,
        283
      ],
      "result": {
        "count": 1,
        "id": 283,
        "metadata": 0
      }
    }
  ],
  "284": [
    {
      "inShape": [
        [
          266
        ],
        [
          280
        ],
        [
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 284,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        284,
        284
      ],
      "result": {
        "count": 1,
        "id": 284,
        "metadata": 0
      }
    }
  ],
  "285": [
    {
      "inShape": [
        [
          266,
          266,
          266
        ],
        [
          null,
          280,
          null
        ],
        [
          null,
          280,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 285,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        285,
        285
      ],
      "result": {
        "count": 1,
        "id": 285,
        "metadata": 0
      }
    }
  ],
  "286": [
    {
      "inShape": [
        [
          266,
          266
        ],
        [
          266,
          280
        ],
        [
          null,
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 286,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        286,
        286
      ],
      "result": {
        "count": 1,
        "id": 286,
        "metadata": 0
      }
    }
  ],
  "290": [
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 0
          },
          {
            "id": 5,
            "metadata": 0
          }
        ],
        [
          null,
          280
        ],
        [
          null,
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 290,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        290,
        290
      ],
      "result": {
        "count": 1,
        "id": 290,
        "metadata": 0
      }
    }
  ],
  "291": [
    {
      "inShape": [
        [
          4,
          4
        ],
        [
          null,
          280
        ],
        [
          null,
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 291,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        291,
        291
      ],
      "result": {
        "count": 1,
        "id": 291,
        "metadata": 0
      }
    }
  ],
  "292": [
    {
      "inShape": [
        [
          265,
          265
        ],
        [
          null,
          280
        ],
        [
          null,
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 292,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        292,
        292
      ],
      "result": {
        "count": 1,
        "id": 292,
        "metadata": 0
      }
    }
  ],
  "293": [
    {
      "inShape": [
        [
          264,
          264
        ],
        [
          null,
          280
        ],
        [
          null,
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 293,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        293,
        293
      ],
      "result": {
        "count": 1,
        "id": 293,
        "metadata": 0
      }
    }
  ],
  "294": [
    {
      "inShape": [
        [
          266,
          266
        ],
        [
          null,
          280
        ],
        [
          null,
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 294,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        294,
        294
      ],
      "result": {
        "count": 1,
        "id": 294,
        "metadata": 0
      }
    }
  ],
  "296": [
    {
      "inShape": [
        [
          170
        ]
      ],
      "result": {
        "count": 9,
        "id": 296,
        "metadata": 0
      }
    }
  ],
  "297": [
    {
      "inShape": [
        [
          296,
          296,
          296
        ]
      ],
      "result": {
        "count": 1,
        "id": 297,
        "metadata": 0
      }
    }
  ],
  "298": [
    {
      "inShape": [
        [
          334,
          334,
          334
        ],
        [
          334,
          null,
          334
        ]
      ],
      "result": {
        "count": 1,
        "id": 298,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        298,
        298
      ],
      "result": {
        "count": 1,
        "id": 298,
        "metadata": 0
      }
    }
  ],
  "299": [
    {
      "inShape": [
        [
          334,
          null,
          334
        ],
        [
          334,
          334,
          334
        ],
        [
          334,
          334,
          334
        ]
      ],
      "result": {
        "count": 1,
        "id": 299,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        299,
        299
      ],
      "result": {
        "count": 1,
        "id": 299,
        "metadata": 0
      }
    }
  ],
  "300": [
    {
      "inShape": [
        [
          334,
          334,
          334
        ],
        [
          334,
          null,
          334
        ],
        [
          334,
          null,
          334
        ]
      ],
      "result": {
        "count": 1,
        "id": 300,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        300,
        300
      ],
      "result": {
        "count": 1,
        "id": 300,
        "metadata": 0
      }
    }
  ],
  "301": [
    {
      "inShape": [
        [
          334,
          null,
          334
        ],
        [
          334,
          null,
          334
        ]
      ],
      "result": {
        "count": 1,
        "id": 301,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        301,
        301
      ],
      "result": {
        "count": 1,
        "id": 301,
        "metadata": 0
      }
    }
  ],
  "302": [
    {
      "ingredients": [
        302,
        302
      ],
      "result": {
        "count": 1,
        "id": 302,
        "metadata": 0
      }
    }
  ],
  "303": [
    {
      "ingredients": [
        303,
        303
      ],
      "result": {
        "count": 1,
        "id": 303,
        "metadata": 0
      }
    }
  ],
  "304": [
    {
      "ingredients": [
        304,
        304
      ],
      "result": {
        "count": 1,
        "id": 304,
        "metadata": 0
      }
    }
  ],
  "305": [
    {
      "ingredients": [
        305,
        305
      ],
      "result": {
        "count": 1,
        "id": 305,
        "metadata": 0
      }
    }
  ],
  "306": [
    {
      "inShape": [
        [
          265,
          265,
          265
        ],
        [
          265,
          null,
          265
        ]
      ],
      "result": {
        "count": 1,
        "id": 306,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        306,
        306
      ],
      "result": {
        "count": 1,
        "id": 306,
        "metadata": 0
      }
    }
  ],
  "307": [
    {
      "inShape": [
        [
          265,
          null,
          265
        ],
        [
          265,
          265,
          265
        ],
        [
          265,
          265,
          265
        ]
      ],
      "result": {
        "count": 1,
        "id": 307,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        307,
        307
      ],
      "result": {
        "count": 1,
        "id": 307,
        "metadata": 0
      }
    }
  ],
  "308": [
    {
      "inShape": [
        [
          265,
          265,
          265
        ],
        [
          265,
          null,
          265
        ],
        [
          265,
          null,
          265
        ]
      ],
      "result": {
        "count": 1,
        "id": 308,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        308,
        308
      ],
      "result": {
        "count": 1,
        "id": 308,
        "metadata": 0
      }
    }
  ],
  "309": [
    {
      "inShape": [
        [
          265,
          null,
          265
        ],
        [
          265,
          null,
          265
        ]
      ],
      "result": {
        "count": 1,
        "id": 309,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        309,
        309
      ],
      "result": {
        "count": 1,
        "id": 309,
        "metadata": 0
      }
    }
  ],
  "310": [
    {
      "inShape": [
        [
          264,
          264,
          264
        ],
        [
          264,
          null,
          264
        ]
      ],
      "result": {
        "count": 1,
        "id": 310,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        310,
        310
      ],
      "result": {
        "count": 1,
        "id": 310,
        "metadata": 0
      }
    }
  ],
  "311": [
    {
      "inShape": [
        [
          264,
          null,
          264
        ],
        [
          264,
          264,
          264
        ],
        [
          264,
          264,
          264
        ]
      ],
      "result": {
        "count": 1,
        "id": 311,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        311,
        311
      ],
      "result": {
        "count": 1,
        "id": 311,
        "metadata": 0
      }
    }
  ],
  "312": [
    {
      "inShape": [
        [
          264,
          264,
          264
        ],
        [
          264,
          null,
          264
        ],
        [
          264,
          null,
          264
        ]
      ],
      "result": {
        "count": 1,
        "id": 312,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        312,
        312
      ],
      "result": {
        "count": 1,
        "id": 312,
        "metadata": 0
      }
    }
  ],
  "313": [
    {
      "inShape": [
        [
          264,
          null,
          264
        ],
        [
          264,
          null,
          264
        ]
      ],
      "result": {
        "count": 1,
        "id": 313,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        313,
        313
      ],
      "result": {
        "count": 1,
        "id": 313,
        "metadata": 0
      }
    }
  ],
  "314": [
    {
      "inShape": [
        [
          266,
          266,
          266
        ],
        [
          266,
          null,
          266
        ]
      ],
      "result": {
        "count": 1,
        "id": 314,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        314,
        314
      ],
      "result": {
        "count": 1,
        "id": 314,
        "metadata": 0
      }
    }
  ],
  "315": [
    {
      "inShape": [
        [
          266,
          null,
          266
        ],
        [
          266,
          266,
          266
        ],
        [
          266,
          266,
          266
        ]
      ],
      "result": {
        "count": 1,
        "id": 315,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        315,
        315
      ],
      "result": {
        "count": 1,
        "id": 315,
        "metadata": 0
      }
    }
  ],
  "316": [
    {
      "inShape": [
        [
          266,
          266,
          266
        ],
        [
          266,
          null,
          266
        ],
        [
          266,
          null,
          266
        ]
      ],
      "result": {
        "count": 1,
        "id": 316,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        316,
        316
      ],
      "result": {
        "count": 1,
        "id": 316,
        "metadata": 0
      }
    }
  ],
  "317": [
    {
      "inShape": [
        [
          266,
          null,
          266
        ],
        [
          266,
          null,
          266
        ]
      ],
      "result": {
        "count": 1,
        "id": 317,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        317,
        317
      ],
      "result": {
        "count": 1,
        "id": 317,
        "metadata": 0
      }
    }
  ],
  "321": [
    {
      "inShape": [
        [
          280,
          280,
          280
        ],
        [
          280,
          35,
          280
        ],
        [
          280,
          280,
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 321,
        "metadata": 0
      }
    }
  ],
  "322": [
    {
      "inShape": [
        [
          266,
          266,
          266
        ],
        [
          266,
          260,
          266
        ],
        [
          266,
          266,
          266
        ]
      ],
      "result": {
        "count": 1,
        "id": 322,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          41,
          41,
          41
        ],
        [
          41,
          260,
          41
        ],
        [
          41,
          41,
          41
        ]
      ],
      "result": {
        "count": 1,
        "id": 322,
        "metadata": 0
      }
    }
  ],
  "323": [
    {
      "inShape": [
        [
          5,
          5,
          5
        ],
        [
          5,
          5,
          5
        ],
        [
          null,
          280,
          null
        ]
      ],
      "result": {
        "count": 3,
        "id": 323,
        "metadata": 0
      }
    }
  ],
  "324": [
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 0
          },
          {
            "id": 5,
            "metadata": 0
          }
        ],
        [
          {
            "id": 5,
            "metadata": 0
          },
          {
            "id": 5,
            "metadata": 0
          }
        ],
        [
          {
            "id": 5,
            "metadata": 0
          },
          {
            "id": 5,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 3,
        "id": 324,
        "metadata": 0
      }
    }
  ],
  "325": [
    {
      "inShape": [
        [
          265,
          null,
          265
        ],
        [
          null,
          265,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 325,
        "metadata": 0
      }
    }
  ],
  "328": [
    {
      "inShape": [
        [
          265,
          null,
          265
        ],
        [
          265,
          265,
          265
        ]
      ],
      "result": {
        "count": 1,
        "id": 328,
        "metadata": 0
      }
    }
  ],
  "330": [
    {
      "inShape": [
        [
          265,
          265
        ],
        [
          265,
          265
        ],
        [
          265,
          265
        ]
      ],
      "result": {
        "count": 3,
        "id": 330,
        "metadata": 0
      }
    }
  ],
  "331": [
    {
      "inShape": [
        [
          152
        ]
      ],
      "result": {
        "count": 9,
        "id": 331,
        "metadata": 0
      }
    }
  ],
  "333": [
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 0
          },
          269,
          {
            "id": 5,
            "metadata": 0
          }
        ],
        [
          {
            "id": 5,
            "metadata": 0
          },
          {
            "id": 5,
            "metadata": 0
          },
          {
            "id": 5,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 333,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 1
          },
          269,
          {
            "id": 5,
            "metadata": 1
          }
        ],
        [
          {
            "id": 5,
            "metadata": 1
          },
          {
            "id": 5,
            "metadata": 1
          },
          {
            "id": 5,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 333,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 2
          },
          269,
          {
            "id": 5,
            "metadata": 2
          }
        ],
        [
          {
            "id": 5,
            "metadata": 2
          },
          {
            "id": 5,
            "metadata": 2
          },
          {
            "id": 5,
            "metadata": 2
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 333,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 3
          },
          269,
          {
            "id": 5,
            "metadata": 3
          }
        ],
        [
          {
            "id": 5,
            "metadata": 3
          },
          {
            "id": 5,
            "metadata": 3
          },
          {
            "id": 5,
            "metadata": 3
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 333,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 4
          },
          269,
          {
            "id": 5,
            "metadata": 4
          }
        ],
        [
          {
            "id": 5,
            "metadata": 4
          },
          {
            "id": 5,
            "metadata": 4
          },
          {
            "id": 5,
            "metadata": 4
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 333,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 5
          },
          269,
          {
            "id": 5,
            "metadata": 5
          }
        ],
        [
          {
            "id": 5,
            "metadata": 5
          },
          {
            "id": 5,
            "metadata": 5
          },
          {
            "id": 5,
            "metadata": 5
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 333,
        "metadata": 0
      }
    }
  ],
  "334": [
    {
      "inShape": [
        [
          415,
          415
        ],
        [
          415,
          415
        ]
      ],
      "result": {
        "count": 1,
        "id": 334,
        "metadata": 0
      }
    }
  ],
  "340": [
    {
      "ingredients": [
        339,
        339,
        339,
        334
      ],
      "result": {
        "count": 1,
        "id": 340,
        "metadata": 0
      }
    }
  ],
  "341": [
    {
      "inShape": [
        [
          165
        ]
      ],
      "result": {
        "count": 9,
        "id": 341,
        "metadata": 0
      }
    }
  ],
  "342": [
    {
      "inShape": [
        [
          54
        ],
        [
          328
        ]
      ],
      "result": {
        "count": 1,
        "id": 342,
        "metadata": 0
      }
    }
  ],
  "343": [
    {
      "inShape": [
        [
          61
        ],
        [
          328
        ]
      ],
      "result": {
        "count": 1,
        "id": 343,
        "metadata": 0
      }
    }
  ],
  "345": [
    {
      "inShape": [
        [
          null,
          265,
          null
        ],
        [
          265,
          331,
          265
        ],
        [
          null,
          265,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 345,
        "metadata": 0
      }
    }
  ],
  "346": [
    {
      "inShape": [
        [
          null,
          null,
          280
        ],
        [
          null,
          280,
          287
        ],
        [
          280,
          null,
          287
        ]
      ],
      "result": {
        "count": 1,
        "id": 346,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        346,
        346
      ],
      "result": {
        "count": 1,
        "id": 346,
        "metadata": 0
      }
    }
  ],
  "347": [
    {
      "inShape": [
        [
          null,
          266,
          null
        ],
        [
          266,
          331,
          266
        ],
        [
          null,
          266,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 347,
        "metadata": 0
      }
    }
  ],
  "351": [
    {
      "ingredients": [
        {
          "id": 351,
          "metadata": 4
        },
        {
          "id": 351,
          "metadata": 2
        }
      ],
      "result": {
        "count": 2,
        "id": 351,
        "metadata": 6
      }
    },
    {
      "inShape": [
        [
          37
        ]
      ],
      "result": {
        "count": 1,
        "id": 351,
        "metadata": 11
      }
    },
    {
      "inShape": [
        [
          {
            "id": 175,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 2,
        "id": 351,
        "metadata": 11
      }
    },
    {
      "ingredients": [
        {
          "id": 351,
          "metadata": 0
        },
        {
          "id": 351,
          "metadata": 15
        }
      ],
      "result": {
        "count": 2,
        "id": 351,
        "metadata": 8
      }
    },
    {
      "ingredients": [
        {
          "id": 351,
          "metadata": 2
        },
        {
          "id": 351,
          "metadata": 15
        }
      ],
      "result": {
        "count": 2,
        "id": 351,
        "metadata": 10
      }
    },
    {
      "ingredients": [
        {
          "id": 351,
          "metadata": 4
        },
        {
          "id": 351,
          "metadata": 1
        }
      ],
      "result": {
        "count": 2,
        "id": 351,
        "metadata": 5
      }
    },
    {
      "inShape": [
        [
          {
            "id": 38,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 351,
        "metadata": 12
      }
    },
    {
      "ingredients": [
        {
          "id": 351,
          "metadata": 4
        },
        {
          "id": 351,
          "metadata": 15
        }
      ],
      "result": {
        "count": 2,
        "id": 351,
        "metadata": 12
      }
    },
    {
      "inShape": [
        [
          {
            "id": 38,
            "metadata": 7
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 351,
        "metadata": 9
      }
    },
    {
      "inShape": [
        [
          {
            "id": 175,
            "metadata": 5
          }
        ]
      ],
      "result": {
        "count": 2,
        "id": 351,
        "metadata": 9
      }
    },
    {
      "ingredients": [
        {
          "id": 351,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 15
        }
      ],
      "result": {
        "count": 2,
        "id": 351,
        "metadata": 9
      }
    },
    {
      "inShape": [
        [
          {
            "id": 38,
            "metadata": 5
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 351,
        "metadata": 14
      }
    },
    {
      "ingredients": [
        {
          "id": 351,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 11
        }
      ],
      "result": {
        "count": 2,
        "id": 351,
        "metadata": 14
      }
    },
    {
      "inShape": [
        [
          {
            "id": 38,
            "metadata": 2
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 351,
        "metadata": 13
      }
    },
    {
      "inShape": [
        [
          {
            "id": 175,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 2,
        "id": 351,
        "metadata": 13
      }
    },
    {
      "ingredients": [
        {
          "id": 351,
          "metadata": 5
        },
        {
          "id": 351,
          "metadata": 9
        }
      ],
      "result": {
        "count": 2,
        "id": 351,
        "metadata": 13
      }
    },
    {
      "ingredients": [
        {
          "id": 351,
          "metadata": 4
        },
        {
          "id": 351,
          "metadata": 15
        },
        {
          "id": 351,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 1
        }
      ],
      "result": {
        "count": 4,
        "id": 351,
        "metadata": 13
      }
    },
    {
      "ingredients": [
        {
          "id": 351,
          "metadata": 9
        },
        {
          "id": 351,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 4
        }
      ],
      "result": {
        "count": 3,
        "id": 351,
        "metadata": 13
      }
    },
    {
      "inShape": [
        [
          {
            "id": 38,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 351,
        "metadata": 1
      }
    },
    {
      "inShape": [
        [
          {
            "id": 38,
            "metadata": 4
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 351,
        "metadata": 1
      }
    },
    {
      "inShape": [
        [
          {
            "id": 175,
            "metadata": 4
          }
        ]
      ],
      "result": {
        "count": 2,
        "id": 351,
        "metadata": 1
      }
    },
    {
      "inShape": [
        [
          434
        ]
      ],
      "result": {
        "count": 1,
        "id": 351,
        "metadata": 1
      }
    },
    {
      "inShape": [
        [
          38
        ]
      ],
      "result": {
        "count": 1,
        "id": 351,
        "metadata": 7
      }
    },
    {
      "ingredients": [
        {
          "id": 351,
          "metadata": 0
        },
        {
          "id": 351,
          "metadata": 15
        },
        {
          "id": 351,
          "metadata": 15
        }
      ],
      "result": {
        "count": 3,
        "id": 351,
        "metadata": 7
      }
    },
    {
      "ingredients": [
        {
          "id": 351,
          "metadata": 8
        },
        {
          "id": 351,
          "metadata": 15
        }
      ],
      "result": {
        "count": 2,
        "id": 351,
        "metadata": 7
      }
    },
    {
      "inShape": [
        [
          22
        ]
      ],
      "result": {
        "count": 9,
        "id": 351,
        "metadata": 4
      }
    },
    {
      "inShape": [
        [
          352
        ]
      ],
      "result": {
        "count": 3,
        "id": 351,
        "metadata": 15
      }
    }
  ],
  "353": [
    {
      "inShape": [
        [
          338
        ]
      ],
      "result": {
        "count": 1,
        "id": 353,
        "metadata": 0
      }
    }
  ],
  "354": [
    {
      "inShape": [
        [
          335,
          335,
          335
        ],
        [
          353,
          344,
          353
        ],
        [
          296,
          296,
          296
        ]
      ],
      "outShape": [
        [
          325,
          325,
          325
        ],
        [
          null,
          null,
          null
        ],
        [
          null,
          null,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 354,
        "metadata": 0
      }
    }
  ],
  "355": [
    {
      "inShape": [
        [
          35,
          35,
          35
        ],
        [
          5,
          5,
          5
        ]
      ],
      "result": {
        "count": 1,
        "id": 355,
        "metadata": 0
      }
    }
  ],
  "356": [
    {
      "inShape": [
        [
          75,
          331,
          75
        ],
        [
          {
            "id": 1,
            "metadata": 0
          },
          {
            "id": 1,
            "metadata": 0
          },
          {
            "id": 1,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 356,
        "metadata": 0
      }
    }
  ],
  "357": [
    {
      "inShape": [
        [
          296,
          {
            "id": 351,
            "metadata": 3
          },
          296
        ]
      ],
      "result": {
        "count": 8,
        "id": 357,
        "metadata": 0
      }
    }
  ],
  "358": [
    {
      "inShape": [
        [
          339,
          339,
          339
        ],
        [
          339,
          358,
          339
        ],
        [
          339,
          339,
          339
        ]
      ],
      "result": {
        "count": 1,
        "id": 358,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        359,
        358
      ],
      "result": {
        "count": 1,
        "id": 358,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        358,
        395
      ],
      "result": {
        "count": 2,
        "id": 358,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        358,
        395,
        395
      ],
      "result": {
        "count": 3,
        "id": 358,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        358,
        395,
        395,
        395
      ],
      "result": {
        "count": 4,
        "id": 358,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        395,
        358,
        395,
        395,
        395
      ],
      "result": {
        "count": 5,
        "id": 358,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        395,
        395,
        358,
        395,
        395,
        395
      ],
      "result": {
        "count": 6,
        "id": 358,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        395,
        395,
        395,
        358,
        395,
        395,
        395
      ],
      "result": {
        "count": 7,
        "id": 358,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        395,
        395,
        395,
        358,
        395,
        395,
        395,
        395
      ],
      "result": {
        "count": 8,
        "id": 358,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        395,
        395,
        395,
        358,
        395,
        395,
        395,
        395,
        395
      ],
      "result": {
        "count": 9,
        "id": 358,
        "metadata": 0
      }
    }
  ],
  "359": [
    {
      "inShape": [
        [
          null,
          265
        ],
        [
          265,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 359,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        359,
        359
      ],
      "result": {
        "count": 1,
        "id": 359,
        "metadata": 0
      }
    }
  ],
  "361": [
    {
      "inShape": [
        [
          86
        ]
      ],
      "result": {
        "count": 4,
        "id": 361,
        "metadata": 0
      }
    }
  ],
  "362": [
    {
      "inShape": [
        [
          360
        ]
      ],
      "result": {
        "count": 1,
        "id": 362,
        "metadata": 0
      }
    }
  ],
  "371": [
    {
      "inShape": [
        [
          266
        ]
      ],
      "result": {
        "count": 9,
        "id": 371,
        "metadata": 0
      }
    }
  ],
  "374": [
    {
      "inShape": [
        [
          20,
          null,
          20
        ],
        [
          null,
          20,
          null
        ]
      ],
      "result": {
        "count": 3,
        "id": 374,
        "metadata": 0
      }
    }
  ],
  "376": [
    {
      "ingredients": [
        39,
        353,
        375
      ],
      "result": {
        "count": 1,
        "id": 376,
        "metadata": 0
      }
    }
  ],
  "377": [
    {
      "inShape": [
        [
          369
        ]
      ],
      "result": {
        "count": 2,
        "id": 377,
        "metadata": 0
      }
    }
  ],
  "378": [
    {
      "ingredients": [
        377,
        341
      ],
      "result": {
        "count": 1,
        "id": 378,
        "metadata": 0
      }
    }
  ],
  "379": [
    {
      "inShape": [
        [
          null,
          369,
          null
        ],
        [
          4,
          4,
          4
        ]
      ],
      "result": {
        "count": 1,
        "id": 379,
        "metadata": 0
      }
    }
  ],
  "380": [
    {
      "inShape": [
        [
          265,
          null,
          265
        ],
        [
          265,
          null,
          265
        ],
        [
          265,
          265,
          265
        ]
      ],
      "result": {
        "count": 1,
        "id": 380,
        "metadata": 0
      }
    }
  ],
  "381": [
    {
      "ingredients": [
        377,
        368
      ],
      "result": {
        "count": 1,
        "id": 381,
        "metadata": 0
      }
    }
  ],
  "382": [
    {
      "inShape": [
        [
          371,
          371,
          371
        ],
        [
          371,
          360,
          371
        ],
        [
          371,
          371,
          371
        ]
      ],
      "result": {
        "count": 1,
        "id": 382,
        "metadata": 0
      }
    }
  ],
  "385": [
    {
      "ingredients": [
        377,
        263,
        289
      ],
      "result": {
        "count": 3,
        "id": 385,
        "metadata": 0
      }
    }
  ],
  "386": [
    {
      "ingredients": [
        340,
        {
          "id": 351,
          "metadata": 0
        },
        288
      ],
      "result": {
        "count": 1,
        "id": 386,
        "metadata": 0
      }
    }
  ],
  "387": [
    {
      "ingredients": [
        386,
        387
      ],
      "result": {
        "count": 1,
        "id": 387,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        386,
        387,
        386
      ],
      "result": {
        "count": 2,
        "id": 387,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        386,
        387,
        386,
        386
      ],
      "result": {
        "count": 3,
        "id": 387,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        386,
        386,
        387,
        386,
        386
      ],
      "result": {
        "count": 4,
        "id": 387,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        386,
        386,
        386,
        387,
        386,
        386
      ],
      "result": {
        "count": 5,
        "id": 387,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        386,
        386,
        386,
        386,
        387,
        386,
        386
      ],
      "result": {
        "count": 6,
        "id": 387,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        386,
        386,
        386,
        386,
        387,
        386,
        386,
        386
      ],
      "result": {
        "count": 7,
        "id": 387,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        386,
        386,
        386,
        386,
        387,
        386,
        386,
        386,
        386
      ],
      "result": {
        "count": 8,
        "id": 387,
        "metadata": 0
      }
    }
  ],
  "388": [
    {
      "inShape": [
        [
          133
        ]
      ],
      "result": {
        "count": 9,
        "id": 388,
        "metadata": 0
      }
    }
  ],
  "389": [
    {
      "inShape": [
        [
          280,
          280,
          280
        ],
        [
          280,
          334,
          280
        ],
        [
          280,
          280,
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 389,
        "metadata": 0
      }
    }
  ],
  "390": [
    {
      "inShape": [
        [
          336,
          null,
          336
        ],
        [
          null,
          336,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 390,
        "metadata": 0
      }
    }
  ],
  "395": [
    {
      "inShape": [
        [
          339,
          339,
          339
        ],
        [
          339,
          345,
          339
        ],
        [
          339,
          339,
          339
        ]
      ],
      "result": {
        "count": 1,
        "id": 395,
        "metadata": 0
      }
    }
  ],
  "396": [
    {
      "inShape": [
        [
          371,
          371,
          371
        ],
        [
          371,
          391,
          371
        ],
        [
          371,
          371,
          371
        ]
      ],
      "result": {
        "count": 1,
        "id": 396,
        "metadata": 0
      }
    }
  ],
  "398": [
    {
      "inShape": [
        [
          346,
          null
        ],
        [
          null,
          391
        ]
      ],
      "result": {
        "count": 1,
        "id": 398,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        398,
        398
      ],
      "result": {
        "count": 1,
        "id": 398,
        "metadata": 0
      }
    }
  ],
  "400": [
    {
      "ingredients": [
        86,
        353,
        344
      ],
      "result": {
        "count": 1,
        "id": 400,
        "metadata": 0
      }
    }
  ],
  "401": [
    {
      "ingredients": [
        339,
        289
      ],
      "result": {
        "count": 1,
        "id": 401,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        402,
        339,
        289
      ],
      "result": {
        "count": 1,
        "id": 401,
        "metadata": 0
      }
    }
  ],
  "402": [
    {
      "ingredients": [
        289,
        {
          "id": 351,
          "metadata": 15
        },
        264
      ],
      "result": {
        "count": 1,
        "id": 402,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        289,
        {
          "id": 351,
          "metadata": 14
        },
        348
      ],
      "result": {
        "count": 1,
        "id": 402,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        289,
        {
          "id": 351,
          "metadata": 13
        },
        {
          "id": 397,
          "metadata": 3
        }
      ],
      "result": {
        "count": 1,
        "id": 402,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        289,
        {
          "id": 351,
          "metadata": 12
        },
        371
      ],
      "result": {
        "count": 1,
        "id": 402,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        289,
        {
          "id": 351,
          "metadata": 11
        },
        288
      ],
      "result": {
        "count": 1,
        "id": 402,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        289,
        {
          "id": 351,
          "metadata": 10
        },
        385
      ],
      "result": {
        "count": 1,
        "id": 402,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        289,
        {
          "id": 351,
          "metadata": 9
        }
      ],
      "result": {
        "count": 1,
        "id": 402,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        289,
        {
          "id": 351,
          "metadata": 8
        },
        264
      ],
      "result": {
        "count": 1,
        "id": 402,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        289,
        {
          "id": 351,
          "metadata": 7
        },
        264
      ],
      "result": {
        "count": 1,
        "id": 402,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        289,
        {
          "id": 351,
          "metadata": 6
        },
        264
      ],
      "result": {
        "count": 1,
        "id": 402,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        289,
        {
          "id": 351,
          "metadata": 5
        },
        264
      ],
      "result": {
        "count": 1,
        "id": 402,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        289,
        {
          "id": 351,
          "metadata": 4
        },
        264
      ],
      "result": {
        "count": 1,
        "id": 402,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        289,
        {
          "id": 351,
          "metadata": 3
        },
        264
      ],
      "result": {
        "count": 1,
        "id": 402,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        289,
        {
          "id": 351,
          "metadata": 2
        },
        264
      ],
      "result": {
        "count": 1,
        "id": 402,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        289,
        {
          "id": 351,
          "metadata": 1
        },
        264
      ],
      "result": {
        "count": 1,
        "id": 402,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        289,
        {
          "id": 351,
          "metadata": 0
        },
        264
      ],
      "result": {
        "count": 1,
        "id": 402,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        402,
        {
          "id": 351,
          "metadata": 15
        }
      ],
      "result": {
        "count": 1,
        "id": 402,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        402,
        {
          "id": 351,
          "metadata": 14
        }
      ],
      "result": {
        "count": 1,
        "id": 402,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        402,
        {
          "id": 351,
          "metadata": 13
        }
      ],
      "result": {
        "count": 1,
        "id": 402,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        402,
        {
          "id": 351,
          "metadata": 12
        }
      ],
      "result": {
        "count": 1,
        "id": 402,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        402,
        {
          "id": 351,
          "metadata": 11
        }
      ],
      "result": {
        "count": 1,
        "id": 402,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        402,
        {
          "id": 351,
          "metadata": 10
        }
      ],
      "result": {
        "count": 1,
        "id": 402,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        402,
        {
          "id": 351,
          "metadata": 9
        }
      ],
      "result": {
        "count": 1,
        "id": 402,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        402,
        {
          "id": 351,
          "metadata": 8
        }
      ],
      "result": {
        "count": 1,
        "id": 402,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        402,
        {
          "id": 351,
          "metadata": 7
        }
      ],
      "result": {
        "count": 1,
        "id": 402,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        402,
        {
          "id": 351,
          "metadata": 6
        }
      ],
      "result": {
        "count": 1,
        "id": 402,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        402,
        {
          "id": 351,
          "metadata": 5
        }
      ],
      "result": {
        "count": 1,
        "id": 402,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        402,
        {
          "id": 351,
          "metadata": 4
        }
      ],
      "result": {
        "count": 1,
        "id": 402,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        402,
        {
          "id": 351,
          "metadata": 3
        }
      ],
      "result": {
        "count": 1,
        "id": 402,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        402,
        {
          "id": 351,
          "metadata": 2
        }
      ],
      "result": {
        "count": 1,
        "id": 402,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        402,
        {
          "id": 351,
          "metadata": 1
        }
      ],
      "result": {
        "count": 1,
        "id": 402,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        402,
        {
          "id": 351,
          "metadata": 0
        }
      ],
      "result": {
        "count": 1,
        "id": 402,
        "metadata": 0
      }
    }
  ],
  "404": [
    {
      "inShape": [
        [
          null,
          75,
          null
        ],
        [
          75,
          406,
          75
        ],
        [
          {
            "id": 1,
            "metadata": 0
          },
          {
            "id": 1,
            "metadata": 0
          },
          {
            "id": 1,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 404,
        "metadata": 0
      }
    }
  ],
  "405": [
    {
      "inShape": [
        [
          405,
          405
        ],
        [
          405,
          405
        ]
      ],
      "result": {
        "count": 1,
        "id": 405,
        "metadata": 0
      }
    }
  ],
  "407": [
    {
      "inShape": [
        [
          46
        ],
        [
          328
        ]
      ],
      "result": {
        "count": 1,
        "id": 407,
        "metadata": 0
      }
    }
  ],
  "408": [
    {
      "inShape": [
        [
          154
        ],
        [
          328
        ]
      ],
      "result": {
        "count": 1,
        "id": 408,
        "metadata": 0
      }
    }
  ],
  "413": [
    {
      "inShape": [
        [
          null,
          412,
          null
        ],
        [
          391,
          393,
          40
        ],
        [
          null,
          281,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 413,
        "metadata": 0
      }
    }
  ],
  "416": [
    {
      "inShape": [
        [
          280,
          280,
          280
        ],
        [
          null,
          280,
          null
        ],
        [
          280,
          {
            "id": 44,
            "metadata": 0
          },
          280
        ]
      ],
      "result": {
        "count": 1,
        "id": 416,
        "metadata": 0
      }
    }
  ],
  "420": [
    {
      "inShape": [
        [
          287,
          287,
          null
        ],
        [
          287,
          341,
          null
        ],
        [
          null,
          null,
          287
        ]
      ],
      "result": {
        "count": 2,
        "id": 420,
        "metadata": 0
      }
    }
  ],
  "425": [
    {
      "inShape": [
        [
          35,
          35,
          35
        ],
        [
          35,
          35,
          35
        ],
        [
          null,
          280,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        425,
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          null,
          null,
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          null,
          null,
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          null,
          null,
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          null,
          null,
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          null,
          null,
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          null,
          null,
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          null,
          null,
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          null,
          null,
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          null,
          null,
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          null,
          null,
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          null,
          null,
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          null,
          null,
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          null,
          null,
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          null,
          null,
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          null,
          null,
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          null,
          null,
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 15
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 14
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 13
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 12
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 11
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 10
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 9
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 8
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 7
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 6
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 5
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 4
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 3
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 2
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 1
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 0
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 15
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 14
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 13
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 12
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 11
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 10
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 9
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 8
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 7
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 6
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 5
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 4
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 3
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 2
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 15
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 14
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 13
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 12
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 11
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 10
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 9
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 8
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 7
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 6
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 5
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 4
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 3
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 2
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 1
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 0
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 15
          },
          null,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 15
          },
          null
        ],
        [
          null,
          425,
          {
            "id": 351,
            "metadata": 15
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 14
          },
          null,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 14
          },
          null
        ],
        [
          null,
          425,
          {
            "id": 351,
            "metadata": 14
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 13
          },
          null,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 13
          },
          null
        ],
        [
          null,
          425,
          {
            "id": 351,
            "metadata": 13
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 12
          },
          null,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 12
          },
          null
        ],
        [
          null,
          425,
          {
            "id": 351,
            "metadata": 12
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 11
          },
          null,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 11
          },
          null
        ],
        [
          null,
          425,
          {
            "id": 351,
            "metadata": 11
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 10
          },
          null,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 10
          },
          null
        ],
        [
          null,
          425,
          {
            "id": 351,
            "metadata": 10
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 9
          },
          null,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 9
          },
          null
        ],
        [
          null,
          425,
          {
            "id": 351,
            "metadata": 9
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 8
          },
          null,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 8
          },
          null
        ],
        [
          null,
          425,
          {
            "id": 351,
            "metadata": 8
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 7
          },
          null,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 7
          },
          null
        ],
        [
          null,
          425,
          {
            "id": 351,
            "metadata": 7
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 6
          },
          null,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 6
          },
          null
        ],
        [
          null,
          425,
          {
            "id": 351,
            "metadata": 6
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 5
          },
          null,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 5
          },
          null
        ],
        [
          null,
          425,
          {
            "id": 351,
            "metadata": 5
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 4
          },
          null,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 4
          },
          null
        ],
        [
          null,
          425,
          {
            "id": 351,
            "metadata": 4
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 3
          },
          null,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 3
          },
          null
        ],
        [
          null,
          425,
          {
            "id": 351,
            "metadata": 3
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 2
          },
          null,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 2
          },
          null
        ],
        [
          null,
          425,
          {
            "id": 351,
            "metadata": 2
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 1
          },
          null,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 1
          },
          null
        ],
        [
          null,
          425,
          {
            "id": 351,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 0
          },
          null,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 0
          },
          null
        ],
        [
          null,
          425,
          {
            "id": 351,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          null,
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 15
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          null,
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 14
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          null,
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 13
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          null,
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 12
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          null,
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 11
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          null,
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 10
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          null,
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 9
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          null,
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 8
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          null,
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 7
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          null,
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 6
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          null,
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 5
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          null,
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 4
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          null,
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 3
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          null,
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 2
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          null,
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 1
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          null,
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 0
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 15
          },
          null,
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          null,
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 14
          },
          null,
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          null,
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 13
          },
          null,
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          null,
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 12
          },
          null,
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          null,
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 11
          },
          null,
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          null,
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 10
          },
          null,
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          null,
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 9
          },
          null,
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          null,
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 8
          },
          null,
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          null,
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 7
          },
          null,
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          null,
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 6
          },
          null,
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          null,
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 5
          },
          null,
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          null,
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 4
          },
          null,
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          null,
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 3
          },
          null,
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          null,
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 2
          },
          null,
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          null,
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 1
          },
          null,
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          null,
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 0
          },
          null,
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          null,
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 15
          },
          null,
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 15
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          425,
          {
            "id": 351,
            "metadata": 15
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 14
          },
          null,
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 14
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          425,
          {
            "id": 351,
            "metadata": 14
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 13
          },
          null,
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 13
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          425,
          {
            "id": 351,
            "metadata": 13
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 12
          },
          null,
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 12
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          425,
          {
            "id": 351,
            "metadata": 12
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 11
          },
          null,
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 11
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          425,
          {
            "id": 351,
            "metadata": 11
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 10
          },
          null,
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 10
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          425,
          {
            "id": 351,
            "metadata": 10
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 9
          },
          null,
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 9
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          425,
          {
            "id": 351,
            "metadata": 9
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 8
          },
          null,
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 8
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          425,
          {
            "id": 351,
            "metadata": 8
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 7
          },
          null,
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 7
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          425,
          {
            "id": 351,
            "metadata": 7
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 6
          },
          null,
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 6
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          425,
          {
            "id": 351,
            "metadata": 6
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 5
          },
          null,
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 5
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          425,
          {
            "id": 351,
            "metadata": 5
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 4
          },
          null,
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 4
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          425,
          {
            "id": 351,
            "metadata": 4
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 3
          },
          null,
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 3
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          425,
          {
            "id": 351,
            "metadata": 3
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 2
          },
          null,
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 2
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          425,
          {
            "id": 351,
            "metadata": 2
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 1
          },
          null,
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 1
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          425,
          {
            "id": 351,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 0
          },
          null,
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 0
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          425,
          {
            "id": 351,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 15
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 15
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 14
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 14
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 13
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 13
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 12
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 12
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 11
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 11
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 10
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 10
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 9
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 9
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 8
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 8
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 7
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 7
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 6
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 6
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 5
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 5
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 4
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 4
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 3
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 3
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 2
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 2
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 1
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 1
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 0
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 0
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          },
          425
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          425,
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          425,
          null
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 15
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 14
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 13
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 12
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 11
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 10
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 9
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 8
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 7
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 6
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 5
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 4
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 3
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 2
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 1
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 0
          },
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          {
            "id": 351,
            "metadata": 15
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          {
            "id": 351,
            "metadata": 14
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          {
            "id": 351,
            "metadata": 13
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          {
            "id": 351,
            "metadata": 12
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          {
            "id": 351,
            "metadata": 11
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          {
            "id": 351,
            "metadata": 10
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          {
            "id": 351,
            "metadata": 9
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          {
            "id": 351,
            "metadata": 8
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          {
            "id": 351,
            "metadata": 7
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          {
            "id": 351,
            "metadata": 6
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          {
            "id": 351,
            "metadata": 5
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          {
            "id": 351,
            "metadata": 4
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          {
            "id": 351,
            "metadata": 3
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          {
            "id": 351,
            "metadata": 2
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          {
            "id": 351,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          425,
          {
            "id": 351,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 15
          },
          null
        ],
        [
          null,
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 14
          },
          null
        ],
        [
          null,
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 13
          },
          null
        ],
        [
          null,
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 12
          },
          null
        ],
        [
          null,
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 11
          },
          null
        ],
        [
          null,
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 10
          },
          null
        ],
        [
          null,
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 9
          },
          null
        ],
        [
          null,
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 8
          },
          null
        ],
        [
          null,
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 7
          },
          null
        ],
        [
          null,
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 6
          },
          null
        ],
        [
          null,
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 5
          },
          null
        ],
        [
          null,
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 4
          },
          null
        ],
        [
          null,
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 3
          },
          null
        ],
        [
          null,
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 2
          },
          null
        ],
        [
          null,
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 1
          },
          null
        ],
        [
          null,
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 0
          },
          null
        ],
        [
          null,
          null
        ],
        [
          null,
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          null,
          null
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          null,
          null
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          null,
          null
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          null,
          null
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          null,
          null
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          null,
          null
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          null,
          null
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          null,
          null
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          null,
          null
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          null,
          null
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          null,
          null
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          null,
          null
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          null,
          null
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          null,
          null
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          null,
          null
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          null,
          null
        ],
        [
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 15
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          425,
          {
            "id": 351,
            "metadata": 15
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 14
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          425,
          {
            "id": 351,
            "metadata": 14
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 13
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          425,
          {
            "id": 351,
            "metadata": 13
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 12
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          425,
          {
            "id": 351,
            "metadata": 12
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 11
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          425,
          {
            "id": 351,
            "metadata": 11
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 10
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          425,
          {
            "id": 351,
            "metadata": 10
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 9
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          425,
          {
            "id": 351,
            "metadata": 9
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 8
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          425,
          {
            "id": 351,
            "metadata": 8
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 7
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          425,
          {
            "id": 351,
            "metadata": 7
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 6
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          425,
          {
            "id": 351,
            "metadata": 6
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 5
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          425,
          {
            "id": 351,
            "metadata": 5
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 4
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          425,
          {
            "id": 351,
            "metadata": 4
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 3
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          425,
          {
            "id": 351,
            "metadata": 3
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 2
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          425,
          {
            "id": 351,
            "metadata": 2
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 1
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          425,
          {
            "id": 351,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 0
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          425,
          {
            "id": 351,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 15
          },
          null,
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 15
          },
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 14
          },
          null,
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 14
          },
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 13
          },
          null,
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 13
          },
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 12
          },
          null,
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 12
          },
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 11
          },
          null,
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 11
          },
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 10
          },
          null,
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 10
          },
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 9
          },
          null,
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 9
          },
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 8
          },
          null,
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 8
          },
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 7
          },
          null,
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 7
          },
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 6
          },
          null,
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 6
          },
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 5
          },
          null,
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 5
          },
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 4
          },
          null,
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 4
          },
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 3
          },
          null,
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 3
          },
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 2
          },
          null,
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 2
          },
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 1
          },
          null,
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 1
          },
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 0
          },
          null,
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 0
          },
          null
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 15
          },
          425,
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 15
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 14
          },
          425,
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 14
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 13
          },
          425,
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 13
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 12
          },
          425,
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 12
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 11
          },
          425,
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 11
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 10
          },
          425,
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 10
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 9
          },
          425,
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 9
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 8
          },
          425,
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 8
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 7
          },
          425,
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 7
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 6
          },
          425,
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 6
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 5
          },
          425,
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 5
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 4
          },
          425,
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 4
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 3
          },
          425,
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 3
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 2
          },
          425,
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 2
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 1
          },
          425,
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 1
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 0
          },
          425,
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 0
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 15
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          null,
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 14
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          null,
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 13
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          null,
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 12
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          null,
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 11
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          null,
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 10
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          null,
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 9
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          null,
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 8
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          null,
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 7
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          null,
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 6
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          null,
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 5
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          null,
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 4
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          null,
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 3
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          null,
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 2
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          null,
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 1
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          null,
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 0
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          null,
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          null,
          425,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          425
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 15
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          425,
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 15
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 14
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          425,
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 14
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 13
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          425,
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 13
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 12
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          425,
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 12
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 11
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          425,
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 11
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 10
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          425,
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 10
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 9
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          425,
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 9
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 8
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          425,
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 8
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 7
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          425,
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 7
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 6
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          425,
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 6
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 5
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          425,
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 5
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 4
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          425,
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 4
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 3
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          425,
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 3
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 2
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          425,
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 2
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 1
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          425,
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 1
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 0
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          425,
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 0
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          425,
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          },
          {
            "id": 351,
            "metadata": 15
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          425,
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          },
          {
            "id": 351,
            "metadata": 14
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          425,
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          },
          {
            "id": 351,
            "metadata": 13
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          425,
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          },
          {
            "id": 351,
            "metadata": 12
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          425,
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          },
          {
            "id": 351,
            "metadata": 11
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          425,
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          },
          {
            "id": 351,
            "metadata": 10
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          425,
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          },
          {
            "id": 351,
            "metadata": 9
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          425,
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          },
          {
            "id": 351,
            "metadata": 8
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          425,
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          },
          {
            "id": 351,
            "metadata": 7
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          425,
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          },
          {
            "id": 351,
            "metadata": 6
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          425,
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          },
          {
            "id": 351,
            "metadata": 5
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          425,
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          },
          {
            "id": 351,
            "metadata": 4
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          425,
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          },
          {
            "id": 351,
            "metadata": 3
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          425,
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          },
          {
            "id": 351,
            "metadata": 2
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          425,
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          },
          {
            "id": 351,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          425,
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          },
          {
            "id": 351,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        106,
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        106,
        {
          "id": 351,
          "metadata": 15
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        106,
        {
          "id": 351,
          "metadata": 14
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        106,
        {
          "id": 351,
          "metadata": 13
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        106,
        {
          "id": 351,
          "metadata": 12
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        106,
        {
          "id": 351,
          "metadata": 11
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        106,
        {
          "id": 351,
          "metadata": 10
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        106,
        {
          "id": 351,
          "metadata": 9
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        106,
        {
          "id": 351,
          "metadata": 8
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        106,
        {
          "id": 351,
          "metadata": 7
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        106,
        {
          "id": 351,
          "metadata": 6
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        106,
        {
          "id": 351,
          "metadata": 5
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        106,
        {
          "id": 351,
          "metadata": 4
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        106,
        {
          "id": 351,
          "metadata": 3
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        106,
        {
          "id": 351,
          "metadata": 2
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        106,
        {
          "id": 351,
          "metadata": 1
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        106,
        {
          "id": 351,
          "metadata": 0
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        45,
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        45,
        {
          "id": 351,
          "metadata": 15
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        45,
        {
          "id": 351,
          "metadata": 14
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        45,
        {
          "id": 351,
          "metadata": 13
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        45,
        {
          "id": 351,
          "metadata": 12
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        45,
        {
          "id": 351,
          "metadata": 11
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        45,
        {
          "id": 351,
          "metadata": 10
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        45,
        {
          "id": 351,
          "metadata": 9
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        45,
        {
          "id": 351,
          "metadata": 8
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        45,
        {
          "id": 351,
          "metadata": 7
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        45,
        {
          "id": 351,
          "metadata": 6
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        45,
        {
          "id": 351,
          "metadata": 5
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        45,
        {
          "id": 351,
          "metadata": 4
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        45,
        {
          "id": 351,
          "metadata": 3
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        45,
        {
          "id": 351,
          "metadata": 2
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        45,
        {
          "id": 351,
          "metadata": 1
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        45,
        {
          "id": 351,
          "metadata": 0
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 15
          },
          425,
          {
            "id": 351,
            "metadata": 15
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 15
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 15
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 14
          },
          425,
          {
            "id": 351,
            "metadata": 14
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 14
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 14
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 13
          },
          425,
          {
            "id": 351,
            "metadata": 13
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 13
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 13
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 12
          },
          425,
          {
            "id": 351,
            "metadata": 12
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 12
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 12
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 11
          },
          425,
          {
            "id": 351,
            "metadata": 11
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 11
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 11
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 10
          },
          425,
          {
            "id": 351,
            "metadata": 10
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 10
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 10
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 9
          },
          425,
          {
            "id": 351,
            "metadata": 9
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 9
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 9
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 8
          },
          425,
          {
            "id": 351,
            "metadata": 8
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 8
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 8
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 7
          },
          425,
          {
            "id": 351,
            "metadata": 7
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 7
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 7
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 6
          },
          425,
          {
            "id": 351,
            "metadata": 6
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 6
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 6
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 5
          },
          425,
          {
            "id": 351,
            "metadata": 5
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 5
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 5
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 4
          },
          425,
          {
            "id": 351,
            "metadata": 4
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 4
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 4
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 3
          },
          425,
          {
            "id": 351,
            "metadata": 3
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 3
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 3
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 2
          },
          425,
          {
            "id": 351,
            "metadata": 2
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 2
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 2
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 1
          },
          425,
          {
            "id": 351,
            "metadata": 1
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 1
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 1
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          {
            "id": 351,
            "metadata": 0
          },
          425,
          {
            "id": 351,
            "metadata": 0
          }
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 0
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 0
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 15
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 15
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 15
          },
          425,
          {
            "id": 351,
            "metadata": 15
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 14
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 14
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 14
          },
          425,
          {
            "id": 351,
            "metadata": 14
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 13
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 13
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 13
          },
          425,
          {
            "id": 351,
            "metadata": 13
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 12
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 12
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 12
          },
          425,
          {
            "id": 351,
            "metadata": 12
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 11
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 11
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 11
          },
          425,
          {
            "id": 351,
            "metadata": 11
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 10
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 10
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 10
          },
          425,
          {
            "id": 351,
            "metadata": 10
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 9
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 9
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 9
          },
          425,
          {
            "id": 351,
            "metadata": 9
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 8
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 8
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 8
          },
          425,
          {
            "id": 351,
            "metadata": 8
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 7
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 7
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 7
          },
          425,
          {
            "id": 351,
            "metadata": 7
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 6
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 6
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 6
          },
          425,
          {
            "id": 351,
            "metadata": 6
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 5
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 5
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 5
          },
          425,
          {
            "id": 351,
            "metadata": 5
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 4
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 4
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 4
          },
          425,
          {
            "id": 351,
            "metadata": 4
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 3
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 3
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 3
          },
          425,
          {
            "id": 351,
            "metadata": 3
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 2
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 2
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 2
          },
          425,
          {
            "id": 351,
            "metadata": 2
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 1
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 1
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 1
          },
          425,
          {
            "id": 351,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          null,
          {
            "id": 351,
            "metadata": 0
          },
          null
        ],
        [
          null,
          {
            "id": 351,
            "metadata": 0
          },
          null
        ],
        [
          {
            "id": 351,
            "metadata": 0
          },
          425,
          {
            "id": 351,
            "metadata": 0
          }
        ]
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 4
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 4
        },
        {
          "id": 351,
          "metadata": 15
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 4
        },
        {
          "id": 351,
          "metadata": 14
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 4
        },
        {
          "id": 351,
          "metadata": 13
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 4
        },
        {
          "id": 351,
          "metadata": 12
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 4
        },
        {
          "id": 351,
          "metadata": 11
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 4
        },
        {
          "id": 351,
          "metadata": 10
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 4
        },
        {
          "id": 351,
          "metadata": 9
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 4
        },
        {
          "id": 351,
          "metadata": 8
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 4
        },
        {
          "id": 351,
          "metadata": 7
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 4
        },
        {
          "id": 351,
          "metadata": 6
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 4
        },
        {
          "id": 351,
          "metadata": 5
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 4
        },
        {
          "id": 351,
          "metadata": 4
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 4
        },
        {
          "id": 351,
          "metadata": 3
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 4
        },
        {
          "id": 351,
          "metadata": 2
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 4
        },
        {
          "id": 351,
          "metadata": 1
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 4
        },
        {
          "id": 351,
          "metadata": 0
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 1
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 15
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 14
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 13
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 12
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 11
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 10
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 9
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 8
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 7
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 6
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 5
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 4
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 3
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 2
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 1
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 397,
          "metadata": 1
        },
        {
          "id": 351,
          "metadata": 0
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 38,
          "metadata": 8
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 38,
          "metadata": 8
        },
        {
          "id": 351,
          "metadata": 15
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 38,
          "metadata": 8
        },
        {
          "id": 351,
          "metadata": 14
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 38,
          "metadata": 8
        },
        {
          "id": 351,
          "metadata": 13
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 38,
          "metadata": 8
        },
        {
          "id": 351,
          "metadata": 12
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 38,
          "metadata": 8
        },
        {
          "id": 351,
          "metadata": 11
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 38,
          "metadata": 8
        },
        {
          "id": 351,
          "metadata": 10
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 38,
          "metadata": 8
        },
        {
          "id": 351,
          "metadata": 9
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 38,
          "metadata": 8
        },
        {
          "id": 351,
          "metadata": 8
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 38,
          "metadata": 8
        },
        {
          "id": 351,
          "metadata": 7
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 38,
          "metadata": 8
        },
        {
          "id": 351,
          "metadata": 6
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 38,
          "metadata": 8
        },
        {
          "id": 351,
          "metadata": 5
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 38,
          "metadata": 8
        },
        {
          "id": 351,
          "metadata": 4
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 38,
          "metadata": 8
        },
        {
          "id": 351,
          "metadata": 3
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 38,
          "metadata": 8
        },
        {
          "id": 351,
          "metadata": 2
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 38,
          "metadata": 8
        },
        {
          "id": 351,
          "metadata": 1
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 38,
          "metadata": 8
        },
        {
          "id": 351,
          "metadata": 0
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 322,
          "metadata": 0
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 322,
          "metadata": 0
        },
        {
          "id": 351,
          "metadata": 15
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 322,
          "metadata": 0
        },
        {
          "id": 351,
          "metadata": 14
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 322,
          "metadata": 0
        },
        {
          "id": 351,
          "metadata": 13
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 322,
          "metadata": 0
        },
        {
          "id": 351,
          "metadata": 12
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 322,
          "metadata": 0
        },
        {
          "id": 351,
          "metadata": 11
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 322,
          "metadata": 0
        },
        {
          "id": 351,
          "metadata": 10
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 322,
          "metadata": 0
        },
        {
          "id": 351,
          "metadata": 9
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 322,
          "metadata": 0
        },
        {
          "id": 351,
          "metadata": 8
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 322,
          "metadata": 0
        },
        {
          "id": 351,
          "metadata": 7
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 322,
          "metadata": 0
        },
        {
          "id": 351,
          "metadata": 6
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 322,
          "metadata": 0
        },
        {
          "id": 351,
          "metadata": 5
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 322,
          "metadata": 0
        },
        {
          "id": 351,
          "metadata": 4
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 322,
          "metadata": 0
        },
        {
          "id": 351,
          "metadata": 3
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 322,
          "metadata": 0
        },
        {
          "id": 351,
          "metadata": 2
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 322,
          "metadata": 0
        },
        {
          "id": 351,
          "metadata": 1
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        {
          "id": 322,
          "metadata": 0
        },
        {
          "id": 351,
          "metadata": 0
        },
        425
      ],
      "result": {
        "count": 1,
        "id": 425,
        "metadata": 0
      }
    }
  ],
  "427": [
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 1
          },
          {
            "id": 5,
            "metadata": 1
          }
        ],
        [
          {
            "id": 5,
            "metadata": 1
          },
          {
            "id": 5,
            "metadata": 1
          }
        ],
        [
          {
            "id": 5,
            "metadata": 1
          },
          {
            "id": 5,
            "metadata": 1
          }
        ]
      ],
      "result": {
        "count": 3,
        "id": 427,
        "metadata": 0
      }
    }
  ],
  "428": [
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 2
          },
          {
            "id": 5,
            "metadata": 2
          }
        ],
        [
          {
            "id": 5,
            "metadata": 2
          },
          {
            "id": 5,
            "metadata": 2
          }
        ],
        [
          {
            "id": 5,
            "metadata": 2
          },
          {
            "id": 5,
            "metadata": 2
          }
        ]
      ],
      "result": {
        "count": 3,
        "id": 428,
        "metadata": 0
      }
    }
  ],
  "429": [
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 3
          },
          {
            "id": 5,
            "metadata": 3
          }
        ],
        [
          {
            "id": 5,
            "metadata": 3
          },
          {
            "id": 5,
            "metadata": 3
          }
        ],
        [
          {
            "id": 5,
            "metadata": 3
          },
          {
            "id": 5,
            "metadata": 3
          }
        ]
      ],
      "result": {
        "count": 3,
        "id": 429,
        "metadata": 0
      }
    }
  ],
  "430": [
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 4
          },
          {
            "id": 5,
            "metadata": 4
          }
        ],
        [
          {
            "id": 5,
            "metadata": 4
          },
          {
            "id": 5,
            "metadata": 4
          }
        ],
        [
          {
            "id": 5,
            "metadata": 4
          },
          {
            "id": 5,
            "metadata": 4
          }
        ]
      ],
      "result": {
        "count": 3,
        "id": 430,
        "metadata": 0
      }
    }
  ],
  "431": [
    {
      "inShape": [
        [
          {
            "id": 5,
            "metadata": 5
          },
          {
            "id": 5,
            "metadata": 5
          }
        ],
        [
          {
            "id": 5,
            "metadata": 5
          },
          {
            "id": 5,
            "metadata": 5
          }
        ],
        [
          {
            "id": 5,
            "metadata": 5
          },
          {
            "id": 5,
            "metadata": 5
          }
        ]
      ],
      "result": {
        "count": 3,
        "id": 431,
        "metadata": 0
      }
    }
  ],
  "439": [
    {
      "inShape": [
        [
          null,
          348,
          null
        ],
        [
          348,
          262,
          348
        ],
        [
          null,
          348,
          null
        ]
      ],
      "result": {
        "count": 2,
        "id": 439,
        "metadata": 0
      }
    }
  ],
  "442": [
    {
      "inShape": [
        [
          5,
          265,
          5
        ],
        [
          5,
          5,
          5
        ],
        [
          null,
          5,
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 442,
        "metadata": 0
      }
    },
    {
      "ingredients": [
        442,
        425
      ],
      "result": {
        "count": 1,
        "id": 442,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          35,
          {
            "id": 5,
            "metadata": 0
          },
          null
        ],
        [
          35,
          {
            "id": 5,
            "metadata": 0
          },
          265
        ],
        [
          35,
          {
            "id": 5,
            "metadata": 0
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 442,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          35,
          {
            "id": 5,
            "metadata": 1
          },
          null
        ],
        [
          35,
          {
            "id": 5,
            "metadata": 1
          },
          265
        ],
        [
          35,
          {
            "id": 5,
            "metadata": 1
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 442,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          35,
          {
            "id": 5,
            "metadata": 2
          },
          null
        ],
        [
          35,
          {
            "id": 5,
            "metadata": 2
          },
          265
        ],
        [
          35,
          {
            "id": 5,
            "metadata": 2
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 442,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          35,
          {
            "id": 5,
            "metadata": 3
          },
          null
        ],
        [
          35,
          {
            "id": 5,
            "metadata": 3
          },
          265
        ],
        [
          35,
          {
            "id": 5,
            "metadata": 3
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 442,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          35,
          {
            "id": 5,
            "metadata": 4
          },
          null
        ],
        [
          35,
          {
            "id": 5,
            "metadata": 4
          },
          265
        ],
        [
          35,
          {
            "id": 5,
            "metadata": 4
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 442,
        "metadata": 0
      }
    },
    {
      "inShape": [
        [
          35,
          {
            "id": 5,
            "metadata": 5
          },
          null
        ],
        [
          35,
          {
            "id": 5,
            "metadata": 5
          },
          265
        ],
        [
          35,
          {
            "id": 5,
            "metadata": 5
          },
          null
        ]
      ],
      "result": {
        "count": 1,
        "id": 442,
        "metadata": 0
      }
    }
  ],
  "443": [
    {
      "ingredients": [
        443,
        443
      ],
      "result": {
        "count": 1,
        "id": 443,
        "metadata": 0
      }
    }
  ]
}
},{}],356:[function(require,module,exports){
module.exports={
  "version":76,
  "minecraftVersion":"15w40b",
  "majorVersion":"1.9"
}

},{}],357:[function(require,module,exports){
module.exports=[
  {
    "id": "",
    "name": "Player",
    "slots": [
      {
        "name": "craft result",
        "index": 0
      },
      {
        "name": "craft grid",
        "index": 1,
        "size": 4
      },
      {
        "name": "armor",
        "index": 5,
        "size": 4
      },
      {
        "name": "helmet",
        "index": 5
      },
      {
        "name": "chestplate",
        "index": 6
      },
      {
        "name": "leggings",
        "index": 7
      },
      {
        "name": "boots",
        "index": 8
      }
    ]
  },
  {
    "id": "EntityHorse",
    "name": "Horse",
    "slots": [
      {
        "name": "saddle",
        "index": 0
      },
      {
        "name": "armor",
        "index": 1
      },
      {
        "name": "storage",
        "index": 2,
        "size": 15
      }
    ],
    "openedWith": [
      {
        "type": "entity",
        "id": 100
      }
    ]
  },
  {
    "id": "minecraft:anvil",
    "name": "Anvil",
    "slots": [
      {
        "name": "tool",
        "index": 0
      },
      {
        "name": "combined",
        "index": 1
      },
      {
        "name": "result",
        "index": 2
      }
    ],
    "properties": [
      "repair cost"
    ]
  },
  {
    "id": "minecraft:beacon",
    "name": "Beacon",
    "slots": [
      {
        "name": "input",
        "index": 0
      }
    ],
    "properties": [
      "level",
      "effect 1",
      "effect 2"
    ],
    "openedWith": [
      {
        "type": "block",
        "id": 138
      }
    ]
  },
  {
    "id": "minecraft:brewing_stand",
    "name": "Brewing Stand",
    "slots": [
      {
        "name": "ingredient",
        "index": 0
      },
      {
        "name": "result",
        "index": 1,
        "size": 3
      }
    ],
    "properties": [
      "brew time"
    ],
    "openedWith": [
      {
        "type": "block",
        "id": 117
      }
    ]
  },
  {
    "id": "minecraft:chest",
    "name": "Chest"
  },
  {
    "id": "minecraft:container",
    "name": "Container"
  },
  {
    "id": "minecraft:crafting_table",
    "name": "Workbench",
    "slots": [
      {
        "name": "craft result",
        "index": 0
      },
      {
        "name": "craft grid",
        "index": 1,
        "size": 9
      }
    ]
  },
  {
    "id": "minecraft:dispenser",
    "name": "Dispenser"
  },
  {
    "id": "minecraft:dropper",
    "name": "Dropper"
  },
  {
    "id": "minecraft:enchanting_table",
    "name": "Enchantment Table",
    "slots": [
      {
        "name": "enchanted",
        "index": 0
      },
      {
        "name": "lapis",
        "index": 1
      }
    ],
    "properties": [
      "xp 1",
      "xp 2",
      "xp 3",
      "seed",
      "tooltip 1",
      "tooltip 2",
      "tooltip 3"
    ]
  },
  {
    "id": "minecraft:furnace",
    "name": "Furnace",
    "slots": [
      {
        "name": "smelted",
        "index": 0
      },
      {
        "name": "fuel",
        "index": 1
      },
      {
        "name": "result",
        "index": 2
      }
    ],
    "properties": [
      "fuel",
      "fuel max",
      "progress",
      "progress max"
    ]
  },
  {
    "id": "minecraft:hopper",
    "name": "Hopper"
  },
  {
    "id": "minecraft:villager",
    "name": "NPC Trade",
    "slots": [
      {
        "name": "give 1",
        "index": 0
      },
      {
        "name": "give 2",
        "index": 1
      },
      {
        "name": "take",
        "index": 2
      }
    ]
  }
]

},{}],358:[function(require,module,exports){
module.exports=[
  {
    "minecraftVersion": "16w03a",
    "version": 96,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "16w02a",
    "version": 95,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w51b",
    "version": 94,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w51a",
    "version": 93,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w50a",
    "version": 92,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w49b",
    "version": 91,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w49a",
    "version": 90,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w47c",
    "version": 89,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w47b",
    "version": 88,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w47a",
    "version": 87,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w46a",
    "version": 86,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w45a",
    "version": 85,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w44b",
    "version": 84,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w44a",
    "version": 83,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w43c",
    "version": 82,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w43b",
    "version": 81,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w43a",
    "version": 80,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w42a",
    "version": 79,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w41b",
    "version": 78,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w41a",
    "version": 77,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w40b",
    "version": 76,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w40a",
    "version": 75,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w39c",
    "version": 74,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w38b",
    "version": 73,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w38a",
    "version": 72,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w37a",
    "version": 71,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w36d",
    "version": 70,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w36c",
    "version": 69,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w36b",
    "version": 68,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w36a",
    "version": 67,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w35e",
    "version": 66,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w35d",
    "version": 65,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w35c",
    "version": 64,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w35b",
    "version": 63,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w35a",
    "version": 62,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w34d",
    "version": 61,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w34c",
    "version": 60,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w34b",
    "version": 59,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w34a",
    "version": 58,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w33c",
    "version": 57,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w33b",
    "version": 56,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w33a",
    "version": 55,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w32c",
    "version": 54,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w32b",
    "version": 53,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w32a",
    "version": 52,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w31c",
    "version": 51,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w31b",
    "version": 50,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w31a",
    "version": 49,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "15w14a",
    "version": 48,
    "usesNetty": true,
    "majorVersion": "1.9"
  },
  {
    "minecraftVersion": "1.8.9",
    "version": 47,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "1.8.8",
    "version": 47,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "1.8.7",
    "version": 47,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "1.8.6",
    "version": 47,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "1.8.5",
    "version": 47,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "1.8.4",
    "version": 47,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "1.8.3",
    "version": 47,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "1.8.2",
    "version": 47,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "1.8.1",
    "version": 47,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "1.8",
    "version": 47,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "1.8-pre3",
    "version": 46,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "1.8-pre2",
    "version": 45,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "1.8-pre1",
    "version": 44,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "14w34d",
    "version": 43,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "14w34c",
    "version": 42,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "14w34b",
    "version": 41,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "14w34a",
    "version": 40,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "14w33c",
    "version": 39,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "14w33b",
    "version": 38,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "14w33a",
    "version": 37,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "14w32d",
    "version": 36,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "14w32c",
    "version": 35,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "14w32b",
    "version": 34,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "14w32a",
    "version": 33,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "14w31a",
    "version": 32,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "14w30c",
    "version": 31,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "14w30a",
    "version": 30,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "14w29a",
    "version": 29,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "14w28b",
    "version": 28,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "14w28a",
    "version": 27,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "14w27b",
    "version": 26,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "14w27a",
    "version": 26,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "14w26c",
    "version": 25,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "14w26b",
    "version": 24,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "14w26a",
    "version": 23,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "14w25b",
    "version": 22,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "14w25a",
    "version": 21,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "14w21b",
    "version": 20,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "14w21a",
    "version": 19,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "14w20a",
    "version": 18,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "14w19a",
    "version": 17,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "14w18b",
    "version": 16,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "14w17a",
    "version": 15,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "14w11a",
    "version": 14,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "14w08a",
    "version": 12,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "14w07a",
    "version": 11,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "14w06a",
    "version": 10,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "14w05a",
    "version": 9,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "14w04b",
    "version": 8,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "14w04a",
    "version": 7,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "14w03a",
    "version": 6,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "14w02a",
    "version": 5,
    "usesNetty": true,
    "majorVersion": "1.8"
  },
  {
    "minecraftVersion": "1.7.10",
    "version": 5,
    "usesNetty": true,
    "majorVersion": "1.7"
  },
  {
    "minecraftVersion": "1.7.9",
    "version": 5,
    "usesNetty": true,
    "majorVersion": "1.7"
  },
  {
    "minecraftVersion": "1.7.8",
    "version": 5,
    "usesNetty": true,
    "majorVersion": "1.7"
  },
  {
    "minecraftVersion": "1.7.7",
    "version": 5,
    "usesNetty": true,
    "majorVersion": "1.7"
  },
  {
    "minecraftVersion": "1.7.6",
    "version": 5,
    "usesNetty": true,
    "majorVersion": "1.7"
  },
  {
    "minecraftVersion": "1.7.5",
    "version": 4,
    "usesNetty": true,
    "majorVersion": "1.7"
  },
  {
    "minecraftVersion": "1.7.4",
    "version": 4,
    "usesNetty": true,
    "majorVersion": "1.7"
  },
  {
    "minecraftVersion": "1.7.3-pre",
    "version": 4,
    "usesNetty": true,
    "majorVersion": "1.7"
  },
  {
    "minecraftVersion": "1.7.2",
    "version": 4,
    "usesNetty": true,
    "majorVersion": "1.7"
  },
  {
    "minecraftVersion": "1.7.1-pre",
    "version": 4,
    "usesNetty": true,
    "majorVersion": "1.7"
  },
  {
    "minecraftVersion": "1.6.4",
    "version": 78,
    "usesNetty": false,
    "majorVersion": "1.6"
  },
  {
    "minecraftVersion": "1.6.2",
    "version": 74,
    "usesNetty": false,
    "majorVersion": "1.6"
  },
  {
    "minecraftVersion": "1.6.1",
    "version": 73,
    "usesNetty": false,
    "majorVersion": "1.6"
  },
  {
    "minecraftVersion": "1.6-pre",
    "version": 72,
    "usesNetty": false,
    "majorVersion": "1.6"
  },
  {
    "minecraftVersion": "13w26a",
    "version": 72,
    "usesNetty": false,
    "majorVersion": "1.6"
  },
  {
    "minecraftVersion": "13w25c",
    "version": 71,
    "usesNetty": false,
    "majorVersion": "1.6"
  },
  {
    "minecraftVersion": "13w25b",
    "version": 71,
    "usesNetty": false,
    "majorVersion": "1.6"
  },
  {
    "minecraftVersion": "13w25a",
    "version": 71,
    "usesNetty": false,
    "majorVersion": "1.6"
  },
  {
    "minecraftVersion": "13w24b",
    "version": 70,
    "usesNetty": false,
    "majorVersion": "1.6"
  },
  {
    "minecraftVersion": "13w24a",
    "version": 69,
    "usesNetty": false,
    "majorVersion": "1.6"
  },
  {
    "minecraftVersion": "13w23b",
    "version": 68,
    "usesNetty": false,
    "majorVersion": "1.6"
  },
  {
    "minecraftVersion": "13w23a",
    "version": 67,
    "usesNetty": false,
    "majorVersion": "1.6"
  },
  {
    "minecraftVersion": "13w22a",
    "version": 67,
    "usesNetty": false,
    "majorVersion": "1.6"
  },
  {
    "minecraftVersion": "13w21b",
    "version": 67,
    "usesNetty": false,
    "majorVersion": "1.6"
  },
  {
    "minecraftVersion": "13w21a",
    "version": 67,
    "usesNetty": false,
    "majorVersion": "1.6"
  },
  {
    "minecraftVersion": "13w19a",
    "version": 66,
    "usesNetty": false,
    "majorVersion": "1.6"
  },
  {
    "minecraftVersion": "13w18a",
    "version": 65,
    "usesNetty": false,
    "majorVersion": "1.6"
  },
  {
    "minecraftVersion": "13w17a",
    "version": 64,
    "usesNetty": false,
    "majorVersion": "1.6"
  },
  {
    "minecraftVersion": "13w16b",
    "version": 63,
    "usesNetty": false,
    "majorVersion": "1.6"
  },
  {
    "minecraftVersion": "1.5.2",
    "version": 61,
    "usesNetty": false,
    "majorVersion": "1.5"
  },
  {
    "minecraftVersion": "1.5.1",
    "version": 60,
    "usesNetty": false,
    "majorVersion": "1.5"
  },
  {
    "minecraftVersion": "1.5",
    "version": 60,
    "usesNetty": false,
    "majorVersion": "1.5"
  },
  {
    "minecraftVersion": "13w09b",
    "version": 59,
    "usesNetty": false,
    "majorVersion": "1.5"
  },
  {
    "minecraftVersion": "13w06a",
    "version": 58,
    "usesNetty": false,
    "majorVersion": "1.5"
  },
  {
    "minecraftVersion": "13w05b",
    "version": 57,
    "usesNetty": false,
    "majorVersion": "1.5"
  },
  {
    "minecraftVersion": "13w05a",
    "version": 56,
    "usesNetty": false,
    "majorVersion": "1.5"
  },
  {
    "minecraftVersion": "13w04a",
    "version": 55,
    "usesNetty": false,
    "majorVersion": "1.5"
  },
  {
    "minecraftVersion": "13w03a",
    "version": 54,
    "usesNetty": false,
    "majorVersion": "1.5"
  },
  {
    "minecraftVersion": "13w02a",
    "version": 53,
    "usesNetty": false,
    "majorVersion": "1.5"
  },
  {
    "minecraftVersion": "13w01a",
    "version": 52,
    "usesNetty": false,
    "majorVersion": "1.5"
  },
  {
    "minecraftVersion": "1.4.7",
    "version": 51,
    "usesNetty": false,
    "majorVersion": "1.4"
  },
  {
    "minecraftVersion": "1.4.6",
    "version": 51,
    "usesNetty": false,
    "majorVersion": "1.4"
  },
  {
    "minecraftVersion": "12w49a",
    "version": 50,
    "usesNetty": false,
    "majorVersion": "1.4"
  },
  {
    "minecraftVersion": "1.4.5",
    "version": 49,
    "usesNetty": false,
    "majorVersion": "1.4"
  },
  {
    "minecraftVersion": "1.4.4",
    "version": 49,
    "usesNetty": false,
    "majorVersion": "1.4"
  },
  {
    "minecraftVersion": "1.4.3-pre",
    "version": 48,
    "usesNetty": false,
    "majorVersion": "1.4"
  },
  {
    "minecraftVersion": "1.4.2",
    "version": 47,
    "usesNetty": false,
    "majorVersion": "1.4"
  },
  {
    "minecraftVersion": "12w41a",
    "version": 46,
    "usesNetty": false,
    "majorVersion": "1.4"
  },
  {
    "minecraftVersion": "12w40a",
    "version": 45,
    "usesNetty": false,
    "majorVersion": "1.4"
  },
  {
    "minecraftVersion": "12w34b",
    "version": 42,
    "usesNetty": false,
    "majorVersion": "1.4"
  },
  {
    "minecraftVersion": "12w34a",
    "version": 41,
    "usesNetty": false,
    "majorVersion": "1.4"
  },
  {
    "minecraftVersion": "12w32a",
    "version": 40,
    "usesNetty": false,
    "majorVersion": "1.4"
  },
  {
    "minecraftVersion": "1.3.2",
    "version": 39,
    "usesNetty": false,
    "majorVersion": "1.3"
  },
  {
    "minecraftVersion": "1.3.1",
    "version": 39,
    "usesNetty": false,
    "majorVersion": "1.3"
  },
  {
    "minecraftVersion": "12w27a",
    "version": 38,
    "usesNetty": false,
    "majorVersion": "1.3"
  },
  {
    "minecraftVersion": "12w26a",
    "version": 37,
    "usesNetty": false,
    "majorVersion": "1.3"
  },
  {
    "minecraftVersion": "12w25a",
    "version": 37,
    "usesNetty": false,
    "majorVersion": "1.3"
  },
  {
    "minecraftVersion": "12w24a",
    "version": 36,
    "usesNetty": false,
    "majorVersion": "1.3"
  },
  {
    "minecraftVersion": "12w23a",
    "version": 35,
    "usesNetty": false,
    "majorVersion": "1.3"
  },
  {
    "minecraftVersion": "12w22a",
    "version": 34,
    "usesNetty": false,
    "majorVersion": "1.3"
  },
  {
    "minecraftVersion": "12w21ab",
    "version": 33,
    "usesNetty": false,
    "majorVersion": "1.3"
  },
  {
    "minecraftVersion": "12w19a",
    "version": 32,
    "usesNetty": false,
    "majorVersion": "1.3"
  },
  {
    "minecraftVersion": "12w18a",
    "version": 32,
    "usesNetty": false,
    "majorVersion": "1.3"
  },
  {
    "minecraftVersion": "12w17a",
    "version": 31,
    "usesNetty": false,
    "majorVersion": "1.3"
  },
  {
    "minecraftVersion": "12w16a",
    "version": 30,
    "usesNetty": false,
    "majorVersion": "1.3"
  },
  {
    "minecraftVersion": "1.2.5",
    "version": 29,
    "usesNetty": false,
    "majorVersion": "1.2"
  },
  {
    "minecraftVersion": "1.2.4",
    "version": 29,
    "usesNetty": false,
    "majorVersion": "1.2"
  },
  {
    "minecraftVersion": "1.2.3",
    "version": 28,
    "usesNetty": false,
    "majorVersion": "1.2"
  },
  {
    "minecraftVersion": "1.2.2",
    "version": 28,
    "usesNetty": false,
    "majorVersion": "1.2"
  },
  {
    "minecraftVersion": "1.2.1",
    "version": 28,
    "usesNetty": false,
    "majorVersion": "1.2"
  },
  {
    "minecraftVersion": "12w07a",
    "version": 27,
    "usesNetty": false,
    "majorVersion": "1.2"
  },
  {
    "minecraftVersion": "12w06a",
    "version": 25,
    "usesNetty": false,
    "majorVersion": "1.2"
  },
  {
    "minecraftVersion": "12w01a",
    "version": 24,
    "usesNetty": false,
    "majorVersion": "1.2"
  },
  {
    "minecraftVersion": "12w03a",
    "version": 24,
    "usesNetty": false,
    "majorVersion": "1.2"
  },
  {
    "minecraftVersion": "12w04a",
    "version": 24,
    "usesNetty": false,
    "majorVersion": "1.2"
  },
  {
    "minecraftVersion": "12w05a",
    "version": 24,
    "usesNetty": false,
    "majorVersion": "1.2"
  },
  {
    "minecraftVersion": "1.1",
    "version": 23,
    "usesNetty": false,
    "majorVersion": "1.1"
  },
  {
    "minecraftVersion": "1.0.0",
    "version": 22,
    "usesNetty": false,
    "majorVersion": "1.0"
  }
]

},{}],359:[function(require,module,exports){
module.exports = require('./dist/browser.js');

},{"./dist/browser.js":360}],360:[function(require,module,exports){
'use strict';

var Client = require('./client');
var Server = require('./server');
var serializer = require("./transforms/serializer");

module.exports = {
  Client: Client,
  Server: Server,
  states: require("./states"),
  createSerializer: serializer.createSerializer,
  createDeserializer: serializer.createDeserializer,
  supportedVersions: require("./version").supportedVersions
};


},{"./client":361,"./server":365,"./states":366,"./transforms/serializer":369,"./version":370}],361:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EventEmitter = require('events').EventEmitter;
var debug = require('./debug');
var compression = require('./transforms/compression');
var framing = require('./transforms/framing');
var crypto = require('crypto');
var states = require("./states");

var createSerializer = require("./transforms/serializer").createSerializer;
var createDeserializer = require("./transforms/serializer").createDeserializer;

var Client = function (_EventEmitter) {
  _inherits(Client, _EventEmitter);

  function Client(isServer, version) {
    _classCallCheck(this, Client);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Client).call(this));

    _this.version = version;
    _this.isServer = !!isServer;
    _this.splitter = framing.createSplitter();
    _this.setSerializer(states.HANDSHAKING);
    _this.packetsToParse = {};
    _this.serializer;
    _this.compressor = null;
    _this.framer = framing.createFramer();
    _this.cipher = null;
    _this.decipher = null;
    _this.decompressor = null;
    _this.deserializer;
    _this.isServer;
    _this.protocolState = states.HANDSHAKING;
    _this.ended = true;
    _this.latency = 0;

    _this.on('newListener', function (event, listener) {
      var direction = this.isServer ? 'toServer' : 'toClient';
      if (typeof this.packetsToParse[event] === "undefined") this.packetsToParse[event] = 1;else this.packetsToParse[event] += 1;
    });
    _this.on('removeListener', function (event, listener) {
      var direction = this.isServer ? 'toServer' : 'toClient';
      this.packetsToParse[event] -= 1;
    });
    return _this;
  }

  _createClass(Client, [{
    key: 'setSerializer',
    value: function setSerializer(state) {
      var _this2 = this;

      this.serializer = createSerializer({ isServer: this.isServer, version: this.version, state: state });
      this.deserializer = createDeserializer({ isServer: this.isServer, version: this.version, state: state, packetsToParse: this.packetsToParse });

      this.splitter.recognizeLegacyPing = state === states.HANDSHAKING;

      this.serializer.on('error', function (e) {
        var parts = e.field.split(".");
        parts.shift();
        var serializerDirection = !_this2.isServer ? 'toServer' : 'toClient';
        e.field = [_this2.protocolState, serializerDirection].concat(parts).join(".");
        e.message = 'Serialization error for ' + e.field + ' : ' + e.message;
        _this2.emit('error', e);
      });

      this.deserializer.on('error', function (e) {
        var parts = e.field.split(".");
        parts.shift();
        var deserializerDirection = _this2.isServer ? 'toServer' : 'toClient';
        e.field = [_this2.protocolState, deserializerDirection].concat(parts).join(".");
        e.message = 'Deserialization error for ' + e.field + ' : ' + e.message;
        _this2.emit('error', e);
      });

      this.deserializer.on('data', function (parsed) {
        parsed.metadata.name = parsed.data.name;
        parsed.data = parsed.data.params;
        parsed.metadata.state = state;
        debug("read packet " + state + "." + parsed.metadata.name);
        debug(parsed.data);
        _this2.emit('packet', parsed.data, parsed.metadata);
        _this2.emit(parsed.metadata.name, parsed.data, parsed.metadata);
        _this2.emit('raw.' + parsed.metadata.name, parsed.buffer, parsed.metadata);
        _this2.emit('raw', parsed.buffer, parsed.metadata);
      });
    }
  }, {
    key: 'setSocket',
    value: function setSocket(socket) {
      var _this3 = this;

      this.ended = false;

      // TODO : A lot of other things needs to be done.
      var endSocket = function endSocket() {
        if (_this3.ended) return;
        _this3.ended = true;
        _this3.socket.removeListener('close', endSocket);
        _this3.socket.removeListener('end', endSocket);
        _this3.socket.removeListener('timeout', endSocket);
        _this3.emit('end', _this3._endReason);
      };

      var onFatalError = function onFatalError(err) {
        _this3.emit('error', err);
        endSocket();
      };

      var onError = function onError(err) {
        return _this3.emit('error', err);
      };

      this.socket = socket;

      if (this.socket.setNoDelay) this.socket.setNoDelay(true);

      this.socket.on('connect', function () {
        return _this3.emit('connect');
      });

      this.socket.on('error', onFatalError);
      this.socket.on('close', endSocket);
      this.socket.on('end', endSocket);
      this.socket.on('timeout', endSocket);
      this.framer.on('error', onError);
      this.splitter.on('error', onError);

      this.socket.pipe(this.splitter).pipe(this.deserializer);
      this.serializer.pipe(this.framer).pipe(this.socket);
    }
  }, {
    key: 'end',
    value: function end(reason) {
      this._endReason = reason;
      if (this.cipher) this.cipher.unpipe();
      if (this.framer) this.framer.unpipe();
      if (this.socket) this.socket.end();
    }
  }, {
    key: 'setEncryption',
    value: function setEncryption(sharedSecret) {
      var _this4 = this;

      if (this.cipher != null) throw new Error("Set encryption twice !");
      this.cipher = crypto.createCipheriv('aes-128-cfb8', sharedSecret, sharedSecret);
      this.cipher.on('error', function (err) {
        return _this4.emit('error', err);
      });
      this.framer.unpipe(this.socket);
      this.framer.pipe(this.cipher).pipe(this.socket);
      this.decipher = crypto.createDecipheriv('aes-128-cfb8', sharedSecret, sharedSecret);
      this.decipher.on('error', function (err) {
        return _this4.emit('error', err);
      });
      this.socket.unpipe(this.splitter);
      this.socket.pipe(this.decipher).pipe(this.splitter);
    }
  }, {
    key: 'setCompressionThreshold',
    value: function setCompressionThreshold(threshold) {
      var _this5 = this;

      if (this.compressor == null) {
        this.compressor = compression.createCompressor(threshold);
        this.compressor.on('error', function (err) {
          return _this5.emit('error', err);
        });
        this.serializer.unpipe(this.framer);
        this.serializer.pipe(this.compressor).pipe(this.framer);
        this.decompressor = compression.createDecompressor(threshold);
        this.decompressor.on('error', function (err) {
          return _this5.emit('error', err);
        });
        this.splitter.unpipe(this.deserializer);
        this.splitter.pipe(this.decompressor).pipe(this.deserializer);
      } else {
        this.decompressor.threshold = threshold;
        this.compressor.threshold = threshold;
      }
    }
  }, {
    key: 'write',
    value: function write(name, params) {
      if (this.ended) return;
      debug("writing packet " + this.state + "." + name);
      debug(params);
      this.serializer.write({ name: name, params: params });
    }
  }, {
    key: 'writeRaw',
    value: function writeRaw(buffer) {
      if (this.ended) return;
      if (this.compressor === null) this.framer.write(buffer);else this.compressor.write(buffer);
    }

    // TCP/IP-specific (not generic Stream) method for backwards-compatibility

  }, {
    key: 'connect',
    value: function connect(port, host) {
      var options = { port: port, host: host };
      if (!this.options) this.options = options;
      require('./client/tcp_dns')(this, options);
      options.connect(this);
    }
  }, {
    key: 'state',
    get: function get() {
      return this.protocolState;
    },
    set: function set(newProperty) {
      var oldProperty = this.protocolState;
      this.protocolState = newProperty;

      if (!this.compressor) {
        this.serializer.unpipe(this.framer);
        this.splitter.unpipe(this.deserializer);
      } else {
        this.serializer.unpipe(this.compressor);
        this.decompressor.unpipe(this.deserializer);
      }

      this.serializer.removeAllListeners();
      this.deserializer.removeAllListeners();
      this.setSerializer(this.protocolState);

      if (!this.compressor) {
        this.serializer.pipe(this.framer);
        this.splitter.pipe(this.deserializer);
      } else {
        this.serializer.pipe(this.compressor);
        this.decompressor.pipe(this.deserializer);
      }

      this.emit('state', newProperty, oldProperty);
    }
  }, {
    key: 'compressionThreshold',
    get: function get() {
      return this.compressor == null ? -2 : this.compressor.compressionThreshold;
    },
    set: function set(threshold) {
      this.setCompressionThreshold(threshold);
    }
  }]);

  return Client;
}(EventEmitter);

module.exports = Client;


},{"./client/tcp_dns":362,"./debug":364,"./states":366,"./transforms/compression":367,"./transforms/framing":368,"./transforms/serializer":369,"crypto":21,"events":213}],362:[function(require,module,exports){
'use strict';

var net = require('net');
var dns = require('dns');

module.exports = function (client, options) {
  options.port = options.port || window.mc_default_port;
  options.host = options.host || window.mc_default_host;

  options.connect = function (client) {
    if (options.stream) {
      client.setSocket(options.stream);
    } else if (options.port == 25565 && net.isIP(options.host) === 0) {
      dns.resolveSrv("_minecraft._tcp." + options.host, function (err, addresses) {
        if (addresses && addresses.length > 0) {
          client.setSocket(net.connect(addresses[0].port, addresses[0].name));
        } else {
          client.setSocket(net.connect(options.port, options.host));
        }
      });
    } else {
      client.setSocket(net.connect(options.port, options.host));
    }
  };
};


},{"dns":1,"net":1}],363:[function(require,module,exports){
'use strict';

var nbt = require('prismarine-nbt');
var UUID = require('uuid-1345');

module.exports = {
  'UUID': [readUUID, writeUUID, 16],
  'nbt': [readNbt, writeNbt, sizeOfNbt],
  'optionalNbt': [readOptionalNbt, writeOptionalNbt, sizeOfOptionalNbt],
  'restBuffer': [readRestBuffer, writeRestBuffer, sizeOfRestBuffer],
  'entityMetadataLoop': [readEntityMetadata, writeEntityMetadata, sizeOfEntityMetadata]
};

function readUUID(buffer, offset) {
  return {
    value: UUID.stringify(buffer.slice(offset, 16 + offset)),
    size: 16
  };
}

function writeUUID(value, buffer, offset) {
  var buf = UUID.parse(value);
  buf.copy(buffer, offset);
  return offset + 16;
}

function readNbt(buffer, offset) {
  return nbt.proto.read(buffer, offset, "nbt");
}

function writeNbt(value, buffer, offset) {
  return nbt.proto.write(value, buffer, offset, "nbt");
}

function sizeOfNbt(value) {
  return nbt.proto.sizeOf(value, "nbt");
}

function readOptionalNbt(buffer, offset) {
  if (buffer.readInt8(offset) == 0) return { size: 1 };
  return nbt.proto.read(buffer, offset, "nbt");
}

function writeOptionalNbt(value, buffer, offset) {
  if (value == undefined) {
    buffer.writeInt8(0, offset);
    return offset + 1;
  }
  return nbt.proto.write(value, buffer, offset, "nbt");
}

function sizeOfOptionalNbt(value) {
  if (value == undefined) return 1;
  return nbt.proto.sizeOf(value, "nbt");
}

function readRestBuffer(buffer, offset) {
  return {
    value: buffer.slice(offset),
    size: buffer.length - offset
  };
}

function writeRestBuffer(value, buffer, offset) {
  value.copy(buffer, offset);
  return offset + value.length;
}

function sizeOfRestBuffer(value) {
  return value.length;
}

function readEntityMetadata(buffer, offset, _ref) {
  var type = _ref.type;
  var endVal = _ref.endVal;

  var cursor = offset;
  var metadata = [];
  var item = undefined;
  while (true) {
    item = buffer.readUInt8(cursor);
    if (item === endVal) {
      return {
        value: metadata,
        size: cursor + 1 - offset
      };
    }
    var results = this.read(buffer, cursor, type, {});
    metadata.push(results.value);
    cursor += results.size;
  }
}

function writeEntityMetadata(value, buffer, offset, _ref2) {
  var type = _ref2.type;
  var endVal = _ref2.endVal;

  var self = this;
  value.forEach(function (item) {
    offset = self.write(item, buffer, offset, type, {});
  });
  buffer.writeUInt8(endVal, offset);
  return offset + 1;
}

function sizeOfEntityMetadata(value, _ref3) {
  var type = _ref3.type;

  var size = 1;
  for (var i = 0; i < value.length; ++i) {
    size += this.sizeOf(value[i], type, {});
  }
  return size;
}


},{"prismarine-nbt":379,"uuid-1345":409}],364:[function(require,module,exports){
(function (process){
'use strict';

var util = require('util');

var debug = undefined;
if (process.env.NODE_DEBUG && /(minecraft-protocol|mc-proto)/.test(process.env.NODE_DEBUG)) {
  (function () {
    var pid = process.pid;
    debug = function debug(x) {
      // if console is not set up yet, then skip this.
      if (!console.error) return;
      console.error('MC-PROTO: %d', pid, util.format.apply(util, arguments).slice(0, 500));
    };
  })();
} else {
  debug = function debug() {};
}

module.exports = debug;


}).call(this,require('_process'))
},{"_process":219,"util":236}],365:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var net = require('net');
var EventEmitter = require('events').EventEmitter;
var Client = require('./client');
var states = require("./states");

var Server = function (_EventEmitter) {
  _inherits(Server, _EventEmitter);

  function Server(version) {
    _classCallCheck(this, Server);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Server).call(this));

    _this.version = version;
    _this.socketServer = null;
    _this.cipher = null;
    _this.decipher = null;
    _this.clients = {};
    return _this;
  }

  _createClass(Server, [{
    key: 'listen',
    value: function listen(port, host) {
      var _this2 = this;

      var self = this;
      var nextId = 0;
      self.socketServer = net.createServer();
      self.socketServer.on('connection', function (socket) {
        var client = new Client(true, _this2.version);
        client._end = client.end;
        client.end = function end(endReason) {
          endReason = '{"text":"' + endReason + '"}';
          if (client.state === states.PLAY) {
            client.write('kick_disconnect', { reason: endReason });
          } else if (client.state === states.LOGIN) {
            client.write('disconnect', { reason: endReason });
          }
          client._end(endReason);
        };
        client.id = nextId++;
        self.clients[client.id] = client;
        client.on('end', function () {
          delete self.clients[client.id];
        });
        client.setSocket(socket);
        self.emit('connection', client);
      });
      self.socketServer.on('error', function (err) {
        self.emit('error', err);
      });
      self.socketServer.on('close', function () {
        self.emit('close');
      });
      self.socketServer.on('listening', function () {
        self.emit('listening');
      });
      self.socketServer.listen(port, host);
    }
  }, {
    key: 'close',
    value: function close() {
      var _this3 = this;

      Object.keys(this.clients).forEach(function (clientId) {
        var client = _this3.clients[clientId];
        client.end('ServerShutdown');
      });
      this.socketServer.close();
    }
  }]);

  return Server;
}(EventEmitter);

module.exports = Server;


},{"./client":361,"./states":366,"events":213,"net":1}],366:[function(require,module,exports){
"use strict";

var states = {
  "HANDSHAKING": "handshaking",
  "STATUS": "status",
  "LOGIN": "login",
  "PLAY": "play"
};

module.exports = states;


},{}],367:[function(require,module,exports){
(function (Buffer){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _require$types$varint = _slicedToArray(require("protodef").types.varint, 3);

var readVarInt = _require$types$varint[0];
var writeVarInt = _require$types$varint[1];
var sizeOfVarInt = _require$types$varint[2];

var zlib = require("zlib");
var Transform = require("readable-stream").Transform;

module.exports.createCompressor = function (threshold) {
  return new Compressor(threshold);
};

module.exports.createDecompressor = function (threshold) {
  return new Decompressor(threshold);
};

var Compressor = function (_Transform) {
  _inherits(Compressor, _Transform);

  function Compressor() {
    var compressionThreshold = arguments.length <= 0 || arguments[0] === undefined ? -1 : arguments[0];

    _classCallCheck(this, Compressor);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Compressor).call(this));

    _this.compressionThreshold = compressionThreshold;
    return _this;
  }

  _createClass(Compressor, [{
    key: "_transform",
    value: function _transform(chunk, enc, cb) {
      var _this2 = this;

      if (chunk.length >= this.compressionThreshold) {
        zlib.deflate(chunk, function (err, newChunk) {
          if (err) return cb(err);
          var buf = new Buffer(sizeOfVarInt(chunk.length) + newChunk.length);
          var offset = writeVarInt(chunk.length, buf, 0);
          newChunk.copy(buf, offset);
          _this2.push(buf);
          return cb();
        });
      } else {
        var buf = new Buffer(sizeOfVarInt(0) + chunk.length);
        var offset = writeVarInt(0, buf, 0);
        chunk.copy(buf, offset);
        this.push(buf);
        return cb();
      }
    }
  }]);

  return Compressor;
}(Transform);

var Decompressor = function (_Transform2) {
  _inherits(Decompressor, _Transform2);

  function Decompressor() {
    var compressionThreshold = arguments.length <= 0 || arguments[0] === undefined ? -1 : arguments[0];

    _classCallCheck(this, Decompressor);

    var _this3 = _possibleConstructorReturn(this, Object.getPrototypeOf(Decompressor).call(this));

    _this3.compressionThreshold = compressionThreshold;
    return _this3;
  }

  _createClass(Decompressor, [{
    key: "_transform",
    value: function _transform(chunk, enc, cb) {
      var _this4 = this;

      var _readVarInt = readVarInt(chunk, 0);

      var size = _readVarInt.size;
      var value = _readVarInt.value;
      var error = _readVarInt.error;

      if (error) return cb(error);
      if (value === 0) {
        this.push(chunk.slice(size));
        return cb();
      } else {
        zlib.inflate(chunk.slice(size), function (err, newBuf) {
          if (err) return cb(err);
          _this4.push(newBuf);
          return cb();
        });
      }
    }
  }]);

  return Decompressor;
}(Transform);


}).call(this,require("buffer").Buffer)
},{"buffer":17,"protodef":394,"readable-stream":406,"zlib":16}],368:[function(require,module,exports){
(function (Buffer){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _require$types$varint = _slicedToArray(require("protodef").types.varint, 3);

var readVarInt = _require$types$varint[0];
var writeVarInt = _require$types$varint[1];
var sizeOfVarInt = _require$types$varint[2];

var Transform = require("readable-stream").Transform;

module.exports.createSplitter = function () {
  return new Splitter();
};

module.exports.createFramer = function () {
  return new Framer();
};

var Framer = function (_Transform) {
  _inherits(Framer, _Transform);

  function Framer() {
    _classCallCheck(this, Framer);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(Framer).call(this));
  }

  _createClass(Framer, [{
    key: "_transform",
    value: function _transform(chunk, enc, cb) {
      var varIntSize = sizeOfVarInt(chunk.length);
      var buffer = new Buffer(varIntSize + chunk.length);
      writeVarInt(chunk.length, buffer, 0);
      chunk.copy(buffer, varIntSize);
      this.push(buffer);
      return cb();
    }
  }]);

  return Framer;
}(Transform);

var LEGACY_PING_PACKET_ID = 0xfe;

var Splitter = function (_Transform2) {
  _inherits(Splitter, _Transform2);

  function Splitter() {
    _classCallCheck(this, Splitter);

    var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(Splitter).call(this));

    _this2.buffer = new Buffer(0);
    _this2.recognizeLegacyPing = false;
    return _this2;
  }

  _createClass(Splitter, [{
    key: "_transform",
    value: function _transform(chunk, enc, cb) {
      this.buffer = Buffer.concat([this.buffer, chunk]);

      if (this.recognizeLegacyPing && this.buffer[0] === LEGACY_PING_PACKET_ID) {
        // legacy_server_list_ping packet follows a different protocol format
        // prefix the encoded varint packet id for the deserializer
        var header = new Buffer(sizeOfVarInt(LEGACY_PING_PACKET_ID));
        writeVarInt(LEGACY_PING_PACKET_ID, header, 0);
        var payload = this.buffer.slice(1); // remove 0xfe packet id
        if (payload.length === 0) payload = new Buffer('\0'); // TODO: update minecraft-data to recognize a lone 0xfe, https://github.com/PrismarineJS/minecraft-data/issues/95
        this.push(Buffer.concat([header, payload]));
        return cb();
      }

      var offset = 0;

      var _ref = readVarInt(this.buffer, offset) || { error: "Not enough data" };

      var value = _ref.value;
      var size = _ref.size;
      var error = _ref.error;

      while (!error && this.buffer.length >= offset + size + value) {
        this.push(this.buffer.slice(offset + size, offset + size + value));
        offset += size + value;

        var _ref2 = readVarInt(this.buffer, offset) || { error: "Not enough data" };

        value = _ref2.value;
        size = _ref2.size;
        error = _ref2.error;
      }
      this.buffer = this.buffer.slice(offset);
      return cb();
    }
  }]);

  return Splitter;
}(Transform);


}).call(this,require("buffer").Buffer)
},{"buffer":17,"protodef":394,"readable-stream":406}],369:[function(require,module,exports){
"use strict";

var ProtoDef = require("protodef").ProtoDef;
var Serializer = require("protodef").Serializer;
var Parser = require("protodef").Parser;

var minecraft = require("../datatypes/minecraft");
var states = require("../states");

function createProtocol(types, packets) {
  var proto = new ProtoDef();
  proto.addType("string", ["pstring", {
    countType: "varint"
  }]);
  proto.addTypes(minecraft);
  proto.addTypes(types);

  Object.keys(packets).forEach(function (name) {
    proto.addType("packet_" + name, ["container", packets[name].fields]);
  });

  proto.addType("packet", ["container", [{ "name": "name", "type": ["mapper", { "type": "varint",
      "mappings": Object.keys(packets).reduce(function (acc, name) {
        acc[parseInt(packets[name].id)] = name;
        return acc;
      }, {})
    }] }, { "name": "params", "type": ["switch", {
      "compareTo": "name",
      "fields": Object.keys(packets).reduce(function (acc, name) {
        acc[name] = "packet_" + name;
        return acc;
      }, {})
    }] }]]);
  return proto;
}

function createSerializer() {
  var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var _ref$state = _ref.state;
  var state = _ref$state === undefined ? states.HANDSHAKING : _ref$state;
  var _ref$isServer = _ref.isServer;
  var isServer = _ref$isServer === undefined ? false : _ref$isServer;
  var version = _ref.version;

  var mcData = require("minecraft-data")(version);
  var direction = !isServer ? 'toServer' : 'toClient';
  var packets = mcData.protocol.states[state][direction];
  var proto = createProtocol(mcData.protocol.types, packets);
  return new Serializer(proto, "packet");
}

function createDeserializer() {
  var _ref2 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var _ref2$state = _ref2.state;
  var state = _ref2$state === undefined ? states.HANDSHAKING : _ref2$state;
  var _ref2$isServer = _ref2.isServer;
  var isServer = _ref2$isServer === undefined ? false : _ref2$isServer;
  var _ref2$packetsToParse = _ref2.packetsToParse;
  var packetsToParse = _ref2$packetsToParse === undefined ? { "packet": true } : _ref2$packetsToParse;
  var version = _ref2.version;

  var mcData = require("minecraft-data")(version);
  var direction = isServer ? "toServer" : "toClient";
  var packets = mcData.protocol.states[state][direction];
  var proto = createProtocol(mcData.protocol.types, packets);
  return new Parser(proto, "packet");
}

module.exports = {
  createSerializer: createSerializer,
  createDeserializer: createDeserializer
};


},{"../datatypes/minecraft":363,"../states":366,"minecraft-data":332,"protodef":394}],370:[function(require,module,exports){
'use strict';

module.exports = {
  defaultVersion: '1.8',
  supportedVersions: ['1.8', '1.9']
};


},{}],371:[function(require,module,exports){
(function (process){
/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,9],$V2=[1,12],$V3=[1,13],$V4=[1,3],$V5=[1,4],$V6=[1,8],$V7=[1,10],$V8=[1,11],$V9=[1,14],$Va=[5,9,14,26],$Vb=[2,20],$Vc=[5,9,13,14,26],$Vd=[2,26],$Ve=[1,27];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"main":3,"jvalue":4,"EOF":5,"jarray":6,"LEFTC":7,"liste_jarray":8,"RIGHTC":9,"liste_jarray_value":10,"liste_jvalue":11,"POSITIVE_INTEGER":12,"DP":13,"COMMA":14,"string":15,"STRING":16,"STRINGWITHOUTQUOTE":17,"TRUE":18,"FALSE":19,"jobject":20,"NULL":21,"FLOAT":22,"FLOATSUFFIX":23,"LEFTP":24,"liste_jobject_value":25,"RIGHTP":26,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"LEFTC",9:"RIGHTC",12:"POSITIVE_INTEGER",13:"DP",14:"COMMA",16:"STRING",17:"STRINGWITHOUTQUOTE",18:"TRUE",19:"FALSE",21:"NULL",22:"FLOAT",23:"FLOATSUFFIX",24:"LEFTP",26:"RIGHTP"},
productions_: [0,[3,2],[6,3],[8,0],[8,1],[8,1],[10,5],[10,4],[10,3],[11,3],[11,2],[11,1],[15,1],[15,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[20,3],[25,5],[25,3],[25,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1]
break;
case 2: case 23:
this.$=$$[$0-1]
break;
case 3:
this.$=[]
break;
case 4: case 5: case 16: case 17: case 18:
this.$=$$[$0]
break;
case 6:
$$[$0][parseInt($$[$0-4])]=$$[$0-2]; this.$=$$[$0]
break;
case 7:
var a={};a[parseInt($$[$0-3])]=$$[$0-1];this.$=a 
break;
case 8:
var a={};a[parseInt($$[$0-2])]=$$[$0];this.$=a 
break;
case 9:
$$[$0].unshift($$[$0-2]);this.$=$$[$0]
break;
case 10:
 this.$=[$$[$0-1]] 
break;
case 11:
 this.$=[$$[$0]] 
break;
case 12:
 this.$= $$[$0].substring(1,$$[$0].length-1)
break;
case 13:
 this.$=$$[$0]
break;
case 14:
this.$=true
break;
case 15:
this.$=false
break;
case 19:
this.$=null;
break;
case 20:
this.$=parseInt($$[$0])
break;
case 21:
this.$=parseFloat($$[$0])
break;
case 22:
this.$=parseFloat($$[$0].substring(0,$$[$0].length-1))
break;
case 24:
$$[$0][$$[$0-4]]=$$[$0-2]; this.$=$$[$0]
break;
case 25:
var a={};a[$$[$0-2]]=$$[$0];this.$=a 
break;
case 26:
this.$={}
break;
}
},
table: [{3:1,4:2,6:7,7:$V0,12:$V1,15:5,16:$V2,17:$V3,18:$V4,19:$V5,20:6,21:$V6,22:$V7,23:$V8,24:$V9},{1:[3]},{5:[1,16]},o($Va,[2,14]),o($Va,[2,15]),o($Va,[2,16]),o($Va,[2,17]),o($Va,[2,18]),o($Va,[2,19]),o($Va,$Vb),o($Va,[2,21]),o($Va,[2,22]),o($Vc,[2,12]),o($Vc,[2,13]),{15:18,16:$V2,17:$V3,25:17,26:$Vd},{4:23,6:7,7:$V0,8:19,9:[2,3],10:20,11:21,12:[1,22],15:5,16:$V2,17:$V3,18:$V4,19:$V5,20:6,21:$V6,22:$V7,23:$V8,24:$V9},{1:[2,1]},{26:[1,24]},{13:[1,25]},{9:[1,26]},{9:[2,4]},{9:[2,5]},o([9,14],$Vb,{13:$Ve}),{9:[2,11],14:[1,28]},o($Va,[2,23]),{4:29,6:7,7:$V0,12:$V1,15:5,16:$V2,17:$V3,18:$V4,19:$V5,20:6,21:$V6,22:$V7,23:$V8,24:$V9},o($Va,[2,2]),{4:30,6:7,7:$V0,12:$V1,15:5,16:$V2,17:$V3,18:$V4,19:$V5,20:6,21:$V6,22:$V7,23:$V8,24:$V9},{4:23,6:7,7:$V0,9:[2,10],11:31,12:$V1,15:5,16:$V2,17:$V3,18:$V4,19:$V5,20:6,21:$V6,22:$V7,23:$V8,24:$V9},{14:[1,32],26:[2,25]},{9:[2,8],14:[1,33]},{9:[2,9]},{15:18,16:$V2,17:$V3,25:34,26:$Vd},{9:[2,7],10:35,12:[1,36]},{26:[2,24]},{9:[2,6]},{13:$Ve}],
defaultActions: {16:[2,1],20:[2,4],21:[2,5],31:[2,9],34:[2,24],35:[2,6]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = new Error();

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:"/* skip whitespace */";
break;
case 1:return 13;
break;
case 2:return 24;
break;
case 3:return 26;
break;
case 4:return 7;
break;
case 5:return 9;
break;
case 6:return 14;
break;
case 7:return 19;
break;
case 8:return 18 ;
break;
case 9:return 21;
break;
case 10:return 23;
break;
case 11:return 12;
break;
case 12:return 22;
break;
case 13:return 16;
break;
case 14:return 5;
break;
case 15:return 17;
break;
}
},
rules: [/^(?:\s+)/,/^(?::)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:false\b)/,/^(?:true\b)/,/^(?:null\b)/,/^(?:-?([1-9][0-9]*|0)(\.[0-9]+)?(['e''E']['+''-']?[0-9]+)?[bslfBSLF])/,/^(?:[1-9][0-9]*|0\b)/,/^(?:-?([1-9][0-9]*|0)(\.[0-9]+)?(['e''E']['+''-']?[0-9]+)?)/,/^(?:"([']|[^'"''\\']|(\\['"' '\\' '\/' 'b' 'f' 'n' 'r' 't' 'u']))*")/,/^(?:$)/,/^(?:([']|[^'"''\\':}\],]|(\\['"' '\\' '\/' 'b' 'f' 'n' 'r' 't' 'u']))*)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function (){};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
}).call(this,require('_process'))
},{"_process":219}],372:[function(require,module,exports){
var parser = require("./grammar").parser;

module.exports={parse:function(text){
  try {
    return parser.parse(text);
  }
  catch(e) {
    console.log("Error parsing text '"+text+"'");
    throw e;
  }
}};

},{"./grammar":371}],373:[function(require,module,exports){
module.exports = loader;

function loader(mcVersion)
{
  biomes=require('minecraft-data')(mcVersion).biomes;
  return Biome;
}

var biomes;

function Biome(id) {
  this.id = id;
  var biomeEnum = biomes[id];
  if(biomeEnum) {
    this.color = biomeEnum.color;
    this.name = biomeEnum.name;
    this.height = biomeEnum.height;
    this.rainfall = biomeEnum.rainfall;
    this.temperature = biomeEnum.temperature;
  } else {
    this.color = 0;
    this.height = null;
    this.name = "";
    this.rainfall = 0;
    this.temperature = 0;
  }
}

},{"minecraft-data":332}],374:[function(require,module,exports){
module.exports = loader;

function loader(mcVersion)
{
  var mcData=require('minecraft-data')(mcVersion);
  Biome = require('prismarine-biome')(mcVersion);
  blocks=mcData.blocks;
  toolMultipliers = mcData.materials;
  return Block;
}

var Biome;
var blocks;
var toolMultipliers;


function Block(type, biomeId, metadata) {
  this.type = type;
  this.metadata = metadata;
  this.light = 0;
  this.skyLight = 0;
  this.biome = new Biome(biomeId);
  this.position = null;

  var blockEnum = blocks[type];
  if(blockEnum) {
    this.name = blockEnum.name;
    this.hardness = blockEnum.hardness;
    this.displayName = blockEnum.displayName;
    if("variations" in blockEnum)
      for(var i in blockEnum["variations"]) {
        if(blockEnum["variations"][i].metadata === metadata)
          this.displayName = blockEnum["variations"][i].displayName;
      }
    this.boundingBox = blockEnum.boundingBox;
    this.diggable = blockEnum.diggable;
    this.material = blockEnum.material;
    this.harvestTools = blockEnum.harvestTools;
    this.drops = blockEnum.drops;
  } else {
    this.name = "";
    this.displayName = "";
    this.hardness = 0;
    this.boundingBox = "empty";
    this.diggable = false;
  }
}

Block.prototype.canHarvest = function(heldItemType) {
  if(this.harvestTools) {
    var penalty = heldItemType === null || !this.harvestTools[heldItemType];
    if(penalty) return false;
  }
  return true;
};

// http://minecraft.gamepedia.com/Breaking#Speed
Block.prototype.digTime = function(heldItemType,creative, inWater, notOnGround) {
  if(creative) return 0;
  var time = 1000 * this.hardness * 1.5;

  if(!this.canHarvest(heldItemType))
    return time * 10 / 3;

  // If the tool helps, then it increases digging speed by a constant multiplier
  var toolMultiplier = toolMultipliers[this.material];
  if(toolMultiplier && heldItemType) {
    var multiplier = toolMultiplier[heldItemType];
    if(multiplier) time /= multiplier;
  }
  if(notOnGround) time *= 5;
  if(inWater) time *= 5;
  return time;
};

},{"minecraft-data":332,"prismarine-biome":373}],375:[function(require,module,exports){
var Vec3 = require('vec3').Vec3;
var util = require('util');
var EventEmitter = require('events').EventEmitter;

module.exports = Entity;

function Entity(id) {
  EventEmitter.call(this);
  this.id = id;
  this.type = null;
  this.position = new Vec3(0, 0, 0);
  this.velocity = new Vec3(0, 0, 0);
  this.yaw = 0;
  this.pitch = 0;
  this.onGround = true;
  this.height = 0;
  this.effects = {};
  // 0 = held item, 1-4 = armor slot
  this.equipment = new Array(5);
  this.heldItem = this.equipment[0]; // shortcut to equipment[0]
  this.isValid = true;
  this.metadata = [];
}
util.inherits(Entity, EventEmitter);

Entity.prototype.setEquipment = function(index, item) {
  this.equipment[index] = item;
  this.heldItem = this.equipment[0];
};

},{"events":213,"util":236,"vec3":410}],376:[function(require,module,exports){
(function (Buffer){
module.exports = loader;

function loader(mcVersion)
{
  var mcData=require('minecraft-data')(mcVersion);
  findItemOrBlockById=mcData.findItemOrBlockById;
  return Item;
}

var findItemOrBlockById;
var assert = require('assert');

function Item(type, count, metadata, nbt) {
  if(type == null) return;

  this.type = type;
  this.count = count;
  this.metadata = metadata == null ? 0 : metadata;
  this.nbt = nbt || new Buffer(0);

  var itemEnum = findItemOrBlockById(type);
  assert.ok(itemEnum);
  this.name = itemEnum.name;
  this.displayName = itemEnum.displayName;
  if("variations" in itemEnum)
    for(var i in itemEnum["variations"]) {
      if(itemEnum["variations"][i].metadata === metadata)
        this.displayName = itemEnum["variations"][i].displayName;
    }
  this.stackSize = itemEnum.stackSize;
}

Item.equal = function(item1, item2) {
  if(item1 == null && item2 == null) {
    return true;
  } else if(item1 == null) {
    return false;
  } else if(item2 == null) {
    return false;
  } else {
    return item1.type === item2.type &&
      item1.count === item2.count &&
      item1.metadata === item2.metadata;
  }
};

Item.toNotch = function(item) {
  if(item == null) return {blockId: -1};
  var notchItem = {
    blockId: item.type,
    itemCount: item.count,
    itemDamage: item.metadata
  };
  if(item.nbt && item.nbt.length !== 0)
    notchItem.nbtData = item.nbt;
  return notchItem;
};

Item.fromNotch = function(item) {
  if(item.blockId === -1) return null;
  return new Item(item.blockId, item.itemCount, item.itemDamage, item.nbtData);
};

}).call(this,require("buffer").Buffer)
},{"assert":2,"buffer":17,"minecraft-data":332}],377:[function(require,module,exports){
module.exports= {
  'compound':[readCompound,writeCompound,sizeOfCompound]
};

function readCompound(buffer,offset,typeArgs,rootNode)
{
  var results = {
    value: {},
    size: 0
  };
  while (true) {
    var typ=this.read(buffer,offset,"byte",rootNode);
    if (typ.value === 0) {
      offset+=typ.size;
      results.size+=typ.size;
      break;
    }

    var readResults=this.read(buffer,offset,"nbt",rootNode);
    offset+=readResults.size;
    results.size+=readResults.size;
    results.value[readResults.value.name] = {
      type: readResults.value.type,
      value: readResults.value.value
    };
  }
  return results;
}

function writeCompound(value,buffer,offset,typeArgs,rootNode)
{
  var self=this;
  Object.keys(value).map(function (key) {
    offset=self.write({
      name:key,
      type:value[key].type,
      value:value[key].value
    },buffer,offset,"nbt",rootNode);
  });
  offset=this.write(0,buffer,offset,"byte",rootNode);

  return offset;
}

function sizeOfCompound(value,typeArgs,rootNode)
{
  var self=this;
  var size=Object.keys(value).reduce(function (size,key) {
    return size+self.sizeOf({
        name:key,
        type:value[key].type,
        value:value[key].value
      },"nbt",rootNode);
  },0);
  return 1+size;
}
},{}],378:[function(require,module,exports){
module.exports={
  "container": "native",
  "byte": "native",
  "switch": "native",
  "compound": "native",
  "short": "native",
  "int": "native",
  "long": "native",
  "float": "native",
  "double": "native",
  "pstring": "native",
  "shortString": ["pstring",{
    "countType":"short"
  }],
  "byteArray": [
    "array",
    {
      "countType": "int",
      "type": "byte"
    }
  ],
  "list": [
    "container",
    [
      {
        "name": "type",
        "type": "nbtMapper"
      },
      {
        "name": "value",
        "type": [
          "array",
          {
            "countType": "int",
            "type": ["nbtSwitch",{"type":"type"}]
          }
        ]
      }
    ]
  ],
  "intArray": [
    "array",
    {
      "countType": "int",
      "type": "int"
    }
  ],
  "nbtMapper":["mapper",
    {
      "type": "byte",
      "mappings": {
        "0": "end",
        "1": "byte",
        "2": "short",
        "3": "int",
        "4": "long",
        "5": "float",
        "6": "double",
        "7": "byteArray",
        "8": "string",
        "9": "list",
        "10": "compound",
        "11": "intArray"
      }
    }
  ],
  "nbtSwitch":[
    "switch",
    {
      "compareTo": "$type",
      "fields": {
        "end": "void",
        "byte": "byte",
        "short": "short",
        "int": "int",
        "long": "long",
        "float": "float",
        "double": "double",
        "byteArray": "byteArray",
        "string": "shortString",
        "list": "list",
        "compound": "compound",
        "intArray": "intArray"
      }
    }
  ],
  "nbt": [
    "container",
    [
      {
        "name": "type",
        "type": "nbtMapper"
      },
      {
        "name": "name",
        "type": "shortString"
      },
      {
        "name": "value",
        "type": ["nbtSwitch",{"type":"type"}]
      }
    ]
  ]
}
},{}],379:[function(require,module,exports){
var zlib = require('zlib');

var hasGzipHeader = function(data){
  var result=true;
  if(data[0]!=0x1f) result=false;
  if(data[1]!=0x8b) result=false;
  return result;
};

var ProtoDef=require("protodef").ProtoDef;
var proto=new ProtoDef();

proto.addType("compound",require("./compound").compound);
proto.addTypes(require("./nbt.json"));

function writeUncompressed(value) {
  return proto.createPacketBuffer("nbt",value);
}

function parseUncompressed(data) {
  return proto.parsePacketBuffer("nbt",data).data;
}

function parse(data, callback) {
  if (hasGzipHeader(data)) {
    zlib.gunzip(data, function(error, uncompressed) {
      if (error) {
        callback(error, data);
      } else {
        callback(null, parseUncompressed(uncompressed));
      }
    });
  } else {
    callback(null, parseUncompressed(data));
  }
}

function simplify(data)
{
  function transform(value,type)
  {
    if(type=="compound") {
      return Object.keys(value).reduce((acc,key) => {
        acc[key]=simplify(value[key]);
        return acc;
      },{});
    }
    if(type=="list") {
      return value.value.map(v => transform(v,value.type));
    }
    return value;
  }
  return transform(data.value,data.type);
}

module.exports={
  writeUncompressed:writeUncompressed,
  parseUncompressed:parseUncompressed,
  simplify:simplify,
  parse:parse,
  proto:proto
};
},{"./compound":377,"./nbt.json":378,"protodef":394,"zlib":16}],380:[function(require,module,exports){
function loader(mcVersion)
{
  return {
    Recipe:require("./lib/recipe")(mcVersion),
    RecipeItem:require("./lib/recipe_item")
  }
}

module.exports=loader;
},{"./lib/recipe":381,"./lib/recipe_item":382}],381:[function(require,module,exports){
var recipes ;
var RecipeItem = require('./recipe_item');

module.exports=loader;

function loader(mcVersion)
{
  recipes=require('minecraft-data')(mcVersion).recipes;
  return Recipe;
}

function Recipe(recipeEnumItem) {
  this.result = RecipeItem.fromEnum(recipeEnumItem.result);

  this.inShape = recipeEnumItem.inShape ?
    reformatShape(recipeEnumItem.inShape) : null;
  this.outShape = recipeEnumItem.outShape ?
    reformatShape(recipeEnumItem.outShape) : null;
  this.ingredients = recipeEnumItem.ingredients ?
    reformatIngredients(recipeEnumItem.ingredients) : null;
  this.delta = computeDelta(this);
  this.requiresTable = computeRequiresTable(this);
}

Recipe.find = function(itemType, metadata) {
  var results = [];
  (recipes[itemType] || []).forEach(function(recipeEnumItem) {
    if((metadata == null || !("meta" in recipeEnumItem.result) || recipeEnumItem.result.metadata === metadata)) {
      results.push(new Recipe(recipeEnumItem));
    }
  });
  return results;
};

function computeRequiresTable(recipe) {
  var spaceLeft = 4;

  var x, y, row;
  if(recipe.inShape) {
    if(recipe.inShape.length > 2) return true;
    for(y = 0; y < recipe.inShape.length; ++y) {
      row = recipe.inShape[y];
      if(row.length > 2) return true;
      for(x = 0; x < row.length; ++x) {
        if(row[x]) spaceLeft -= 1;
      }
    }
  }
  if(recipe.ingredients) spaceLeft -= recipe.ingredients.length;
  return spaceLeft < 0;
}

function computeDelta(recipe) {
  // returns a list of item type and metadata with the delta how many more or
  // less you will have in your inventory after crafting
  var delta = [];
  if(recipe.inShape) applyShape(recipe.inShape, -1);
  if(recipe.outShape) applyShape(recipe.outShape, 1);
  if(recipe.ingredients) applyIngredients(recipe.ingredients);
  // add the result
  add(recipe.result);
  return delta;

  //add to delta
  function add(recipeItem) {
    for(var i = 0; i < delta.length; ++i) {
      var d = delta[i];
      if(d.id === recipeItem.id && d.metadata === recipeItem.metadata) {
        d.count += recipeItem.count;
        return;
      }
    }
    delta.push(recipeItem);
  }

  function applyShape(shape, direction) {
    var x, y, row;
    for(y = 0; y < shape.length; ++y) {
      row = recipe.inShape[y];
      for(x = 0; x < row.length; ++x)
        if(row[x].id !== -1) {
          var item = RecipeItem.clone(row[x]);
          item.count = direction;
          add(item);
        }
    }
  }

  function applyIngredients(ingredients) {
    var i;
    for(i = 0; i < ingredients.length; ++i) {
      add(ingredients[i]);
    }
  }
}

function reformatShape(shape) {
  var out = new Array(shape.length);
  var x, y, row, outRow;
  for(y = 0; y < shape.length; ++y) {
    row = shape[y];
    out[y] = outRow = new Array(row.length);
    for(x = 0; x < outRow.length; ++x)
      outRow[x] = RecipeItem.fromEnum(row[x]);
  }
  return out;
}

function reformatIngredients(ingredients) {
  var out = new Array(ingredients.length);
  for(var i = 0; i < out.length; ++i) {
    var item = RecipeItem.fromEnum(ingredients[i]);
    item.count = -1;
    out[i] = item;
  }
  return out;
}

},{"./recipe_item":382,"minecraft-data":332}],382:[function(require,module,exports){
module.exports = RecipeItem;

function RecipeItem(id, metadata, count) {
  this.id = id;
  this.metadata = metadata;
  this.count = count;
}

RecipeItem.fromEnum = function(itemFromRecipeEnum) {
  if(itemFromRecipeEnum === null)
    return new RecipeItem(-1, null, 1);
  else switch(typeof itemFromRecipeEnum) {
    case "array":
      return new RecipeItem(itemFromRecipeEnum[0], itemFromRecipeEnum[1], 1);
    case "number":
      return new RecipeItem(itemFromRecipeEnum, null, 1);
    case "object":
      return new RecipeItem(itemFromRecipeEnum.id, itemFromRecipeEnum.metadata == null ? itemFromRecipeEnum.metadata : null, itemFromRecipeEnum.count || 1);
  }
};

RecipeItem.clone = function(recipeItem) {
  return new RecipeItem(recipeItem.id, recipeItem.metadata, recipeItem.count);
};
},{}],383:[function(require,module,exports){
function loader(mcVersion)
{
  return {
    windows:require("./lib/windows")(mcVersion)
  }
}

module.exports=loader;
},{"./lib/windows":384}],384:[function(require,module,exports){
var util = require('util');
var assert = require('assert');
var EventEmitter = require("events").EventEmitter;

var Item;

module.exports=loader;

function loader(mcVersion)
{
  Item=require('prismarine-item')(mcVersion);

  return {
    createWindow: createWindow,
    Window: Window,
    InventoryWindow: InventoryWindow,
    ChestWindow: ChestWindow,
    CraftingTableWindow: CraftingTableWindow,
    FurnaceWindow: FurnaceWindow,
    DispenserWindow: DispenserWindow,
    EnchantmentTableWindow: EnchantmentTableWindow,
    BrewingStandWindow: BrewingStandWindow,
    ContainerWindow: ContainerWindow,
    INVENTORY_SLOT_COUNT: INVENTORY_SLOT_COUNT,
  };
}


var INVENTORY_SLOT_COUNT = 36;

var windows = {
  "minecraft:chest": ChestWindow,
  "minecraft:crafting_table": CraftingTableWindow,
  "minecraft:furnace": FurnaceWindow,
  "minecraft:dispenser": DispenserWindow,
  "minecraft:enchanting_table": EnchantmentTableWindow,
  "minecraft:brewing_stand": BrewingStandWindow,
  "minecraft:container": ContainerWindow,
};

function createWindow(id, type, title, slotCount) {
  return new windows[type](id, title, slotCount);
}

util.inherits(Window, EventEmitter);
function Window(id, type, title, slotCount) {
  this.id = id;
  this.type = type;
  this.title = title;
  this.slots = new Array(slotCount);
  // in vanilla client, this is the item you are holding with the
  // mouse cursor
  this.selectedItem = null;
}

Window.prototype.findItemRange = function(start, end, itemType, metadata, notFull) {
  assert.notEqual(itemType, null);
  for(var i = start; i < end; ++i) {
    var item = this.slots[i];
    if(item && itemType === item.type &&
      (metadata == null || metadata === item.metadata) &&
      (!notFull || item.count < item.stackSize)) {
      return item;
    }
  }
  return null;
};

Window.prototype.findInventoryItem = function(itemType, metadata, notFull) {
  assert.ok(this.inventorySlotStart != null);

  var end = this.inventorySlotStart + INVENTORY_SLOT_COUNT;
  return this.findItemRange(this.inventorySlotStart, end, itemType, metadata, notFull);
};

Window.prototype.firstEmptySlotRange = function(start, end) {
  for(var i = start; i < end; ++i) {
    if(!this.slots[i]) return i;
  }
  return null;
};

Window.prototype.firstEmptyInventorySlot = function() {
  var end = this.inventorySlotStart + INVENTORY_SLOT_COUNT;
  return this.firstEmptySlotRange(this.inventorySlotStart, end);
};

Window.prototype.acceptClick = function(click) {
  assert.ok(click.mouseButton === 0 || click.mouseButton === 1);
  var invSlotEnd = this.inventorySlotStart + INVENTORY_SLOT_COUNT;
  if(click.slot === -999) {
    this.acceptOutsideWindowClick(click);
  } else if(click.slot >= this.inventorySlotStart && click.slot < invSlotEnd) {
    this.acceptInventoryClick(click);
  } else {
    this.acceptUniqueClick(click);
  }
};

Window.prototype.acceptOutsideWindowClick = function(click) {
  assert.strictEqual(click.mode, 0, "unimplemented");
  if(click.mouseButton === 0) {
    this.selectedItem = null;
  } else if(click.mouseButton === 1) {
    this.selectedItem.count -= 1;
    if(!this.selectedItem.count) this.selectedItem = null;
  } else {
    assert.ok(false, "unimplemented");
  }
};

Window.prototype.acceptInventoryClick = function(click) {
  if(click.mouseButton === 0) {
    if(click.mode > 0) {
      assert.ok(false, "unimplemented");
    } else {
      this.acceptSwapAreaLeftClick(click);
    }
  } else if(click.mouseButton === 1) {
    this.acceptSwapAreaRightClick(click);
  } else {
    assert.ok(false, "unimplemented");
  }
};

Window.prototype.acceptNonInventorySwapAreaClick = function(click) {
  assert.strictEqual(click.mode, 0, "unimplemented");
  if(click.mouseButton === 0) {
    this.acceptSwapAreaLeftClick(click);
  } else if(click.mouseButton === 1) {
    this.acceptSwapAreaRightClick(click);
  } else {
    assert.ok(false, "unimplemented");
  }
};


Window.prototype.acceptSwapAreaRightClick = function(click) {
  assert.strictEqual(click.mouseButton, 1);
  assert.strictEqual(click.mode, 0);

  var item = this.slots[click.slot];
  if(this.selectedItem) {
    if(item) {
      if(item.type === this.selectedItem.type &&
        item.metadata === this.selectedItem.metadata) {
        item.count += 1;
        this.selectedItem.count -= 1;
        if(this.selectedItem.count === 0) this.selectedItem = null;
      } else {
        // swap selected item and window item
        this.updateSlot(click.slot, this.selectedItem);
        this.selectedItem = item;
      }
    } else {
      if(this.selectedItem.count === 1) {
        this.updateSlot(click.slot, this.selectedItem);
        this.selectedItem = null;
      } else {
        this.updateSlot(click.slot, new Item(this.selectedItem.type, 1,
          this.selectedItem.metadata, this.selectedItem.nbt));
        this.selectedItem.count -= 1;
      }
    }
  } else if(item) {
    // grab 1/2 of item
    this.selectedItem = new Item(item.type, Math.ceil(item.count / 2),
      item.metadata, item.nbt);
    item.count -= this.selectedItem.count;
    if(item.count === 0) this.updateSlot(item.slot, null);
  }
};

Window.prototype.acceptSwapAreaLeftClick = function(click) {
  assert.strictEqual(click.mouseButton, 0);
  assert.strictEqual(click.mode, 0);
  var item = this.slots[click.slot];
  if(item && this.selectedItem &&
    item.type === this.selectedItem.type &&
    item.metadata === this.selectedItem.metadata) {
    // drop as many held item counts into the slot as we can
    var newCount = item.count + this.selectedItem.count;
    var leftover = newCount - item.stackSize;
    if(leftover <= 0) {
      item.count = newCount;
      this.selectedItem = null;
    } else {
      item.count = item.stackSize;
      this.selectedItem.count = leftover;
    }
  } else {
    // swap selected item and window item
    var tmp = this.selectedItem;
    this.selectedItem = item;
    this.updateSlot(click.slot, tmp);
  }
};

Window.prototype.updateSlot = function(slot, newItem) {
  if(newItem) newItem.slot = slot;
  var oldItem = this.slots[slot];
  this.slots[slot] = newItem;
  this.emit("windowUpdate", slot, oldItem, newItem);
};

Window.prototype.acceptUniqueClick = function(click) {
  assert.ok(false, "override this method");
};

Window.prototype.countRange = function(start, end, itemType, metadata) {
  var sum = 0;
  for(var i = start; i < end; ++i) {
    var item = this.slots[i];
    if(item && itemType === item.type &&
      (metadata == null || item.metadata === metadata)) {
      sum += item.count;
    }
  }
  return sum;
};

Window.prototype.itemsRange = function(start, end) {
  var results = [];
  for(var i = start; i < end; ++i) {
    var item = this.slots[i];
    if(item) results.push(item);
  }
  return results;
};

Window.prototype.count = function(itemType, metadata) {
  itemType = parseInt(itemType, 10); // allow input to be string
  assert.ok(this.inventorySlotStart != null);

  var end = this.inventorySlotStart + INVENTORY_SLOT_COUNT;
  return this.countRange(this.inventorySlotStart, end, itemType, metadata);
};

Window.prototype.items = function() {
  assert.ok(this.inventorySlotStart != null);
  var end = this.inventorySlotStart + INVENTORY_SLOT_COUNT;
  return this.itemsRange(this.inventorySlotStart, end);
};

Window.prototype.emptySlotCount = function() {
  var end = this.inventorySlotStart + INVENTORY_SLOT_COUNT;
  var count = 0;
  for(var i = this.inventorySlotStart; i < end; ++i) {
    if(!this.slots[i]) count += 1;
  }
  return count;
};

Window.prototype.transactionRequiresConfirmation = function(click) {
  return true;
};

Window.prototype.acceptCraftingClick = function(click) {
  assert.strictEqual(click.mouseButton, 0);
  assert.strictEqual(click.mode, 0);
  assert.equal(this.selectedItem, null);
  this.acceptNonInventorySwapAreaClick(click);
};

function InventoryWindow(id, title, slotCount) {
  Window.call(this, id, null, title, slotCount);
}
util.inherits(InventoryWindow, Window);

InventoryWindow.prototype.inventorySlotStart = 9;

InventoryWindow.prototype.acceptUniqueClick = function(click) {
  if(click.slot === 0) {
    this.acceptCraftingClick(click);
  } else if(click.slot >= 1 && click.slot < 9) {
    this.acceptNonInventorySwapAreaClick(click);
  }
};


function ChestWindow(id, title, slotCount) {
  Window.call(this, id, 0, title, slotCount);

  this.inventorySlotStart = slotCount > 27 ? 54 : 27;
}
util.inherits(ChestWindow, Window);

ChestWindow.prototype.chestItems = function() {
  return this.itemsRange(0, this.inventorySlotStart);
};

ChestWindow.prototype.chestCount = function(itemType, metadata) {
  itemType = parseInt(itemType, 10); // allow input to be a string
  return this.countRange(0, this.inventorySlotStart, itemType, metadata);
};

ChestWindow.prototype.findChestItem = function(itemType, metadata, notFull) {
  itemType = parseInt(itemType, 10); // allow input to be a string
  return this.findItemRange(0, this.inventorySlotStart, itemType, metadata, notFull);
};

ChestWindow.prototype.firstEmptyChestSlot = function() {
  return this.firstEmptySlotRange(0, this.inventorySlotStart);
};

ChestWindow.prototype.acceptUniqueClick = function(click) {
  assert.ok(click.slot >= 0);
  assert.ok(click.slot < this.inventorySlotStart);
  this.acceptNonInventorySwapAreaClick(click);
};

function CraftingTableWindow(id, title, slotCount) {
  Window.call(this, id, 1, title, slotCount);
}
util.inherits(CraftingTableWindow, Window);

CraftingTableWindow.prototype.inventorySlotStart = 10;

CraftingTableWindow.prototype.acceptUniqueClick = function(click) {
  if(click.slot === 0) {
    this.acceptCraftingClick(click);
  } else if(click.slot >= 1 && click.slot < 10) {
    this.acceptNonInventorySwapAreaClick(click);
  }
};

function FurnaceWindow(id, title, slotCount) {
  Window.call(this, id, 2, title, slotCount);
}
util.inherits(FurnaceWindow, Window);

FurnaceWindow.prototype.inventorySlotStart = 3;

FurnaceWindow.prototype.acceptUniqueClick = function(click) {
  this.acceptNonInventorySwapAreaClick(click);
};

function DispenserWindow(id, title, slotCount) {
  Window.call(this, id, 3, title, slotCount);
}
util.inherits(DispenserWindow, Window);

DispenserWindow.prototype.inventorySlotStart = 9;

DispenserWindow.prototype.dispenserItems = function() {
  return this.itemsRange(0, this.inventorySlotStart);
};

DispenserWindow.prototype.dispenserCount = function(itemType, metadata) {
  itemType = parseInt(itemType, 10); // allow input to be a string
  return this.countRange(0, this.inventorySlotStart, itemType, metadata);
};

DispenserWindow.prototype.acceptUniqueClick = function(click) {
  assert.ok(click.slot >= 0);
  assert.ok(click.slot < this.inventorySlotStart);
  this.acceptNonInventorySwapAreaClick(click);
};

function EnchantmentTableWindow(id, title, slotCount) {
  // this window incorrectly reports the number of slots as 9. it should be 1.
  Window.call(this, id, 4, title, 2);
}
util.inherits(EnchantmentTableWindow, Window);

EnchantmentTableWindow.prototype.inventorySlotStart = 2;

EnchantmentTableWindow.prototype.acceptUniqueClick = function(click) {
  if(click.slot === 0 || click.slot === 1) {
    // this is technically incorrect. there are some exceptions to enchantment
    // table slot clicks but we're going to bank on them not being used.
    this.acceptNonInventorySwapAreaClick(click);
  }
};


function BrewingStandWindow(id, title, slotCount) {
  Window.call(this, id, 5, title, slotCount);
}
util.inherits(BrewingStandWindow, Window);

BrewingStandWindow.prototype.inventorySlotStart = 5;


function ContainerWindow(id, title, slotCount) {
  Window.call(this, id, 6, title, slotCount);

  if(isInventoryWindow() && slotCount == 40) {
    // 4 armor slots are always excluded
    slotCount -= 4;
  }

  this.inventorySlotStart = slotCount;

  function isInventoryWindow() {
    return title.indexOf('container.inventory') > -1;
  }
}
util.inherits(ContainerWindow, Window);

ContainerWindow.prototype.containerItems = function() {
  return this.itemsRange(0, this.inventorySlotStart);
};

ContainerWindow.prototype.containerCount = function(itemType, metadata) {
  itemType = parseInt(itemType, 10); // allow input to be a string
  return this.countRange(0, this.inventorySlotStart, itemType, metadata);
};

ContainerWindow.prototype.acceptUniqueClick = function(click) {
  this.acceptNonInventorySwapAreaClick(click);
};

ContainerWindow.prototype.transactionRequiresConfirmation = function(click) {
  return false;
};

},{"assert":2,"events":213,"prismarine-item":376,"util":236}],385:[function(require,module,exports){
arguments[4][227][0].apply(exports,arguments)
},{"_process":219,"dup":227}],386:[function(require,module,exports){
'use strict';

var _objectWithoutProperties = require('babel-runtime/helpers/object-without-properties')['default'];

var _require = require('../utils');

var getField = _require.getField;
var getFieldInfo = _require.getFieldInfo;
var tryDoc = _require.tryDoc;

module.exports = {
  'switch': [readSwitch, writeSwitch, sizeOfSwitch],
  'option': [readOption, writeOption, sizeOfOption]
};

function readSwitch(buffer, offset, _ref, rootNode) {
  var _this = this;

  var compareTo = _ref.compareTo;
  var fields = _ref.fields;

  var rest = _objectWithoutProperties(_ref, ['compareTo', 'fields']);

  compareTo = getField(compareTo, rootNode);
  if (typeof fields[compareTo] === 'undefined' && typeof rest['default'] === "undefined") throw new Error(compareTo + " has no associated fieldInfo in switch");

  var caseDefault = typeof fields[compareTo] === 'undefined';
  var resultingType = caseDefault ? rest['default'] : fields[compareTo];
  var fieldInfo = getFieldInfo(resultingType);
  return tryDoc(function () {
    return _this.read(buffer, offset, fieldInfo, rootNode);
  }, caseDefault ? "default" : compareTo);
}

function writeSwitch(value, buffer, offset, _ref2, rootNode) {
  var _this2 = this;

  var compareTo = _ref2.compareTo;
  var fields = _ref2.fields;

  var rest = _objectWithoutProperties(_ref2, ['compareTo', 'fields']);

  compareTo = getField(compareTo, rootNode);
  if (typeof fields[compareTo] === 'undefined' && typeof rest['default'] === "undefined") throw new Error(compareTo + " has no associated fieldInfo in switch");

  var caseDefault = typeof fields[compareTo] === 'undefined';
  var fieldInfo = getFieldInfo(caseDefault ? rest['default'] : fields[compareTo]);
  return tryDoc(function () {
    return _this2.write(value, buffer, offset, fieldInfo, rootNode);
  }, caseDefault ? "default" : compareTo);
}

function sizeOfSwitch(value, _ref3, rootNode) {
  var _this3 = this;

  var compareTo = _ref3.compareTo;
  var fields = _ref3.fields;

  var rest = _objectWithoutProperties(_ref3, ['compareTo', 'fields']);

  compareTo = getField(compareTo, rootNode);
  if (typeof fields[compareTo] === 'undefined' && typeof rest['default'] === "undefined") throw new Error(compareTo + " has no associated fieldInfo in switch");

  var caseDefault = typeof fields[compareTo] === 'undefined';
  var fieldInfo = getFieldInfo(caseDefault ? rest['default'] : fields[compareTo]);
  return tryDoc(function () {
    return _this3.sizeOf(value, fieldInfo, rootNode);
  }, caseDefault ? "default" : compareTo);
}

function readOption(buffer, offset, typeArgs, context) {
  var val = buffer.readUInt8(offset++);
  if (val !== 0) {
    var retval = this.read(buffer, offset, typeArgs, context);
    retval.size++;
    return retval;
  } else return { size: 1 };
}

function writeOption(value, buffer, offset, typeArgs, context) {
  if (value != null) {
    buffer.writeUInt8(1, offset++);
    offset = this.write(value, buffer, offset, typeArgs, context);
  } else buffer.writeUInt8(0, offset++);
  return offset;
}

function sizeOfOption(value, typeArgs, context) {
  return value == null ? 1 : this.sizeOf(value, typeArgs, context) + 1;
}


},{"../utils":393,"babel-runtime/helpers/object-without-properties":287}],387:[function(require,module,exports){
"use strict";

var _Object$keys = require("babel-runtime/core-js/object/keys")["default"];

function readLong(buffer, offset) {
  if (offset + 8 > buffer.length) return null;
  return {
    value: [buffer.readInt32BE(offset), buffer.readInt32BE(offset + 4)],
    size: 8
  };
}

function writeLong(value, buffer, offset) {
  buffer.writeInt32BE(value[0], offset);
  buffer.writeInt32BE(value[1], offset + 4);
  return offset + 8;
}

function generateFunctions(bufferReader, bufferWriter, size) {
  var reader = function reader(buffer, offset) {
    if (offset + size > buffer.length) return null;
    var value = buffer[bufferReader](offset);
    return {
      value: value,
      size: size
    };
  };
  var writer = function writer(value, buffer, offset) {
    buffer[bufferWriter](value, offset);
    return offset + size;
  };
  return [reader, writer, size];
}

var nums = {
  'byte': ["readInt8", "writeInt8", 1],
  'ubyte': ["readUInt8", "writeUInt8", 1],
  'short': ["readInt16BE", "writeInt16BE", 2],
  'ushort': ["readUInt16BE", "writeUInt16BE", 2],
  'int': ["readInt32BE", "writeInt32BE", 4],
  'float': ["readFloatBE", "writeFloatBE", 4],
  'double': ["readDoubleBE", "writeDoubleBE", 8]
};

var types = _Object$keys(nums).reduce(function (types, num) {
  types[num] = generateFunctions(nums[num][0], nums[num][1], nums[num][2]);
  return types;
}, {});
types["long"] = [readLong, writeLong, 8];

module.exports = types;


},{"babel-runtime/core-js/object/keys":281}],388:[function(require,module,exports){
'use strict';

var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

var _require = require("../utils");

var getField = _require.getField;
var tryDoc = _require.tryDoc;

module.exports = {
  'array': [readArray, writeArray, sizeOfArray],
  'count': [readCount, writeCount, sizeOfCount],
  'container': [readContainer, writeContainer, sizeOfContainer]
};

function evalCount(count, fields) {
  if (fields[count["field"]] in count["map"]) return count["map"][fields[count["field"]]];
  return count["default"];
}

function readArray(buffer, offset, _ref, rootNode) {
  var _this = this;

  var type = _ref.type;
  var count = _ref.count;
  var countType = _ref.countType;
  var countTypeArgs = _ref.countTypeArgs;

  var results = {
    value: [],
    size: 0
  };
  var c;
  if (typeof count === "object") c = evalCount(count, rootNode);else if (typeof count !== "undefined") c = getField(count, rootNode);else if (typeof countType !== "undefined") {
    var _tryDoc = tryDoc(function () {
      return _this.read(buffer, offset, { type: countType, typeArgs: countTypeArgs }, rootNode);
    }, "$count");

    var size = _tryDoc.size;
    var value = _tryDoc.value;

    results.size += size;
    offset += size;
    c = value;
  } else // TODO : broken schema, should probably error out.
    c = 0;
  for (var i = 0; i < c; i++) {
    var _tryDoc2 = tryDoc(function () {
      return _this.read(buffer, offset, type, rootNode);
    }, i);

    size = _tryDoc2.size;
    value = _tryDoc2.value;

    results.size += size;
    offset += size;
    results.value.push(value);
  }
  return results;
}

function writeArray(value, buffer, offset, _ref2, rootNode) {
  var _this2 = this;

  var type = _ref2.type;
  var count = _ref2.count;
  var countType = _ref2.countType;
  var countTypeArgs = _ref2.countTypeArgs;

  if (typeof count === "undefined" && typeof countType !== "undefined") offset = tryDoc(function () {
    return _this2.write(value.length, buffer, offset, { type: countType, typeArgs: countTypeArgs }, rootNode);
  }, "$count");else if (typeof count === "undefined") {// Broken schema, should probably error out
  }
  return value.reduce(function (offset, v, index) {
    return tryDoc(function () {
      return _this2.write(v, buffer, offset, type, rootNode);
    }, index);
  }, offset);
}

function sizeOfArray(value, _ref3, rootNode) {
  var _this3 = this;

  var type = _ref3.type;
  var count = _ref3.count;
  var countType = _ref3.countType;
  var countTypeArgs = _ref3.countTypeArgs;

  var size = 0;
  if (typeof count === "undefined" && typeof countType !== "undefined") size = tryDoc(function () {
    return _this3.sizeOf(value.length, { type: countType, typeArgs: countTypeArgs }, rootNode);
  }, "$count");

  return value.reduce(function (size, v, index) {
    return tryDoc(function () {
      return size + _this3.sizeOf(v, type, rootNode);
    }, index);
  }, size);
}

function readContainer(buffer, offset, typeArgs, context) {
  var _this4 = this;

  var results = {
    value: { "..": context },
    size: 0
  };
  typeArgs.forEach(function (_ref4) {
    var type = _ref4.type;
    var name = _ref4.name;
    var anon = _ref4.anon;

    tryDoc(function () {
      var readResults = _this4.read(buffer, offset, type, results.value);
      results.size += readResults.size;
      offset += readResults.size;
      if (anon) {
        if (readResults.value !== undefined) _Object$keys(readResults.value).forEach(function (key) {
          results.value[key] = readResults.value[key];
        });
      } else results.value[name] = readResults.value;
    }, name ? name : "unknown");
  });
  delete results.value[".."];
  return results;
}

function writeContainer(value, buffer, offset, typeArgs, context) {
  var _this5 = this;

  value[".."] = context;
  offset = typeArgs.reduce(function (offset, _ref5) {
    var type = _ref5.type;
    var name = _ref5.name;
    var anon = _ref5.anon;
    return tryDoc(function () {
      return _this5.write(anon ? value : value[name], buffer, offset, type, value);
    }, name ? name : "unknown");
  }, offset);
  delete value[".."];
  return offset;
}

function sizeOfContainer(value, typeArgs, context) {
  var _this6 = this;

  value[".."] = context;
  var size = typeArgs.reduce(function (size, _ref6) {
    var type = _ref6.type;
    var name = _ref6.name;
    var anon = _ref6.anon;
    return size + tryDoc(function () {
      return _this6.sizeOf(anon ? value : value[name], type, value);
    }, name ? name : "unknown");
  }, 0);
  delete value[".."];
  return size;
}

function readCount(buffer, offset, _ref7, rootNode) {
  var type = _ref7.type;

  return this.read(buffer, offset, type, rootNode);
}

function writeCount(value, buffer, offset, _ref8, rootNode) {
  var countFor = _ref8.countFor;
  var type = _ref8.type;

  // Actually gets the required field, and writes its length. Value is unused.
  // TODO : a bit hackityhack.
  return this.write(getField(countFor, rootNode).length, buffer, offset, type, rootNode);
}

function sizeOfCount(value, _ref9, rootNode) {
  var countFor = _ref9.countFor;
  var type = _ref9.type;

  // TODO : should I use value or getField().length ?
  return this.sizeOf(getField(countFor, rootNode).length, type, rootNode);
}


},{"../utils":393,"babel-runtime/core-js/object/keys":281}],389:[function(require,module,exports){
(function (Buffer){
'use strict';

var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

var assert = require('assert');

var _require = require("../utils");

var getField = _require.getField;
var tryDoc = _require.tryDoc;

module.exports = {
  'varint': [readVarInt, writeVarInt, sizeOfVarInt],
  'bool': [readBool, writeBool, 1],
  'pstring': [readPString, writePString, sizeOfPString],
  'buffer': [readBuffer, writeBuffer, sizeOfBuffer],
  'void': [readVoid, writeVoid, 0],
  'bitfield': [readBitField, writeBitField, sizeOfBitField],
  'cstring': [readCString, writeCString, sizeOfCString],
  'mapper': [readMapper, writeMapper, sizeOfMapper]
};

function readMapper(buffer, offset, _ref, rootNode) {
  var type = _ref.type;
  var mappings = _ref.mappings;

  var _read = this.read(buffer, offset, type, rootNode);

  var size = _read.size;
  var value = _read.value;

  var results = {
    size: size,
    value: mappings[value]
  };
  if (results.value == undefined) throw new Error(value + " is not in the mappings value");
  return results;
}

function writeMapper(value, buffer, offset, _ref2, rootNode) {
  var type = _ref2.type;
  var mappings = _ref2.mappings;

  var keys = _Object$keys(mappings);
  var mappedValue = null;
  for (var i = 0; i < keys.length; i++) {
    if (mappings[keys[i]] == value) {
      mappedValue = keys[i];
      break;
    }
  }
  if (mappedValue == null) throw new Error(value + " is not in the mappings value");
  return this.write(mappedValue, buffer, offset, type, rootNode);
}

function sizeOfMapper(value, _ref3, rootNode) {
  var type = _ref3.type;
  var mappings = _ref3.mappings;

  var keys = _Object$keys(mappings);
  var mappedValue = null;
  for (var i = 0; i < keys.length; i++) {
    if (mappings[keys[i]] == value) {
      mappedValue = keys[i];
      break;
    }
  }
  if (mappedValue == null) throw new Error(value + " is not in the mappings value");
  return this.sizeOf(mappedValue, type, rootNode);
}

function readVarInt(buffer, offset) {
  var result = 0;
  var shift = 0;
  var cursor = offset;

  while (true) {
    if (cursor + 1 > buffer.length) return null;
    var b = buffer.readUInt8(cursor);
    result |= (b & 0x7f) << shift; // Add the bits to our number, except MSB
    cursor++;
    if (!(b & 0x80)) {
      // If the MSB is not set, we return the number
      return {
        value: result,
        size: cursor - offset
      };
    }
    shift += 7; // we only have 7 bits, MSB being the return-trigger
    assert.ok(shift < 64, "varint is too big"); // Make sure our shift don't overflow.
  }
}

function sizeOfVarInt(value) {
  var cursor = 0;
  while (value & ~0x7F) {
    value >>>= 7;
    cursor++;
  }
  return cursor + 1;
}

function writeVarInt(value, buffer, offset) {
  var cursor = 0;
  while (value & ~0x7F) {
    buffer.writeUInt8(value & 0xFF | 0x80, offset + cursor);
    cursor++;
    value >>>= 7;
  }
  buffer.writeUInt8(value, offset + cursor);
  return offset + cursor + 1;
}

function readPString(buffer, offset, _ref4, rootNode) {
  var _this = this;

  var countType = _ref4.countType;
  var countTypeArgs = _ref4.countTypeArgs;

  var _tryDoc = tryDoc(function () {
    return _this.read(buffer, offset, { type: countType, typeArgs: countTypeArgs }, rootNode);
  }, "$count");

  var size = _tryDoc.size;
  var value = _tryDoc.value;

  var cursor = offset + size;
  var strEnd = cursor + value;
  if (strEnd > buffer.length) throw new Error("Missing characters in string, found size is " + buffer.length + " expected size was " + strEnd);

  return {
    value: buffer.toString('utf8', cursor, strEnd),
    size: strEnd - offset
  };
}

function writePString(value, buffer, offset, _ref5, rootNode) {
  var _this2 = this;

  var countType = _ref5.countType;
  var countTypeArgs = _ref5.countTypeArgs;

  var length = Buffer.byteLength(value, 'utf8');
  offset = tryDoc(function () {
    return _this2.write(length, buffer, offset, { type: countType, typeArgs: countTypeArgs }, rootNode);
  }, "$count");
  buffer.write(value, offset, length, 'utf8');
  return offset + length;
}

function sizeOfPString(value, _ref6, rootNode) {
  var _this3 = this;

  var countType = _ref6.countType;
  var countTypeArgs = _ref6.countTypeArgs;

  var length = Buffer.byteLength(value, 'utf8');
  var size = tryDoc(function () {
    return _this3.sizeOf(length, { type: countType, typeArgs: countTypeArgs }, rootNode);
  }, "$count");
  return size + length;
}

function readBool(buffer, offset) {
  if (offset + 1 > buffer.length) return null;
  var value = buffer.readInt8(offset);
  return {
    value: !!value,
    size: 1
  };
}

function writeBool(value, buffer, offset) {
  buffer.writeInt8(+value, offset);
  return offset + 1;
}

function readBuffer(buffer, offset, _ref7, rootNode) {
  var count = _ref7.count;
  var countType = _ref7.countType;
  var countTypeArgs = _ref7.countTypeArgs;

  var totalSize = 0;
  var totalCount;
  if (typeof count !== "undefined") totalCount = getField(count, rootNode);else if (typeof countType !== "undefined") {
    var _read2 = this.read(buffer, offset, { type: countType, typeArgs: countTypeArgs }, rootNode);

    var value = _read2.value;
    var size = _read2.size;

    totalSize += size;
    offset += size;
    totalCount = value;
  }
  return {
    value: buffer.slice(offset, offset + totalCount),
    size: totalSize + totalCount
  };
}

function writeBuffer(value, buffer, offset, _ref8, rootNode) {
  var count = _ref8.count;
  var countType = _ref8.countType;
  var countTypeArgs = _ref8.countTypeArgs;

  if (typeof count === "undefined" && typeof countType !== "undefined") {
    offset = this.write(value.length, buffer, offset, { type: countType, typeArgs: countTypeArgs }, rootNode);
  } else if (typeof count === "undefined") {// Broken schema, should probably error out
  }
  value.copy(buffer, offset);
  return offset + value.length;
}

function sizeOfBuffer(value, _ref9, rootNode) {
  var count = _ref9.count;
  var countType = _ref9.countType;
  var countTypeArgs = _ref9.countTypeArgs;

  var size = 0;
  if (typeof count === "undefined" && typeof countType !== "undefined") {
    size = this.sizeOf(value.length, { type: countType, typeArgs: countTypeArgs }, rootNode);
  }
  return size + value.length;
}

function readVoid() {
  return {
    value: undefined,
    size: 0
  };
}

function writeVoid(value, buffer, offset) {
  return offset;
}

function generateBitMask(n) {
  return (1 << n) - 1;
}

function readBitField(buffer, offset, typeArgs) {
  var beginOffset = offset;
  var curVal = null;
  var bits = 0;
  var results = {};
  results.value = typeArgs.reduce(function (acc, _ref10) {
    var size = _ref10.size;
    var signed = _ref10.signed;
    var name = _ref10.name;

    var currentSize = size;
    var val = 0;
    while (currentSize > 0) {
      if (bits == 0) {
        curVal = buffer[offset++];
        bits = 8;
      }
      var bitsToRead = Math.min(currentSize, bits);
      val = val << bitsToRead | (curVal & generateBitMask(bits)) >> bits - bitsToRead;
      bits -= bitsToRead;
      currentSize -= bitsToRead;
    }
    if (signed && val >= 1 << size - 1) val -= 1 << size;
    acc[name] = val;
    return acc;
  }, {});
  results.size = offset - beginOffset;
  return results;
}
function writeBitField(value, buffer, offset, typeArgs) {
  var toWrite = 0;
  var bits = 0;
  typeArgs.forEach(function (_ref11) {
    var size = _ref11.size;
    var signed = _ref11.signed;
    var name = _ref11.name;

    var val = value[name];
    if (!signed && val < 0 || signed && val < -(1 << size - 1)) throw new Error(value + " < " + signed ? -(1 << size - 1) : 0);else if (!signed && val >= 1 << size || signed && val >= (1 << size - 1) - 1) throw new Error(value + " >= " + signed ? 1 << size : (1 << size - 1) - 1);
    while (size > 0) {
      var writeBits = Math.min(8 - bits, size);
      toWrite = toWrite << writeBits | val >> size - writeBits & generateBitMask(writeBits);
      size -= writeBits;
      bits += writeBits;
      if (bits === 8) {
        buffer[offset++] = toWrite;
        bits = 0;
        toWrite = 0;
      }
    }
  });
  if (bits != 0) buffer[offset++] = toWrite << 8 - bits;
  return offset;
}

function sizeOfBitField(value, typeArgs) {
  return Math.ceil(typeArgs.reduce(function (acc, _ref12) {
    var size = _ref12.size;

    return acc + size;
  }, 0) / 8);
}

function readCString(buffer, offset) {
  var str = "";
  while (offset < buffer.length && buffer[offset] != 0x00) str += buffer[offset++];
  if (offset < buffer.length) return null;else return str;
}

function writeCString(value, buffer, offset) {
  buffer.write(value, offset);
  offset += value.length;
  buffer.writeInt8(0x00, offset);
  return offset + 1;
}

function sizeOfCString(value) {
  return value.length + 1;
}


}).call(this,require("buffer").Buffer)
},{"../utils":393,"assert":2,"babel-runtime/core-js/object/keys":281,"buffer":17}],390:[function(require,module,exports){
"use strict";

var ProtoDef = require("./protodef");
var proto = new ProtoDef();

module.exports = {
  ProtoDef: ProtoDef,
  Serializer: require("./serializer").Serializer,
  Parser: require("./serializer").Parser,
  types: proto.types,
  utils: require("./utils")
};


},{"./protodef":391,"./serializer":392,"./utils":393}],391:[function(require,module,exports){
(function (Buffer){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

var _require = require('./utils');

var getFieldInfo = _require.getFieldInfo;
var tryCatch = _require.tryCatch;

var reduce = require('lodash.reduce');

function isFieldInfo(type) {
  return typeof type === "string" || Array.isArray(type) && typeof type[0] === "string" || type.type;
}

function findArgs(acc, v, k) {
  if (typeof v === "string" && v.charAt(0) === '$') acc.push({ "path": k, "val": v.substr(1) });else if (Array.isArray(v) || typeof v === "object") acc = acc.concat(reduce(v, findArgs, []).map(function (v) {
    return { "path": k + "." + v.path, "val": v.val };
  }));
  return acc;
}

function setField(path, val, into) {
  var c = path.split('.').reverse();
  while (c.length > 1) {
    into = into[c.pop()];
  }
  into[c.pop()] = val;
}

function extendType(functions, defaultTypeArgs) {
  var json = JSON.stringify(defaultTypeArgs);
  var argPos = reduce(defaultTypeArgs, findArgs, []);
  function produceArgs(typeArgs) {
    var args = JSON.parse(json);
    argPos.forEach(function (v) {
      setField(v.path, typeArgs[v.val], args);
    });
    return args;
  }
  return [function read(buffer, offset, typeArgs, context) {
    return functions[0].call(this, buffer, offset, produceArgs(typeArgs), context);
  }, function write(value, buffer, offset, typeArgs, context) {
    return functions[1].call(this, value, buffer, offset, produceArgs(typeArgs), context);
  }, function sizeOf(value, typeArgs, context) {
    if (typeof functions[2] === "function") return functions[2].call(this, value, produceArgs(typeArgs), context);else return functions[2];
  }];
}

var ProtoDef = (function () {
  function ProtoDef() {
    _classCallCheck(this, ProtoDef);

    this.types = {};

    this.addDefaultTypes();
  }

  _createClass(ProtoDef, [{
    key: 'addDefaultTypes',
    value: function addDefaultTypes() {
      this.addTypes(require("./datatypes/numeric"));
      this.addTypes(require("./datatypes/utils"));
      this.addTypes(require("./datatypes/structures"));
      this.addTypes(require("./datatypes/conditional"));
    }
  }, {
    key: 'addType',
    value: function addType(name, functions) {
      if (functions === "native") return;
      if (isFieldInfo(functions)) {
        var _getFieldInfo = getFieldInfo(functions);

        var type = _getFieldInfo.type;
        var typeArgs = _getFieldInfo.typeArgs;

        this.types[name] = extendType(this.types[type], typeArgs);
      } else this.types[name] = functions;
    }
  }, {
    key: 'addTypes',
    value: function addTypes(types) {
      var _this = this;

      _Object$keys(types).forEach(function (name) {
        return _this.addType(name, types[name]);
      });
    }
  }, {
    key: 'read',
    value: function read(buffer, cursor, _fieldInfo, rootNodes) {
      var _getFieldInfo2 = getFieldInfo(_fieldInfo);

      var type = _getFieldInfo2.type;
      var typeArgs = _getFieldInfo2.typeArgs;

      var typeFunctions = this.types[type];
      if (!typeFunctions) {
        return {
          error: new Error("missing data type: " + type)
        };
      }
      var readResults = typeFunctions[0].call(this, buffer, cursor, typeArgs, rootNodes);
      if (readResults == null) {
        throw new Error("Reader returned null : " + JSON.stringify({ type: type, typeArgs: typeArgs }));
      }
      if (readResults && readResults.error) return { error: readResults.error };
      return readResults;
    }
  }, {
    key: 'write',
    value: function write(value, buffer, offset, _fieldInfo, rootNode) {
      var _getFieldInfo3 = getFieldInfo(_fieldInfo);

      var type = _getFieldInfo3.type;
      var typeArgs = _getFieldInfo3.typeArgs;

      var typeFunctions = this.types[type];
      if (!typeFunctions) {
        return {
          error: new Error("missing data type: " + type)
        };
      }
      return typeFunctions[1].call(this, value, buffer, offset, typeArgs, rootNode);
    }
  }, {
    key: 'sizeOf',
    value: function sizeOf(value, _fieldInfo, rootNode) {
      var _getFieldInfo4 = getFieldInfo(_fieldInfo);

      var type = _getFieldInfo4.type;
      var typeArgs = _getFieldInfo4.typeArgs;

      var typeFunctions = this.types[type];
      if (!typeFunctions) {
        throw new Error("missing data type: " + type);
      }
      if (typeof typeFunctions[2] === 'function') {
        return typeFunctions[2].call(this, value, typeArgs, rootNode);
      } else {
        return typeFunctions[2];
      }
    }
  }, {
    key: 'createPacketBuffer',
    value: function createPacketBuffer(type, packet) {
      var _this2 = this;

      var length = tryCatch(function () {
        return _this2.sizeOf(packet, type, {});
      }, function (e) {
        e.message = 'SizeOf error for ' + e.field + ' : ' + e.message;
        throw e;
      });
      var buffer = new Buffer(length);
      tryCatch(function () {
        return _this2.write(packet, buffer, 0, type, {});
      }, function (e) {
        e.message = 'Write error for ' + e.field + ' : ' + e.message;
        throw e;
      });
      return buffer;
    }
  }, {
    key: 'parsePacketBuffer',
    value: function parsePacketBuffer(type, buffer) {
      var _this3 = this;

      var _tryCatch = tryCatch(function () {
        return _this3.read(buffer, 0, type, {});
      }, function (e) {
        e.message = 'Read error for ' + e.field + ' : ' + e.message;
        throw e;
      });

      var value = _tryCatch.value;
      var size = _tryCatch.size;

      return {
        data: value,
        metadata: {
          size: size
        },
        buffer: buffer
      };
    }
  }]);

  return ProtoDef;
})();

module.exports = ProtoDef;


}).call(this,require("buffer").Buffer)
},{"./datatypes/conditional":386,"./datatypes/numeric":387,"./datatypes/structures":388,"./datatypes/utils":389,"./utils":393,"babel-runtime/core-js/object/keys":281,"babel-runtime/helpers/class-call-check":283,"babel-runtime/helpers/create-class":284,"buffer":17,"lodash.reduce":326}],392:[function(require,module,exports){
"use strict";

var _get = require("babel-runtime/helpers/get")["default"];

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _createClass = require("babel-runtime/helpers/create-class")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var Transform = require("readable-stream").Transform;

var Serializer = (function (_Transform) {
  _inherits(Serializer, _Transform);

  function Serializer(proto, mainType) {
    _classCallCheck(this, Serializer);

    _get(Object.getPrototypeOf(Serializer.prototype), "constructor", this).call(this, { writableObjectMode: true });
    this.proto = proto;
    this.mainType = mainType;
  }

  _createClass(Serializer, [{
    key: "createPacketBuffer",
    value: function createPacketBuffer(packet) {
      return this.proto.createPacketBuffer(this.mainType, packet);
    }
  }, {
    key: "_transform",
    value: function _transform(chunk, enc, cb) {
      try {
        var buf = this.createPacketBuffer(chunk);
        this.push(buf);
        return cb();
      } catch (e) {
        return cb(e);
      }
    }
  }]);

  return Serializer;
})(Transform);

var Parser = (function (_Transform2) {
  _inherits(Parser, _Transform2);

  function Parser(proto, mainType) {
    _classCallCheck(this, Parser);

    _get(Object.getPrototypeOf(Parser.prototype), "constructor", this).call(this, { readableObjectMode: true });
    this.proto = proto;
    this.mainType = mainType;
  }

  _createClass(Parser, [{
    key: "parsePacketBuffer",
    value: function parsePacketBuffer(buffer) {
      return this.proto.parsePacketBuffer(this.mainType, buffer);
    }
  }, {
    key: "_transform",
    value: function _transform(chunk, enc, cb) {
      var packet;
      try {
        packet = this.parsePacketBuffer(chunk);
      } catch (e) {
        return cb(e);
      }
      this.push(packet);
      return cb();
    }
  }]);

  return Parser;
})(Transform);

module.exports = {
  Serializer: Serializer,
  Parser: Parser
};


},{"babel-runtime/helpers/class-call-check":283,"babel-runtime/helpers/create-class":284,"babel-runtime/helpers/get":285,"babel-runtime/helpers/inherits":286,"readable-stream":400}],393:[function(require,module,exports){
"use strict";

module.exports = {
  getField: getField,
  getFieldInfo: getFieldInfo,
  addErrorField: addErrorField,
  tryCatch: tryCatch,
  tryDoc: tryDoc
};

function getField(countField, context) {
  var countFieldArr = countField.split("/");
  var i = 0;
  if (countFieldArr[i] === "") {
    while (context.hasOwnProperty("..")) context = context[".."];
    i++;
  }
  for (; i < countFieldArr.length; i++) context = context[countFieldArr[i]];
  return context;
}

function getFieldInfo(fieldInfo) {
  if (typeof fieldInfo === "string") return { type: fieldInfo };else if (Array.isArray(fieldInfo)) return { type: fieldInfo[0], typeArgs: fieldInfo[1] };else if (typeof fieldInfo.type === "string") return fieldInfo;else throw new Error("Not a fieldinfo");
}

function addErrorField(e, field) {
  e.field = e.field ? field + "." + e.field : field;
  throw e;
}

function tryCatch(tryfn, catchfn) {
  try {
    return tryfn();
  } catch (e) {
    catchfn(e);
  }
}

function tryDoc(tryfn, field) {
  return tryCatch(tryfn, function (e) {
    return addErrorField(e, field);
  });
}


},{}],394:[function(require,module,exports){
module.exports = require('./dist/index.js');

},{"./dist/index.js":390}],395:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

module.exports = Duplex;

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}
/*</replacement>*/


/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

forEach(objectKeys(Writable.prototype), function(method) {
  if (!Duplex.prototype[method])
    Duplex.prototype[method] = Writable.prototype[method];
});

function Duplex(options) {
  if (!(this instanceof Duplex))
    return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false)
    this.readable = false;

  if (options && options.writable === false)
    this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false)
    this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended)
    return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  process.nextTick(this.end.bind(this));
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

}).call(this,require('_process'))
},{"./_stream_readable":397,"./_stream_writable":399,"_process":219,"core-util-is":312,"inherits":313}],396:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough))
    return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function(chunk, encoding, cb) {
  cb(null, chunk);
};

},{"./_stream_transform":398,"core-util-is":312,"inherits":313}],397:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/


/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Readable.ReadableState = ReadableState;

var EE = require('events').EventEmitter;

/*<replacement>*/
if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

var Stream = require('stream');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var StringDecoder;


/*<replacement>*/
var debug = require('util');
if (debug && debug.debuglog) {
  debug = debug.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/


util.inherits(Readable, Stream);

function ReadableState(options, stream) {
  var Duplex = require('./_stream_duplex');

  options = options || {};

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.buffer = [];
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;


  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex)
    this.objectMode = this.objectMode || !!options.readableObjectMode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // when piping, we only care about 'readable' events that happen
  // after read()ing all the bytes and not getting any pushback.
  this.ranOut = false;

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder)
      StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  var Duplex = require('./_stream_duplex');

  if (!(this instanceof Readable))
    return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  Stream.call(this);
}

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
  var state = this._readableState;

  if (util.isString(chunk) && !state.objectMode) {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding) {
      chunk = new Buffer(chunk, encoding);
      encoding = '';
    }
  }

  return readableAddChunk(this, state, chunk, encoding, false);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true);
};

function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);
  if (er) {
    stream.emit('error', er);
  } else if (util.isNullOrUndefined(chunk)) {
    state.reading = false;
    if (!state.ended)
      onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error('stream.push() after EOF');
      stream.emit('error', e);
    } else if (state.endEmitted && addToFront) {
      var e = new Error('stream.unshift() after end event');
      stream.emit('error', e);
    } else {
      if (state.decoder && !addToFront && !encoding)
        chunk = state.decoder.write(chunk);

      if (!addToFront)
        state.reading = false;

      // if we want the data now, just emit it.
      if (state.flowing && state.length === 0 && !state.sync) {
        stream.emit('data', chunk);
        stream.read(0);
      } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront)
          state.buffer.unshift(chunk);
        else
          state.buffer.push(chunk);

        if (state.needReadable)
          emitReadable(stream);
      }

      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }

  return needMoreData(state);
}



// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended &&
         (state.needReadable ||
          state.length < state.highWaterMark ||
          state.length === 0);
}

// backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
  if (!StringDecoder)
    StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 128MB
var MAX_HWM = 0x800000;
function roundUpToNextPowerOf2(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2
    n--;
    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
    n++;
  }
  return n;
}

function howMuchToRead(n, state) {
  if (state.length === 0 && state.ended)
    return 0;

  if (state.objectMode)
    return n === 0 ? 0 : 1;

  if (isNaN(n) || util.isNull(n)) {
    // only flow one buffer at a time
    if (state.flowing && state.buffer.length)
      return state.buffer[0].length;
    else
      return state.length;
  }

  if (n <= 0)
    return 0;

  // If we're asking for more than the target buffer level,
  // then raise the water mark.  Bump up to the next highest
  // power of 2, to prevent increasing it excessively in tiny
  // amounts.
  if (n > state.highWaterMark)
    state.highWaterMark = roundUpToNextPowerOf2(n);

  // don't have that much.  return null, unless we've ended.
  if (n > state.length) {
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    } else
      return state.length;
  }

  return n;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
  debug('read', n);
  var state = this._readableState;
  var nOrig = n;

  if (!util.isNumber(n) || n > 0)
    state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 &&
      state.needReadable &&
      (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended)
      endReadable(this);
    else
      emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0)
      endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  }

  if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0)
      state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
  }

  // If _read pushed data synchronously, then `reading` will be false,
  // and we need to re-evaluate how much data we can return to the user.
  if (doRead && !state.reading)
    n = howMuchToRead(nOrig, state);

  var ret;
  if (n > 0)
    ret = fromList(n, state);
  else
    ret = null;

  if (util.isNull(ret)) {
    state.needReadable = true;
    n = 0;
  }

  state.length -= n;

  // If we have nothing in the buffer, then we want to know
  // as soon as we *do* get something into the buffer.
  if (state.length === 0 && !state.ended)
    state.needReadable = true;

  // If we tried to read() past the EOF, then emit end on the next tick.
  if (nOrig !== n && state.ended && state.length === 0)
    endReadable(this);

  if (!util.isNull(ret))
    this.emit('data', ret);

  return ret;
};

function chunkInvalid(state, chunk) {
  var er = null;
  if (!util.isBuffer(chunk) &&
      !util.isString(chunk) &&
      !util.isNullOrUndefined(chunk) &&
      !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}


function onEofChunk(stream, state) {
  if (state.decoder && !state.ended) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync)
      process.nextTick(function() {
        emitReadable_(stream);
      });
    else
      emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}


// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(function() {
      maybeReadMore_(stream, state);
    });
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended &&
         state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;
    else
      len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
  this.emit('error', new Error('not implemented'));
};

Readable.prototype.pipe = function(dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
              dest !== process.stdout &&
              dest !== process.stderr;

  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted)
    process.nextTick(endFn);
  else
    src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable) {
    debug('onunpipe');
    if (readable === src) {
      cleanup();
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', cleanup);
    src.removeListener('data', ondata);

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain &&
        (!dest._writableState || dest._writableState.needDrain))
      ondrain();
  }

  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    if (false === ret) {
      debug('false write response, pause',
            src._readableState.awaitDrain);
      src._readableState.awaitDrain++;
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EE.listenerCount(dest, 'error') === 0)
      dest.emit('error', er);
  }
  // This is a brutally ugly hack to make sure that our error handler
  // is attached before any userland ones.  NEVER DO THIS.
  if (!dest._events || !dest._events.error)
    dest.on('error', onerror);
  else if (isArray(dest._events.error))
    dest._events.error.unshift(onerror);
  else
    dest._events.error = [onerror, dest._events.error];



  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain)
      state.awaitDrain--;
    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}


Readable.prototype.unpipe = function(dest) {
  var state = this._readableState;

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0)
    return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes)
      return this;

    if (!dest)
      dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest)
      dest.emit('unpipe', this);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++)
      dests[i].emit('unpipe', this);
    return this;
  }

  // try to find the right one.
  var i = indexOf(state.pipes, dest);
  if (i === -1)
    return this;

  state.pipes.splice(i, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1)
    state.pipes = state.pipes[0];

  dest.emit('unpipe', this);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  // If listening to data, and it has not explicitly been paused,
  // then call resume to start the flow of data on the next tick.
  if (ev === 'data' && false !== this._readableState.flowing) {
    this.resume();
  }

  if (ev === 'readable' && this.readable) {
    var state = this._readableState;
    if (!state.readableListening) {
      state.readableListening = true;
      state.emittedReadable = false;
      state.needReadable = true;
      if (!state.reading) {
        var self = this;
        process.nextTick(function() {
          debug('readable nexttick read 0');
          self.read(0);
        });
      } else if (state.length) {
        emitReadable(this, state);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    if (!state.reading) {
      debug('resume read 0');
      this.read(0);
    }
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(function() {
      resume_(stream, state);
    });
  }
}

function resume_(stream, state) {
  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading)
    stream.read(0);
}

Readable.prototype.pause = function() {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  if (state.flowing) {
    do {
      var chunk = stream.read();
    } while (null !== chunk && state.flowing);
  }
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function() {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length)
        self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function(chunk) {
    debug('wrapped data');
    if (state.decoder)
      chunk = state.decoder.write(chunk);
    if (!chunk || !state.objectMode && !chunk.length)
      return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {
      this[i] = function(method) { return function() {
        return stream[method].apply(stream, arguments);
      }}(i);
    }
  }

  // proxy certain important events.
  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
  forEach(events, function(ev) {
    stream.on(ev, self.emit.bind(self, ev));
  });

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function(n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};



// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
function fromList(n, state) {
  var list = state.buffer;
  var length = state.length;
  var stringMode = !!state.decoder;
  var objectMode = !!state.objectMode;
  var ret;

  // nothing in the list, definitely empty.
  if (list.length === 0)
    return null;

  if (length === 0)
    ret = null;
  else if (objectMode)
    ret = list.shift();
  else if (!n || n >= length) {
    // read it all, truncate the array.
    if (stringMode)
      ret = list.join('');
    else
      ret = Buffer.concat(list, length);
    list.length = 0;
  } else {
    // read just some of it.
    if (n < list[0].length) {
      // just take a part of the first list item.
      // slice is the same for buffers and strings.
      var buf = list[0];
      ret = buf.slice(0, n);
      list[0] = buf.slice(n);
    } else if (n === list[0].length) {
      // first list is a perfect match
      ret = list.shift();
    } else {
      // complex case.
      // we have enough to cover it, but it spans past the first buffer.
      if (stringMode)
        ret = '';
      else
        ret = new Buffer(n);

      var c = 0;
      for (var i = 0, l = list.length; i < l && c < n; i++) {
        var buf = list[0];
        var cpy = Math.min(n - c, buf.length);

        if (stringMode)
          ret += buf.slice(0, cpy);
        else
          buf.copy(ret, c, 0, cpy);

        if (cpy < buf.length)
          list[0] = buf.slice(cpy);
        else
          list.shift();

        c += cpy;
      }
    }
  }

  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0)
    throw new Error('endReadable called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(function() {
      // Check that we didn't get one last unshift.
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
      }
    });
  }
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf (xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}

}).call(this,require('_process'))
},{"./_stream_duplex":395,"_process":219,"buffer":17,"core-util-is":312,"events":213,"inherits":313,"isarray":314,"stream":233,"string_decoder/":407,"util":3}],398:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);


function TransformState(options, stream) {
  this.afterTransform = function(er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb)
    return stream.emit('error', new Error('no writecb in Transform class'));

  ts.writechunk = null;
  ts.writecb = null;

  if (!util.isNullOrUndefined(data))
    stream.push(data);

  if (cb)
    cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}


function Transform(options) {
  if (!(this instanceof Transform))
    return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(options, this);

  // when the writable side finishes, then flush out anything remaining.
  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  this.once('prefinish', function() {
    if (util.isFunction(this._flush))
      this._flush(function(er) {
        done(stream, er);
      });
    else
      done(stream);
  });
}

Transform.prototype.push = function(chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
  throw new Error('not implemented');
};

Transform.prototype._write = function(chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform ||
        rs.needReadable ||
        rs.length < rs.highWaterMark)
      this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
  var ts = this._transformState;

  if (!util.isNull(ts.writechunk) && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};


function done(stream, er) {
  if (er)
    return stream.emit('error', er);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length)
    throw new Error('calling transform done when ws.length != 0');

  if (ts.transforming)
    throw new Error('calling transform done when still transforming');

  return stream.push(null);
}

},{"./_stream_duplex":395,"core-util-is":312,"inherits":313}],399:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, cb), and it'll handle all
// the drain event emission and buffering.

module.exports = Writable;

/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Writable.WritableState = WritableState;


/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Stream = require('stream');

util.inherits(Writable, Stream);

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
}

function WritableState(options, stream) {
  var Duplex = require('./_stream_duplex');

  options = options || {};

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex)
    this.objectMode = this.objectMode || !!options.writableObjectMode;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function(er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.buffer = [];

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;
}

function Writable(options) {
  var Duplex = require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, though they're not
  // instanceof Writable, they're instanceof Readable.
  if (!(this instanceof Writable) && !(this instanceof Duplex))
    return new Writable(options);

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
  this.emit('error', new Error('Cannot pipe. Not readable.'));
};


function writeAfterEnd(stream, state, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  process.nextTick(function() {
    cb(er);
  });
}

// If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  if (!util.isBuffer(chunk) &&
      !util.isString(chunk) &&
      !util.isNullOrUndefined(chunk) &&
      !state.objectMode) {
    var er = new TypeError('Invalid non-string/buffer chunk');
    stream.emit('error', er);
    process.nextTick(function() {
      cb(er);
    });
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function(chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  if (util.isFunction(encoding)) {
    cb = encoding;
    encoding = null;
  }

  if (util.isBuffer(chunk))
    encoding = 'buffer';
  else if (!encoding)
    encoding = state.defaultEncoding;

  if (!util.isFunction(cb))
    cb = function() {};

  if (state.ended)
    writeAfterEnd(this, state, cb);
  else if (validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function() {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function() {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing &&
        !state.corked &&
        !state.finished &&
        !state.bufferProcessing &&
        state.buffer.length)
      clearBuffer(this, state);
  }
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode &&
      state.decodeStrings !== false &&
      util.isString(chunk)) {
    chunk = new Buffer(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, chunk, encoding, cb) {
  chunk = decodeChunk(state, chunk, encoding);
  if (util.isBuffer(chunk))
    encoding = 'buffer';
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret)
    state.needDrain = true;

  if (state.writing || state.corked)
    state.buffer.push(new WriteReq(chunk, encoding, cb));
  else
    doWrite(stream, state, false, len, chunk, encoding, cb);

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev)
    stream._writev(chunk, state.onwrite);
  else
    stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  if (sync)
    process.nextTick(function() {
      state.pendingcb--;
      cb(er);
    });
  else {
    state.pendingcb--;
    cb(er);
  }

  stream._writableState.errorEmitted = true;
  stream.emit('error', er);
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er)
    onwriteError(stream, state, sync, er, cb);
  else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(stream, state);

    if (!finished &&
        !state.corked &&
        !state.bufferProcessing &&
        state.buffer.length) {
      clearBuffer(stream, state);
    }

    if (sync) {
      process.nextTick(function() {
        afterWrite(stream, state, finished, cb);
      });
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished)
    onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}


// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;

  if (stream._writev && state.buffer.length > 1) {
    // Fast case, write everything using _writev()
    var cbs = [];
    for (var c = 0; c < state.buffer.length; c++)
      cbs.push(state.buffer[c].callback);

    // count the one we are adding, as well.
    // TODO(isaacs) clean this up
    state.pendingcb++;
    doWrite(stream, state, true, state.length, state.buffer, '', function(err) {
      for (var i = 0; i < cbs.length; i++) {
        state.pendingcb--;
        cbs[i](err);
      }
    });

    // Clear buffer
    state.buffer = [];
  } else {
    // Slow case, write chunks one-by-one
    for (var c = 0; c < state.buffer.length; c++) {
      var entry = state.buffer[c];
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);

      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        c++;
        break;
      }
    }

    if (c < state.buffer.length)
      state.buffer = state.buffer.slice(c);
    else
      state.buffer.length = 0;
  }

  state.bufferProcessing = false;
}

Writable.prototype._write = function(chunk, encoding, cb) {
  cb(new Error('not implemented'));

};

Writable.prototype._writev = null;

Writable.prototype.end = function(chunk, encoding, cb) {
  var state = this._writableState;

  if (util.isFunction(chunk)) {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (util.isFunction(encoding)) {
    cb = encoding;
    encoding = null;
  }

  if (!util.isNullOrUndefined(chunk))
    this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished)
    endWritable(this, state, cb);
};


function needFinish(stream, state) {
  return (state.ending &&
          state.length === 0 &&
          !state.finished &&
          !state.writing);
}

function prefinish(stream, state) {
  if (!state.prefinished) {
    state.prefinished = true;
    stream.emit('prefinish');
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(stream, state);
  if (need) {
    if (state.pendingcb === 0) {
      prefinish(stream, state);
      state.finished = true;
      stream.emit('finish');
    } else
      prefinish(stream, state);
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished)
      process.nextTick(cb);
    else
      stream.once('finish', cb);
  }
  state.ended = true;
}

}).call(this,require('_process'))
},{"./_stream_duplex":395,"_process":219,"buffer":17,"core-util-is":312,"inherits":313,"stream":233}],400:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = require('stream');
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":395,"./lib/_stream_passthrough.js":396,"./lib/_stream_readable.js":397,"./lib/_stream_transform.js":398,"./lib/_stream_writable.js":399,"stream":233}],401:[function(require,module,exports){
arguments[4][221][0].apply(exports,arguments)
},{"./_stream_readable":403,"./_stream_writable":405,"core-util-is":312,"dup":221,"inherits":313,"process-nextick-args":385}],402:[function(require,module,exports){
arguments[4][222][0].apply(exports,arguments)
},{"./_stream_transform":404,"core-util-is":312,"dup":222,"inherits":313}],403:[function(require,module,exports){
arguments[4][223][0].apply(exports,arguments)
},{"./_stream_duplex":401,"_process":219,"buffer":17,"core-util-is":312,"dup":223,"events":213,"inherits":313,"isarray":314,"process-nextick-args":385,"string_decoder/":407,"util":3}],404:[function(require,module,exports){
arguments[4][224][0].apply(exports,arguments)
},{"./_stream_duplex":401,"core-util-is":312,"dup":224,"inherits":313}],405:[function(require,module,exports){
arguments[4][225][0].apply(exports,arguments)
},{"./_stream_duplex":401,"buffer":17,"core-util-is":312,"dup":225,"events":213,"inherits":313,"process-nextick-args":385,"util-deprecate":408}],406:[function(require,module,exports){
arguments[4][230][0].apply(exports,arguments)
},{"./lib/_stream_duplex.js":401,"./lib/_stream_passthrough.js":402,"./lib/_stream_readable.js":403,"./lib/_stream_transform.js":404,"./lib/_stream_writable.js":405,"dup":230}],407:[function(require,module,exports){
arguments[4][234][0].apply(exports,arguments)
},{"buffer":17,"dup":234}],408:[function(require,module,exports){
arguments[4][228][0].apply(exports,arguments)
},{"dup":228}],409:[function(require,module,exports){
(function (Buffer){
var crypto = require('crypto');

// error codes
var invalidNamespace =
  'options.namespace must be a string or a Buffer ' +
  'containing a valid UUID, or a UUID object';

var invalidName =
  'options.name must be either a string or a Buffer';

var invalidMacAddress =
  "invalid options.mac - must either not be set, the value `false`, " +
  "a Buffer of length 6, or a MAC address as a string";

var moreThan10000 =
  "can not generate more than 10000 UUIDs per second";

// Node ID according to rfc4122#section-4.5
var randomHost = crypto.randomBytes(16);
randomHost[0] = randomHost[0] | 0x01;

// randomize clockSeq initially, as per rfc4122#section-4.1.5
var seed = crypto.randomBytes(2);
var clockSeq = (seed[0] | (seed[1] << 8)) & 0x3fff;

// clock values
var lastMTime = 0;
var lastNTime = 0;

// lookup table hex to byte
var hex2byte = {};

// lookup table byte to hex
var byte2hex = [];

// populate lookup tables
for (var i = 0; i < 256; i++) {
    var hex = (i + 0x100).toString(16).substr(1);
    hex2byte[hex] = i;
    byte2hex[i] = hex;
}

function parseMacAddress(address) {
    var buffer = new Buffer(6);
    buffer[0] = hex2byte[address[0] + address[1]];
    buffer[1] = hex2byte[address[3] + address[4]];
    buffer[2] = hex2byte[address[6] + address[7]];
    buffer[3] = hex2byte[address[9] + address[10]];
    buffer[4] = hex2byte[address[12] + address[13]];
    buffer[5] = hex2byte[address[15] + address[16]];
    return buffer;
}

// MAC address for v1 uuids
var macAddress = randomHost;
var macAddressLoaded = false;

require('macaddress').one(function (err, result) {
    if (!err) {
        macAddress = parseMacAddress(result);
    }
    macAddressLoaded = true;
});

// UUID class
var UUID = function (uuid) {
    
    var check = UUID.check(uuid);
    if (!check) {
        throw "not a UUID";
    }

    this.version = check.version;
    this.variant = check.variant;

    this[check.format] = uuid;
};

UUID.prototype.toString = function () {
    if (!this.ascii) {
        this.ascii = UUID.stringify(this.binary);
    }
    return this.ascii;
};

UUID.prototype.toBuffer = function () {
    if (!this.binary) {
        this.binary = UUID.parse(this.ascii);
    }
    return new Buffer(this.binary);
};

UUID.prototype.inspect = function () {
    return "UUID v" + this.version + " " + this.toString();
};

function error(message, callback) {
    if (callback) {
        callback(message, null);
    } else {
        throw new Error(message);
    }
}

// read stringified uuid into a Buffer
function parse(string) {
    
    var buffer = new Buffer(16);
    var j = 0;
    for (var i = 0; i < 16; i++) {
        buffer[i] = hex2byte[string[j++] + string[j++]];
        if (i == 3 || i == 5 || i == 7 || i == 9) {
            j += 1;
        }
    }

    return buffer;
}

// according to rfc4122#section-4.1.1
function getVariant(bits) {
    switch (bits) {
        case 0: case 1: case 3:
            return 'ncs';
        case 4: case 5:
            return 'rfc4122';
        case 6:
            return 'microsoft';
        default:
            return 'future';
    }
}

function check(uuid, offset) {

    if (typeof uuid === 'string') {
        uuid = uuid.toLowerCase();

        if (!/^[a-f0-9]{8}(\-[a-f0-9]{4}){3}\-([a-f0-9]{12})$/.test(uuid)) {
            return false;
        }

        if (uuid == "00000000-0000-0000-0000-000000000000") {
            return { version: undefined, variant: 'nil', format: 'ascii' };
        }

        return {
            version: (hex2byte[uuid[14] + uuid[15]] & 0xf0) >> 4,
            variant: getVariant((hex2byte[uuid[19] + uuid[20]] & 0xe0) >> 5),
            format: 'ascii'
        };
    }

    if (uuid instanceof Buffer) {
        offset = offset || 0;

        if (uuid.length < offset + 16) {
            return false;
        }

        for (var i = 0; i < 16; i++) {
            if (uuid[offset + i] !== 0) {
                break;
            }
        }
        if (i == 16) {
            return { version: undefined, variant: 'nil', format: 'binary' };
        }

        return {
            version: (uuid[offset + 6] & 0xf0) >> 4,
            variant: getVariant((uuid[offset + 8] & 0xe0) >> 5),
            format: 'binary'
        };
    }
}

// v1
function uuidTimeBased(nodeId, options, callback) {

    var mTime = Date.now();
    var nTime = lastNTime + 1;
    var delta = (mTime - lastMTime) + (nTime - lastNTime) / 10000;

    if (delta < 0) {
        clockSeq = (clockSeq + 1) & 0x3fff;
        nTime = 0;
    } else if (mTime > lastMTime) {
        nTime = 0;
    } else if (nTime >= 10000) {
        return moreThan10000;
    }

    lastMTime = mTime;
    lastNTime = nTime;

    // unix timestamp to gregorian epoch as per rfc4122#section-4.5
    mTime += 12219292800000;

    var buffer = new Buffer(16);
    var myClockSeq = options.clockSeq === undefined ?
            clockSeq : (options.clockSeq & 0x3fff);
    var timeLow = ((mTime & 0xfffffff) * 10000 + nTime) % 0x100000000;
    var timeHigh = (mTime / 0x100000000 * 10000) & 0xfffffff;

    buffer[0] = timeLow >>> 24 & 0xff;
    buffer[1] = timeLow >>> 16 & 0xff;
    buffer[2] = timeLow >>> 8 & 0xff;
    buffer[3] = timeLow & 0xff;

    buffer[4] = timeHigh >>> 8 & 0xff;
    buffer[5] = timeHigh & 0xff;

    buffer[6] = (timeHigh >>> 24 & 0x0f) | 0x10;
    buffer[7] = (timeHigh >>> 16 & 0x3f) | 0x80;

    buffer[8] = myClockSeq >>> 8;
    buffer[9] = myClockSeq & 0xff;

    var result;
    switch (options.encoding && options.encoding[0]) {
        case 'b':
        case 'B':
            buffer[10] = nodeId[0];
            buffer[11] = nodeId[1];
            buffer[12] = nodeId[2];
            buffer[13] = nodeId[3];
            buffer[14] = nodeId[4];
            buffer[15] = nodeId[5];
            result = buffer;
            break;
        case 'o':
        case 'U':
            buffer[10] = nodeId[0];
            buffer[11] = nodeId[1];
            buffer[12] = nodeId[2];
            buffer[13] = nodeId[3];
            buffer[14] = nodeId[4];
            buffer[15] = nodeId[5];
            result = new UUID(buffer);
            break;
        default:
            result = byte2hex[buffer[0]] + byte2hex[buffer[1]] +
                     byte2hex[buffer[2]] + byte2hex[buffer[3]] + '-' +
                     byte2hex[buffer[4]] + byte2hex[buffer[5]] + '-' +
                     byte2hex[buffer[6]] + byte2hex[buffer[7]] + '-' +
                     byte2hex[buffer[8]] + byte2hex[buffer[9]] + '-' +
                     byte2hex[nodeId[0]] + byte2hex[nodeId[1]] +
                     byte2hex[nodeId[2]] + byte2hex[nodeId[3]] +
                     byte2hex[nodeId[4]] + byte2hex[nodeId[5]];
            break;
    }
    if (callback) {
        setImmediate(function () {
            callback(null, result);
        });
    }
    return result;
}

// v3 + v5
function uuidNamed(hashFunc, version, arg1, arg2) {

    var options = arg1 || {};
    var callback = typeof arg1 === 'function' ? arg1 : arg2;

    var namespace = options.namespace;
    var name = options.name;

    var hash = crypto.createHash(hashFunc);

    if (typeof namespace === 'string') {
        if (!check(namespace)) {
            return error(invalidNamespace, callback);
        }
        namespace = parse(namespace);
    } else if (namespace instanceof UUID) {
        namespace = namespace.toBuffer();
    } else if (!(namespace instanceof Buffer) || namespace.length !== 16) {
        return error(invalidNamespace, callback);
    }

    var nameIsNotAString = typeof name !== 'string';
    if (nameIsNotAString && !(name instanceof Buffer)) {
        return error(invalidName, callback);
    }

    hash.update(namespace);
    hash.update(options.name, nameIsNotAString ? 'binary' : 'utf8');

    var buffer = hash.digest();

    var result;
    switch (options.encoding && options.encoding[0]) {
        case 'b':
        case 'B':
            buffer[6] = (buffer[6] & 0x0f) | version;
            buffer[8] = (buffer[8] & 0x3f) | 0x80;
            result = buffer;
            break;
        case 'o':
        case 'U':
            buffer[6] = (buffer[6] & 0x0f) | version;
            buffer[8] = (buffer[8] & 0x3f) | 0x80;
            result = new UUID(buffer);
            break;
        default:
            result = byte2hex[buffer[0]] + byte2hex[buffer[1]] +
                     byte2hex[buffer[2]] + byte2hex[buffer[3]] + '-' +
                     byte2hex[buffer[4]] + byte2hex[buffer[5]] + '-' +
                     byte2hex[(buffer[6] & 0x0f) | version] +
                     byte2hex[buffer[7]] + '-' +
                     byte2hex[(buffer[8] & 0x3f) | 0x80] +
                     byte2hex[buffer[9]] + '-' +
                     byte2hex[buffer[10]] + byte2hex[buffer[11]] +
                     byte2hex[buffer[12]] + byte2hex[buffer[13]] +
                     byte2hex[buffer[14]] + byte2hex[buffer[15]];
            break;
    }
    if (callback) {
        setImmediate(function () {
            callback(null, result);
        });
    } else {
        return result;
    }
}

// v4
function uuidRandom(arg1, arg2) {

    var options = arg1 || {};
    var callback = typeof arg1 === 'function' ? arg1 : arg2;

    var buffer = crypto.randomBytes(16);

    buffer[6] = (buffer[6] & 0x0f) | 0x40;
    buffer[8] = (buffer[8] & 0x3f) | 0x80;

    var result;
    switch (options.encoding && options.encoding[0]) {
        case 'b':
        case 'B':
            result = buffer;
            break;
        case 'o':
        case 'U':
            result = new UUID(buffer);
            break;
        default:
            result = byte2hex[buffer[0]] + byte2hex[buffer[1]] +
                     byte2hex[buffer[2]] + byte2hex[buffer[3]] + '-' +
                     byte2hex[buffer[4]] + byte2hex[buffer[5]] + '-' +
                     byte2hex[(buffer[6] & 0x0f) | 0x40] +
                     byte2hex[buffer[7]] + '-' +
                     byte2hex[(buffer[8] & 0x3f) | 0x80] +
                     byte2hex[buffer[9]] + '-' +
                     byte2hex[buffer[10]] + byte2hex[buffer[11]] +
                     byte2hex[buffer[12]] + byte2hex[buffer[13]] +
                     byte2hex[buffer[14]] + byte2hex[buffer[15]];
            break;
    }
    if (callback) {
        setImmediate(function () {
            callback(null, result);
        });
    } else {
        return result;
    }
}

// v4 fast
function uuidRandomFast() {

    var r1 = Math.random() * 0x100000000;
    var r2 = Math.random() * 0x100000000;
    var r3 = Math.random() * 0x100000000;
    var r4 = Math.random() * 0x100000000;

    return byte2hex[ r1        & 0xff] + 
           byte2hex[ r1 >>>  8 & 0xff] +
           byte2hex[ r1 >>> 16 & 0xff] +
           byte2hex[ r1 >>> 24 & 0xff] + '-' +
           byte2hex[ r2 & 0xff] +
           byte2hex[ r2 >>>  8 & 0xff] + '-' +
           byte2hex[(r2 >>> 16 & 0x0f) | 0x40] +
           byte2hex[ r2 >>> 24 & 0xff] + '-' +
           byte2hex[(r3 & 0x3f) | 0x80] +
           byte2hex[ r3 >>>  8 & 0xff] + '-' +
           byte2hex[ r3 >>> 16 & 0xff] +
           byte2hex[ r3 >>> 24 & 0xff] +
           byte2hex[ r4        & 0xff] +
           byte2hex[ r4 >>>  8 & 0xff] +
           byte2hex[ r4 >>> 16 & 0xff] +
           byte2hex[ r1 >>> 24 & 0xff];
}

function stringify(buffer) {
    return byte2hex[buffer[0]]  + byte2hex[buffer[1]]  +
           byte2hex[buffer[2]]  + byte2hex[buffer[3]]  + '-' +
           byte2hex[buffer[4]]  + byte2hex[buffer[5]]  + '-' +
           byte2hex[buffer[6]]  + byte2hex[buffer[7]]  + '-' +
           byte2hex[buffer[8]]  + byte2hex[buffer[9]]  + '-' +
           byte2hex[buffer[10]] + byte2hex[buffer[11]] +
           byte2hex[buffer[12]] + byte2hex[buffer[13]] +
           byte2hex[buffer[14]] + byte2hex[buffer[15]];
}

UUID.stringify = stringify;

UUID.parse = parse;

UUID.check = check;

// according to rfc4122#section-4.1.7
UUID.nil = new UUID("00000000-0000-0000-0000-000000000000");

// from rfc4122#appendix-C
UUID.namespace = {
    dns:  new UUID("6ba7b810-9dad-11d1-80b4-00c04fd430c8"),
    url:  new UUID("6ba7b811-9dad-11d1-80b4-00c04fd430c8"),
    oid:  new UUID("6ba7b812-9dad-11d1-80b4-00c04fd430c8"),
    x500: new UUID("6ba7b814-9dad-11d1-80b4-00c04fd430c8")
};

UUID.v1 = function v1(arg1, arg2) {

    var options = arg1 || {};
    var callback = typeof arg1 == 'function' ? arg1 : arg2;

    var nodeId = options.mac;

    if (nodeId === undefined) {
        if (!macAddressLoaded && callback) {
            setImmediate(function () {
                UUID.v1(options, callback);
            });
            return;
        }
        return uuidTimeBased(macAddress, options, callback);
    }
    if (nodeId === false) {
        return uuidTimeBased(randomHost, options, callback);
    }
    return uuidTimeBased(parseMacAddress(nodeId), options, callback);
};

UUID.v4 = uuidRandom;

UUID.v4fast = uuidRandomFast;

UUID.v3 = function (options, callback) {
    return uuidNamed('md5', 0x30, options, callback);
};

UUID.v5 = function (options, callback) {
    return uuidNamed('sha1', 0x50, options, callback);
};

module.exports = UUID;

}).call(this,require("buffer").Buffer)
},{"buffer":17,"crypto":21,"macaddress":328}],410:[function(require,module,exports){
module.exports = v;
v.Vec3 = Vec3;

var re = /\((-?[.\d]+), (-?[.\d]+), (-?[.\d]+)\)/;

function Vec3(x, y, z) {
  this.x = x;
  this.y = y;
  this.z = z;
}

function v(x, y, z) {
  if (x == null) {
    return new Vec3(0, 0, 0);
  } else if (Array.isArray(x)) {
    return new Vec3(parseFloat(x[0], 10), parseFloat(x[1], 10), parseFloat(x[2], 10));
  } else if (typeof x === 'object') {
    return new Vec3(parseFloat(x.x, 10), parseFloat(x.y, 10), parseFloat(x.z, 10));
  } else if (typeof x === 'string' && y == null) {
    var match = x.match(re);
    if (match) {
      return new Vec3(
          parseFloat(match[1], 10),
          parseFloat(match[2], 10),
          parseFloat(match[3], 10));
    } else {
      throw new Error("vec3: cannot parse: " + x);
    }
  } else {
    return new Vec3(parseFloat(x, 10), parseFloat(y, 10), parseFloat(z, 10));
  }
}

Vec3.prototype.set = function(x, y, z) {
  this.x = x;
  this.y = y;
  this.z = z;
  return this;
};

Vec3.prototype.update = function(other) {
  this.x = other.x;
  this.y = other.y;
  this.z = other.z;
  return this;
};

Vec3.prototype.floored = function() {
  return new Vec3(Math.floor(this.x), Math.floor(this.y), Math.floor(this.z));
};

Vec3.prototype.floor = function() {
  this.x = Math.floor(this.x);
  this.y = Math.floor(this.y);
  this.z = Math.floor(this.z);
  return this;
};

Vec3.prototype.offset = function(dx, dy, dz) {
  return new Vec3(this.x + dx, this.y + dy, this.z + dz);
};
Vec3.prototype.translate = function(dx, dy, dz) {
  this.x += dx;
  this.y += dy;
  this.z += dz;
  return this;
};
Vec3.prototype.add = function(other) {
  this.x += other.x;
  this.y += other.y;
  this.z += other.z;
  return this;
};
Vec3.prototype.subtract = function(other) {
  this.x -= other.x;
  this.y -= other.y;
  this.z -= other.z;
  return this;
};
Vec3.prototype.plus = function(other) {
  return this.offset(other.x, other.y, other.z);
};
Vec3.prototype.minus = function(other) {
  return this.offset(-other.x, -other.y, -other.z);
};
Vec3.prototype.scaled = function(scalar) {
  return new Vec3(this.x * scalar, this.y * scalar, this.z * scalar);
};
Vec3.prototype.abs = function() {
  return new Vec3(Math.abs(this.x), Math.abs(this.y), Math.abs(this.z));
};
Vec3.prototype.volume = function() {
  return this.x * this.y * this.z;
};
Vec3.prototype.modulus = function(other) {
  return new Vec3(
    euclideanMod(this.x, other.x),
    euclideanMod(this.y, other.y),
    euclideanMod(this.z, other.z));
};
Vec3.prototype.distanceTo = function(other) {
  var dx = other.x - this.x;
  var dy = other.y - this.y;
  var dz = other.z - this.z;
  return Math.sqrt(dx * dx + dy * dy + dz * dz);
};
Vec3.prototype.equals = function(other) {
  return this.x === other.x && this.y === other.y && this.z === other.z;
};
Vec3.prototype.toString = function() {
  return "(" + this.x + ", " + this.y + ", " + this.z + ")";
};
Vec3.prototype.clone = function() {
  return this.offset(0, 0, 0);
};
Vec3.prototype.min = function(other) {
  return new Vec3(Math.min(this.x, other.x), Math.min(this.y, other.y), Math.min(this.z, other.z));
};
Vec3.prototype.max = function(other) {
  return new Vec3(Math.max(this.x, other.x), Math.max(this.y, other.y), Math.max(this.z, other.z));
};

function euclideanMod(numerator, denominator) {
  var result = numerator % denominator;
  return result < 0 ? result + denominator : result;
}

},{}],411:[function(require,module,exports){
(function (process){
var util = require('util');

var debug;
if(process.env.NODE_DEBUG && /(minecraft-protocol-forge|mc-proto-forge)/.test(process.env.NODE_DEBUG)) {
  var pid = process.pid;
  debug = function(x) {
    // if console is not set up yet, then skip this.
    if(!console.error)
      return;
    console.error('MC-PROTO-FORGE: %d', pid,
      util.format.apply(util, arguments).slice(0, 500));
  };
} else {
  debug = function() {
  };
}

module.exports = debug;

}).call(this,require('_process'))
},{"_process":219,"util":236}],412:[function(require,module,exports){
'use strict';

module.exports = {
  forgeHandshake: require('./src/client/forgeHandshake'),
  autoVersionForge: require('./src/client/autoVersionForge')
};

},{"./src/client/autoVersionForge":478,"./src/client/forgeHandshake":479}],413:[function(require,module,exports){
arguments[4][278][0].apply(exports,arguments)
},{"core-js/library/fn/object/create":423,"dup":278}],414:[function(require,module,exports){
arguments[4][279][0].apply(exports,arguments)
},{"core-js/library/fn/object/define-property":424,"dup":279}],415:[function(require,module,exports){
arguments[4][280][0].apply(exports,arguments)
},{"core-js/library/fn/object/get-own-property-descriptor":425,"dup":280}],416:[function(require,module,exports){
arguments[4][281][0].apply(exports,arguments)
},{"core-js/library/fn/object/keys":426,"dup":281}],417:[function(require,module,exports){
arguments[4][282][0].apply(exports,arguments)
},{"core-js/library/fn/object/set-prototype-of":427,"dup":282}],418:[function(require,module,exports){
arguments[4][283][0].apply(exports,arguments)
},{"dup":283}],419:[function(require,module,exports){
arguments[4][284][0].apply(exports,arguments)
},{"babel-runtime/core-js/object/define-property":414,"dup":284}],420:[function(require,module,exports){
arguments[4][285][0].apply(exports,arguments)
},{"babel-runtime/core-js/object/get-own-property-descriptor":415,"dup":285}],421:[function(require,module,exports){
arguments[4][286][0].apply(exports,arguments)
},{"babel-runtime/core-js/object/create":413,"babel-runtime/core-js/object/set-prototype-of":417,"dup":286}],422:[function(require,module,exports){
arguments[4][287][0].apply(exports,arguments)
},{"dup":287}],423:[function(require,module,exports){
arguments[4][288][0].apply(exports,arguments)
},{"../../modules/$":439,"dup":288}],424:[function(require,module,exports){
arguments[4][289][0].apply(exports,arguments)
},{"../../modules/$":439,"dup":289}],425:[function(require,module,exports){
arguments[4][290][0].apply(exports,arguments)
},{"../../modules/$":439,"../../modules/es6.object.get-own-property-descriptor":444,"dup":290}],426:[function(require,module,exports){
arguments[4][291][0].apply(exports,arguments)
},{"../../modules/$.core":431,"../../modules/es6.object.keys":445,"dup":291}],427:[function(require,module,exports){
arguments[4][292][0].apply(exports,arguments)
},{"../../modules/$.core":431,"../../modules/es6.object.set-prototype-of":446,"dup":292}],428:[function(require,module,exports){
arguments[4][293][0].apply(exports,arguments)
},{"dup":293}],429:[function(require,module,exports){
arguments[4][294][0].apply(exports,arguments)
},{"./$.is-object":438,"dup":294}],430:[function(require,module,exports){
arguments[4][295][0].apply(exports,arguments)
},{"dup":295}],431:[function(require,module,exports){
arguments[4][296][0].apply(exports,arguments)
},{"dup":296}],432:[function(require,module,exports){
arguments[4][297][0].apply(exports,arguments)
},{"./$.a-function":428,"dup":297}],433:[function(require,module,exports){
arguments[4][298][0].apply(exports,arguments)
},{"dup":298}],434:[function(require,module,exports){
arguments[4][299][0].apply(exports,arguments)
},{"./$.core":431,"./$.ctx":432,"./$.global":436,"dup":299}],435:[function(require,module,exports){
arguments[4][300][0].apply(exports,arguments)
},{"dup":300}],436:[function(require,module,exports){
arguments[4][301][0].apply(exports,arguments)
},{"dup":301}],437:[function(require,module,exports){
arguments[4][302][0].apply(exports,arguments)
},{"./$.cof":430,"dup":302}],438:[function(require,module,exports){
arguments[4][303][0].apply(exports,arguments)
},{"dup":303}],439:[function(require,module,exports){
arguments[4][304][0].apply(exports,arguments)
},{"dup":304}],440:[function(require,module,exports){
arguments[4][305][0].apply(exports,arguments)
},{"./$.core":431,"./$.export":434,"./$.fails":435,"dup":305}],441:[function(require,module,exports){
arguments[4][306][0].apply(exports,arguments)
},{"./$":439,"./$.an-object":429,"./$.ctx":432,"./$.is-object":438,"dup":306}],442:[function(require,module,exports){
arguments[4][307][0].apply(exports,arguments)
},{"./$.defined":433,"./$.iobject":437,"dup":307}],443:[function(require,module,exports){
arguments[4][308][0].apply(exports,arguments)
},{"./$.defined":433,"dup":308}],444:[function(require,module,exports){
arguments[4][309][0].apply(exports,arguments)
},{"./$.object-sap":440,"./$.to-iobject":442,"dup":309}],445:[function(require,module,exports){
arguments[4][310][0].apply(exports,arguments)
},{"./$.object-sap":440,"./$.to-object":443,"dup":310}],446:[function(require,module,exports){
arguments[4][311][0].apply(exports,arguments)
},{"./$.export":434,"./$.set-proto":441,"dup":311}],447:[function(require,module,exports){
arguments[4][312][0].apply(exports,arguments)
},{"../../../../../../.nvm/versions/node/v4.2.4/lib/node_modules/browserify/node_modules/insert-module-globals/node_modules/is-buffer/index.js":215,"dup":312}],448:[function(require,module,exports){
arguments[4][214][0].apply(exports,arguments)
},{"dup":214}],449:[function(require,module,exports){
arguments[4][216][0].apply(exports,arguments)
},{"dup":216}],450:[function(require,module,exports){
arguments[4][315][0].apply(exports,arguments)
},{"dup":315,"lodash._baseisequal":452,"lodash._bindcallback":454,"lodash.isarray":457,"lodash.pairs":460}],451:[function(require,module,exports){
arguments[4][316][0].apply(exports,arguments)
},{"dup":316,"lodash.keys":459}],452:[function(require,module,exports){
arguments[4][317][0].apply(exports,arguments)
},{"dup":317,"lodash.isarray":457,"lodash.istypedarray":458,"lodash.keys":459}],453:[function(require,module,exports){
arguments[4][318][0].apply(exports,arguments)
},{"dup":318}],454:[function(require,module,exports){
arguments[4][319][0].apply(exports,arguments)
},{"dup":319}],455:[function(require,module,exports){
arguments[4][320][0].apply(exports,arguments)
},{"dup":320}],456:[function(require,module,exports){
arguments[4][321][0].apply(exports,arguments)
},{"dup":321}],457:[function(require,module,exports){
arguments[4][322][0].apply(exports,arguments)
},{"dup":322}],458:[function(require,module,exports){
arguments[4][323][0].apply(exports,arguments)
},{"dup":323}],459:[function(require,module,exports){
arguments[4][324][0].apply(exports,arguments)
},{"dup":324,"lodash._getnative":455,"lodash.isarguments":456,"lodash.isarray":457}],460:[function(require,module,exports){
arguments[4][325][0].apply(exports,arguments)
},{"dup":325,"lodash.keys":459}],461:[function(require,module,exports){
arguments[4][326][0].apply(exports,arguments)
},{"dup":326,"lodash._basecallback":450,"lodash._baseeach":451,"lodash._basereduce":453,"lodash.isarray":457}],462:[function(require,module,exports){
arguments[4][386][0].apply(exports,arguments)
},{"../utils":469,"babel-runtime/helpers/object-without-properties":422,"dup":386}],463:[function(require,module,exports){
arguments[4][387][0].apply(exports,arguments)
},{"babel-runtime/core-js/object/keys":416,"dup":387}],464:[function(require,module,exports){
arguments[4][388][0].apply(exports,arguments)
},{"../utils":469,"babel-runtime/core-js/object/keys":416,"dup":388}],465:[function(require,module,exports){
arguments[4][389][0].apply(exports,arguments)
},{"../utils":469,"assert":2,"babel-runtime/core-js/object/keys":416,"buffer":17,"dup":389}],466:[function(require,module,exports){
arguments[4][390][0].apply(exports,arguments)
},{"./protodef":467,"./serializer":468,"./utils":469,"dup":390}],467:[function(require,module,exports){
arguments[4][391][0].apply(exports,arguments)
},{"./datatypes/conditional":462,"./datatypes/numeric":463,"./datatypes/structures":464,"./datatypes/utils":465,"./utils":469,"babel-runtime/core-js/object/keys":416,"babel-runtime/helpers/class-call-check":418,"babel-runtime/helpers/create-class":419,"buffer":17,"dup":391,"lodash.reduce":461}],468:[function(require,module,exports){
arguments[4][392][0].apply(exports,arguments)
},{"babel-runtime/helpers/class-call-check":418,"babel-runtime/helpers/create-class":419,"babel-runtime/helpers/get":420,"babel-runtime/helpers/inherits":421,"dup":392,"readable-stream":476}],469:[function(require,module,exports){
arguments[4][393][0].apply(exports,arguments)
},{"dup":393}],470:[function(require,module,exports){
arguments[4][394][0].apply(exports,arguments)
},{"./dist/index.js":466,"dup":394}],471:[function(require,module,exports){
arguments[4][395][0].apply(exports,arguments)
},{"./_stream_readable":473,"./_stream_writable":475,"_process":219,"core-util-is":447,"dup":395,"inherits":448}],472:[function(require,module,exports){
arguments[4][396][0].apply(exports,arguments)
},{"./_stream_transform":474,"core-util-is":447,"dup":396,"inherits":448}],473:[function(require,module,exports){
arguments[4][397][0].apply(exports,arguments)
},{"./_stream_duplex":471,"_process":219,"buffer":17,"core-util-is":447,"dup":397,"events":213,"inherits":448,"isarray":449,"stream":233,"string_decoder/":477,"util":3}],474:[function(require,module,exports){
arguments[4][398][0].apply(exports,arguments)
},{"./_stream_duplex":471,"core-util-is":447,"dup":398,"inherits":448}],475:[function(require,module,exports){
arguments[4][399][0].apply(exports,arguments)
},{"./_stream_duplex":471,"_process":219,"buffer":17,"core-util-is":447,"dup":399,"inherits":448,"stream":233}],476:[function(require,module,exports){
arguments[4][400][0].apply(exports,arguments)
},{"./lib/_stream_duplex.js":471,"./lib/_stream_passthrough.js":472,"./lib/_stream_readable.js":473,"./lib/_stream_transform.js":474,"./lib/_stream_writable.js":475,"dup":400,"stream":233}],477:[function(require,module,exports){
arguments[4][234][0].apply(exports,arguments)
},{"buffer":17,"dup":234}],478:[function(require,module,exports){
'use strict';

var forgeHandshake = require('./forgeHandshake');

module.exports = function(client, options) {
  if (!client.autoVersionHooks) client.autoVersionHooks = [];

  client.autoVersionHooks.push(function(response, client, options) {
    if (!response.modinfo || response.modinfo.type !== 'FML') {
      return; // not ours
    }

    // Use the list of Forge mods from the server ping, so client will match server
    var forgeMods = response.modinfo.modList;
    console.log('Using forgeMods:',forgeMods);

    // Install the FML|HS plugin with the given mods
    forgeHandshake(client, {forgeMods: forgeMods});
  });
};

},{"./forgeHandshake":479}],479:[function(require,module,exports){
(function (Buffer){
const ProtoDef = require('protodef').ProtoDef;
const assert = require('assert');
const debug = require('../../debug');

const proto = new ProtoDef();
// copied from ../../dist/transforms/serializer.js TODO: refactor
proto.addType("string", ["pstring", {
      countType: "varint"
    }]);


// http://wiki.vg/Minecraft_Forge_Handshake
// TODO: move to https://github.com/PrismarineJS/minecraft-data
proto.addType('fml|hsMapper',
  [
    "mapper",
    {
      "type": "byte",
      "mappings": {
        "0": "ServerHello",
        "1": "ClientHello",
        "2": "ModList",
        "3": "RegistryData",
        "-1": "HandshakeAck",
        "-2": "HandshakeReset"
      },
    }
  ]
);

proto.addType('FML|HS',
  [
    "container",
    [
      {
        "name": "discriminator",
        "type": "fml|hsMapper"
      },

      {
        "anon": true,
        "type":
        [
          "switch",
          {
            "compareTo": "discriminator",
            "fields":
            {
              "ServerHello":
              [
                "container",
                [
                  {
                    "name": "fmlProtocolVersion",
                    "type": "byte"
                  },
                  {
                    "name": "overrideDimension",
                    "type":
                    [
                      "switch",
                      {
                        // "Only sent if protocol version is greater than 1."
                        "compareTo": "fmlProtocolVersion",
                        "fields":
                        {
                          "0": "void",
                          "1": "void"
                        },
                        "default": "int"
                      }
                    ]
                  },
                ],
              ],

              "ClientHello":
              [
                "container",
                [
                  {
                    "name": "fmlProtocolVersion",
                    "type": "byte"
                  }
                ]
              ],

              "ModList":
              [
                "container",
                [
                  {
                    "name": "mods",
                    "type":
                    [
                      "array",
                      {
                        "countType": "varint",
                        "type":
                        [
                          "container",
                          [
                            {
                              "name": "modid",
                              "type": "string"
                            },
                            {
                              "name": "version",
                              "type": "string"
                            }
                          ]
                        ],
                      },
                    ]
                  }
                ],
              ],

              "RegistryData":
              [
                "container",
                [
                  {
                    "name": "hasMore",
                    "type": "bool"
                  },

                  /* TODO: support all fields
                  {
                    "name": "registryName",
                    "type": "string"
                  },
                  */
                ],
              ],

              "HandshakeAck":
              [
                "container",
                [
                  {
                    "name": "phase",
                    "type": "byte"
                  },
                ],
              ],

            },
          }
        ]
      }
    ]
  ]
);

function writeAck(client, phase) {
  const ackData = proto.createPacketBuffer('FML|HS', {
    discriminator: 'HandshakeAck', // HandshakeAck,
    phase: phase
  });
  client.write('custom_payload', {
    channel: 'FML|HS',
    data: ackData
  });
}

const FMLHandshakeClientState = {
  START: 1,
  WAITINGSERVERDATA: 2,
  WAITINGSERVERCOMPLETE: 3,
  PENDINGCOMPLETE: 4,
  COMPLETE: 5,
};

function fmlHandshakeStep(client, data, options)
{
  const parsed = proto.parsePacketBuffer('FML|HS', data);
  debug('FML|HS',parsed);

  const fmlHandshakeState = client.fmlHandshakeState || FMLHandshakeClientState.START;

  switch(fmlHandshakeState) {
    case FMLHandshakeClientState.START:
    {
      assert.ok(parsed.data.discriminator === 'ServerHello', `expected ServerHello in START state, got ${parsed.data.discriminator}`);
      if (parsed.data.fmlProtocolVersion > 2) {
        // TODO: support higher protocols, if they change
      }

      client.write('custom_payload', {
        channel: 'REGISTER',
        data: new Buffer(['FML|HS', 'FML', 'FML|MP', 'FML', 'FORGE'].join('\0'))
      });

      const clientHello = proto.createPacketBuffer('FML|HS', {
        discriminator: 'ClientHello',
        fmlProtocolVersion: parsed.data.fmlProtocolVersion
      });

      client.write('custom_payload', {
        channel: 'FML|HS',
        data: clientHello
      });

      debug('Sending client modlist');
      const modList = proto.createPacketBuffer('FML|HS', {
        discriminator: 'ModList',
        mods: options.forgeMods || []
      });
      client.write('custom_payload', {
        channel: 'FML|HS',
        data: modList
      });
      writeAck(client, FMLHandshakeClientState.WAITINGSERVERDATA);
      client.fmlHandshakeState = FMLHandshakeClientState.WAITINGSERVERDATA;
      break;
    }

    case FMLHandshakeClientState.WAITINGSERVERDATA:
    {
      assert.ok(parsed.data.discriminator === 'ModList', `expected ModList in WAITINGSERVERDATA state, got ${parsed.data.discriminator}`);
      debug('Server ModList:',parsed.data.mods);
      // Emit event so client can check client/server mod compatibility
      client.emit('forgeMods', parsed.data.mods);
      client.fmlHandshakeState = FMLHandshakeClientState.WAITINGSERVERCOMPLETE;
      break;
    }

    case FMLHandshakeClientState.WAITINGSERVERCOMPLETE:
    {
      assert.ok(parsed.data.discriminator === 'RegistryData', `expected RegistryData in WAITINGSERVERCOMPLETE, got ${parsed.data.discriminator}`);
      debug('RegistryData',parsed.data);
      // TODO: support <=1.7.10 single registry, https://github.com/ORelio/Minecraft-Console-Client/pull/100/files#diff-65b97c02a9736311374109e22d30ca9cR297
      if (parsed.data.hasMore === false) {
        debug('LAST RegistryData');

        writeAck(client, FMLHandshakeClientState.WAITINGSERVERCOMPLETE);
        client.fmlHandshakeState = FMLHandshakeClientState.PENDINGCOMPLETE;
      }
      break;
    }

    case FMLHandshakeClientState.PENDINGCOMPLETE:
    {
      assert.ok(parsed.data.discriminator === 'HandshakeAck', `expected HandshakeAck in PENDINGCOMPLETE, got ${parsed.data.discrimnator}`);
      assert.ok(parsed.data.phase === 2, `expected HandshakeAck phase WAITINGACK, got ${parsed.data.phase}`);
      writeAck(client, FMLHandshakeClientState.PENDINGCOMPLETE4);
      client.fmlHandshakeState = FMLHandshakeClientState.COMPLETE
      break;
    }

    case FMLHandshakeClientState.COMPLETE:
    {
      assert.ok(parsed.data.phase === 3, `expected HandshakeAck phase COMPLETE, got ${parsed.data.phase}`);

      writeAck(client, FMLHandshakeClientState.COMPLETE);
      debug('HandshakeAck Complete!');
      break;
    }

    default:
      console.error(`unexpected FML state ${fmlHandshakeState}`);
  }
}

module.exports = function(client, options) {
  client.tagHost = '\0FML\0'; // passed to src/client/setProtocol.js, signifies client supports FML/Forge
  client.on('custom_payload', function(packet) {
    // TODO: channel registration tracking in NMP, https://github.com/PrismarineJS/node-minecraft-protocol/pull/328
    if (packet.channel === 'FML|HS') {
      fmlHandshakeStep(client, packet.data, options);
    }
  });
};

}).call(this,require("buffer").Buffer)
},{"../../debug":411,"assert":2,"buffer":17,"protodef":470}],480:[function(require,module,exports){
arguments[4][359][0].apply(exports,arguments)
},{"./dist/browser.js":481,"dup":359}],481:[function(require,module,exports){
arguments[4][360][0].apply(exports,arguments)
},{"./client":482,"./server":486,"./states":487,"./transforms/serializer":490,"./version":491,"dup":360}],482:[function(require,module,exports){
arguments[4][361][0].apply(exports,arguments)
},{"./client/tcp_dns":483,"./debug":485,"./states":487,"./transforms/compression":488,"./transforms/framing":489,"./transforms/serializer":490,"crypto":21,"dup":361,"events":213}],483:[function(require,module,exports){
arguments[4][362][0].apply(exports,arguments)
},{"dns":1,"dup":362,"net":1}],484:[function(require,module,exports){
'use strict';

var nbt = require('prismarine-nbt');
var UUID = require('uuid-1345');

module.exports = {
  'UUID': [readUUID, writeUUID, 16],
  'nbt': [readNbt, writeNbt, sizeOfNbt],
  'optionalNbt': [readOptionalNbt, writeOptionalNbt, sizeOfOptionalNbt],
  'restBuffer': [readRestBuffer, writeRestBuffer, sizeOfRestBuffer],
  'entityMetadataLoop': [readEntityMetadata, writeEntityMetadata, sizeOfEntityMetadata]
};

function readUUID(buffer, offset) {
  return {
    value: UUID.stringify(buffer.slice(offset, 16)),
    size: 16
  };
}

function writeUUID(value, buffer, offset) {
  var buf = UUID.parse(value);
  buf.copy(buffer, offset);
  return offset + 16;
}

function readNbt(buffer, offset) {
  return nbt.proto.read(buffer, offset, "nbt");
}

function writeNbt(value, buffer, offset) {
  return nbt.proto.write(value, buffer, offset, "nbt");
}

function sizeOfNbt(value) {
  return nbt.proto.sizeOf(value, "nbt");
}

function readOptionalNbt(buffer, offset) {
  if (buffer.readInt8(offset) == 0) return { size: 1 };
  return nbt.proto.read(buffer, offset, "nbt");
}

function writeOptionalNbt(value, buffer, offset) {
  if (value == undefined) {
    buffer.writeInt8(0, offset);
    return offset + 1;
  }
  return nbt.proto.write(value, buffer, offset, "nbt");
}

function sizeOfOptionalNbt(value) {
  if (value == undefined) return 1;
  return nbt.proto.sizeOf(value, "nbt");
}

function readRestBuffer(buffer, offset) {
  return {
    value: buffer.slice(offset),
    size: buffer.length - offset
  };
}

function writeRestBuffer(value, buffer, offset) {
  value.copy(buffer, offset);
  return offset + value.length;
}

function sizeOfRestBuffer(value) {
  return value.length;
}

function readEntityMetadata(buffer, offset, _ref) {
  var type = _ref.type;
  var endVal = _ref.endVal;

  var cursor = offset;
  var metadata = [];
  var item = undefined;
  while (true) {
    item = buffer.readUInt8(cursor);
    if (item === endVal) {
      return {
        value: metadata,
        size: cursor + 1 - offset
      };
    }
    var results = this.read(buffer, cursor, type, {});
    metadata.push(results.value);
    cursor += results.size;
  }
}

function writeEntityMetadata(value, buffer, offset, _ref2) {
  var type = _ref2.type;
  var endVal = _ref2.endVal;

  var self = this;
  value.forEach(function (item) {
    offset = self.write(item, buffer, offset, type, {});
  });
  buffer.writeUInt8(endVal, offset);
  return offset + 1;
}

function sizeOfEntityMetadata(value, _ref3) {
  var type = _ref3.type;

  var size = 1;
  for (var i = 0; i < value.length; ++i) {
    size += this.sizeOf(value[i], type, {});
  }
  return size;
}


},{"prismarine-nbt":574,"uuid-1345":599}],485:[function(require,module,exports){
arguments[4][364][0].apply(exports,arguments)
},{"_process":219,"dup":364,"util":236}],486:[function(require,module,exports){
arguments[4][365][0].apply(exports,arguments)
},{"./client":482,"./states":487,"dup":365,"events":213,"net":1}],487:[function(require,module,exports){
arguments[4][366][0].apply(exports,arguments)
},{"dup":366}],488:[function(require,module,exports){
arguments[4][367][0].apply(exports,arguments)
},{"buffer":17,"dup":367,"protodef":584,"readable-stream":596,"zlib":16}],489:[function(require,module,exports){
arguments[4][368][0].apply(exports,arguments)
},{"buffer":17,"dup":368,"protodef":584,"readable-stream":596}],490:[function(require,module,exports){
arguments[4][369][0].apply(exports,arguments)
},{"../datatypes/minecraft":484,"../states":487,"dup":369,"minecraft-data":545,"protodef":584}],491:[function(require,module,exports){
arguments[4][370][0].apply(exports,arguments)
},{"dup":370}],492:[function(require,module,exports){
arguments[4][278][0].apply(exports,arguments)
},{"core-js/library/fn/object/create":502,"dup":278}],493:[function(require,module,exports){
arguments[4][279][0].apply(exports,arguments)
},{"core-js/library/fn/object/define-property":503,"dup":279}],494:[function(require,module,exports){
arguments[4][280][0].apply(exports,arguments)
},{"core-js/library/fn/object/get-own-property-descriptor":504,"dup":280}],495:[function(require,module,exports){
arguments[4][281][0].apply(exports,arguments)
},{"core-js/library/fn/object/keys":505,"dup":281}],496:[function(require,module,exports){
arguments[4][282][0].apply(exports,arguments)
},{"core-js/library/fn/object/set-prototype-of":506,"dup":282}],497:[function(require,module,exports){
arguments[4][283][0].apply(exports,arguments)
},{"dup":283}],498:[function(require,module,exports){
arguments[4][284][0].apply(exports,arguments)
},{"babel-runtime/core-js/object/define-property":493,"dup":284}],499:[function(require,module,exports){
arguments[4][285][0].apply(exports,arguments)
},{"babel-runtime/core-js/object/get-own-property-descriptor":494,"dup":285}],500:[function(require,module,exports){
arguments[4][286][0].apply(exports,arguments)
},{"babel-runtime/core-js/object/create":492,"babel-runtime/core-js/object/set-prototype-of":496,"dup":286}],501:[function(require,module,exports){
arguments[4][287][0].apply(exports,arguments)
},{"dup":287}],502:[function(require,module,exports){
arguments[4][288][0].apply(exports,arguments)
},{"../../modules/$":518,"dup":288}],503:[function(require,module,exports){
arguments[4][289][0].apply(exports,arguments)
},{"../../modules/$":518,"dup":289}],504:[function(require,module,exports){
arguments[4][290][0].apply(exports,arguments)
},{"../../modules/$":518,"../../modules/es6.object.get-own-property-descriptor":523,"dup":290}],505:[function(require,module,exports){
arguments[4][291][0].apply(exports,arguments)
},{"../../modules/$.core":510,"../../modules/es6.object.keys":524,"dup":291}],506:[function(require,module,exports){
arguments[4][292][0].apply(exports,arguments)
},{"../../modules/$.core":510,"../../modules/es6.object.set-prototype-of":525,"dup":292}],507:[function(require,module,exports){
arguments[4][293][0].apply(exports,arguments)
},{"dup":293}],508:[function(require,module,exports){
arguments[4][294][0].apply(exports,arguments)
},{"./$.is-object":517,"dup":294}],509:[function(require,module,exports){
arguments[4][295][0].apply(exports,arguments)
},{"dup":295}],510:[function(require,module,exports){
arguments[4][296][0].apply(exports,arguments)
},{"dup":296}],511:[function(require,module,exports){
arguments[4][297][0].apply(exports,arguments)
},{"./$.a-function":507,"dup":297}],512:[function(require,module,exports){
arguments[4][298][0].apply(exports,arguments)
},{"dup":298}],513:[function(require,module,exports){
arguments[4][299][0].apply(exports,arguments)
},{"./$.core":510,"./$.ctx":511,"./$.global":515,"dup":299}],514:[function(require,module,exports){
arguments[4][300][0].apply(exports,arguments)
},{"dup":300}],515:[function(require,module,exports){
arguments[4][301][0].apply(exports,arguments)
},{"dup":301}],516:[function(require,module,exports){
arguments[4][302][0].apply(exports,arguments)
},{"./$.cof":509,"dup":302}],517:[function(require,module,exports){
arguments[4][303][0].apply(exports,arguments)
},{"dup":303}],518:[function(require,module,exports){
arguments[4][304][0].apply(exports,arguments)
},{"dup":304}],519:[function(require,module,exports){
arguments[4][305][0].apply(exports,arguments)
},{"./$.core":510,"./$.export":513,"./$.fails":514,"dup":305}],520:[function(require,module,exports){
arguments[4][306][0].apply(exports,arguments)
},{"./$":518,"./$.an-object":508,"./$.ctx":511,"./$.is-object":517,"dup":306}],521:[function(require,module,exports){
arguments[4][307][0].apply(exports,arguments)
},{"./$.defined":512,"./$.iobject":516,"dup":307}],522:[function(require,module,exports){
arguments[4][308][0].apply(exports,arguments)
},{"./$.defined":512,"dup":308}],523:[function(require,module,exports){
arguments[4][309][0].apply(exports,arguments)
},{"./$.object-sap":519,"./$.to-iobject":521,"dup":309}],524:[function(require,module,exports){
arguments[4][310][0].apply(exports,arguments)
},{"./$.object-sap":519,"./$.to-object":522,"dup":310}],525:[function(require,module,exports){
arguments[4][311][0].apply(exports,arguments)
},{"./$.export":513,"./$.set-proto":520,"dup":311}],526:[function(require,module,exports){
arguments[4][312][0].apply(exports,arguments)
},{"../../../../../../.nvm/versions/node/v4.2.4/lib/node_modules/browserify/node_modules/insert-module-globals/node_modules/is-buffer/index.js":215,"dup":312}],527:[function(require,module,exports){
arguments[4][214][0].apply(exports,arguments)
},{"dup":214}],528:[function(require,module,exports){
arguments[4][216][0].apply(exports,arguments)
},{"dup":216}],529:[function(require,module,exports){
arguments[4][315][0].apply(exports,arguments)
},{"dup":315,"lodash._baseisequal":531,"lodash._bindcallback":533,"lodash.isarray":536,"lodash.pairs":539}],530:[function(require,module,exports){
arguments[4][316][0].apply(exports,arguments)
},{"dup":316,"lodash.keys":538}],531:[function(require,module,exports){
arguments[4][317][0].apply(exports,arguments)
},{"dup":317,"lodash.isarray":536,"lodash.istypedarray":537,"lodash.keys":538}],532:[function(require,module,exports){
arguments[4][318][0].apply(exports,arguments)
},{"dup":318}],533:[function(require,module,exports){
arguments[4][319][0].apply(exports,arguments)
},{"dup":319}],534:[function(require,module,exports){
arguments[4][320][0].apply(exports,arguments)
},{"dup":320}],535:[function(require,module,exports){
(function (global){
/**
 * lodash 3.0.5 (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]';

/** Used for built-in method references. */
var objectProto = global.Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

/**
 * Gets the "length" property value of `object`.
 *
 * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
 * that affects Safari on at least iOS 8.1-8.3 ARM64.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {*} Returns the "length" value.
 */
var getLength = baseProperty('length');

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments(value) {
  // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.
  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @type Function
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null &&
    !(typeof value == 'function' && isFunction(value)) && isLength(getLength(value));
}

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @type Function
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object, else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8 which returns 'object' for typed array constructors, and
  // PhantomJS 1.9 which returns 'function' for `NodeList` instances.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This function is loosely based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  // Avoid a V8 JIT bug in Chrome 19-20.
  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

module.exports = isArguments;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],536:[function(require,module,exports){
arguments[4][322][0].apply(exports,arguments)
},{"dup":322}],537:[function(require,module,exports){
arguments[4][323][0].apply(exports,arguments)
},{"dup":323}],538:[function(require,module,exports){
arguments[4][324][0].apply(exports,arguments)
},{"dup":324,"lodash._getnative":534,"lodash.isarguments":535,"lodash.isarray":536}],539:[function(require,module,exports){
arguments[4][325][0].apply(exports,arguments)
},{"dup":325,"lodash.keys":538}],540:[function(require,module,exports){
arguments[4][326][0].apply(exports,arguments)
},{"dup":326,"lodash._basecallback":529,"lodash._baseeach":530,"lodash._basereduce":532,"lodash.isarray":536}],541:[function(require,module,exports){
arguments[4][328][0].apply(exports,arguments)
},{"./lib/linux.js":542,"./lib/unix.js":543,"./lib/windows.js":544,"dup":328,"os":217}],542:[function(require,module,exports){
arguments[4][329][0].apply(exports,arguments)
},{"child_process":1,"dup":329}],543:[function(require,module,exports){
arguments[4][330][0].apply(exports,arguments)
},{"child_process":1,"dup":330}],544:[function(require,module,exports){
arguments[4][331][0].apply(exports,arguments)
},{"child_process":1,"dup":331}],545:[function(require,module,exports){
arguments[4][332][0].apply(exports,arguments)
},{"./lib/indexer.js":546,"./lib/loader":548,"./minecraft-data/data/1.8/biomes":549,"./minecraft-data/data/1.8/blocks":550,"./minecraft-data/data/1.8/effects":551,"./minecraft-data/data/1.8/entities":552,"./minecraft-data/data/1.8/instruments":553,"./minecraft-data/data/1.8/items":554,"./minecraft-data/data/1.8/materials":555,"./minecraft-data/data/1.8/protocol":556,"./minecraft-data/data/1.8/recipes":557,"./minecraft-data/data/1.8/version":558,"./minecraft-data/data/1.8/windows":559,"./minecraft-data/data/1.9/biomes":560,"./minecraft-data/data/1.9/blocks":561,"./minecraft-data/data/1.9/effects":562,"./minecraft-data/data/1.9/entities":563,"./minecraft-data/data/1.9/instruments":564,"./minecraft-data/data/1.9/items":565,"./minecraft-data/data/1.9/materials":566,"./minecraft-data/data/1.9/protocol":567,"./minecraft-data/data/1.9/recipes":568,"./minecraft-data/data/1.9/version":569,"./minecraft-data/data/1.9/windows":570,"./minecraft-data/data/common/protocolVersions":571,"dup":332}],546:[function(require,module,exports){
arguments[4][333][0].apply(exports,arguments)
},{"dup":333}],547:[function(require,module,exports){
arguments[4][334][0].apply(exports,arguments)
},{"./indexer.js":546,"dup":334}],548:[function(require,module,exports){
arguments[4][335][0].apply(exports,arguments)
},{"./indexes.js":547,"dup":335}],549:[function(require,module,exports){
arguments[4][336][0].apply(exports,arguments)
},{"dup":336}],550:[function(require,module,exports){
arguments[4][337][0].apply(exports,arguments)
},{"dup":337}],551:[function(require,module,exports){
arguments[4][338][0].apply(exports,arguments)
},{"dup":338}],552:[function(require,module,exports){
arguments[4][339][0].apply(exports,arguments)
},{"dup":339}],553:[function(require,module,exports){
arguments[4][340][0].apply(exports,arguments)
},{"dup":340}],554:[function(require,module,exports){
arguments[4][341][0].apply(exports,arguments)
},{"dup":341}],555:[function(require,module,exports){
arguments[4][342][0].apply(exports,arguments)
},{"dup":342}],556:[function(require,module,exports){
arguments[4][343][0].apply(exports,arguments)
},{"dup":343}],557:[function(require,module,exports){
arguments[4][344][0].apply(exports,arguments)
},{"dup":344}],558:[function(require,module,exports){
arguments[4][345][0].apply(exports,arguments)
},{"dup":345}],559:[function(require,module,exports){
arguments[4][346][0].apply(exports,arguments)
},{"dup":346}],560:[function(require,module,exports){
arguments[4][336][0].apply(exports,arguments)
},{"dup":336}],561:[function(require,module,exports){
arguments[4][348][0].apply(exports,arguments)
},{"dup":348}],562:[function(require,module,exports){
arguments[4][349][0].apply(exports,arguments)
},{"dup":349}],563:[function(require,module,exports){
arguments[4][350][0].apply(exports,arguments)
},{"dup":350}],564:[function(require,module,exports){
arguments[4][340][0].apply(exports,arguments)
},{"dup":340}],565:[function(require,module,exports){
arguments[4][352][0].apply(exports,arguments)
},{"dup":352}],566:[function(require,module,exports){
arguments[4][342][0].apply(exports,arguments)
},{"dup":342}],567:[function(require,module,exports){
arguments[4][354][0].apply(exports,arguments)
},{"dup":354}],568:[function(require,module,exports){
arguments[4][355][0].apply(exports,arguments)
},{"dup":355}],569:[function(require,module,exports){
arguments[4][356][0].apply(exports,arguments)
},{"dup":356}],570:[function(require,module,exports){
arguments[4][357][0].apply(exports,arguments)
},{"dup":357}],571:[function(require,module,exports){
arguments[4][358][0].apply(exports,arguments)
},{"dup":358}],572:[function(require,module,exports){
arguments[4][377][0].apply(exports,arguments)
},{"dup":377}],573:[function(require,module,exports){
arguments[4][378][0].apply(exports,arguments)
},{"dup":378}],574:[function(require,module,exports){
arguments[4][379][0].apply(exports,arguments)
},{"./compound":572,"./nbt.json":573,"dup":379,"protodef":584,"zlib":16}],575:[function(require,module,exports){
arguments[4][227][0].apply(exports,arguments)
},{"_process":219,"dup":227}],576:[function(require,module,exports){
arguments[4][386][0].apply(exports,arguments)
},{"../utils":583,"babel-runtime/helpers/object-without-properties":501,"dup":386}],577:[function(require,module,exports){
arguments[4][387][0].apply(exports,arguments)
},{"babel-runtime/core-js/object/keys":495,"dup":387}],578:[function(require,module,exports){
arguments[4][388][0].apply(exports,arguments)
},{"../utils":583,"babel-runtime/core-js/object/keys":495,"dup":388}],579:[function(require,module,exports){
arguments[4][389][0].apply(exports,arguments)
},{"../utils":583,"assert":2,"babel-runtime/core-js/object/keys":495,"buffer":17,"dup":389}],580:[function(require,module,exports){
arguments[4][390][0].apply(exports,arguments)
},{"./protodef":581,"./serializer":582,"./utils":583,"dup":390}],581:[function(require,module,exports){
arguments[4][391][0].apply(exports,arguments)
},{"./datatypes/conditional":576,"./datatypes/numeric":577,"./datatypes/structures":578,"./datatypes/utils":579,"./utils":583,"babel-runtime/core-js/object/keys":495,"babel-runtime/helpers/class-call-check":497,"babel-runtime/helpers/create-class":498,"buffer":17,"dup":391,"lodash.reduce":540}],582:[function(require,module,exports){
arguments[4][392][0].apply(exports,arguments)
},{"babel-runtime/helpers/class-call-check":497,"babel-runtime/helpers/create-class":498,"babel-runtime/helpers/get":499,"babel-runtime/helpers/inherits":500,"dup":392,"readable-stream":590}],583:[function(require,module,exports){
arguments[4][393][0].apply(exports,arguments)
},{"dup":393}],584:[function(require,module,exports){
arguments[4][394][0].apply(exports,arguments)
},{"./dist/index.js":580,"dup":394}],585:[function(require,module,exports){
arguments[4][395][0].apply(exports,arguments)
},{"./_stream_readable":587,"./_stream_writable":589,"_process":219,"core-util-is":526,"dup":395,"inherits":527}],586:[function(require,module,exports){
arguments[4][396][0].apply(exports,arguments)
},{"./_stream_transform":588,"core-util-is":526,"dup":396,"inherits":527}],587:[function(require,module,exports){
arguments[4][397][0].apply(exports,arguments)
},{"./_stream_duplex":585,"_process":219,"buffer":17,"core-util-is":526,"dup":397,"events":213,"inherits":527,"isarray":528,"stream":233,"string_decoder/":597,"util":3}],588:[function(require,module,exports){
arguments[4][398][0].apply(exports,arguments)
},{"./_stream_duplex":585,"core-util-is":526,"dup":398,"inherits":527}],589:[function(require,module,exports){
arguments[4][399][0].apply(exports,arguments)
},{"./_stream_duplex":585,"_process":219,"buffer":17,"core-util-is":526,"dup":399,"inherits":527,"stream":233}],590:[function(require,module,exports){
arguments[4][400][0].apply(exports,arguments)
},{"./lib/_stream_duplex.js":585,"./lib/_stream_passthrough.js":586,"./lib/_stream_readable.js":587,"./lib/_stream_transform.js":588,"./lib/_stream_writable.js":589,"dup":400,"stream":233}],591:[function(require,module,exports){
arguments[4][221][0].apply(exports,arguments)
},{"./_stream_readable":593,"./_stream_writable":595,"core-util-is":526,"dup":221,"inherits":527,"process-nextick-args":575}],592:[function(require,module,exports){
arguments[4][222][0].apply(exports,arguments)
},{"./_stream_transform":594,"core-util-is":526,"dup":222,"inherits":527}],593:[function(require,module,exports){
arguments[4][223][0].apply(exports,arguments)
},{"./_stream_duplex":591,"_process":219,"buffer":17,"core-util-is":526,"dup":223,"events":213,"inherits":527,"isarray":528,"process-nextick-args":575,"string_decoder/":597,"util":3}],594:[function(require,module,exports){
arguments[4][224][0].apply(exports,arguments)
},{"./_stream_duplex":591,"core-util-is":526,"dup":224,"inherits":527}],595:[function(require,module,exports){
arguments[4][225][0].apply(exports,arguments)
},{"./_stream_duplex":591,"buffer":17,"core-util-is":526,"dup":225,"events":213,"inherits":527,"process-nextick-args":575,"util-deprecate":598}],596:[function(require,module,exports){
arguments[4][230][0].apply(exports,arguments)
},{"./lib/_stream_duplex.js":591,"./lib/_stream_passthrough.js":592,"./lib/_stream_readable.js":593,"./lib/_stream_transform.js":594,"./lib/_stream_writable.js":595,"dup":230}],597:[function(require,module,exports){
arguments[4][234][0].apply(exports,arguments)
},{"buffer":17,"dup":234}],598:[function(require,module,exports){
arguments[4][228][0].apply(exports,arguments)
},{"dup":228}],599:[function(require,module,exports){
arguments[4][409][0].apply(exports,arguments)
},{"buffer":17,"crypto":21,"dup":409,"macaddress":541}],600:[function(require,module,exports){
var mineflayer = require('../../mineflayer-ws');
var tellraw2dom = require('tellraw2dom');

var outputNode = document.getElementById('output');
var inputNode = document.getElementById('input');

var logNode = function(node) {
  outputNode.appendChild(node);
  outputNode.appendChild(document.createElement('br'));
};

var log = function(s) {
  logNode(document.createTextNode(s));
};

// login credential
var username;
var hash = document.location.hash;
if (hash.length < 2) {
  // try anonymous auth
  username = 'lj_media';
} else {
  username = hash.substring(1); // remove #
}

var bot = mineflayer.createBot({
  username: username
});
/* parsed chat event is available, but raw message has more information
bot.on('chat', function(username, message) {
  log('<'+username+'> '+message);
});
*/
bot.on('message', function(message) {
  logNode(tellraw2dom(message.json)); // TODO: also decode color codes
});

bot.on('error', function(exception) {
  console.log(exception);
  if (exception.currentTarget)
    log('WebSocket error connecting to ' + exception.currentTarget.url);
  else
    log('WebSocket error: ' + exception);
});

bot.on('close', function() {
  console.log('WebSocket closed');
});

window.bot = bot;

document.body.addEventListener('keyup', function(event) {
  if (event.keyCode !== 13) return;

  var input = inputNode.value;
  console.log('sending input',input);

  bot.chat(input);
  
  inputNode.value = '';
});

},{"../../mineflayer-ws":605,"tellraw2dom":601}],601:[function(require,module,exports){
'use strict';

var colormc2html = {
  black: 'black',
  dark_blue: '#0000b2',
  dark_green: '#14ab00',
  dark_aqua: '#13aaab',
  dark_red: '#a90400',
  dark_purple: '#a900b2',
  gold: '#feac00',
  gray: 'gray',
  dark_gray: '#555555',
  blue: '#544cff',
  green: '#5cff00',
  aqua: '#5bffff',
  red: '#fd5650',
  light_purple: '#fd4dff',
  yellow: 'yellow',
  white: 'white'
};

var translations = {
  'chat.type.text': '<%s> %s',
  'chat.type.emote': '* %s %s',
  'chat.type.announcement': '[%s] %s',
  'chat.type.admin': '[%s: %s]',
  'chat.stream.text': '(%s) <%s> %s',
  'chat.stream.emote': '(%s) * %s %s'
};

var isTrue = function(x) {
  if (x === undefined) return false;
  if (x === 'false') return false;
  return true;
};

var parseRaw = function(raw, opts) {
  var json;

  opts = opts || {};

  if (typeof raw === 'string') {
    try {
      json = JSON.parse(raw);
    } catch (error) {
      console.log(raw);
      return document.createTextNode('Invalid JSON: ' + error);
    }
  } else {
    json = raw;
  }

  var parseObject = function(element) {
    if (typeof element === 'string') {
      return document.createTextNode(element);
    }

    var node = document.createElement('span');

    if ('color' in element) node.style.color = colormc2html[element.color];
    if (isTrue(element.bold)) node.style.fontWeight = 'bold';
    if (isTrue(element.italic)) node.style.fontStyle = 'italic';
    if (isTrue(element.underlined) || isTrue(element.strikethrough))
      node.style.textDecoration = 
        (isTrue(element.underlined) ? 'underline ' : '') + 
        (isTrue(element.strikethrough) ? 'line-through' : '');

    if ('clickEvent' in element) {
      if (opts.click) {
        node.addEventListener('click', function(ev) {
          opts.click(element, element.clickEvent, ev);
        });
      }
    }

    if ('hoverEvent' in element) {
      if (opts.hover) {
        node.addEventListener('mouseover', function(ev) {
          opts.hover(element, element.hoverEvent, ev);
        });
      }

      if (opts.hoverOut) {
        node.addEventListener('mouseout', function(ev) {
          opts.hoverOut(element, element.hoverEvent, ev);
        });
      }
    }

    if ('text' in element) node.textContent = element.text;
    if ('translate' in element) {
      var translate = translations[element.translate] || element.translate;
      var translateTexts = translate.split('%s');

      (element['with'] || []).forEach(function(x, i) {
        node.appendChild(document.createTextNode(translateTexts[i] || ' '));
        node.appendChild(parseObject(x));
      });

      if (!/%s$/.test(translateTexts))
        node.appendChild(document.createTextNode(translateTexts.splice(-1)[0]));
    }

    if ('extra' in element) {
      element.extra.forEach(function(x) {
        node.appendChild(parseObject(x));
      });
    }

    return node;
  };

  return parseObject(json);

  // references:
  // http://ezekielelin.com/minecraft/tellraw/
  // https://github.com/deathcap/node-minecraft-protocol/blob/986cf0af918768e98ec6b95a9dfcab46f5204e5e/examples/client_chat.js#L116
}
module.exports = parseRaw;



},{}],602:[function(require,module,exports){
module.exports = '1.8';

},{}],603:[function(require,module,exports){
(function (Buffer){
'use strict';

//process.env.NODE_DEBUG = 'mc-proto'; // for node-minecraft-protocol console packet debugging TODO: envify

var EmptyTransformStream = require('through')();
var Client = require('minecraft-protocol').Client;
var forgeHandshake = require('minecraft-protocol-forge').forgeHandshake;
var protocol = require('minecraft-protocol');
var assert = require('assert');
var states = protocol.states;

module.exports = {
  protocol: protocol,
  createClient: createClient
};

// generic stream version of index.js createClient()
function createClient(options) {
  assert.ok(options, "options is required");
  var stream = options.stream;
  assert.ok(stream, "stream is required");

  assert.ok(options.username, "username is required");
  var keepAlive = options.keepAlive == null ? true : options.keepAlive;

  var optVersion = options.version || require('./mcversion.js');
  var mcData = require('minecraft-data')(optVersion);
  var version = mcData.version;

  var client = new Client(false, version.majorVersion);

  // Options to opt-out of MC protocol packet framing (useful since WS is alreay framed)
  if (options.noPacketFramer) {
    client.framer = EmptyTransformStream;
  }
  if (options.noPacketSplitter) {
    client.splitter = EmptyTransformStream;
  }

  client.on('connect', onConnect);
  client.once('success', onLogin);
  client.once('compress', onCompressionRequest);
  client.once('set_compression', onCompressionRequest);
  if (keepAlive) client.on('keep_alive', onKeepAlive);

  client.username = options.username;
  client.setSocket(stream);

  return client;

  function onConnect() {
    client.socket.write(new Buffer(client.username));
    // wsmc uses slightly abbreviated protocol; skip the HANDSHAKING phase, go
    // directly to LOGIN, to receive login success and set compression packets
    client.state = states.LOGIN;
  }

  function onLogin(packet) {
    console.log('onLogin',packet);
    // successful login, transition to play phase
    client.state = states.PLAY;
    client.uuid = packet.uuid;

    if (packet.username.indexOf('\0') !== -1) {
      var parts = packet.username.split('\0');
      console.log('WSMC-augmented login packet detected, username field pieces: ',parts);
      client.username = parts[0];
      client.wsmcPingResponse = JSON.parse(parts[1]); // ping payload response, modinfo for Forge servers

      if (client.wsmcPingResponse.modinfo && client.wsmcPingResponse.modinfo.type === 'FML') {
        var modList = client.wsmcPingResponse.modinfo.modList;
        console.log('Enabling Forge support with mods:', modList);
        forgeHandshake(client, {forgeMods: modList});
      }
    } else {
      client.username = packet.username;
    }
  }

  function onCompressionRequest(packet) {
    console.log('onCompressionRequest', packet);
    client.compressionThreshold = packet.threshold;
  }

  function onKeepAlive(packet) {
    client.write('keep_alive', {
      keepAliveId: packet.keepAliveId
    });
  }
}

}).call(this,require("buffer").Buffer)
},{"./mcversion.js":602,"assert":2,"buffer":17,"minecraft-data":623,"minecraft-protocol":480,"minecraft-protocol-forge":412,"through":651}],604:[function(require,module,exports){
(function (global){
'use strict';

var mc = require('./minecraft-protocol-stream')
  , hex = require('browser-hex')
  , EventEmitter = require('events').EventEmitter
  , util = require('util')
  , path = require('path')
  , plugins = {
      bed: require('mineflayer/lib/plugins/bed'),
      block_actions: require('mineflayer/lib/plugins/block_actions'),
      blocks: require('mineflayer/lib/plugins/blocks'),
      chat: require('mineflayer/lib/plugins/chat'),
      chest: require('mineflayer/lib/plugins/chest'),
      craft: require('mineflayer/lib/plugins/craft'),
      creative: require('mineflayer/lib/plugins/creative'),
      digging: require('mineflayer/lib/plugins/digging'),
      dispenser: require('mineflayer/lib/plugins/dispenser'),
      enchantment_table: require('mineflayer/lib/plugins/enchantment_table'),
      entities: require('mineflayer/lib/plugins/entities'),
      experience: require('mineflayer/lib/plugins/experience'),
      game: require('mineflayer/lib/plugins/game'),
      health: require('mineflayer/lib/plugins/health'),
      inventory: require('mineflayer/lib/plugins/inventory'),
      kick: require('mineflayer/lib/plugins/kick'),
      physics: require('mineflayer/lib/plugins/physics'),
      rain: require('mineflayer/lib/plugins/rain'),
      settings: require('mineflayer/lib/plugins/settings'),
      simple_inventory: require('mineflayer/lib/plugins/simple_inventory'),
      sound: require('mineflayer/lib/plugins/sound'),
      spawn_point: require('mineflayer/lib/plugins/spawn_point'),
      time: require('mineflayer/lib/plugins/time')
    }
  , mcData = require('minecraft-data');

var PACKET_DEBUG = false;

if (PACKET_DEBUG) global.hex = hex;
module.exports = {
  //vec3: require('vec3'), // not really needed
  createBot: createBot,
  Block: require('mineflayer').Block,
  Location: require('mineflayer').Location,
  Biome: require('mineflayer').Biome,
  Entity: require('mineflayer').Entity,
  Painting: require('mineflayer').Painting,
  Item: require('mineflayer').Item,
  Recipe: require('mineflayer').Recipe,
  windows: require('mineflayer').windows,
  Chest: require('mineflayer').Chest,
  Furnace: require('mineflayer').Furnace,
  Dispenser: require('mineflayer').Dispenser,
  EnchantmentTable: require('mineflayer').EnchantmentTable,
  blocks: mcData.blocks,
  biomes: mcData.biomes,
  items: mcData.items,
  recipes: mcData.recipes,
  instruments: mcData.instruments,
  materials: mcData.materials,
};

function createBot(options) {
  options.username = options.username || 'Player';
  if (!options.stream) throw new Error('createBot requires options.stream');

  var bot = new Bot();
  bot.connect(options);
  return bot;
}

function Bot() {
  EventEmitter.call(this);
  this._client = null;
}
util.inherits(Bot, EventEmitter);

Bot.prototype.connect = function(options) {
  var self = this;
  self._client = mc.createClient(options);
  self.username = self._client.username;
  self._client.on('raw', function(raw) {
    if (PACKET_DEBUG) {
      console.log('received ',raw.length+' raw bytes');
      console.log(hex(raw));
    }
  });
  self._client.on('session', function() {
    self.username = self._client.username;
  });
  self._client.on('connect', function() {
    self.emit('connect');
  });
  self._client.on('error', function(err) {
    self.emit('error', err);
  });
  self._client.on('end', function() {
    self.emit('end');
  });
  for (var pluginName in plugins) {
    plugins[pluginName](self, options);
  }
};

Bot.prototype.end = function() {
  this.client.end();
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./minecraft-protocol-stream":603,"browser-hex":606,"events":213,"minecraft-data":623,"mineflayer":239,"mineflayer/lib/plugins/bed":250,"mineflayer/lib/plugins/block_actions":251,"mineflayer/lib/plugins/blocks":252,"mineflayer/lib/plugins/chat":253,"mineflayer/lib/plugins/chest":254,"mineflayer/lib/plugins/craft":256,"mineflayer/lib/plugins/creative":257,"mineflayer/lib/plugins/digging":258,"mineflayer/lib/plugins/dispenser":259,"mineflayer/lib/plugins/enchantment_table":260,"mineflayer/lib/plugins/entities":261,"mineflayer/lib/plugins/experience":262,"mineflayer/lib/plugins/game":264,"mineflayer/lib/plugins/health":265,"mineflayer/lib/plugins/inventory":266,"mineflayer/lib/plugins/kick":267,"mineflayer/lib/plugins/physics":268,"mineflayer/lib/plugins/rain":269,"mineflayer/lib/plugins/settings":271,"mineflayer/lib/plugins/simple_inventory":272,"mineflayer/lib/plugins/sound":273,"mineflayer/lib/plugins/spawn_point":274,"mineflayer/lib/plugins/time":275,"path":218,"util":236}],605:[function(require,module,exports){
'use strict';

var mineflayer = require('./mineflayer-stream');
var websocket_stream = require('websocket-stream');

function createBot(options) {
  options.username = options.username || 'Player';

  var protocol = options.protocol || 'ws';
  var host = options.host || window.default_host;
  var port = options.port || window.default_port;
  var path = options.path || 'server';
  var url = options.url || (protocol + '://' + host + ':' + port + '/' + path);

  options.noPacketFramer = true;
  //options.noPacketSplitter = true;
  options.stream = websocket_stream(url);

  return mineflayer.createBot(options);
}

module.exports = {
  createBot: createBot
};

},{"./mineflayer-stream":604,"websocket-stream":659}],606:[function(require,module,exports){
'use strict';

var zero = function (n, max) {
  n = n.toString(16).toUpperCase();
  while (n.length < max) {
    n = '0' + n;
  }
  return n;
};

module.exports = function (buffer) {
  var rows = Math.ceil(buffer.length / 16);
  var last = buffer.length % 16 || 16;
  var offsetLength = buffer.length.toString(16).length;
  if (offsetLength < 6) offsetLength = 6;

  var str = 'Offset';
  while (str.length < offsetLength) {
    str += ' ';
  }

  str += '  ';

  var i;
  for (i = 0; i < 16; i++) {
    str += ' ' + zero(i, 2);
  }

  if (buffer.length) str += '\n';

  var b = 0;
  var lastBytes;
  var lastSpaces;
  var v;

  for (i = 0; i < rows; i++) {
    str += zero(b, offsetLength) + '  ';
    lastBytes = i === rows - 1 ? last : 16;
    lastSpaces = 16 - lastBytes;

    var j;
    for (j = 0; j < lastBytes; j++) {
      str += ' ' + zero(buffer[b], 2);
      b++;
    }

    for (j = 0; j < lastSpaces; j++) {
      str += '   ';
    }

    b -= lastBytes;
    str += '   ';

    for (j = 0; j < lastBytes; j++) {
      v = buffer[b];
      str += (v > 31 && v < 127) || v > 159 ? String.fromCharCode(v) : '.';
      b++;
    }

    str += '\n';
  }

  return str;
};

},{}],607:[function(require,module,exports){
arguments[4][312][0].apply(exports,arguments)
},{"../../../../../../.nvm/versions/node/v4.2.4/lib/node_modules/browserify/node_modules/insert-module-globals/node_modules/is-buffer/index.js":215,"dup":312}],608:[function(require,module,exports){
(function (process,Buffer){
var stream = require('readable-stream')
var eos = require('end-of-stream')
var util = require('util')

var SIGNAL_FLUSH = new Buffer([0])

var onuncork = function(self, fn) {
  if (self._corked) self.once('uncork', fn)
  else fn()
}

var destroyer = function(self, end) {
  return function(err) {
    if (err) self.destroy(err.message === 'premature close' ? null : err)
    else if (end && !self._ended) self.end()
  }
}

var end = function(ws, fn) {
  if (!ws) return fn()
  if (ws._writableState && ws._writableState.finished) return fn()
  if (ws._writableState) return ws.end(fn)
  ws.end()
  fn()
}

var toStreams2 = function(rs) {
  return new (stream.Readable)({objectMode:true, highWaterMark:16}).wrap(rs)
}

var Duplexify = function(writable, readable, opts) {
  if (!(this instanceof Duplexify)) return new Duplexify(writable, readable, opts)
  stream.Duplex.call(this, opts)

  this._writable = null
  this._readable = null
  this._readable2 = null

  this._forwardDestroy = !opts || opts.destroy !== false
  this._forwardEnd = !opts || opts.end !== false
  this._corked = 1 // start corked
  this._ondrain = null
  this._drained = false
  this._forwarding = false
  this._unwrite = null
  this._unread = null
  this._ended = false

  this.destroyed = false

  if (writable) this.setWritable(writable)
  if (readable) this.setReadable(readable)
}

util.inherits(Duplexify, stream.Duplex)

Duplexify.obj = function(writable, readable, opts) {
  if (!opts) opts = {}
  opts.objectMode = true
  opts.highWaterMark = 16
  return new Duplexify(writable, readable, opts)
}

Duplexify.prototype.cork = function() {
  if (++this._corked === 1) this.emit('cork')
}

Duplexify.prototype.uncork = function() {
  if (this._corked && --this._corked === 0) this.emit('uncork')
}

Duplexify.prototype.setWritable = function(writable) {
  if (this._unwrite) this._unwrite()

  if (this.destroyed) {
    if (writable && writable.destroy) writable.destroy()
    return
  }

  if (writable === null || writable === false) {
    this.end()
    return
  }

  var self = this
  var unend = eos(writable, {writable:true, readable:false}, destroyer(this, this._forwardEnd))

  var ondrain = function() {
    var ondrain = self._ondrain
    self._ondrain = null
    if (ondrain) ondrain()
  }

  var clear = function() {
    self._writable.removeListener('drain', ondrain)
    unend()
  }

  if (this._unwrite) process.nextTick(ondrain) // force a drain on stream reset to avoid livelocks

  this._writable = writable
  this._writable.on('drain', ondrain)
  this._unwrite = clear

  this.uncork() // always uncork setWritable
}

Duplexify.prototype.setReadable = function(readable) {
  if (this._unread) this._unread()

  if (this.destroyed) {
    if (readable && readable.destroy) readable.destroy()
    return
  }

  if (readable === null || readable === false) {
    this.push(null)
    this.resume()
    return
  }

  var self = this
  var unend = eos(readable, {writable:false, readable:true}, destroyer(this))

  var onreadable = function() {
    self._forward()
  }

  var onend = function() {
    self.push(null)
  }

  var clear = function() {
    self._readable2.removeListener('readable', onreadable)
    self._readable2.removeListener('end', onend)
    unend()
  }

  this._drained = true
  this._readable = readable
  this._readable2 = readable._readableState ? readable : toStreams2(readable)
  this._readable2.on('readable', onreadable)
  this._readable2.on('end', onend)
  this._unread = clear

  this._forward()
}

Duplexify.prototype._read = function() {
  this._drained = true
  this._forward()
}

Duplexify.prototype._forward = function() {
  if (this._forwarding || !this._readable2 || !this._drained) return
  this._forwarding = true

  var data
  var state = this._readable2._readableState

  while ((data = this._readable2.read(state.buffer.length ? state.buffer[0].length : state.length)) !== null) {
    this._drained = this.push(data)
  }

  this._forwarding = false
}

Duplexify.prototype.destroy = function(err) {
  if (this.destroyed) return
  this.destroyed = true

  var self = this
  process.nextTick(function() {
    self._destroy(err)
  })
}

Duplexify.prototype._destroy = function(err) {
  if (err) {
    var ondrain = this._ondrain
    this._ondrain = null
    if (ondrain) ondrain(err)
    else this.emit('error', err)
  }

  if (this._forwardDestroy) {
    if (this._readable && this._readable.destroy) this._readable.destroy()
    if (this._writable && this._writable.destroy) this._writable.destroy()
  }

  this.emit('close')
}

Duplexify.prototype._write = function(data, enc, cb) {
  if (this.destroyed) return cb()
  if (this._corked) return onuncork(this, this._write.bind(this, data, enc, cb))
  if (data === SIGNAL_FLUSH) return this._finish(cb)
  if (!this._writable) return cb()

  if (this._writable.write(data) === false) this._ondrain = cb
  else cb()
}


Duplexify.prototype._finish = function(cb) {
  var self = this
  this.emit('preend')
  onuncork(this, function() {
    end(self._forwardEnd && self._writable, function() {
      // haxx to not emit prefinish twice
      if (self._writableState.prefinished === false) self._writableState.prefinished = true
      self.emit('prefinish')
      onuncork(self, cb)
    })
  })
}

Duplexify.prototype.end = function(data, enc, cb) {
  if (typeof data === 'function') return this.end(null, null, data)
  if (typeof enc === 'function') return this.end(data, null, enc)
  this._ended = true
  if (data) this.write(data)
  if (!this._writableState.ending) this.write(SIGNAL_FLUSH)
  return stream.Writable.prototype.end.call(this, cb)
}

module.exports = Duplexify
}).call(this,require('_process'),require("buffer").Buffer)
},{"_process":219,"buffer":17,"end-of-stream":620,"readable-stream":619,"util":236}],609:[function(require,module,exports){
arguments[4][221][0].apply(exports,arguments)
},{"./_stream_readable":611,"./_stream_writable":613,"core-util-is":614,"dup":221,"inherits":621,"process-nextick-args":616}],610:[function(require,module,exports){
arguments[4][222][0].apply(exports,arguments)
},{"./_stream_transform":612,"core-util-is":614,"dup":222,"inherits":621}],611:[function(require,module,exports){
arguments[4][223][0].apply(exports,arguments)
},{"./_stream_duplex":609,"_process":219,"buffer":17,"core-util-is":614,"dup":223,"events":213,"inherits":621,"isarray":615,"process-nextick-args":616,"string_decoder/":617,"util":3}],612:[function(require,module,exports){
arguments[4][224][0].apply(exports,arguments)
},{"./_stream_duplex":609,"core-util-is":614,"dup":224,"inherits":621}],613:[function(require,module,exports){
arguments[4][225][0].apply(exports,arguments)
},{"./_stream_duplex":609,"buffer":17,"core-util-is":614,"dup":225,"events":213,"inherits":621,"process-nextick-args":616,"util-deprecate":618}],614:[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":require("../../../../../../../../../../.nvm/versions/node/v4.2.4/lib/node_modules/browserify/node_modules/insert-module-globals/node_modules/is-buffer/index.js")})
},{"../../../../../../../../../../.nvm/versions/node/v4.2.4/lib/node_modules/browserify/node_modules/insert-module-globals/node_modules/is-buffer/index.js":215}],615:[function(require,module,exports){
arguments[4][216][0].apply(exports,arguments)
},{"dup":216}],616:[function(require,module,exports){
arguments[4][227][0].apply(exports,arguments)
},{"_process":219,"dup":227}],617:[function(require,module,exports){
arguments[4][234][0].apply(exports,arguments)
},{"buffer":17,"dup":234}],618:[function(require,module,exports){
arguments[4][228][0].apply(exports,arguments)
},{"dup":228}],619:[function(require,module,exports){
arguments[4][230][0].apply(exports,arguments)
},{"./lib/_stream_duplex.js":609,"./lib/_stream_passthrough.js":610,"./lib/_stream_readable.js":611,"./lib/_stream_transform.js":612,"./lib/_stream_writable.js":613,"dup":230}],620:[function(require,module,exports){
var once = require('once');

var noop = function() {};

var isRequest = function(stream) {
	return stream.setHeader && typeof stream.abort === 'function';
};

var eos = function(stream, opts, callback) {
	if (typeof opts === 'function') return eos(stream, null, opts);
	if (!opts) opts = {};

	callback = once(callback || noop);

	var ws = stream._writableState;
	var rs = stream._readableState;
	var readable = opts.readable || (opts.readable !== false && stream.readable);
	var writable = opts.writable || (opts.writable !== false && stream.writable);

	var onlegacyfinish = function() {
		if (!stream.writable) onfinish();
	};

	var onfinish = function() {
		writable = false;
		if (!readable) callback();
	};

	var onend = function() {
		readable = false;
		if (!writable) callback();
	};

	var onclose = function() {
		if (readable && !(rs && rs.ended)) return callback(new Error('premature close'));
		if (writable && !(ws && ws.ended)) return callback(new Error('premature close'));
	};

	var onrequest = function() {
		stream.req.on('finish', onfinish);
	};

	if (isRequest(stream)) {
		stream.on('complete', onfinish);
		stream.on('abort', onclose);
		if (stream.req) onrequest();
		else stream.on('request', onrequest);
	} else if (writable && !ws) { // legacy streams
		stream.on('end', onlegacyfinish);
		stream.on('close', onlegacyfinish);
	}

	stream.on('end', onend);
	stream.on('finish', onfinish);
	if (opts.error !== false) stream.on('error', callback);
	stream.on('close', onclose);

	return function() {
		stream.removeListener('complete', onfinish);
		stream.removeListener('abort', onclose);
		stream.removeListener('request', onrequest);
		if (stream.req) stream.req.removeListener('finish', onfinish);
		stream.removeListener('end', onlegacyfinish);
		stream.removeListener('close', onlegacyfinish);
		stream.removeListener('finish', onfinish);
		stream.removeListener('end', onend);
		stream.removeListener('error', callback);
		stream.removeListener('close', onclose);
	};
};

module.exports = eos;
},{"once":649}],621:[function(require,module,exports){
arguments[4][214][0].apply(exports,arguments)
},{"dup":214}],622:[function(require,module,exports){
arguments[4][216][0].apply(exports,arguments)
},{"dup":216}],623:[function(require,module,exports){
var loader=require("./lib/loader");

module.exports = function(version)
{
  return loader(version,mcVersionToMcData);
};

function mcVersionToMcData(mcVersion)
{
  return data[mcVersion];
}

var data={
  "1.8":{
    blocks:require('./minecraft-data/data/1.8/blocks'),
    biomes: require('./minecraft-data/data/1.8/biomes'),
    effects: require('./minecraft-data/data/1.8/effects'),
    items: require('./minecraft-data/data/1.8/items'),
    recipes: require('./minecraft-data/data/1.8/recipes'),
    instruments: require('./minecraft-data/data/1.8/instruments'),
    materials: require('./minecraft-data/data/1.8/materials'),
    entities: require('./minecraft-data/data/1.8/entities'),
    protocol: require('./minecraft-data/data/1.8/protocol'),
    windows: require('./minecraft-data/data/1.8/windows'),
    version: require('./minecraft-data/data/1.8/version')
  },
  "1.9":{
    blocks:require('./minecraft-data/data/1.9/blocks'),
    biomes: require('./minecraft-data/data/1.9/biomes'),
    effects: require('./minecraft-data/data/1.9/effects'),
    items: require('./minecraft-data/data/1.9/items'),
    recipes: require('./minecraft-data/data/1.9/recipes'),
    instruments: require('./minecraft-data/data/1.9/instruments'),
    materials: require('./minecraft-data/data/1.9/materials'),
    entities: require('./minecraft-data/data/1.9/entities'),
    protocol: require('./minecraft-data/data/1.9/protocol'),
    windows: require('./minecraft-data/data/1.9/windows'),
    version: require('./minecraft-data/data/1.9/version')
  }
};
},{"./lib/loader":626,"./minecraft-data/data/1.8/biomes":627,"./minecraft-data/data/1.8/blocks":628,"./minecraft-data/data/1.8/effects":629,"./minecraft-data/data/1.8/entities":630,"./minecraft-data/data/1.8/instruments":631,"./minecraft-data/data/1.8/items":632,"./minecraft-data/data/1.8/materials":633,"./minecraft-data/data/1.8/protocol":634,"./minecraft-data/data/1.8/recipes":635,"./minecraft-data/data/1.8/version":636,"./minecraft-data/data/1.8/windows":637,"./minecraft-data/data/1.9/biomes":638,"./minecraft-data/data/1.9/blocks":639,"./minecraft-data/data/1.9/effects":640,"./minecraft-data/data/1.9/entities":641,"./minecraft-data/data/1.9/instruments":642,"./minecraft-data/data/1.9/items":643,"./minecraft-data/data/1.9/materials":644,"./minecraft-data/data/1.9/protocol":645,"./minecraft-data/data/1.9/recipes":646,"./minecraft-data/data/1.9/version":647,"./minecraft-data/data/1.9/windows":648}],624:[function(require,module,exports){
module.exports={
  buildIndexFromObject:
    function(object,fieldToIndex) {
      return Object.keys(object).reduce(function(index,key){
        index[object[key][fieldToIndex]]=object[key];
        return index;
      },{});
    },
  buildIndexFromArray:
    function(array,fieldToIndex) {
      return array.reduce(function(index,element){
        index[element[fieldToIndex]]=element;
        return index;
      },{});
    }
};
},{}],625:[function(require,module,exports){
var indexer=require("./indexer.js");

module.exports= function(mcData){
  return {
    biomesById:indexer.buildIndexFromArray(mcData.biomes,"id"),

    blocksById:indexer.buildIndexFromArray(mcData.blocks,"id"),
    blocksByName:indexer.buildIndexFromArray(mcData.blocks,"name"),

    entitiesById:indexer.buildIndexFromArray(mcData.entities,"id"),
    entitiesByName:indexer.buildIndexFromArray(mcData.entities,"name"),

    instrumentsById:indexer.buildIndexFromArray(mcData.instruments,"id"),

    itemsById:indexer.buildIndexFromArray(mcData.items,"id"),
    itemsByName:indexer.buildIndexFromArray(mcData.items,"name"),

    windowsById:indexer.buildIndexFromArray(mcData.windows,"id"),
    windowsByName:indexer.buildIndexFromArray(mcData.windows,"name"),

    effectsById:indexer.buildIndexFromArray(mcData.effects,"id"),
    effectsByName:indexer.buildIndexFromArray(mcData.effects,"name")
  };
};
},{"./indexer.js":624}],626:[function(require,module,exports){
var cache={}; // prevent reindexing when requiring multiple time the same version

module.exports = function(mcVersion,getData)
{
  var majorVersion=toMajor(mcVersion);
  if(majorVersion==null)
    return null;
  if(cache[majorVersion])
    return cache[majorVersion];
  var mcData=getData(majorVersion);
  if(mcData==null)
    return null;
  var nmcData=mcDataToNode(mcData);
  cache[majorVersion]=nmcData;
  return nmcData;
};

function toMajor(mcVersion)
{
  var parts=mcVersion.split(".");
  if(parts.size<=1)
    return null;
  mcVersion=parts.slice(0,2).join(".");
  return mcVersion;
}

function mcDataToNode(mcData) {
  var indexes=require("./indexes.js")(mcData);
  return {
    blocks: indexes.blocksById,
    blocksByName: indexes.blocksByName,
    blocksArray: mcData.blocks,

    biomes: indexes.biomesById,
    biomesArray: mcData.biomes,

    items: indexes.itemsById,
    itemsByName: indexes.itemsByName,
    itemsArray: mcData.items,

    recipes: mcData.recipes,

    instruments: indexes.instrumentsById,
    instrumentsArray: mcData.instruments,

    materials: mcData.materials,

    entities: indexes.entitiesById,
    entitiesByName: indexes.entitiesByName,
    entitiesArray: mcData.entities,

    windows: indexes.windowsById,
    windowsByName: indexes.windowsByName,
    windowsArray: mcData.windows,

    protocol: mcData.protocol,

    version: mcData.version,

    effects: indexes.effectsById,
    effectsByName: indexes.effectsByName,
    effectsArray: mcData.effects,
    

    findItemOrBlockById: function (id) {
      var item = indexes.itemsById[id];
      if (item !== undefined) return item;
      return indexes.blocksById[id];
    },
    findItemOrBlockByName: function (name) {
      var item = indexes.itemsByName[name];
      if (item !== undefined) return item;
      return indexes.blocksByName[name];
    }
  };
}

},{"./indexes.js":625}],627:[function(require,module,exports){
arguments[4][336][0].apply(exports,arguments)
},{"dup":336}],628:[function(require,module,exports){
arguments[4][337][0].apply(exports,arguments)
},{"dup":337}],629:[function(require,module,exports){
arguments[4][338][0].apply(exports,arguments)
},{"dup":338}],630:[function(require,module,exports){
module.exports=[
  {
    "id": 1,
    "displayName": "Dropped item",
    "name": "Item",
    "type": "Drops"
  },
  {
    "id": 2,
    "displayName": "Experience Orb",
    "name": "XPOrb",
    "type": "Drops"
  },
  {
    "id": 8,
    "displayName": "Lead knot",
    "name": "LeashKnot",
    "type": "Immobile"
  },
  {
    "id": 9,
    "displayName": "Painting",
    "name": "Painting",
    "type": "Immobile"
  },
  {
    "id": 10,
    "displayName": "Shot arrow",
    "name": "Arrow",
    "type": "Projectiles"
  },
  {
    "id": 11,
    "displayName": "Thrown snowball",
    "name": "Snowball",
    "type": "Projectiles"
  },
  {
    "id": 12,
    "displayName": "Ghast fireball",
    "name": "Fireball",
    "type": "Projectiles"
  },
  {
    "id": 13,
    "displayName": "Blaze fireball",
    "name": "SmallFireball",
    "type": "Projectiles"
  },
  {
    "id": 14,
    "displayName": "Thrown Ender Pearl",
    "name": "ThrownEnderpearl",
    "type": "Projectiles"
  },
  {
    "id": 15,
    "displayName": "Thrown Eye of Ender",
    "name": "EyeOfEnderSignal",
    "type": "Projectiles"
  },
  {
    "id": 16,
    "displayName": "Thrown splash potion",
    "name": "ThrownPotion",
    "type": "Projectiles"
  },
  {
    "id": 17,
    "displayName": "Thrown Bottle o' Enchanting",
    "name": "ThrownExpBottle",
    "type": "Projectiles"
  },
  {
    "id": 18,
    "displayName": "Item Frame",
    "name": "ItemFrame",
    "type": "Immobile"
  },
  {
    "id": 19,
    "displayName": "Wither Skull",
    "name": "WitherSkull",
    "type": "Projectiles"
  },
  {
    "id": 20,
    "displayName": "Primed TNT",
    "name": "PrimedTnt",
    "type": "Blocks"
  },
  {
    "id": 21,
    "displayName": "Falling block",
    "name": "FallingSand",
    "type": "Blocks"
  },
  {
    "id": 22,
    "displayName": "Firework Rocket",
    "name": "FireworksRocketEntity",
    "type": "Projectiles"
  },
  {
    "id": 30,
    "displayName": "Armor Stand",
    "name": "ArmorStand",
    "type": "Immobile"
  },
  {
    "id": 40,
    "displayName": "Minecart with Command Block",
    "name": "MinecartCommandBlock",
    "type": "Vehicles"
  },
  {
    "id": 41,
    "displayName": "Boat",
    "name": "Boat",
    "type": "Vehicles"
  },
  {
    "id": 42,
    "displayName": "Minecart",
    "name": "MinecartRideable",
    "type": "Vehicles"
  },
  {
    "id": 43,
    "displayName": "Minecart with Chest",
    "name": "MinecartChest",
    "type": "Vehicles"
  },
  {
    "id": 44,
    "displayName": "Minecart with Furnace",
    "name": "MinecartFurnace",
    "type": "Vehicles"
  },
  {
    "id": 45,
    "displayName": "Minecart with TNT",
    "name": "MinecartTNT",
    "type": "Vehicles"
  },
  {
    "id": 46,
    "displayName": "Minecart with Hopper",
    "name": "MinecartHopper",
    "type": "Vehicles"
  },
  {
    "id": 47,
    "displayName": "Minecart with Spawner",
    "name": "MinecartSpawner",
    "type": "Vehicles"
  },
  {
    "id": 48,
    "displayName": "Mob",
    "name": "Mob",
    "type": "Generic"
  },
  {
    "id": 49,
    "displayName": "Monster",
    "name": "Monster",
    "type": "Generic"
  },
  {
    "id": 50,
    "displayName": "Creeper",
    "name": "Creeper",
    "type": "Hostile mobs"
  },
  {
    "id": 51,
    "displayName": "Skeleton",
    "name": "Skeleton",
    "type": "Hostile mobs"
  },
  {
    "id": 52,
    "displayName": "Spider",
    "name": "Spider",
    "type": "Hostile mobs"
  },
  {
    "id": 53,
    "displayName": "Giant",
    "name": "Giant",
    "type": "Hostile mobs"
  },
  {
    "id": 54,
    "displayName": "Zombie Villager",
    "name": "Zombie",
    "type": "Hostile mobs"
  },
  {
    "id": 55,
    "displayName": "Slime",
    "name": "Slime",
    "type": "Hostile mobs"
  },
  {
    "id": 56,
    "displayName": "Ghast",
    "name": "Ghast",
    "type": "Hostile mobs"
  },
  {
    "id": 57,
    "displayName": "Zombie Pigman",
    "name": "PigZombie",
    "type": "Hostile mobs"
  },
  {
    "id": 58,
    "displayName": "Enderman",
    "name": "Enderman",
    "type": "Hostile mobs"
  },
  {
    "id": 59,
    "displayName": "Cave Spider",
    "name": "CaveSpider",
    "type": "Hostile mobs"
  },
  {
    "id": 60,
    "displayName": "Silverfish",
    "name": "Silverfish",
    "type": "Hostile mobs"
  },
  {
    "id": 61,
    "displayName": "Blaze",
    "name": "Blaze",
    "type": "Hostile mobs"
  },
  {
    "id": 62,
    "displayName": "Magma Cube",
    "name": "LavaSlime",
    "type": "Hostile mobs"
  },
  {
    "id": 63,
    "displayName": "Ender Dragon",
    "name": "EnderDragon",
    "type": "Hostile mobs"
  },
  {
    "id": 64,
    "displayName": "Wither",
    "name": "WitherBoss",
    "type": "Hostile mobs"
  },
  {
    "id": 65,
    "displayName": "Bat",
    "name": "Bat",
    "type": "Passive mobs"
  },
  {
    "id": 66,
    "displayName": "Witch",
    "name": "Witch",
    "type": "Hostile mobs"
  },
  {
    "id": 67,
    "displayName": "Endermite",
    "name": "Endermite",
    "type": "Hostile mobs"
  },
  {
    "id": 68,
    "displayName": "Guardian",
    "name": "Guardian",
    "type": "Hostile mobs"
  },
  {
    "id": 90,
    "displayName": "Pig",
    "name": "Pig",
    "type": "Passive mobs"
  },
  {
    "id": 91,
    "displayName": "Sheep",
    "name": "Sheep",
    "type": "Passive mobs"
  },
  {
    "id": 92,
    "displayName": "Cow",
    "name": "Cow",
    "type": "Passive mobs"
  },
  {
    "id": 93,
    "displayName": "Chicken",
    "name": "Chicken",
    "type": "Passive mobs"
  },
  {
    "id": 94,
    "displayName": "Squid",
    "name": "Squid",
    "type": "Passive mobs"
  },
  {
    "id": 95,
    "displayName": "Wolf",
    "name": "Wolf",
    "type": "Passive mobs"
  },
  {
    "id": 96,
    "displayName": "Mooshroom",
    "name": "MushroomCow",
    "type": "Passive mobs"
  },
  {
    "id": 97,
    "displayName": "Snow Golem",
    "name": "SnowMan",
    "type": "Passive mobs"
  },
  {
    "id": 98,
    "displayName": "Ocelot",
    "name": "Ozelot",
    "type": "Passive mobs"
  },
  {
    "id": 99,
    "displayName": "Iron Golem",
    "name": "VillagerGolem",
    "type": "Passive mobs"
  },
  {
    "id": 100,
    "displayName": "Horse",
    "name": "EntityHorse",
    "type": "Passive mobs"
  },
  {
    "id": 101,
    "displayName": "Rabbit",
    "name": "Rabbit",
    "type": "Passive mobs"
  },
  {
    "id": 120,
    "displayName": "Villager",
    "name": "Villager",
    "type": "NPCs"
  },
  {
    "id": 200,
    "displayName": "Ender Crystal",
    "name": "EnderCrystal",
    "type": "Immobile"
  }
]
},{}],631:[function(require,module,exports){
arguments[4][340][0].apply(exports,arguments)
},{"dup":340}],632:[function(require,module,exports){
arguments[4][341][0].apply(exports,arguments)
},{"dup":341}],633:[function(require,module,exports){
arguments[4][342][0].apply(exports,arguments)
},{"dup":342}],634:[function(require,module,exports){
arguments[4][343][0].apply(exports,arguments)
},{"dup":343}],635:[function(require,module,exports){
arguments[4][344][0].apply(exports,arguments)
},{"dup":344}],636:[function(require,module,exports){
arguments[4][345][0].apply(exports,arguments)
},{"dup":345}],637:[function(require,module,exports){
module.exports=[
  {
    "id": "",
    "name": "Player",
    "slots": [
      {
        "name": "craft result",
        "index": 0
      },
      {
        "name": "craft grid",
        "index": 1,
        "size": 4
      },
      {
        "name": "armor",
        "index": 5,
        "size": 4
      },
      {
        "name": "helmet",
        "index": 5
      },
      {
        "name": "chestplate",
        "index": 6
      },
      {
        "name": "leggings",
        "index": 7
      },
      {
        "name": "boots",
        "index": 8
      }
    ]
  },
  {
    "id": "EntityHorse",
    "name": "Horse",
    "slots": [
      {
        "name": "saddle",
        "index": 0
      },
      {
        "name": "armor",
        "index": 1
      },
      {
        "name": "storage",
        "index": 2,
        "size": 15
      }
    ],
    "openedWith": [
      {
        "type": "entity",
        "id": 100
      }
    ]
  },
  {
    "id": "minecraft:anvil",
    "name": "Anvil",
    "slots": [
      {
        "name": "tool",
        "index": 0
      },
      {
        "name": "combined",
        "index": 1
      },
      {
        "name": "result",
        "index": 2
      }
    ],
    "properties": [
      "repair cost"
    ]
  },
  {
    "id": "minecraft:beacon",
    "name": "Beacon",
    "slots": [
      {
        "name": "input",
        "index": 0
      }
    ],
    "properties": [
      "level",
      "effect 1",
      "effect 2"
    ],
    "openedWith": [
      {
        "type": "block",
        "id": 138
      }
    ]
  },
  {
    "id": "minecraft:brewing_stand",
    "name": "Brewing Stand",
    "slots": [
      {
        "name": "ingredient",
        "index": 0
      },
      {
        "name": "result",
        "index": 1,
        "size": 3
      }
    ],
    "properties": [
      "brew time"
    ],
    "openedWith": [
      {
        "type": "block",
        "id": 117
      }
    ]
  },
  {
    "id": "minecraft:chest",
    "name": "Chest"
  },
  {
    "id": "minecraft:crafting_table",
    "name": "Workbench",
    "slots": [
      {
        "name": "craft result",
        "index": 0
      },
      {
        "name": "craft grid",
        "index": 1,
        "size": 9
      }
    ]
  },
  {
    "id": "minecraft:dispenser",
    "name": "Dispenser"
  },
  {
    "id": "minecraft:dropper",
    "name": "Dropper"
  },
  {
    "id": "minecraft:enchanting_table",
    "name": "Enchantment Table",
    "slots": [
      {
        "name": "enchanted",
        "index": 0
      },
      {
        "name": "lapis",
        "index": 1
      }
    ],
    "properties": [
      "xp 1",
      "xp 2",
      "xp 3",
      "seed",
      "tooltip 1",
      "tooltip 2",
      "tooltip 3"
    ]
  },
  {
    "id": "minecraft:furnace",
    "name": "Furnace",
    "slots": [
      {
        "name": "smelted",
        "index": 0
      },
      {
        "name": "fuel",
        "index": 1
      },
      {
        "name": "result",
        "index": 2
      }
    ],
    "properties": [
      "progress",
      "fuel"
    ]
  },
  {
    "id": "minecraft:hopper",
    "name": "Hopper"
  },
  {
    "id": "minecraft:villager",
    "name": "NPC Trade",
    "slots": [
      {
        "name": "give 1",
        "index": 0
      },
      {
        "name": "give 2",
        "index": 1
      },
      {
        "name": "take",
        "index": 2
      }
    ]
  }
]

},{}],638:[function(require,module,exports){
arguments[4][336][0].apply(exports,arguments)
},{"dup":336}],639:[function(require,module,exports){
arguments[4][348][0].apply(exports,arguments)
},{"dup":348}],640:[function(require,module,exports){
arguments[4][349][0].apply(exports,arguments)
},{"dup":349}],641:[function(require,module,exports){
arguments[4][630][0].apply(exports,arguments)
},{"dup":630}],642:[function(require,module,exports){
arguments[4][340][0].apply(exports,arguments)
},{"dup":340}],643:[function(require,module,exports){
arguments[4][352][0].apply(exports,arguments)
},{"dup":352}],644:[function(require,module,exports){
arguments[4][342][0].apply(exports,arguments)
},{"dup":342}],645:[function(require,module,exports){
module.exports={
  "types": {
    "varint": "native",
    "string": "native",
    "ushort": "native",
    "ubyte": "native",
    "long": "native",
    "buffer": "native",
    "int": "native",
    "byte": "native",
    "bool": "native",
    "short": "native",
    "float": "native",
    "double": "native",
    "UUID": "native",
    "option": "native",
    "entityMetadataLoop": "native",
    "bitfield": "native",
    "container": "native",
    "switch": "native",
    "void": "native",
    "array": "native",
    "restBuffer": "native",
    "nbt":"native",
    "optionalNbt":"native",
    "slot": ["container",[
      {
        "name":"blockId",
        "type":"short"
      },
      {
        "anon":true,
        "type":["switch",
          {
            "compareTo":"blockId",
            "fields": {
              "-1": "void"
            },
            "default":[
              "container",[
                {
                  "name":"itemCount",
                  "type":"byte"
                },
                {
                  "name":"itemDamage",
                  "type":"short"
                },
                {
                  "name":"nbtData",
                  "type":"optionalNbt"
                }
              ]
            ]
          }
        ]
      }
    ]],
    "position": ["bitfield", [
      { "name": "x", "size": 26, "signed": true },
      { "name": "y", "size": 12, "signed": true },
      { "name": "z", "size": 26, "signed": true }
    ]],
    "entityMetadataItem": [
      "switch",
      {
        "compareTo": "$compareTo",
        "fields": {
          "0": "byte",
          "1": "varint",
          "2": "float",
          "3": "string",
          "4": "string",
          "5": "slot",
          "6": "bool",
          "7": [
            "container",
            [
              {
                "name": "pitch",
                "type": "float"
              },
              {
                "name": "yaw",
                "type": "float"
              },
              {
                "name": "roll",
                "type": "float"
              }
            ]
          ],
          "8": "position",
          "9": [
            "option",
            "position"
          ],
          "10": "varint",
          "11": [
            "option",
            "UUID"
          ],
          "12": "varint"
        }
      }
    ],
    "entityMetadata": ["entityMetadataLoop", {
      "endVal": 255,
      "type": ["container", [
        { "anon": true, "type": ["container", [
          { "name": "key", "type": "ubyte" },
          { "name": "type", "type": "byte" }
        ]]},
        { "name": "value", "type": ["entityMetadataItem", { "compareTo": "type" }]}
      ]]
    }]
  },
  "states": {
    "handshaking": {
      "toClient": {},
      "toServer": {
        "set_protocol": {
          "id": "0x00",
          "fields": [
            {
              "name": "protocolVersion",
              "type": "varint"
            },
            {
              "name": "serverHost",
              "type": "string"
            },
            {
              "name": "serverPort",
              "type": "ushort"
            },
            {
              "name": "nextState",
              "type": "varint"
            }
          ]
        },
        "legacy_server_list_ping": {
          "id": "0xfe",
          "fields": [
            {
              "name": "payload",
              "type": "ubyte"
            }
          ]
        }
      }
    },
    "status": {
      "toClient": {
        "server_info": {
          "id": "0x00",
          "fields": [
            {
              "name": "response",
              "type": "string"
            }
          ]
        },
        "ping": {
          "id": "0x01",
          "fields": [
            {
              "name": "time",
              "type": "long"
            }
          ]
        }
      },
      "toServer": {
        "ping_start": {
          "id": "0x00",
          "fields": []
        },
        "ping": {
          "id": "0x01",
          "fields": [
            {
              "name": "time",
              "type": "long"
            }
          ]
        }
      }
    },
    "login": {
      "toClient": {
        "disconnect": {
          "id": "0x00",
          "fields": [
            {
              "name": "reason",
              "type": "string"
            }
          ]
        },
        "encryption_begin": {
          "id": "0x01",
          "fields": [
            {
              "name": "serverId",
              "type": "string"
            },
            {
              "name": "publicKey",
              "type": [
                "buffer",
                {
                  "countType": "varint"
                }
              ]
            },
            {
              "name": "verifyToken",
              "type": [
                "buffer",
                {
                  "countType": "varint"
                }
              ]
            }
          ]
        },
        "success": {
          "id": "0x02",
          "fields": [
            {
              "name": "uuid",
              "type": "string"
            },
            {
              "name": "username",
              "type": "string"
            }
          ]
        },
        "compress": {
          "id": "0x03",
          "fields": [
            {
              "name": "threshold",
              "type": "varint"
            }
          ]
        }
      },
      "toServer": {
        "login_start": {
          "id": "0x00",
          "fields": [
            {
              "name": "username",
              "type": "string"
            }
          ]
        },
        "encryption_begin": {
          "id": "0x01",
          "fields": [
            {
              "name": "sharedSecret",
              "type": [
                "buffer",
                {
                  "countType": "varint"
                }
              ]
            },
            {
              "name": "verifyToken",
              "type": [
                "buffer",
                {
                  "countType": "varint"
                }
              ]
            }
          ]
        }
      }
    },
    "play": {
      "toClient": {
        "keep_alive": {
          "id": "0x1f",
          "fields": [
            {
              "name": "keepAliveId",
              "type": "varint"
            }
          ]
        },
        "login": {
          "id": "0x24",
          "fields": [
            {
              "name": "entityId",
              "type": "int"
            },
            {
              "name": "gameMode",
              "type": "ubyte"
            },
            {
              "name": "dimension",
              "type": "byte"
            },
            {
              "name": "difficulty",
              "type": "ubyte"
            },
            {
              "name": "maxPlayers",
              "type": "ubyte"
            },
            {
              "name": "levelType",
              "type": "string"
            },
            {
              "name": "reducedDebugInfo",
              "type": "bool"
            }
          ]
        },
        "chat": {
          "id": "0x0f",
          "fields": [
            {
              "name": "message",
              "type": "string"
            },
            {
              "name": "position",
              "type": "byte"
            }
          ]
        },
        "update_time": {
          "id": "0x43",
          "fields": [
            {
              "name": "age",
              "type": "long"
            },
            {
              "name": "time",
              "type": "long"
            }
          ]
        },
        "entity_equipment": {
          "id": "0x3c",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "slot",
              "type": "varint"
            },
            {
              "name": "item",
              "type": "slot"
            }
          ]
        },
        "spawn_position": {
          "id": "0x42",
          "fields": [
            {
              "name": "location",
              "type": "position"
            }
          ]
        },
        "update_health": {
          "id": "0x3e",
          "fields": [
            {
              "name": "health",
              "type": "float"
            },
            {
              "name": "food",
              "type": "varint"
            },
            {
              "name": "foodSaturation",
              "type": "float"
            }
          ]
        },
        "respawn": {
          "id": "0x33",
          "fields": [
            {
              "name": "dimension",
              "type": "int"
            },
            {
              "name": "difficulty",
              "type": "ubyte"
            },
            {
              "name": "gamemode",
              "type": "ubyte"
            },
            {
              "name": "levelType",
              "type": "string"
            }
          ]
        },
        "position": {
          "id": "0x2e",
          "fields": [
            {
              "name": "x",
              "type": "double"
            },
            {
              "name": "y",
              "type": "double"
            },
            {
              "name": "z",
              "type": "double"
            },
            {
              "name": "yaw",
              "type": "float"
            },
            {
              "name": "pitch",
              "type": "float"
            },
            {
              "name": "flags",
              "type": "byte"
            }
          ]
        },
        "held_item_slot": {
          "id": "0x37",
          "fields": [
            {
              "name": "slot",
              "type": "byte"
            }
          ]
        },
        "bed": {
          "id": "0x2f",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "location",
              "type": "position"
            }
          ]
        },
        "animation": {
          "id": "0x06",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "animation",
              "type": "ubyte"
            }
          ]
        },
        "named_entity_spawn": {
          "id": "0x05",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "playerUUID",
              "type": "UUID"
            },
            {
              "name": "x",
              "type": "int"
            },
            {
              "name": "y",
              "type": "int"
            },
            {
              "name": "z",
              "type": "int"
            },
            {
              "name": "yaw",
              "type": "byte"
            },
            {
              "name": "pitch",
              "type": "byte"
            },
            {
              "name": "metadata",
              "type": "entityMetadata"
            }
          ]
        },
        "collect": {
          "id": "0x47",
          "fields": [
            {
              "name": "collectedEntityId",
              "type": "varint"
            },
            {
              "name": "collectorEntityId",
              "type": "varint"
            }
          ]
        },
        "spawn_entity": {
          "id": "0x00",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "entityUUID",
              "type": "UUID"
            },
            {
              "name": "type",
              "type": "byte"
            },
            {
              "name": "x",
              "type": "int"
            },
            {
              "name": "y",
              "type": "int"
            },
            {
              "name": "z",
              "type": "int"
            },
            {
              "name": "pitch",
              "type": "byte"
            },
            {
              "name": "yaw",
              "type": "byte"
            },
            {
              "name": "intField",
              "type": "int"
            },
            {
              "name": "velocityX",
              "type": "short"
            },
            {
              "name": "velocityY",
              "type": "short"
            },
            {
              "name": "velocityZ",
              "type": "short"
            }
          ]
        },
        "spawn_entity_living": {
          "id": "0x03",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "entityUUID",
              "type": "UUID"
            },
            {
              "name": "type",
              "type": "ubyte"
            },
            {
              "name": "x",
              "type": "int"
            },
            {
              "name": "y",
              "type": "int"
            },
            {
              "name": "z",
              "type": "int"
            },
            {
              "name": "yaw",
              "type": "byte"
            },
            {
              "name": "pitch",
              "type": "byte"
            },
            {
              "name": "headPitch",
              "type": "byte"
            },
            {
              "name": "velocityX",
              "type": "short"
            },
            {
              "name": "velocityY",
              "type": "short"
            },
            {
              "name": "velocityZ",
              "type": "short"
            },
            {
              "name": "metadata",
              "type": "entityMetadata"
            }
          ]
        },
        "spawn_entity_painting": {
          "id": "0x04",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "title",
              "type": "string"
            },
            {
              "name": "location",
              "type": "position"
            },
            {
              "name": "direction",
              "type": "ubyte"
            }
          ]
        },
        "spawn_entity_experience_orb": {
          "id": "0x01",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "x",
              "type": "int"
            },
            {
              "name": "y",
              "type": "int"
            },
            {
              "name": "z",
              "type": "int"
            },
            {
              "name": "count",
              "type": "short"
            }
          ]
        },
        "entity_velocity": {
          "id": "0x3b",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "velocityX",
              "type": "short"
            },
            {
              "name": "velocityY",
              "type": "short"
            },
            {
              "name": "velocityZ",
              "type": "short"
            }
          ]
        },
        "entity_destroy": {
          "id": "0x30",
          "fields": [
            {
              "name": "entityIds",
              "type": [
                "array",
                {
                  "countType": "varint",
                  "type": "varint"
                }
              ]
            }
          ]
        },
        "entity": {
          "id": "0x29",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            }
          ]
        },
        "rel_entity_move": {
          "id": "0x26",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "dX",
              "type": "byte"
            },
            {
              "name": "dY",
              "type": "byte"
            },
            {
              "name": "dZ",
              "type": "byte"
            },
            {
              "name": "onGround",
              "type": "bool"
            }
          ]
        },
        "entity_look": {
          "id": "0x28",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "yaw",
              "type": "byte"
            },
            {
              "name": "pitch",
              "type": "byte"
            },
            {
              "name": "onGround",
              "type": "bool"
            }
          ]
        },
        "entity_move_look": {
          "id": "0x27",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "dX",
              "type": "byte"
            },
            {
              "name": "dY",
              "type": "byte"
            },
            {
              "name": "dZ",
              "type": "byte"
            },
            {
              "name": "yaw",
              "type": "byte"
            },
            {
              "name": "pitch",
              "type": "byte"
            },
            {
              "name": "onGround",
              "type": "bool"
            }
          ]
        },
        "entity_teleport": {
          "id": "0x48",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "x",
              "type": "int"
            },
            {
              "name": "y",
              "type": "int"
            },
            {
              "name": "z",
              "type": "int"
            },
            {
              "name": "yaw",
              "type": "byte"
            },
            {
              "name": "pitch",
              "type": "byte"
            },
            {
              "name": "onGround",
              "type": "bool"
            }
          ]
        },
        "entity_head_rotation": {
          "id": "0x34",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "headYaw",
              "type": "byte"
            }
          ]
        },
        "entity_status": {
          "id": "0x1a",
          "fields": [
            {
              "name": "entityId",
              "type": "int"
            },
            {
              "name": "entityStatus",
              "type": "byte"
            }
          ]
        },
        "attach_entity": {
          "id": "0x3a",
          "fields": [
            {
              "name": "entityId",
              "type": "int"
            },
            {
              "name": "vehicleId",
              "type": "int"
            },
            {
              "name": "leash",
              "type": "bool"
            }
          ]
        },
        "entity_metadata": {
          "id": "0x39",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "metadata",
              "type": "entityMetadata"
            }
          ]
        },
        "entity_effect": {
          "id": "0x4a",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "effectId",
              "type": "byte"
            },
            {
              "name": "amplifier",
              "type": "byte"
            },
            {
              "name": "duration",
              "type": "varint"
            },
            {
              "name": "hideParticles",
              "type": "bool"
            }
          ]
        },
        "remove_entity_effect": {
          "id": "0x31",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "effectId",
              "type": "byte"
            }
          ]
        },
        "experience": {
          "id": "0x3d",
          "fields": [
            {
              "name": "experienceBar",
              "type": "float"
            },
            {
              "name": "level",
              "type": "varint"
            },
            {
              "name": "totalExperience",
              "type": "varint"
            }
          ]
        },
        "update_attributes": {
          "id": "0x49",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "properties",
              "type": [
                "array",
                {
                  "countType": "int",
                  "type": [
                    "container",
                    [
                      {
                        "name": "key",
                        "type": "string"
                      },
                      {
                        "name": "value",
                        "type": "double"
                      },
                      {
                        "name": "modifiers",
                        "type": [
                          "array",
                          {
                            "countType": "varint",
                            "type": [
                              "container",
                              [
                                {
                                  "name": "UUID",
                                  "type": "UUID"
                                },
                                {
                                  "name": "amount",
                                  "type": "double"
                                },
                                {
                                  "name": "operation",
                                  "type": "byte"
                                }
                              ]
                            ]
                          }
                        ]
                      }
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "map_chunk": {
          "id": "0x20",
          "fields": [
            {
              "name": "x",
              "type": "int"
            },
            {
              "name": "z",
              "type": "int"
            },
            {
              "name": "groundUp",
              "type": "bool"
            },
            {
              "name": "bitMap",
              "type": "varint"
            },
            {
              "name": "chunkData",
              "type": [
                "buffer",
                {
                  "countType": "varint"
                }
              ]
            }
          ]
        },
        "multi_block_change": {
          "id": "0x10",
          "fields": [
            {
              "name": "chunkX",
              "type": "int"
            },
            {
              "name": "chunkZ",
              "type": "int"
            },
            {
              "name": "records",
              "type": [
                "array",
                {
                  "countType": "varint",
                  "type": [
                    "container",
                    [
                      {
                        "name": "horizontalPos",
                        "type": "ubyte"
                      },
                      {
                        "name": "y",
                        "type": "ubyte"
                      },
                      {
                        "name": "blockId",
                        "type": "varint"
                      }
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "block_change": {
          "id": "0x0b",
          "fields": [
            {
              "name": "location",
              "type": "position"
            },
            {
              "name": "type",
              "type": "varint"
            }
          ]
        },
        "block_action": {
          "id": "0x0a",
          "fields": [
            {
              "name": "location",
              "type": "position"
            },
            {
              "name": "byte1",
              "type": "ubyte"
            },
            {
              "name": "byte2",
              "type": "ubyte"
            },
            {
              "name": "blockId",
              "type": "varint"
            }
          ]
        },
        "block_break_animation": {
          "id": "0x08",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "location",
              "type": "position"
            },
            {
              "name": "destroyStage",
              "type": "byte"
            }
          ]
        },
        "explosion": {
          "id": "0x1b",
          "fields": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            },
            {
              "name": "affectedBlockOffsets",
              "type": [
                "array",
                {
                  "countType": "int",
                  "type": [
                    "container",
                    [
                      {
                        "name": "x",
                        "type": "byte"
                      },
                      {
                        "name": "y",
                        "type": "byte"
                      },
                      {
                        "name": "z",
                        "type": "byte"
                      }
                    ]
                  ]
                }
              ]
            },
            {
              "name": "playerMotionX",
              "type": "float"
            },
            {
              "name": "playerMotionY",
              "type": "float"
            },
            {
              "name": "playerMotionZ",
              "type": "float"
            }
          ]
        },
        "world_event": {
          "id": "0x21",
          "fields": [
            {
              "name": "effectId",
              "type": "int"
            },
            {
              "name": "location",
              "type": "position"
            },
            {
              "name": "data",
              "type": "int"
            },
            {
              "name": "global",
              "type": "bool"
            }
          ]
        },
        "named_sound_effect": {
          "id": "0x23",
          "fields": [
            {
              "name": "soundName",
              "type": "string"
            },
            {
              "name": "x",
              "type": "int"
            },
            {
              "name": "y",
              "type": "int"
            },
            {
              "name": "z",
              "type": "int"
            },
            {
              "name": "volume",
              "type": "float"
            },
            {
              "name": "pitch",
              "type": "ubyte"
            }
          ]
        },
        "world_particles": {
          "id": "0x22",
          "fields": [
            {
              "name": "particleId",
              "type": "int"
            },
            {
              "name": "longDistance",
              "type": "bool"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "offsetX",
              "type": "float"
            },
            {
              "name": "offsetY",
              "type": "float"
            },
            {
              "name": "offsetZ",
              "type": "float"
            },
            {
              "name": "particleData",
              "type": "float"
            },
            {
              "name": "particles",
              "type": "int"
            },
            {
              "name": "data",
              "type": [
                "array",
                {
                  "count": {
                    "field": "particleId",
                    "map": {
                      "36": 2,
                      "37": 1,
                      "38": 1
                    },
                    "default": 0
                  },
                  "type": "varint"
                }
              ]
            }
          ]
        },
        "game_state_change": {
          "id": "0x1e",
          "fields": [
            {
              "name": "reason",
              "type": "ubyte"
            },
            {
              "name": "gameMode",
              "type": "float"
            }
          ]
        },
        "spawn_entity_weather": {
          "id": "0x02",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "type",
              "type": "byte"
            },
            {
              "name": "x",
              "type": "int"
            },
            {
              "name": "y",
              "type": "int"
            },
            {
              "name": "z",
              "type": "int"
            }
          ]
        },
        "open_window": {
          "id": "0x13",
          "fields": [
            {
              "name": "windowId",
              "type": "ubyte"
            },
            {
              "name": "inventoryType",
              "type": "string"
            },
            {
              "name": "windowTitle",
              "type": "string"
            },
            {
              "name": "slotCount",
              "type": "ubyte"
            },
            {
              "name": "entityId",
              "type": [
                "switch",
                {
                  "compareTo": "inventoryType",
                  "fields": {
                    "EntityHorse": "int"
                  },
                  "default": "void"
                }
              ]
            }
          ]
        },
        "close_window": {
          "id": "0x12",
          "fields": [
            {
              "name": "windowId",
              "type": "ubyte"
            }
          ]
        },
        "set_slot": {
          "id": "0x16",
          "fields": [
            {
              "name": "windowId",
              "type": "byte"
            },
            {
              "name": "slot",
              "type": "short"
            },
            {
              "name": "item",
              "type": "slot"
            }
          ]
        },
        "window_items": {
          "id": "0x14",
          "fields": [
            {
              "name": "windowId",
              "type": "ubyte"
            },
            {
              "name": "items",
              "type": [
                "array",
                {
                  "countType": "short",
                  "type": "slot"
                }
              ]
            }
          ]
        },
        "craft_progress_bar": {
          "id": "0x15",
          "fields": [
            {
              "name": "windowId",
              "type": "ubyte"
            },
            {
              "name": "property",
              "type": "short"
            },
            {
              "name": "value",
              "type": "short"
            }
          ]
        },
        "transaction": {
          "id": "0x11",
          "fields": [
            {
              "name": "windowId",
              "type": "byte"
            },
            {
              "name": "action",
              "type": "short"
            },
            {
              "name": "accepted",
              "type": "bool"
            }
          ]
        },
        "update_sign": {
          "id": "0x45",
          "fields": [
            {
              "name": "location",
              "type": "position"
            },
            {
              "name": "text1",
              "type": "string"
            },
            {
              "name": "text2",
              "type": "string"
            },
            {
              "name": "text3",
              "type": "string"
            },
            {
              "name": "text4",
              "type": "string"
            }
          ]
        },
        "map": {
          "id": "0x25",
          "fields": [
            {
              "name": "itemDamage",
              "type": "varint"
            },
            {
              "name": "scale",
              "type": "byte"
            },
            {
              "name": "trackingPosition",
              "type": "bool"
            },
            {
              "name": "icons",
              "type": [
                "array",
                {
                  "countType": "varint",
                  "type": [
                    "container",
                    [
                      {
                        "name": "directionAndType",
                        "type": "byte"
                      },
                      {
                        "name": "x",
                        "type": "byte"
                      },
                      {
                        "name": "y",
                        "type": "byte"
                      }
                    ]
                  ]
                }
              ]
            },
            {
              "name": "columns",
              "type": "byte"
            },
            {
              "name": "rows",
              "type": [
                "switch",
                {
                  "compareTo": "columns",
                  "fields": {
                    "0": "void"
                  },
                  "default": "byte"
                }
              ]
            },
            {
              "name": "x",
              "type": [
                "switch",
                {
                  "compareTo": "columns",
                  "fields": {
                    "0": "void"
                  },
                  "default": "byte"
                }
              ]
            },
            {
              "name": "y",
              "type": [
                "switch",
                {
                  "compareTo": "columns",
                  "fields": {
                    "0": "void"
                  },
                  "default": "byte"
                }
              ]
            },
            {
              "name": "data",
              "type": [
                "switch",
                {
                  "compareTo": "columns",
                  "fields": {
                    "0": "void"
                  },
                  "default": [
                    "buffer",
                    {
                      "countType": "varint"
                    }
                  ]
                }
              ]
            }
          ]
        },
        "tile_entity_data": {
          "id": "0x09",
          "fields": [
            {
              "name": "location",
              "type": "position"
            },
            {
              "name": "action",
              "type": "ubyte"
            },
            {
              "name": "nbtData",
              "type": "optionalNbt"
            }
          ]
        },
        "open_sign_entity": {
          "id": "0x2a",
          "fields": [
            {
              "name": "location",
              "type": "position"
            }
          ]
        },
        "statistics": {
          "id": "0x07",
          "fields": [
            {
              "name": "entries",
              "type": [
                "array",
                {
                  "countType": "varint",
                  "type": [
                    "container",
                    [
                      {
                        "name": "name",
                        "type": "string"
                      },
                      {
                        "name": "value",
                        "type": "varint"
                      }
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "player_info": {
          "id": "0x2d",
          "fields": [
            {
              "name": "action",
              "type": "varint"
            },
            {
              "name": "data",
              "type": [
                "array",
                {
                  "countType": "varint",
                  "type": [
                    "container",
                    [
                      {
                        "name": "UUID",
                        "type": "UUID"
                      },
                      {
                        "name": "name",
                        "type": [
                          "switch",
                          {
                            "compareTo": "../action",
                            "fields": {
                              "0": "string"
                            },
                            "default": "void"
                          }
                        ]
                      },
                      {
                        "name": "properties",
                        "type": [
                          "switch",
                          {
                            "compareTo": "../action",
                            "fields": {
                              "0": [
                                "array",
                                {
                                  "countType": "varint",
                                  "type": [
                                    "container",
                                    [
                                      {
                                        "name": "name",
                                        "type": "string"
                                      },
                                      {
                                        "name": "value",
                                        "type": "string"
                                      },
                                      {
                                        "name": "signature",
                                        "type": [
                                          "option",
                                          "string"
                                        ]
                                      }
                                    ]
                                  ]
                                }
                              ]
                            },
                            "default": "void"
                          }
                        ]
                      },
                      {
                        "name": "gamemode",
                        "type": [
                          "switch",
                          {
                            "compareTo": "../action",
                            "fields": {
                              "0": "varint",
                              "1": "varint"
                            },
                            "default": "void"
                          }
                        ]
                      },
                      {
                        "name": "ping",
                        "type": [
                          "switch",
                          {
                            "compareTo": "../action",
                            "fields": {
                              "0": "varint",
                              "2": "varint"
                            },
                            "default": "void"
                          }
                        ]
                      },
                      {
                        "name": "displayName",
                        "type": [
                          "switch",
                          {
                            "compareTo": "../action",
                            "fields": {
                              "0": [
                                "option",
                                "string"
                              ],
                              "3": [
                                "option",
                                "string"
                              ]
                            },
                            "default": "void"
                          }
                        ]
                      }
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "abilities": {
          "id": "0x2b",
          "fields": [
            {
              "name": "flags",
              "type": "byte"
            },
            {
              "name": "flyingSpeed",
              "type": "float"
            },
            {
              "name": "walkingSpeed",
              "type": "float"
            }
          ]
        },
        "tab_complete": {
          "id": "0x0e",
          "fields": [
            {
              "name": "matches",
              "type": [
                "array",
                {
                  "countType": "varint",
                  "type": "string"
                }
              ]
            }
          ]
        },
        "scoreboard_objective": {
          "id": "0x3f",
          "fields": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "action",
              "type": "byte"
            },
            {
              "name": "displayText",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "0": "string",
                    "2": "string"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "type",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "0": "string",
                    "2": "string"
                  },
                  "default": "void"
                }
              ]
            }
          ]
        },
        "scoreboard_score": {
          "id": "0x41",
          "fields": [
            {
              "name": "itemName",
              "type": "string"
            },
            {
              "name": "action",
              "type": "byte"
            },
            {
              "name": "scoreName",
              "type": "string"
            },
            {
              "name": "value",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "1": "void"
                  },
                  "default": "varint"
                }
              ]
            }
          ]
        },
        "scoreboard_display_objective": {
          "id": "0x38",
          "fields": [
            {
              "name": "position",
              "type": "byte"
            },
            {
              "name": "name",
              "type": "string"
            }
          ]
        },
        "scoreboard_team": {
          "id": "0x40",
          "fields": [
            {
              "name": "team",
              "type": "string"
            },
            {
              "name": "mode",
              "type": "byte"
            },
            {
              "name": "name",
              "type": [
                "switch",
                {
                  "compareTo": "mode",
                  "fields": {
                    "0": "string",
                    "2": "string"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "prefix",
              "type": [
                "switch",
                {
                  "compareTo": "mode",
                  "fields": {
                    "0": "string",
                    "2": "string"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "suffix",
              "type": [
                "switch",
                {
                  "compareTo": "mode",
                  "fields": {
                    "0": "string",
                    "2": "string"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "friendlyFire",
              "type": [
                "switch",
                {
                  "compareTo": "mode",
                  "fields": {
                    "0": "byte",
                    "2": "byte"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "nameTagVisibility",
              "type": [
                "switch",
                {
                  "compareTo": "mode",
                  "fields": {
                    "0": "string",
                    "2": "string"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "collisionRule",
              "type": [
                "switch",
                {
                  "compareTo": "mode",
                  "fields": {
                    "0": "string",
                    "2": "string"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "color",
              "type": [
                "switch",
                {
                  "compareTo": "mode",
                  "fields": {
                    "0": "byte",
                    "2": "byte"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "players",
              "type": [
                "switch",
                {
                  "compareTo": "mode",
                  "fields": {
                    "0": [
                      "array",
                      {
                        "countType": "varint",
                        "type": "string"
                      }
                    ],
                    "3": [
                      "array",
                      {
                        "countType": "varint",
                        "type": "string"
                      }
                    ],
                    "4": [
                      "array",
                      {
                        "countType": "varint",
                        "type": "string"
                      }
                    ]
                  },
                  "default": "void"
                }
              ]
            }
          ]
        },
        "custom_payload": {
          "id": "0x18",
          "fields": [
            {
              "name": "channel",
              "type": "string"
            },
            {
              "name": "data",
              "type": "restBuffer"
            }
          ]
        },
        "kick_disconnect": {
          "id": "0x19",
          "fields": [
            {
              "name": "reason",
              "type": "string"
            }
          ]
        },
        "difficulty": {
          "id": "0x0d",
          "fields": [
            {
              "name": "difficulty",
              "type": "ubyte"
            }
          ]
        },
        "combat_event": {
          "id": "0x2c",
          "fields": [
            {
              "name": "event",
              "type": "varint"
            },
            {
              "name": "duration",
              "type": [
                "switch",
                {
                  "compareTo": "event",
                  "fields": {
                    "1": "varint"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "playerId",
              "type": [
                "switch",
                {
                  "compareTo": "event",
                  "fields": {
                    "2": "varint"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "entityId",
              "type": [
                "switch",
                {
                  "compareTo": "event",
                  "fields": {
                    "1": "int",
                    "2": "int"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "message",
              "type": [
                "switch",
                {
                  "compareTo": "event",
                  "fields": {
                    "2": "string"
                  },
                  "default": "void"
                }
              ]
            }
          ]
        },
        "camera": {
          "id": "0x36",
          "fields": [
            {
              "name": "cameraId",
              "type": "varint"
            }
          ]
        },
        "world_border": {
          "id": "0x35",
          "fields": [
            {
              "name": "action",
              "type": "varint"
            },
            {
              "name": "radius",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "0": "double"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "x",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "2": "double",
                    "3": "double"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "z",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "2": "double",
                    "3": "double"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "old_radius",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "1": "double",
                    "3": "double"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "new_radius",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "1": "double",
                    "3": "double"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "speed",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "1": "varint",
                    "3": "varint"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "portalBoundary",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "3": "varint"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "warning_time",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "3": "varint",
                    "4": "varint"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "warning_blocks",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "3": "varint",
                    "5": "varint"
                  },
                  "default": "void"
                }
              ]
            }
          ]
        },
        "title": {
          "id": "0x44",
          "fields": [
            {
              "name": "action",
              "type": "varint"
            },
            {
              "name": "text",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "0": "string",
                    "1": "string"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "fadeIn",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "2": "int"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "stay",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "2": "int"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "fadeOut",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "2": "int"
                  },
                  "default": "void"
                }
              ]
            }
          ]
        },
        "set_compression": {
          "id": "0x1d",
          "fields": [
            {
              "name": "threshold",
              "type": "varint"
            }
          ]
        },
        "playerlist_header": {
          "id": "0x46",
          "fields": [
            {
              "name": "header",
              "type": "string"
            },
            {
              "name": "footer",
              "type": "string"
            }
          ]
        },
        "resource_pack_send": {
          "id": "0x32",
          "fields": [
            {
              "name": "url",
              "type": "string"
            },
            {
              "name": "hash",
              "type": "string"
            }
          ]
        },
        "boss_bar": {
          "id": "0x0c",
          "fields": [
            {
              "name": "entityUUID",
              "type": "UUID"
            },
            {
              "name": "action",
              "type": "varint"
            },
            {
              "name": "title",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "0": "string",
                    "3": "string"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "health",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "0": "float",
                    "2": "float"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "color",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "0": "varint",
                    "4": "varint"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "dividers",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "0": "varint",
                    "4": "varint"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "flags",
              "type": [
                "switch",
                {
                  "compareTo": "action",
                  "fields": {
                    "0": "ubyte",
                    "5": "ubyte"
                  },
                  "default": "void"
                }
              ]
            }
          ]
        },
        "set_cooldown": {
          "id": "0x17",
          "fields": [
            { "name": "itemID", "type": "varint" },
            { "name": "cooldownTicks", "type": "varint" }
          ]
        },
        "unload_chunk": {
          "id": "0x1c",
          "fields": [
            { "name": "chunkX", "type": "int" },
            { "name": "chunkZ", "type": "int" }
          ]
        }
      },
      "toServer": {
        "keep_alive": {
          "id": "0x0a",
          "fields": [
            {
              "name": "keepAliveId",
              "type": "varint"
            }
          ]
        },
        "chat": {
          "id": "0x01",
          "fields": [
            {
              "name": "message",
              "type": "string"
            }
          ]
        },
        "use_entity": {
          "id": "0x09",
          "fields": [
            {
              "name": "target",
              "type": "varint"
            },
            {
              "name": "mouse",
              "type": "varint"
            },
            {
              "name": "x",
              "type": [
                "switch",
                {
                  "compareTo": "mouse",
                  "fields": {
                    "2": "float"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "y",
              "type": [
                "switch",
                {
                  "compareTo": "mouse",
                  "fields": {
                    "2": "float"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "z",
              "type": [
                "switch",
                {
                  "compareTo": "mouse",
                  "fields": {
                    "2": "float"
                  },
                  "default": "void"
                }
              ]
            },
            {
              "name": "hand",
              "type": [
                "switch",
                {
                  "compareTo": "mouse",
                  "fields": {
                    "0": "varint",
                    "2": "varint"
                  },
                  "default": "void"
                }
              ]
            }
          ]
        },
        "flying": {
          "id": "0x0e",
          "fields": [
            {
              "name": "onGround",
              "type": "bool"
            }
          ]
        },
        "position": {
          "id": "0x0b",
          "fields": [
            {
              "name": "x",
              "type": "double"
            },
            {
              "name": "y",
              "type": "double"
            },
            {
              "name": "z",
              "type": "double"
            },
            {
              "name": "onGround",
              "type": "bool"
            }
          ]
        },
        "look": {
          "id": "0x0d",
          "fields": [
            {
              "name": "yaw",
              "type": "float"
            },
            {
              "name": "pitch",
              "type": "float"
            },
            {
              "name": "onGround",
              "type": "bool"
            }
          ]
        },
        "position_look": {
          "id": "0x0c",
          "fields": [
            {
              "name": "x",
              "type": "double"
            },
            {
              "name": "y",
              "type": "double"
            },
            {
              "name": "z",
              "type": "double"
            },
            {
              "name": "yaw",
              "type": "float"
            },
            {
              "name": "pitch",
              "type": "float"
            },
            {
              "name": "onGround",
              "type": "bool"
            }
          ]
        },
        "block_dig": {
          "id": "0x10",
          "fields": [
            {
              "name": "status",
              "type": "byte"
            },
            {
              "name": "location",
              "type": "position"
            },
            {
              "name": "face",
              "type": "byte"
            }
          ]
        },
        "block_place": {
          "id": "0x19",
          "fields": [
            {
              "name": "location",
              "type": "position"
            },
            {
              "name": "direction",
              "type": "varint"
            },
            {
              "name": "hand",
              "type": "varint"
            },
            {
              "name": "cursorX",
              "type": "byte"
            },
            {
              "name": "cursorY",
              "type": "byte"
            },
            {
              "name": "cursorZ",
              "type": "byte"
            }
          ]
        },
        "held_item_slot": {
          "id": "0x14",
          "fields": [
            {
              "name": "slotId",
              "type": "short"
            }
          ]
        },
        "arm_animation": {
          "id": "0x17",
          "fields": [
            {
              "name": "hand",
              "type": "varint"
            }
          ]
        },
        "entity_action": {
          "id": "0x11",
          "fields": [
            {
              "name": "entityId",
              "type": "varint"
            },
            {
              "name": "actionId",
              "type": "varint"
            },
            {
              "name": "jumpBoost",
              "type": "varint"
            }
          ]
        },
        "steer_vehicle": {
          "id": "0x12",
          "fields": [
            {
              "name": "sideways",
              "type": "float"
            },
            {
              "name": "forward",
              "type": "float"
            },
            {
              "name": "jump",
              "type": "ubyte"
            }
          ]
        },
        "close_window": {
          "id": "0x07",
          "fields": [
            {
              "name": "windowId",
              "type": "ubyte"
            }
          ]
        },
        "window_click": {
          "id": "0x06",
          "fields": [
            {
              "name": "windowId",
              "type": "ubyte"
            },
            {
              "name": "slot",
              "type": "short"
            },
            {
              "name": "mouseButton",
              "type": "byte"
            },
            {
              "name": "action",
              "type": "short"
            },
            {
              "name": "mode",
              "type": "byte"
            },
            {
              "name": "item",
              "type": "slot"
            }
          ]
        },
        "transaction": {
          "id": "0x04",
          "fields": [
            {
              "name": "windowId",
              "type": "byte"
            },
            {
              "name": "action",
              "type": "short"
            },
            {
              "name": "accepted",
              "type": "bool"
            }
          ]
        },
        "set_creative_slot": {
          "id": "0x15",
          "fields": [
            {
              "name": "slot",
              "type": "short"
            },
            {
              "name": "item",
              "type": "slot"
            }
          ]
        },
        "enchant_item": {
          "id": "0x05",
          "fields": [
            {
              "name": "windowId",
              "type": "byte"
            },
            {
              "name": "enchantment",
              "type": "byte"
            }
          ]
        },
        "update_sign": {
          "id": "0x16",
          "fields": [
            {
              "name": "location",
              "type": "position"
            },
            {
              "name": "text1",
              "type": "string"
            },
            {
              "name": "text2",
              "type": "string"
            },
            {
              "name": "text3",
              "type": "string"
            },
            {
              "name": "text4",
              "type": "string"
            }
          ]
        },
        "abilities": {
          "id": "0x0f",
          "fields": [
            {
              "name": "flags",
              "type": "byte"
            },
            {
              "name": "flyingSpeed",
              "type": "float"
            },
            {
              "name": "walkingSpeed",
              "type": "float"
            }
          ]
        },
        "tab_complete": {
          "id": "0x00",
          "fields": [
            {
              "name": "text",
              "type": "string"
            },
            {
              "name": "block",
              "type": [
                "option",
                "position"
              ]
            }
          ]
        },
        "settings": {
          "id": "0x03",
          "fields": [
            {
              "name": "locale",
              "type": "string"
            },
            {
              "name": "viewDistance",
              "type": "byte"
            },
            {
              "name": "chatFlags",
              "type": "varint"
            },
            {
              "name": "chatColors",
              "type": "bool"
            },
            {
              "name": "skinParts",
              "type": "ubyte"
            },
            {
              "name": "mainHand",
              "type": "varint"
            }
          ]
        },
        "client_command": {
          "id": "0x02",
          "fields": [
            {
              "name": "payload",
              "type": "varint"
            }
          ]
        },
        "custom_payload": {
          "id": "0x08",
          "fields": [
            {
              "name": "channel",
              "type": "string"
            },
            {
              "name": "data",
              "type": "restBuffer"
            }
          ]
        },
        "spectate": {
          "id": "0x18",
          "fields": [
            {
              "name": "target",
              "type": "UUID"
            }
          ]
        },
        "resource_pack_receive": {
          "id": "0x13",
          "fields": [
            {
              "name": "hash",
              "type": "string"
            },
            {
              "name": "result",
              "type": "varint"
            }
          ]
        },
        "use_item": {
          "id": "0x1a",
          "fields": [
            { "name": "hand", "type": "varint" }
          ]
        }
      }
    }
  }
}

},{}],646:[function(require,module,exports){
arguments[4][355][0].apply(exports,arguments)
},{"dup":355}],647:[function(require,module,exports){
arguments[4][356][0].apply(exports,arguments)
},{"dup":356}],648:[function(require,module,exports){
arguments[4][637][0].apply(exports,arguments)
},{"dup":637}],649:[function(require,module,exports){
var wrappy = require('wrappy')
module.exports = wrappy(once)

once.proto = once(function () {
  Object.defineProperty(Function.prototype, 'once', {
    value: function () {
      return once(this)
    },
    configurable: true
  })
})

function once (fn) {
  var f = function () {
    if (f.called) return f.value
    f.called = true
    return f.value = fn.apply(this, arguments)
  }
  f.called = false
  return f
}

},{"wrappy":660}],650:[function(require,module,exports){
arguments[4][234][0].apply(exports,arguments)
},{"buffer":17,"dup":234}],651:[function(require,module,exports){
(function (process){
var Stream = require('stream')

// through
//
// a stream that does nothing but re-emit the input.
// useful for aggregating a series of changing but not ending streams into one stream)

exports = module.exports = through
through.through = through

//create a readable writable stream.

function through (write, end, opts) {
  write = write || function (data) { this.queue(data) }
  end = end || function () { this.queue(null) }

  var ended = false, destroyed = false, buffer = [], _ended = false
  var stream = new Stream()
  stream.readable = stream.writable = true
  stream.paused = false

//  stream.autoPause   = !(opts && opts.autoPause   === false)
  stream.autoDestroy = !(opts && opts.autoDestroy === false)

  stream.write = function (data) {
    write.call(this, data)
    return !stream.paused
  }

  function drain() {
    while(buffer.length && !stream.paused) {
      var data = buffer.shift()
      if(null === data)
        return stream.emit('end')
      else
        stream.emit('data', data)
    }
  }

  stream.queue = stream.push = function (data) {
//    console.error(ended)
    if(_ended) return stream
    if(data === null) _ended = true
    buffer.push(data)
    drain()
    return stream
  }

  //this will be registered as the first 'end' listener
  //must call destroy next tick, to make sure we're after any
  //stream piped from here.
  //this is only a problem if end is not emitted synchronously.
  //a nicer way to do this is to make sure this is the last listener for 'end'

  stream.on('end', function () {
    stream.readable = false
    if(!stream.writable && stream.autoDestroy)
      process.nextTick(function () {
        stream.destroy()
      })
  })

  function _end () {
    stream.writable = false
    end.call(stream)
    if(!stream.readable && stream.autoDestroy)
      stream.destroy()
  }

  stream.end = function (data) {
    if(ended) return
    ended = true
    if(arguments.length) stream.write(data)
    _end() // will emit or queue
    return stream
  }

  stream.destroy = function () {
    if(destroyed) return
    destroyed = true
    ended = true
    buffer.length = 0
    stream.writable = stream.readable = false
    stream.emit('close')
    return stream
  }

  stream.pause = function () {
    if(stream.paused) return
    stream.paused = true
    return stream
  }

  stream.resume = function () {
    if(stream.paused) {
      stream.paused = false
      stream.emit('resume')
    }
    drain()
    //may have become paused again,
    //as drain emits 'data'.
    if(!stream.paused)
      stream.emit('drain')
    return stream
  }
  return stream
}


}).call(this,require('_process'))
},{"_process":219,"stream":233}],652:[function(require,module,exports){
arguments[4][395][0].apply(exports,arguments)
},{"./_stream_readable":653,"./_stream_writable":655,"_process":219,"core-util-is":607,"dup":395,"inherits":621}],653:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/


/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Readable.ReadableState = ReadableState;

var EE = require('events').EventEmitter;

/*<replacement>*/
if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

var Stream = require('stream');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var StringDecoder;

util.inherits(Readable, Stream);

function ReadableState(options, stream) {
  options = options || {};

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : 16 * 1024;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.buffer = [];
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = false;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // In streams that never have any data, and do push(null) right away,
  // the consumer can miss the 'end' event if they do some I/O before
  // consuming the stream.  So, we don't emit('end') until some reading
  // happens.
  this.calledRead = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, becuase any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;


  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // when piping, we only care about 'readable' events that happen
  // after read()ing all the bytes and not getting any pushback.
  this.ranOut = false;

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder)
      StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  if (!(this instanceof Readable))
    return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  Stream.call(this);
}

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
  var state = this._readableState;

  if (typeof chunk === 'string' && !state.objectMode) {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding) {
      chunk = new Buffer(chunk, encoding);
      encoding = '';
    }
  }

  return readableAddChunk(this, state, chunk, encoding, false);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true);
};

function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);
  if (er) {
    stream.emit('error', er);
  } else if (chunk === null || chunk === undefined) {
    state.reading = false;
    if (!state.ended)
      onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error('stream.push() after EOF');
      stream.emit('error', e);
    } else if (state.endEmitted && addToFront) {
      var e = new Error('stream.unshift() after end event');
      stream.emit('error', e);
    } else {
      if (state.decoder && !addToFront && !encoding)
        chunk = state.decoder.write(chunk);

      // update the buffer info.
      state.length += state.objectMode ? 1 : chunk.length;
      if (addToFront) {
        state.buffer.unshift(chunk);
      } else {
        state.reading = false;
        state.buffer.push(chunk);
      }

      if (state.needReadable)
        emitReadable(stream);

      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }

  return needMoreData(state);
}



// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended &&
         (state.needReadable ||
          state.length < state.highWaterMark ||
          state.length === 0);
}

// backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
  if (!StringDecoder)
    StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
};

// Don't raise the hwm > 128MB
var MAX_HWM = 0x800000;
function roundUpToNextPowerOf2(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2
    n--;
    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
    n++;
  }
  return n;
}

function howMuchToRead(n, state) {
  if (state.length === 0 && state.ended)
    return 0;

  if (state.objectMode)
    return n === 0 ? 0 : 1;

  if (n === null || isNaN(n)) {
    // only flow one buffer at a time
    if (state.flowing && state.buffer.length)
      return state.buffer[0].length;
    else
      return state.length;
  }

  if (n <= 0)
    return 0;

  // If we're asking for more than the target buffer level,
  // then raise the water mark.  Bump up to the next highest
  // power of 2, to prevent increasing it excessively in tiny
  // amounts.
  if (n > state.highWaterMark)
    state.highWaterMark = roundUpToNextPowerOf2(n);

  // don't have that much.  return null, unless we've ended.
  if (n > state.length) {
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    } else
      return state.length;
  }

  return n;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
  var state = this._readableState;
  state.calledRead = true;
  var nOrig = n;
  var ret;

  if (typeof n !== 'number' || n > 0)
    state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 &&
      state.needReadable &&
      (state.length >= state.highWaterMark || state.ended)) {
    emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    ret = null;

    // In cases where the decoder did not receive enough data
    // to produce a full chunk, then immediately received an
    // EOF, state.buffer will contain [<Buffer >, <Buffer 00 ...>].
    // howMuchToRead will see this and coerce the amount to
    // read to zero (because it's looking at the length of the
    // first <Buffer > in state.buffer), and we'll end up here.
    //
    // This can only happen via state.decoder -- no other venue
    // exists for pushing a zero-length chunk into state.buffer
    // and triggering this behavior. In this case, we return our
    // remaining data and end the stream, if appropriate.
    if (state.length > 0 && state.decoder) {
      ret = fromList(n, state);
      state.length -= ret.length;
    }

    if (state.length === 0)
      endReadable(this);

    return ret;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;

  // if we currently have less than the highWaterMark, then also read some
  if (state.length - n <= state.highWaterMark)
    doRead = true;

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading)
    doRead = false;

  if (doRead) {
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0)
      state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
  }

  // If _read called its callback synchronously, then `reading`
  // will be false, and we need to re-evaluate how much data we
  // can return to the user.
  if (doRead && !state.reading)
    n = howMuchToRead(nOrig, state);

  if (n > 0)
    ret = fromList(n, state);
  else
    ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  }

  state.length -= n;

  // If we have nothing in the buffer, then we want to know
  // as soon as we *do* get something into the buffer.
  if (state.length === 0 && !state.ended)
    state.needReadable = true;

  // If we happened to read() exactly the remaining amount in the
  // buffer, and the EOF has been seen at this point, then make sure
  // that we emit 'end' on the very next tick.
  if (state.ended && !state.endEmitted && state.length === 0)
    endReadable(this);

  return ret;
};

function chunkInvalid(state, chunk) {
  var er = null;
  if (!Buffer.isBuffer(chunk) &&
      'string' !== typeof chunk &&
      chunk !== null &&
      chunk !== undefined &&
      !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}


function onEofChunk(stream, state) {
  if (state.decoder && !state.ended) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // if we've ended and we have some data left, then emit
  // 'readable' now to make sure it gets picked up.
  if (state.length > 0)
    emitReadable(stream);
  else
    endReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (state.emittedReadable)
    return;

  state.emittedReadable = true;
  if (state.sync)
    process.nextTick(function() {
      emitReadable_(stream);
    });
  else
    emitReadable_(stream);
}

function emitReadable_(stream) {
  stream.emit('readable');
}


// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(function() {
      maybeReadMore_(stream, state);
    });
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended &&
         state.length < state.highWaterMark) {
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;
    else
      len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
  this.emit('error', new Error('not implemented'));
};

Readable.prototype.pipe = function(dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;

  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
              dest !== process.stdout &&
              dest !== process.stderr;

  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted)
    process.nextTick(endFn);
  else
    src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable) {
    if (readable !== src) return;
    cleanup();
  }

  function onend() {
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  function cleanup() {
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', cleanup);

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (!dest._writableState || dest._writableState.needDrain)
      ondrain();
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    unpipe();
    dest.removeListener('error', onerror);
    if (EE.listenerCount(dest, 'error') === 0)
      dest.emit('error', er);
  }
  // This is a brutally ugly hack to make sure that our error handler
  // is attached before any userland ones.  NEVER DO THIS.
  if (!dest._events || !dest._events.error)
    dest.on('error', onerror);
  else if (isArray(dest._events.error))
    dest._events.error.unshift(onerror);
  else
    dest._events.error = [onerror, dest._events.error];



  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    // the handler that waits for readable events after all
    // the data gets sucked out in flow.
    // This would be easier to follow with a .once() handler
    // in flow(), but that is too slow.
    this.on('readable', pipeOnReadable);

    state.flowing = true;
    process.nextTick(function() {
      flow(src);
    });
  }

  return dest;
};

function pipeOnDrain(src) {
  return function() {
    var dest = this;
    var state = src._readableState;
    state.awaitDrain--;
    if (state.awaitDrain === 0)
      flow(src);
  };
}

function flow(src) {
  var state = src._readableState;
  var chunk;
  state.awaitDrain = 0;

  function write(dest, i, list) {
    var written = dest.write(chunk);
    if (false === written) {
      state.awaitDrain++;
    }
  }

  while (state.pipesCount && null !== (chunk = src.read())) {

    if (state.pipesCount === 1)
      write(state.pipes, 0, null);
    else
      forEach(state.pipes, write);

    src.emit('data', chunk);

    // if anyone needs a drain, then we have to wait for that.
    if (state.awaitDrain > 0)
      return;
  }

  // if every destination was unpiped, either before entering this
  // function, or in the while loop, then stop flowing.
  //
  // NB: This is a pretty rare edge case.
  if (state.pipesCount === 0) {
    state.flowing = false;

    // if there were data event listeners added, then switch to old mode.
    if (EE.listenerCount(src, 'data') > 0)
      emitDataEvents(src);
    return;
  }

  // at this point, no one needed a drain, so we just ran out of data
  // on the next readable event, start it over again.
  state.ranOut = true;
}

function pipeOnReadable() {
  if (this._readableState.ranOut) {
    this._readableState.ranOut = false;
    flow(this);
  }
}


Readable.prototype.unpipe = function(dest) {
  var state = this._readableState;

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0)
    return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes)
      return this;

    if (!dest)
      dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    this.removeListener('readable', pipeOnReadable);
    state.flowing = false;
    if (dest)
      dest.emit('unpipe', this);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    this.removeListener('readable', pipeOnReadable);
    state.flowing = false;

    for (var i = 0; i < len; i++)
      dests[i].emit('unpipe', this);
    return this;
  }

  // try to find the right one.
  var i = indexOf(state.pipes, dest);
  if (i === -1)
    return this;

  state.pipes.splice(i, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1)
    state.pipes = state.pipes[0];

  dest.emit('unpipe', this);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data' && !this._readableState.flowing)
    emitDataEvents(this);

  if (ev === 'readable' && this.readable) {
    var state = this._readableState;
    if (!state.readableListening) {
      state.readableListening = true;
      state.emittedReadable = false;
      state.needReadable = true;
      if (!state.reading) {
        this.read(0);
      } else if (state.length) {
        emitReadable(this, state);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
  emitDataEvents(this);
  this.read(0);
  this.emit('resume');
};

Readable.prototype.pause = function() {
  emitDataEvents(this, true);
  this.emit('pause');
};

function emitDataEvents(stream, startPaused) {
  var state = stream._readableState;

  if (state.flowing) {
    // https://github.com/isaacs/readable-stream/issues/16
    throw new Error('Cannot switch to old mode now.');
  }

  var paused = startPaused || false;
  var readable = false;

  // convert to an old-style stream.
  stream.readable = true;
  stream.pipe = Stream.prototype.pipe;
  stream.on = stream.addListener = Stream.prototype.on;

  stream.on('readable', function() {
    readable = true;

    var c;
    while (!paused && (null !== (c = stream.read())))
      stream.emit('data', c);

    if (c === null) {
      readable = false;
      stream._readableState.needReadable = true;
    }
  });

  stream.pause = function() {
    paused = true;
    this.emit('pause');
  };

  stream.resume = function() {
    paused = false;
    if (readable)
      process.nextTick(function() {
        stream.emit('readable');
      });
    else
      this.read(0);
    this.emit('resume');
  };

  // now make it start, just in case it hadn't already.
  stream.emit('readable');
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function() {
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length)
        self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function(chunk) {
    if (state.decoder)
      chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    //if (state.objectMode && util.isNullOrUndefined(chunk))
    if (state.objectMode && (chunk === null || chunk === undefined))
      return;
    else if (!state.objectMode && (!chunk || !chunk.length))
      return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (typeof stream[i] === 'function' &&
        typeof this[i] === 'undefined') {
      this[i] = function(method) { return function() {
        return stream[method].apply(stream, arguments);
      }}(i);
    }
  }

  // proxy certain important events.
  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
  forEach(events, function(ev) {
    stream.on(ev, self.emit.bind(self, ev));
  });

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function(n) {
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};



// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
function fromList(n, state) {
  var list = state.buffer;
  var length = state.length;
  var stringMode = !!state.decoder;
  var objectMode = !!state.objectMode;
  var ret;

  // nothing in the list, definitely empty.
  if (list.length === 0)
    return null;

  if (length === 0)
    ret = null;
  else if (objectMode)
    ret = list.shift();
  else if (!n || n >= length) {
    // read it all, truncate the array.
    if (stringMode)
      ret = list.join('');
    else
      ret = Buffer.concat(list, length);
    list.length = 0;
  } else {
    // read just some of it.
    if (n < list[0].length) {
      // just take a part of the first list item.
      // slice is the same for buffers and strings.
      var buf = list[0];
      ret = buf.slice(0, n);
      list[0] = buf.slice(n);
    } else if (n === list[0].length) {
      // first list is a perfect match
      ret = list.shift();
    } else {
      // complex case.
      // we have enough to cover it, but it spans past the first buffer.
      if (stringMode)
        ret = '';
      else
        ret = new Buffer(n);

      var c = 0;
      for (var i = 0, l = list.length; i < l && c < n; i++) {
        var buf = list[0];
        var cpy = Math.min(n - c, buf.length);

        if (stringMode)
          ret += buf.slice(0, cpy);
        else
          buf.copy(ret, c, 0, cpy);

        if (cpy < buf.length)
          list[0] = buf.slice(cpy);
        else
          list.shift();

        c += cpy;
      }
    }
  }

  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0)
    throw new Error('endReadable called on non-empty stream');

  if (!state.endEmitted && state.calledRead) {
    state.ended = true;
    process.nextTick(function() {
      // Check that we didn't get one last unshift.
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
      }
    });
  }
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf (xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}

}).call(this,require('_process'))
},{"_process":219,"buffer":17,"core-util-is":607,"events":213,"inherits":621,"isarray":622,"stream":233,"string_decoder/":650}],654:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);


function TransformState(options, stream) {
  this.afterTransform = function(er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb)
    return stream.emit('error', new Error('no writecb in Transform class'));

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined)
    stream.push(data);

  if (cb)
    cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}


function Transform(options) {
  if (!(this instanceof Transform))
    return new Transform(options);

  Duplex.call(this, options);

  var ts = this._transformState = new TransformState(options, this);

  // when the writable side finishes, then flush out anything remaining.
  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  this.once('finish', function() {
    if ('function' === typeof this._flush)
      this._flush(function(er) {
        done(stream, er);
      });
    else
      done(stream);
  });
}

Transform.prototype.push = function(chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
  throw new Error('not implemented');
};

Transform.prototype._write = function(chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform ||
        rs.needReadable ||
        rs.length < rs.highWaterMark)
      this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};


function done(stream, er) {
  if (er)
    return stream.emit('error', er);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var rs = stream._readableState;
  var ts = stream._transformState;

  if (ws.length)
    throw new Error('calling transform done when ws.length != 0');

  if (ts.transforming)
    throw new Error('calling transform done when still transforming');

  return stream.push(null);
}

},{"./_stream_duplex":652,"core-util-is":607,"inherits":621}],655:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, cb), and it'll handle all
// the drain event emission and buffering.

module.exports = Writable;

/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Writable.WritableState = WritableState;


/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Stream = require('stream');

util.inherits(Writable, Stream);

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
}

function WritableState(options, stream) {
  options = options || {};

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : 16 * 1024;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, becuase any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function(er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.buffer = [];

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;
}

function Writable(options) {
  var Duplex = require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, though they're not
  // instanceof Writable, they're instanceof Readable.
  if (!(this instanceof Writable) && !(this instanceof Duplex))
    return new Writable(options);

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
  this.emit('error', new Error('Cannot pipe. Not readable.'));
};


function writeAfterEnd(stream, state, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  process.nextTick(function() {
    cb(er);
  });
}

// If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  if (!Buffer.isBuffer(chunk) &&
      'string' !== typeof chunk &&
      chunk !== null &&
      chunk !== undefined &&
      !state.objectMode) {
    var er = new TypeError('Invalid non-string/buffer chunk');
    stream.emit('error', er);
    process.nextTick(function() {
      cb(er);
    });
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function(chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (Buffer.isBuffer(chunk))
    encoding = 'buffer';
  else if (!encoding)
    encoding = state.defaultEncoding;

  if (typeof cb !== 'function')
    cb = function() {};

  if (state.ended)
    writeAfterEnd(this, state, cb);
  else if (validChunk(this, state, chunk, cb))
    ret = writeOrBuffer(this, state, chunk, encoding, cb);

  return ret;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode &&
      state.decodeStrings !== false &&
      typeof chunk === 'string') {
    chunk = new Buffer(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, chunk, encoding, cb) {
  chunk = decodeChunk(state, chunk, encoding);
  if (Buffer.isBuffer(chunk))
    encoding = 'buffer';
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret)
    state.needDrain = true;

  if (state.writing)
    state.buffer.push(new WriteReq(chunk, encoding, cb));
  else
    doWrite(stream, state, len, chunk, encoding, cb);

  return ret;
}

function doWrite(stream, state, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  if (sync)
    process.nextTick(function() {
      cb(er);
    });
  else
    cb(er);

  stream._writableState.errorEmitted = true;
  stream.emit('error', er);
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er)
    onwriteError(stream, state, sync, er, cb);
  else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(stream, state);

    if (!finished && !state.bufferProcessing && state.buffer.length)
      clearBuffer(stream, state);

    if (sync) {
      process.nextTick(function() {
        afterWrite(stream, state, finished, cb);
      });
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished)
    onwriteDrain(stream, state);
  cb();
  if (finished)
    finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}


// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;

  for (var c = 0; c < state.buffer.length; c++) {
    var entry = state.buffer[c];
    var chunk = entry.chunk;
    var encoding = entry.encoding;
    var cb = entry.callback;
    var len = state.objectMode ? 1 : chunk.length;

    doWrite(stream, state, len, chunk, encoding, cb);

    // if we didn't call the onwrite immediately, then
    // it means that we need to wait until it does.
    // also, that means that the chunk and cb are currently
    // being processed, so move the buffer counter past them.
    if (state.writing) {
      c++;
      break;
    }
  }

  state.bufferProcessing = false;
  if (c < state.buffer.length)
    state.buffer = state.buffer.slice(c);
  else
    state.buffer.length = 0;
}

Writable.prototype._write = function(chunk, encoding, cb) {
  cb(new Error('not implemented'));
};

Writable.prototype.end = function(chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (typeof chunk !== 'undefined' && chunk !== null)
    this.write(chunk, encoding);

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished)
    endWritable(this, state, cb);
};


function needFinish(stream, state) {
  return (state.ending &&
          state.length === 0 &&
          !state.finished &&
          !state.writing);
}

function finishMaybe(stream, state) {
  var need = needFinish(stream, state);
  if (need) {
    state.finished = true;
    stream.emit('finish');
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished)
      process.nextTick(cb);
    else
      stream.once('finish', cb);
  }
  state.ended = true;
}

}).call(this,require('_process'))
},{"./_stream_duplex":652,"_process":219,"buffer":17,"core-util-is":607,"inherits":621,"stream":233}],656:[function(require,module,exports){
arguments[4][231][0].apply(exports,arguments)
},{"./lib/_stream_transform.js":654,"dup":231}],657:[function(require,module,exports){
(function (process){
var Transform = require('readable-stream/transform')
  , inherits  = require('util').inherits
  , xtend     = require('xtend')

function DestroyableTransform(opts) {
  Transform.call(this, opts)
  this._destroyed = false
}

inherits(DestroyableTransform, Transform)

DestroyableTransform.prototype.destroy = function(err) {
  if (this._destroyed) return
  this._destroyed = true
  
  var self = this
  process.nextTick(function() {
    if (err)
      self.emit('error', err)
    self.emit('close')
  })
}

// a noop _transform function
function noop (chunk, enc, callback) {
  callback(null, chunk)
}


// create a new export function, used by both the main export and
// the .ctor export, contains common logic for dealing with arguments
function through2 (construct) {
  return function (options, transform, flush) {
    if (typeof options == 'function') {
      flush     = transform
      transform = options
      options   = {}
    }

    if (typeof transform != 'function')
      transform = noop

    if (typeof flush != 'function')
      flush = null

    return construct(options, transform, flush)
  }
}


// main export, just make me a transform stream!
module.exports = through2(function (options, transform, flush) {
  var t2 = new DestroyableTransform(options)

  t2._transform = transform

  if (flush)
    t2._flush = flush

  return t2
})


// make me a reusable prototype that I can `new`, or implicitly `new`
// with a constructor call
module.exports.ctor = through2(function (options, transform, flush) {
  function Through2 (override) {
    if (!(this instanceof Through2))
      return new Through2(override)

    this.options = xtend(options, override)

    DestroyableTransform.call(this, this.options)
  }

  inherits(Through2, DestroyableTransform)

  Through2.prototype._transform = transform

  if (flush)
    Through2.prototype._flush = flush

  return Through2
})


module.exports.obj = through2(function (options, transform, flush) {
  var t2 = new DestroyableTransform(xtend({ objectMode: true, highWaterMark: 16 }, options))

  t2._transform = transform

  if (flush)
    t2._flush = flush

  return t2
})

}).call(this,require('_process'))
},{"_process":219,"readable-stream/transform":656,"util":236,"xtend":661}],658:[function(require,module,exports){

/**
 * Module dependencies.
 */

var global = (function() { return this; })();

/**
 * WebSocket constructor.
 */

var WebSocket = global.WebSocket || global.MozWebSocket;

/**
 * Module exports.
 */

module.exports = WebSocket ? ws : null;

/**
 * WebSocket constructor.
 *
 * The third `opts` options object gets ignored in web browsers, since it's
 * non-standard, and throws a TypeError if passed to the constructor.
 * See: https://github.com/einaros/ws/issues/227
 *
 * @param {String} uri
 * @param {Array} protocols (optional)
 * @param {Object) opts (optional)
 * @api public
 */

function ws(uri, protocols, opts) {
  var instance;
  if (protocols) {
    instance = new WebSocket(uri, protocols);
  } else {
    instance = new WebSocket(uri);
  }
  return instance;
}

if (WebSocket) ws.prototype = WebSocket.prototype;

},{}],659:[function(require,module,exports){
(function (process,Buffer){
var through = require('through2')
var duplexify = require('duplexify')
var WS = require('ws')

module.exports = WebSocketStream

function WebSocketStream(target, protocols) {
  var stream, socket
  var socketWrite = process.title === 'browser' ? socketWriteBrowser : socketWriteNode
  var proxy = through(socketWrite, socketEnd)

  // use existing WebSocket object that was passed in
  if (typeof target === 'object') {
    socket = target
  // otherwise make a new one
  } else {
    socket = new WS(target, protocols)
    socket.binaryType = 'arraybuffer'
  }

  // was already open when passed in
  if (socket.readyState === 1) {
    stream = proxy
  } else {
    stream = duplexify()
    socket.addEventListener("open", onready)
  }

  stream.socket = socket

  socket.addEventListener("close", onclose)
  socket.addEventListener("error", onerror)
  socket.addEventListener("message", onmessage)

  proxy.on('close', destroy)

  function socketWriteNode(chunk, enc, next) {
    socket.send(chunk, next)
  }

  function socketWriteBrowser(chunk, enc, next) {
    try {
      socket.send(chunk)
    } catch(err) {
      return next(err)
    }

    next()
  }

  function socketEnd(done) {
    socket.close()
    done()
  }

  function onready() {
    stream.setReadable(proxy)
    stream.setWritable(proxy)
    stream.emit('connect')
  }

  function onclose() {
    stream.end();
    stream.destroy()
  }

  function onerror(err) {
    stream.destroy(err)
  }

  function onmessage(event) {
    var data = event.data
    if (data instanceof ArrayBuffer) data = new Buffer(new Uint8Array(data))
    proxy.push(data)
  }

  function destroy() {
    socket.close()
  }

  return stream
}

}).call(this,require('_process'),require("buffer").Buffer)
},{"_process":219,"buffer":17,"duplexify":608,"through2":657,"ws":658}],660:[function(require,module,exports){
// Returns a wrapper function that returns a wrapped callback
// The wrapper function should do some stuff, and return a
// presumably different callback function.
// This makes sure that own properties are retained, so that
// decorations and such are not lost along the way.
module.exports = wrappy
function wrappy (fn, cb) {
  if (fn && cb) return wrappy(fn)(cb)

  if (typeof fn !== 'function')
    throw new TypeError('need wrapper function')

  Object.keys(fn).forEach(function (k) {
    wrapper[k] = fn[k]
  })

  return wrapper

  function wrapper() {
    var args = new Array(arguments.length)
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i]
    }
    var ret = fn.apply(this, args)
    var cb = args[args.length-1]
    if (typeof ret === 'function' && ret !== cb) {
      Object.keys(cb).forEach(function (k) {
        ret[k] = cb[k]
      })
    }
    return ret
  }
}

},{}],661:[function(require,module,exports){
module.exports = extend

var hasOwnProperty = Object.prototype.hasOwnProperty;

function extend() {
    var target = {}

    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i]

        for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
                target[key] = source[key]
            }
        }
    }

    return target
}

},{}]},{},[600]);
